/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/config/corejs-proxy.js":
/*!********************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/config/corejs-proxy.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/modules/es.array.includes.js");
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_regexp_flags_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.regexp.flags.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/modules/es.regexp.flags.js");
/* harmony import */ var core_js_modules_es_regexp_flags_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_flags_js__WEBPACK_IMPORTED_MODULE_1__);


// Manually set global._babelPolyfill as a flag to avoid multiple loading.
// Uses 'babelPolyfill' name for historical meaning and external/backward
// compatibility.
__webpack_require__.g._babelPolyfill = true;

/***/ }),

/***/ "./node_modules/@enact/core/dispatcher/dispatcher.js":
/*!***********************************************************!*\
  !*** ./node_modules/@enact/core/dispatcher/dispatcher.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setDefaultTargetById = exports.once = exports.on = exports.off = void 0;

var _curry = _interopRequireDefault(__webpack_require__(/*! ramda/src/curry */ "./node_modules/ramda/src/curry.js"));

var _listeners = __webpack_require__(/*! ./listeners */ "./node_modules/@enact/core/dispatcher/listeners.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Provides methods to add and remove global event listeners.
 *
 * @module core/dispatcher
 * @exports off
 * @exports on
 * @exports once
 */


var defaultTarget = typeof document === 'object' && document;
/*
 * Sets a selector for the default target. If no selector is set, `document` is the default target.
 *
 * @function
 * @param	{String}	id	Node id of the default target
 *
 * @returns {undefined}
 * @memberof core/dispatcher
 * @private
 */

var setDefaultTargetById = function setDefaultTargetById(id) {
  defaultTarget = typeof document === 'object' && document.querySelector('#' + id) || defaultTarget;
};
/*
 * Checks if the default target of `document` exists before returning it, otherwise returns `false`.
 *
 * @function
 *
 * @returns {Node|Boolean}
 * @memberof core/dispatcher
 * @private
 */


exports.setDefaultTargetById = setDefaultTargetById;

var getDefaultTarget = function getDefaultTarget() {
  return defaultTarget;
};
/*
 * Wraps event callbacks with a try-catch block to prevent unrelated code from blocking.
 *
 * @function
 * @param	{Event}		ev	Event payload
 * @param	{Function}	fn	Event callback
 *
 * @returns	{undefined}
 * @memberof core/dispatcher
 * @private
 */


var invoker = (0, _curry["default"])(function (ev, fn) {
  try {
    fn(ev);
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error("A ".concat(e.name, " occurred during event handling with the message '").concat(e.message, "'"));
  }
});
/*
 * Dispatches an event to the registered handlers.
 *
 * @function
 * @param	{Event}		ev	Event payload
 *
 * @returns {undefined}
 * @memberof core/dispatcher
 * @private
 */

var dispatcher = function dispatcher(ev) {
  var name = ev.type;
  var listeners = (0, _listeners.getListeners)(ev.currentTarget, name);

  if (listeners) {
    var inv = invoker(ev);
    listeners.forEach(inv);
  }
};
/**
 * Adds a new global event listener. Duplicate event handlers will be discarded.
 *
 * @function
 * @param	{String}	name				Event name
 * @param	{Function}	fn					Event handler
 * @param	{Node}		[target='document']	Event listener target
 *
 * @returns {undefined}
 * @memberof core/dispatcher
 * @public
 */


var on = function on(name, fn) {
  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDefaultTarget();

  if (target) {
    var added = (0, _listeners.addListener)(target, name, fn);

    if (added && (0, _listeners.getListeners)(target, name).length === 1) {
      target.addEventListener(name, dispatcher);
    }
  }
};
/**
 * Removes a global event listener.
 *
 * @function
 * @param	{String}	name				Event name
 * @param	{Function}	fn					Event handler
 * @param	{Node}		[target=`document`]	Event listener target
 *
 * @returns {undefined}
 * @memberof core/dispatcher
 * @public
 */


exports.on = on;

var off = function off(name, fn) {
  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDefaultTarget();

  if (target) {
    var listeners = (0, _listeners.getListeners)(target, name);
    var index = listeners.indexOf(fn);

    if (index >= 0) {
      listeners.splice(index, 1);

      if (listeners.length === 0) {
        target.removeEventListener(name, dispatcher);
      }
    }
  }
};
/**
 * Adds a new global event listener that removes itself after handling one event.
 *
 * @function
 * @param	{String}	name		Event name
 * @param	{Function}	fn			Event handler
 * @param	{Node}		[target]	Event listener target
 *
 * @returns {Function}				The single-use handler. To remove the handler manually, call
 *									the `off()` function with this as the 2nd parameter.
 * @memberof core/dispatcher
 * @public
 */


exports.off = off;

var once = function once(name, fn, target) {
  var onceFn = function onceFn(ev) {
    fn(ev);
    off(name, onceFn, target);
  };

  on(name, onceFn, target);
  return onceFn;
};

exports.once = once;

/***/ }),

/***/ "./node_modules/@enact/core/dispatcher/listeners.js":
/*!**********************************************************!*\
  !*** ./node_modules/@enact/core/dispatcher/listeners.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getListeners = exports["default"] = exports.addListener = void 0; // Simple Map polyfill mapping targets to a hash of names->handler[]

var targets = [];
var events = [];

var getListeners = function getListeners(target, name) {
  var targetIndex = targets.indexOf(target);

  if (targetIndex === -1) {
    targetIndex = targets.push(target) - 1;
  }

  var listeners = events[targetIndex] = events[targetIndex] || {};
  return listeners[name] = listeners[name] || [];
};

exports.getListeners = getListeners;

var addListener = function addListener(target, name, fn) {
  var listeners = getListeners(target, name);

  if (listeners.indexOf(fn) === -1) {
    listeners.push(fn);
    return true;
  }

  return false;
};

exports.addListener = addListener;
var _default = getListeners;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/handle/handle.js":
/*!***************************************************!*\
  !*** ./node_modules/@enact/core/handle/handle.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.stopImmediate = exports.stop = exports.returnsTrue = exports.preventDefault = exports.oneOf = exports.not = exports.log = exports.handle = exports.forwardWithPrevent = exports.forwardCustomWithPrevent = exports.forwardCustom = exports.forward = exports.forProp = exports.forKeyCode = exports.forKey = exports.forEventProp = exports["default"] = exports.callOnEvent = exports.call = exports.adaptEvent = void 0;

var _cond = _interopRequireDefault(__webpack_require__(/*! ramda/src/cond */ "./node_modules/ramda/src/cond.js"));

var _curry = _interopRequireDefault(__webpack_require__(/*! ramda/src/curry */ "./node_modules/ramda/src/curry.js"));

var _keymap = __webpack_require__(/*! ../keymap */ "./node_modules/@enact/core/keymap/index.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * `core/handle` provides a set of utilities to support handling events for `kind()`s and
 * `React.Component`s. The default export, `handle()`, generates an event handler function from a
 * set of input functions. The input functions either process or filter the event. If an input
 * function returns `true`, `handle()` will continue processing the event by calling the next input
 * function in the chain. If it returns `false` (or any falsy value like `null` or `undefined`),
 * the event handling chain stops at that input function.
 *
 * Example:
 * ```
 * import {forKey, forward, handle, preventDefault} from '@enact/core/handle';
 *
 * // logEnter will contain a function that accepts an event, a props object, and a context object
 * const logEnter = handle(
 *   forward('onKeyDown'),  // forwards the event to the function passed in the onKeyDown prop
 *   forKey('enter'),       // if the event.keyCode maps to the enter key, allows event processing to continue
 *   preventDefault,        // calls event.preventDefault() to prevent the `keypress` event
 *   (ev, props) => {       // custom event handler -- in this case, logging some text
 *     // since it doesn't return `true`, no further input functions would be called after this one
 *     console.log('The Enter key was pressed down');
 *   }
 * ).finally(() => {
 * 	 console.log('This will log at the end no matter what happens within the handler above')
 * });
 * ```
 *
 * `handle()` can also be bound to a component instance which allows it to access the instance
 * `props` and `context`. This allows you to write consistent event handlers for components created
 * either with `kind()` or ES6 classes without worrying about from where the props are sourced.
 *
 * Handlers can either be bound directly using the native `bind()` method or using the `bindAs()`
 * utility method that is appended to the handler.
 *
 * Example:
 * ```
 * import {forKey, forward, handle, preventDefault} from '@enact/core/handle';
 * import {Component} from 'react';
 *
 * class MyComponent extends Component {
 *   // bind handle() to the instance
 *   constructor () {
 *     super();
 *
 *     // logEnter will be bound to `this` and set as this.handleKeyDown
 *     //
 *     // Equivalent to the following with the advantage of set the function name to be displayed in
 *     // development tool call stacks
 *     //
 *     //   this.handleKeyDown = logEnter.bind(this)
 *     logEnter.bindAs(this, 'handleKeyDown');
 *   }
 *
 *   render () {
 *     return (
 *       <div onKeyDown={this.handleKeyDown} />
 *     );
 *   }
 * }
 * ```
 *
 * @module core/handle
 * @exports adaptEvent
 * @exports call
 * @exports callOnEvent
 * @exports forward
 * @exports forwardWithPrevent
 * @exports forEventProp
 * @exports forKey
 * @exports forKeyCode
 * @exports forProp
 * @exports handle
 * @exports log
 * @exports oneOf
 * @exports preventDefault
 * @exports returnsTrue
 * @exports stop
 * @exports stopImmediate
 */

/**
 * The signature for event handlers
 *
 * @callback EventHandler
 * @memberof core/handle
 * @param {any} event
 */

/**
 * The signature for event handling functions supported by `handle` and related functions
 *
 * @callback HandlerFunction
 * @memberof core/handle
 * @param {any} event
 * @param {Object<string, any>} props
 * @param {Object<string, any>} context
 */

/**
 * The signature for {@link core/handle.adaptEvent} parameter `adapter`
 *
 * @callback EventAdapter
 * @memberof core/handle
 * @param {any} event
 * @param {Object<string, any>} props
 * @param {Object<string, any>} context
 * @returns {any}
 */
// Accepts an array of handlers, sanitizes them, and returns a handler function
// compose(allPass, map(makeSafeHandler));


var makeHandler = function makeHandler(handlers) {
  // allowing shadowing here to provide a meaningful function name in dev tools
  // eslint-disable-next-line no-shadow
  return function handle() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    for (var i = 0; i < handlers.length; i++) {
      var fn = handlers[i];

      if (typeof fn !== 'function' || fn.apply(this, args)) {
        continue;
      }

      return false;
    }

    return true;
  };
}; // Loose check to determine if obj is component-ish if it has both props and context members


var hasPropsAndContext = function hasPropsAndContext(obj) {
  return obj && Object.prototype.hasOwnProperty.call(obj, 'props') && Object.prototype.hasOwnProperty.call(obj, 'context');
};

var named = function named(fn, name) {
  if (true) {
    try {
      Object.defineProperty(fn, 'name', {
        value: name,
        writeable: false,
        enumerable: false
      });
    } catch (err) {// unable to set name of function
    }
  }

  return fn;
};

var bindAs = function bindAs(fn, obj, name) {
  var namedFunction = name ? named(fn, name) : fn;
  var bound = namedFunction.bind(obj);

  if (name) {
    obj[name] = bound;
  }

  return bound;
};

var decorateHandleFunction = function decorateHandleFunction(fn) {
  fn.named = function (name) {
    return named(fn, name);
  };

  fn.bindAs = function (obj, name) {
    return bindAs(fn, obj, name);
  };

  return fn;
};
/**
 * Allows generating event handlers by chaining input functions to filter or short-circuit the
 * handling flow. Any input function that returns a falsy value will stop the chain.
 *
 * The returned handler function has a `finally()` member that accepts a function and returns a new
 * handler function. The accepted function is called once the original handler completes regardless
 * of the returned value.
 *
 * @method   handle
 * @param    {...HandlerFunction}  handlers List of handlers to process the event.
 *
 * @returns  {EventHandler}	A function that accepts an event which is dispatched to each of the
 *                          provided handlers.
 * @memberof core/handle
 * @public
 */


var handle = function handle() {
  for (var _len2 = arguments.length, handlers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    handlers[_key2] = arguments[_key2];
  }

  var h = makeHandler(handlers); // In order to support binding either handle (handle.bind(this)) or a handler
  // (a = handle(), a.bind(this)), we cache `this` here and use it as the fallback for props and
  // context if fn() doesn't have its own `this`.

  var _outer = this;

  var fn = function prepareHandleArgs(ev, props, context) {
    var caller = null; // if handle() was bound to a class, use its props and context. otherwise, we accept
    // incoming props/context as would be provided by computed/handlers from kind()

    if (hasPropsAndContext(this)) {
      caller = this;
      props = this.props;
      context = this.context;
    } else if (hasPropsAndContext(_outer)) {
      caller = _outer;
      props = _outer.props;
      context = _outer.context;
    }

    return h.call(caller, ev, props, context);
  };

  fn["finally"] = function (cleanup) {
    return decorateHandleFunction(function handleWithFinally(ev, props, context) {
      var result = false;

      if (hasPropsAndContext(this)) {
        props = this.props;
        context = this.context;
      }

      try {
        result = fn.call(this, ev, props, context);
      } finally {
        cleanup.call(this, ev, props, context);
      }

      return result;
    });
  };

  return decorateHandleFunction(fn);
};
/**
 * Calls the first handler whose condition passes. Each branch must be passed as an array with the
 * first element being the condition function and the second being the handler function. The same
 * arguments are passed to both the condition function and the handler function. The value returned
 * from the handler is returned.
 *
 * Example:
 * ```
 * const handler = oneOf(
 * 	[forKey('enter'), handleEnter],
 * 	[forKey('left'), handleLeft],
 * 	[forKey('right'), handleRight]
 * );
 * ```
 *
 * @method   oneOf
 * @param    {...[HandlerFunction, HandlerFunction]}  handlers List of conditions and handlers to process the event
 *
 * @returns  {HandlerFunction} A function that accepts an event which is dispatched to each of the
 *                             conditions and, if it passes, onto the provided handler.
 * @memberof core/handle
 * @public
 */


exports.handle = handle;

var oneOf = handle.oneOf = function () {
  for (var _len3 = arguments.length, handlers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    handlers[_key3] = arguments[_key3];
  }

  return handle.call(this, (0, _cond["default"])(handlers));
};
/**
 * A function that always returns `true`. Optionally accepts a `handler` function which is called
 * before returning `true`.
 *
 * Example:
 * ```
 * // Used to coerce an existing function into a handler
 * const coercedHandler = handle(
 *   returnsTrue(doesSomething),
 *   willAlwaysBeCalled
 * );
 *
 * // Used to emulate if/else blocks with `oneOf`
 * const ifElseHandler = oneOf(
 * 	[forKey('enter'), handleEnter],
 * 	[returnsTrue, handleOtherwise]
 * );
 * ```
 *
 * @method   returnsTrue
 * @param    {Function}  [handler]  Handler function called before returning `true`.
 *
 * @returns  {HandlerFunction}	   A function that returns `true`
 * @memberof core/handle
 * @public
 */


exports.oneOf = oneOf;

var returnsTrue = handle.returnsTrue = function (handler) {
  if (handler && typeof handler === 'function') {
    return named(function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      handler.apply(this, args);
      return true;
    }, 'returnsTrue');
  }

  return true;
};
/**
 * Calls a named function on the event and returns `true`.
 *
 * Example:
 * ```
 * import {callOnEvent, handle} from '@enact/core/handle';
 *
 * const callsCustomMethod = handle(
 *	callOnEvent('customMethod'),
 *	(ev) => console.log('ev.customMethod() was called', ev)
 * );
 * ```
 *
 * @method   callOnEvent
 * @param    {String}     methodName  Name of the method to call on the event
 * @param    {Object}     ev          Event payload
 *
 * @returns  {true}                   Always returns `true`
 * @curried
 * @memberof core/handle
 * @private
 */


exports.returnsTrue = returnsTrue;
var callOnEvent = handle.callOnEvent = (0, _curry["default"])(function (methodName, ev) {
  if (ev[methodName]) {
    ev[methodName]();
  } else if (ev.nativeEvent && ev.nativeEvent[methodName]) {
    // In some cases (notably stopImmediatePropagation), React doesn't include a desired method
    // on its proxy so we check the native event as well.
    ev.nativeEvent[methodName]();
  }

  return true;
});
/**
 * Allows handling to continue if the value of `prop` on the event strictly equals `value`
 *
 * Example:
 * ```
 * import {forEventProp, handle} from '@enact/core/handle';
 *
 * const logWhenXEqualsZero = handle(
 *   forEventProp('x', 0),
 *   (ev) => console.log('ev.x was equal to zero', ev)
 * );
 * ```
 *
 * @method   forEventProp
 * @param    {String}	   prop   Name of property on event
 * @param    {*}           value  Value of property
 * @param    {Object}      ev     Event payload
 *
 * @returns  {Boolean}            Returns `true` if `prop` on `event` strictly equals `value`
 * @curried
 * @memberof core/handle
 * @public
 */

exports.callOnEvent = callOnEvent;
var forEventProp = handle.forEventProp = (0, _curry["default"])(function (prop, value, ev) {
  return ev[prop] === value;
});
/**
 * Forwards the event to a function at `name` on `props`. If the specified prop is `undefined` or
 * is not a function, it is ignored. The return value of the forwarded function is ignored and
 * `true` is always returned instead.
 *
 * Example:
 * ```
 * import {forward, handle} from '@enact/core/handle';
 *
 * const forwardAndLog = handle(
 *   forward('onClick'),
 *   (ev) => console.log('event forwarded to onClick from props', ev)
 * );
 * ```
 *
 * @method   forward
 * @param    {String}    name   Name of method on the `props`
 * @param    {Object}    ev     Event payload
 * @param    {Object}    props  Props object
 *
 * @returns  {true}             Always returns `true`
 * @curried
 * @memberof core/handle
 * @public
 */

exports.forEventProp = forEventProp;
var forward = handle.forward = (0, _curry["default"])(named(function (name, ev, props) {
  var fn = props && props[name];

  if (typeof fn === 'function') {
    fn(ev);
  }

  return true;
}, 'forward'));
/**
 * Calls `event.preventDefault()` and returns `true`.
 *
 * Example:
 * ```
 * import {handle, preventDefault} from '@enact/core/handle';
 *
 * const preventAndLog = handle(
 *   preventDefault,
 *   (ev) => console.log('preventDefault called', ev)
 * );
 * ```
 *
 * @method   preventDefault
 * @param    {Object}        ev  Event payload
 *
 * @returns  {true}              Always returns `true`
 * @memberof core/handle
 * @public
 */

exports.forward = forward;

var _preventDefault = handle.preventDefault = callOnEvent('preventDefault');
/**
 * Forwards the event to a function at `name` on `props` with capability to prevent default
 * behavior. If the specified prop is `undefined` or is not a function, it is ignored. Returns
 * `false` when `event.preventDefault()` has been called in a handler.
 *
 * Example:
 * ```
 * import {forwardWithPrevent, handle} from '@enact/core/handle';
 *
 * const forwardPreventDefault = handle(
 *   forwardWithPrevent('onClick'),
 *   (ev) => console.log('default action', ev)
 * );
 * ```
 *
 * @method   forwardWithPrevent
 * @param    {String}    name   Name of method on the `props`
 * @param    {Object}    ev     Event payload
 * @param    {Object}    props  Props object
 *
 * @returns  {Boolean}          Returns `false` if default action is prevented
 * @curried
 * @memberof core/handle
 * @private
 */


exports.preventDefault = _preventDefault;
var forwardWithPrevent = handle.forwardWithPrevent = (0, _curry["default"])(named(function (name, ev, props) {
  var prevented = false;
  var wrappedEvent = Object.assign({}, ev, {
    preventDefault: function preventDefault() {
      prevented = true;

      _preventDefault(ev);
    }
  });
  forward(name, wrappedEvent, props);
  return !prevented;
}, 'forwardWithPrevent'));
/**
 * Calls `event.stopPropagation()` and returns `true`
 *
 * Example:
 * ```
 * import {handle, stop} from '@enact/core/handle';
 *
 * const stopAndLog = handle(
 *   stop,
 *   (ev) => console.log('stopPropagation called', ev)
 * );
 * ```
 *
 * @method   stop
 * @param    {Object}   ev  Event payload
 *
 * @returns  {true}         Always returns `true`
 * @curried
 * @memberof core/handle
 * @public
 */

exports.forwardWithPrevent = forwardWithPrevent;
var stop = handle.stop = named(callOnEvent('stopPropagation'), 'stop');
/**
 * Calls `event.stopImmediatePropagation()` and returns `true`
 *
 * Example:
 * ```
 * import {handle, stopImmediate} from '@enact/core/handle';
 *
 * const stopImmediateAndLog = handle(
 *   stopImmediate,
 *   (ev) => console.log('stopImmediatePropagation called', ev)
 * );
 * ```
 *
 * @method   stopImmediate
 * @param    {Object}       ev  Event payload
 *
 * @returns  {true}             Always returns `true`
 * @curried
 * @memberof core/handle
 * @public
 */

exports.stop = stop;
var stopImmediate = handle.stopImmediate = callOnEvent('stopImmediatePropagation');
/**
 * Allows event handling to continue if `event.keyCode === value`.
 *
 * Example:
 * ```
 * import {forKeyCode, handle} from '@enact/core/handle';
 *
 * const logForEscapeKey = handle(
 *   forKeyCode(27),
 *   (ev) => console.log('Escape key pressed down', ev)
 * );
 * ```
 *
 * @method   forKeyCode
 * @param    {Number}    value  `keyCode` to test
 * @param    {Object}    ev     Event payload
 *
 * @returns  {Boolean}          Returns `true` if `event.keyCode` strictly equals `value`
 * @curried
 * @memberof core/handle
 * @public
 */

exports.stopImmediate = stopImmediate;
var forKeyCode = handle.forKeyCode = forEventProp('keyCode');
/**
 * Allows handling to continue if the event's keyCode is mapped to `name` within
 * {@link core/keymap}.
 *
 * Example:
 * ```
 * import {forKey, handle} from '@enact/core/handle';
 *
 * const logForEnterKey = handle(
 *   forKey('enter'),
 *   (ev) => console.log('Enter key pressed down', ev)
 * );
 * ```
 *
 * @see      {@link core/keymap}
 * @method   forKey
 * @param    {String}    name   Name from {@link core/keymap}
 * @param    {Object}    ev     Event payload
 *
 * @returns  {Boolean}          Returns `true` if `event.keyCode` is mapped to `name`
 * @curried
 * @memberof core/handle
 * @public
 */

exports.forKeyCode = forKeyCode;
var forKey = handle.forKey = (0, _curry["default"])(function (name, ev) {
  return (0, _keymap.is)(name, ev.keyCode);
});
/**
 * Allows handling to continue if the value of `prop` on the props strictly equals `value`.
 *
 * Example:
 * ```
 * import {forProp, handle} from '@enact/core/handle';
 *
 * const logWhenChecked = handle(
 *   forProp('checked', true),
 *   (ev) => console.log('checked prop is true', ev)
 * );
 * ```
 *
 * @method   forProp
 * @param    {String}    prop   Name of property on props object
 * @param    {*}         value  Value of property
 * @param    {Object}    ev     Event payload
 * @param    {Object}    props  Props object
 *
 * @returns  {Boolean}          Returns `true` if the value of `props[prop]` strictly equals `value`
 * @curried
 * @memberof core/handle
 * @public
 */

exports.forKey = forKey;
var forProp = handle.forProp = (0, _curry["default"])(function (prop, value, ev, props) {
  return props[prop] === value;
});
/**
 * Logs the event, props, and context optionally preceded by a custom message. Will only log in
 * development mode.
 *
 * Example:
 * ```
 * import {forProp, handle, log} from '@enact/core/handle';
 *
 * const logWhenChecked = handle(
 *   forProp('checked', true),
 *   log('checked props is true')
 * );
 * ```
 *
 * @method   log
 * @param    {String}     message  Custom message
 * @param    {Object}     ev       Event payload
 * @param    {...*}       [args]   Any args passed are logged
 *
 * @returns  {true}                Always returns `true`
 * @curried
 * @memberof core/handle
 * @public
 */

exports.forProp = forProp;
var log = handle.log = (0, _curry["default"])(function (message, ev) {
  if (true) {
    var _console;

    for (var _len5 = arguments.length, args = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
      args[_key5 - 2] = arguments[_key5];
    } // eslint-disable-next-line no-console


    (_console = console).log.apply(_console, [message, ev].concat(args));
  }

  return true;
});
/**
 * Invokes a method by name on the component to which {@link core/handle.handle} is bound.
 *
 * If the methods exists on the object, it is called with the event, props, and context and its
 * return value is returned.
 *
 * If the method does not exist or handle isn't bound to an instance, it returns `false`.
 *
 * Example:
 * ```
 * import {call, handle, forProp} from '@enact/core/handle';
 *
 * const incrementIfEnabled = handle(
 *   forProp('disabled', false),
 *   call('increment')
 * );
 *
 * class Counter extends React.Component {
 *   constructor () {
 *     super();
 *
 *     this.handleIncrement = incrementIfEnabled.bind(this);
 *   }
 *
 *   render () {
 *     // ...
 *   }
 * }
 * ```
 *
 * @method   call
 * @param    {String}     method  Name of method
 *
 * @returns  {HandlerFunction}    Returns the value returned by `method`, or `false` if the method
 *                                does not exist
 * @memberof core/handle
 * @public
 */

exports.log = log;

var call = function call(method) {
  return named(function () {
    if (this && this[method]) {
      return this[method].apply(this, arguments);
    }

    return false;
  }, 'call');
};
/**
 * Adapts an event with `adapter` before calling `handler`.
 *
 * The `adapter` function receives the same arguments as any handler. The value returned from
 * `adapter` is passed as the first argument to `handler` with the remaining arguments kept the
 * same. This is often useful to generate a custom event payload before forwarding on to a callback.
 *
 * Example:
 * ```
 * import {adaptEvent, forward} from '@enact/core/handle';
 *
 * // calls the onChange callback with an event payload containing a type and value member
 * const incrementAndChange = adaptEvent(
 * 	(ev, props) => ({
 * 	  type: 'onChange',
 * 	  value: props.value + 1
 * 	}),
 * 	forward('onChange')
 * )
 * ```
 *
 * @method   adaptEvent
 * @param    {EventAdapter}     adapter  Function to adapt the event payload
 * @param    {HandlerFunction}  handler  Handler to call with the handler function
 *
 * @returns  {HandlerFunction}           Returns an [event handler]{@link core/handle.HandlerFunction} (suitable for passing to handle) that returns the result of `handler`
 * @curried
 * @memberof core/handle
 * @public
 */


exports.call = call;
var adaptEvent = handle.adaptEvent = (0, _curry["default"])(function (adapter, handler) {
  return named(function (ev) {
    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      args[_key6 - 1] = arguments[_key6];
    }

    return handler.call.apply(handler, [this, adapter.call.apply(adapter, [this, ev].concat(args))].concat(args));
  }, 'adaptEvent');
});
/**
 * Creates a handler that will forward the event to a function at `name` on `props`.
 *
 * If `adapter` is not specified, a new event payload will be generated with a `type` member with
 * the `name` of the custom event. If `adapter` is specified, the `type` member is added to the
 * value returned by `adapter`.
 *
 * The `adapter` function receives the same arguments as any handler. The value returned from
 * `adapter` is passed as the first argument to `handler` with the remaining arguments kept the
 * same. This is often useful to generate a custom event payload before forwarding on to a callback.
 *
 * Example:
 * ```
 * import {forwardCustom} from '@enact/core/handle';
 *
 * // calls the onChange callback with the event: {type: 'onChange'}
 * const forwardChange = forwardCustom('onChange');
 *
 * // calls the onChange callback with the event: {type: 'onChange', index}
 * const forwardChangeWithIndex = forwardCustom('onChange', (ev, {index}) => ({index}));
 * ```
 *
 * @method   forwardCustom
 * @param    {String}        name      Name of method on the `props`
 * @param    {EventAdapter}  [adapter] Function to adapt the event payload
 *
 * @returns  {HandlerFunction}         Returns an [event handler]{@link core/handle.EventHandler}
 *                                     (suitable for passing to handle or used directly within
 *                                     `handlers` in [kind]{@link core/kind}) that will forward the
 *                                     custom event.
 * @memberof core/handle
 * @public
 */

exports.adaptEvent = adaptEvent;

var forwardCustom = handle.forwardCustom = function (name, adapter) {
  return handle(adaptEvent(function (ev) {
    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
      args[_key7 - 1] = arguments[_key7];
    }

    var customEventPayload = adapter ? adapter.apply(void 0, [ev].concat(args)) : null; // Handle either no adapter or a non-object return from the adapter

    if (!customEventPayload || typeof customEventPayload !== 'object') {
      customEventPayload = {};
    }

    customEventPayload.type = name;

    if (typeof customEventPayload.preventDefault !== 'function' && typeof (ev === null || ev === void 0 ? void 0 : ev.preventDefault) === 'function') {
      customEventPayload.preventDefault = ev.preventDefault.bind(ev);
    }

    if (typeof customEventPayload.stopPropagation !== 'function' && typeof (ev === null || ev === void 0 ? void 0 : ev.stopPropagation) === 'function') {
      customEventPayload.stopPropagation = ev.stopPropagation.bind(ev);
    }

    return customEventPayload;
  }, forward(name))).named('forwardCustom');
};
/**
 * Creates a handler that will forward the event to a function at `name` on `props` with capability
 * to prevent default behavior. If the specified prop is `undefined` or is not a function, it is
 * ignored. The created handler returns `false` when `event.preventDefault()` has been called in a handler.
 *
 * If `adapter` is not specified, a new event payload will be generated with a `type` member with
 * the `name` of the custom event. If `adapter` is specified, the `type` member is added to the
 * value returned by `adapter`.
 *
 * The `adapter` function receives the same arguments as any handler. The value returned from
 * `adapter` is passed as the first argument to `handler` with the remaining arguments kept the
 * same. This is often useful to generate a custom event payload before forwarding on to a callback.
 *
 * Example:
 * ```
 * import {forwardCustomWithPrevent, handle} from '@enact/core/handle';
 *
 * // calls the onChange callback with the event: {type: 'onChange'}
 * const forwardChangePreventDefault = handle(
 *   forwardCustomWithPrevent('onChange'),
 *   (ev) => console.log('default action', ev)
 * );
 *
 * // calls the onChange callback with the event: {type: 'onChange', index}
 * const forwardChangeWithIndexPreventDefault = handle(
 *   forwardCustomWithPrevent('onChange', (ev, {index}) => ({index})),
 *   (ev) => console.log('default action', ev)
 * );
 * ```
 *
 * @method   forwardCustomWithPrevent
 * @param    {String}        name      Name of method on the `props`
 * @param    {EventAdapter}  [adapter] Function to adapt the event payload
 *
 * @returns  {HandlerFunction}         Returns an [event handler]{@link core/handle.EventHandler}
 *                                     (suitable for passing to handle or used directly within
 *                                     `handlers` in [kind]{@link core/kind}) that will forward the
 *                                     custom event and will return `false` if default action is prevented
 * @memberof core/handle
 * @private
 */


exports.forwardCustom = forwardCustom;
var forwardCustomWithPrevent = handle.forwardCustomWithPrevent = named(function (name, adapter) {
  var prevented = false;

  var adapterWithPrevent = function adapterWithPrevent(ev) {
    for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
      args[_key8 - 1] = arguments[_key8];
    }

    var customEventPayload = adapter ? adapter.apply(void 0, [ev].concat(args)) : null;
    var existingPreventDefault = null; // Handle either no adapter or a non-object return from the adapter

    if (!customEventPayload || typeof customEventPayload !== 'object') {
      customEventPayload = {};
    }

    if (typeof customEventPayload.preventDefault === 'function') {
      existingPreventDefault = customEventPayload.preventDefault;
    } else if (typeof ev.preventDefault === 'function') {
      existingPreventDefault = ev.preventDefault.bind(ev);
    }

    customEventPayload.preventDefault = function () {
      prevented = true;

      if (typeof existingPreventDefault === 'function') {
        existingPreventDefault();
      }
    };

    return customEventPayload;
  };

  return handle(forwardCustom(name, adapterWithPrevent), function () {
    return !prevented;
  });
}, 'forwardCustomWithPrevent');
/**
 * Accepts a handler and returns the logical complement of the value returned from the handler.
 *
 * Example:
 * ```
 * import {forProp, forward, not, handle} from '@enact/core/handle';
 *
 * // calls the onChange callback when disabled is not true
 * const handleChange = handle(
 *  not(forProp('disabled', true)),
 *  forward('onChange')
 * )
 * ```
 *
 * @method   not
 * @param    {HandlerFunction}  handler  Handler to complement
 *
 * @returns  {HandlerFunction}           Returns an [event
 *                                       handler]{@link core/handle.HandlerFunction} (suitable for
 *                                       passing to handle) that returns the complement of the
 *                                       return value of `handler`
 * @curried
 * @memberof core/handle
 * @public
 */

exports.forwardCustomWithPrevent = forwardCustomWithPrevent;

var not = handle.not = function (handler) {
  return function () {
    return !handler.apply(void 0, arguments);
  };
};

exports.not = not;
var _default = handle;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/hoc/hoc.js":
/*!*********************************************!*\
  !*** ./node_modules/@enact/core/hoc/hoc.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.hoc = exports["default"] = void 0;

var _util = __webpack_require__(/*! ../util */ "./node_modules/@enact/core/util/util.js");

var _mergeDeepWithKey = _interopRequireDefault(__webpack_require__(/*! ramda/src/mergeDeepWithKey */ "./node_modules/ramda/src/mergeDeepWithKey.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Provides the {@link core/hoc.hoc} method to create higher-order components (HOCs).
 *
 * @module core/hoc
 * @exports hoc
 */


var mergeFn = function mergeFn(key, defaultValue, userValue) {
  // eslint-disable-next-line no-undefined
  if (userValue === undefined) {
    return defaultValue;
  }

  return userValue;
};
/**
 * Constructs a higher-order component (HOC) using an optional set of default configuration parameters and
 * a factory method that accepts instance configuration parameters and a component to wrap. The
 * returned function can accept:
 *	* an instance config and a component constructor to wrap and return a renderable component, or
 *	* an instance config only and return a decorator function expecting a component constructor
 *	(like the next bullet), or
 *	* a component constructor and return a renderable component
 *
 * Example:
 * ```
 *	const Countable = hoc({prop: 'data-count'}, (config, Wrapped) => {
 *		return class extends React.Component {
 *			constructor (props) {
 *				super(props);
 *				this.state = {
 *					count: 0
 *				};
 *			},
 *			inc = () => this.setState({count: this.state.count + 1}),
 *			render () {
 *				const props = Object.assign({}, this.props, {
 *					[config.prop]: this.state.count,
 *					onClick: this.inc
 *				});
 *				return <Wrapped {...props} />
 *			}
 *		}
 *	});
 *
 *	const CountableAsDataNumber({prop: 'data-number'});
 *	const CountableDiv('div');
 *	const CountableDivAsDataNumber = CountableAsDataNumber('div');
 * ```
 *
 * @function
 * @param  {Object} defaultConfig Set of default configuration parameters
 * @param  {Function} hawk        Higher-order component
 *
 * @returns {Function}             HOC Decorator
 * @memberof core/hoc
 * @public
 */


var hoc = function hoc(defaultConfig, hawk) {
  // normalize arguments to allow defaultConfig to be omitted
  var factory = hawk;
  var defaults = defaultConfig;

  if (!factory && typeof defaultConfig === 'function') {
    factory = defaultConfig;
    defaults = null;
  }

  var Component = function Component(config, maybeWrapped) {
    if ((0, _util.isRenderable)(config)) {
      return factory(defaults, config);
    } else {
      var cfg = (0, _mergeDeepWithKey["default"])(mergeFn, defaults, config);

      if ((0, _util.isRenderable)(maybeWrapped)) {
        return factory(cfg, maybeWrapped);
      } else {
        return function (Wrapped) {
          return factory(cfg, Wrapped);
        };
      }
    }
  };

  if (defaults) {
    Component.displayName = 'HOC';
    Component.defaultConfig = defaults;
  }

  return Component;
};

exports.hoc = hoc;
var _default = hoc;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/internal/ApiDecorator/ApiDecorator.js":
/*!************************************************************************!*\
  !*** ./node_modules/@enact/core/internal/ApiDecorator/ApiDecorator.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ApiDecorator = void 0;

var _invariant = _interopRequireDefault(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _hoc = _interopRequireDefault(__webpack_require__(/*! ../../hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
} // Gets a property from `provider`


var get = function get(provider, name) {
  return function () {
    if (provider) {
      return provider[name];
    }
  };
}; // Sets a property on `provider`


var set = function set(provider, name) {
  return function (value) {
    if (provider && typeof provider[name] !== 'function') {
      return provider[name] = value;
    }
  };
};
/**
 * Default config for {@link core/internal/ApiDecorator.ApiDecorator}.
 *
 * @memberof core/internal/ApiDecorator.ApiDecorator
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Configures the API endpoints to be exposed
   *
   * @type {String[]}
   * @required
   * @memberof core/internal/ApiDecorator.ApiDecorator.defaultConfig
   */
  api: null
};
/**
 * {@link core/internal/ApiDecorator.ApiDecorator} is a higher-order component that exposes an
 * imperative API for a contained component. ApiDecorator accepts an array of API endpoints in the
 * `api` config parameter. Each is then mapped to the underlying component instance as either a
 * function call or property getter/setter pair. The component passes a reference to itself to the
 * ApiDecorator by a `setApiProvider` prop added by the HOC.
 *
 * ```
 * import ApiDecorator from '@enact/core/internal/ApiDecorator';
 *
 * const MyComponent = class extends React.Component {
 * 	static displayName = 'MyComponent';
 *
 * 	doSomething = () => {
 * 	}
 * }
 *
 * @class ApiDecorator
 * @memberof core/internal/ApiDecorator
 * @hoc
 * @private
 */

var ApiDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var api = config.api;
  !(api != null) ?  true ? (0, _invariant["default"])(false, 'ApiDecorator: api is a required config property') : 0 : void 0;
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class() {
      var _this;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _this.setProvider = function (provider) {
        api.forEach(function (key) {
          Object.defineProperty(_assertThisInitialized(_this), key, {
            get: get(provider, key),
            set: set(provider, key),
            enumerable: true,
            configurable: true
          });
        });
      };

      return _this;
    }

    _createClass(_class, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({
          setApiProvider: this.setProvider
        }, this.props));
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'ApiDecorator', _class;
});
exports.ApiDecorator = ApiDecorator;
var _default = ApiDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/internal/Registry/Registry.js":
/*!****************************************************************!*\
  !*** ./node_modules/@enact/core/internal/Registry/Registry.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Registry = void 0;
/**
 * Allows components to register parents to cascade context changes and trigger functions
 *
 * @type Object
 * @memberof core/Registry
 * @private
 */

var Registry = {
  create: function create(handler) {
    var instances = [];
    var currentParent;
    var registry = Object.freeze({
      set parent(register) {
        if (currentParent && currentParent.unregister) {
          currentParent.unregister();
        }

        if (register && typeof register === 'function') {
          currentParent = register(registry.notify);
        }
      },

      notify: function notify(ev) {
        var exclude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
          return true;
        };
        instances.filter(exclude).forEach(function (f) {
          return f(ev);
        });
      },
      register: function register(instance) {
        if (instances.indexOf(instance) === -1) {
          instances.push(instance);

          if (handler) {
            handler({
              action: 'register'
            }, instance);
          }
        }

        return {
          notify: function notify(ev) {
            if (handler) {
              handler(ev, instance);
            }
          },
          unregister: function unregister() {
            var i = instances.indexOf(instance);

            if (i >= 0) {
              instances.splice(i, 1);

              if (handler) {
                handler({
                  action: 'register'
                }, instance);
              }
            }
          }
        };
      }
    });
    return registry;
  }
};
exports.Registry = Registry;
var _default = Registry;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/internal/deprecate/deprecate.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/core/internal/deprecate/deprecate.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.deprecate = exports["default"] = void 0;
/**
 * Provides the `deprecate` method
 *
 * @module core/internal/deprecate
 * @private
 */
// Utility method to format deprecate message

var formatMsg = function formatMsg(_ref) {
  var message = _ref.message,
      name = _ref.name,
      until = _ref.until,
      replacedBy = _ref.replacedBy,
      since = _ref.since;
  var msg = 'DEPRECATED:';

  if (name) {
    msg += " ".concat(name);
  }

  if (since) {
    msg += " since ".concat(since);
  }

  if (until) {
    if (name || since) {
      msg += '.';
    }

    msg += " Will be removed in ".concat(until);
  }

  if (replacedBy) {
    if (name || since || until) {
      msg += '.';
    }

    msg += " Replaced by ".concat(replacedBy);
  }

  if (name || since || until || replacedBy) {
    msg += '.';
  }

  if (message) {
    msg += " ".concat(message, ".");
  }

  return msg;
}; // Utility method for console warning


var warn = function warn(msg) {
  if (typeof console !== 'undefined') {
    console.warn(msg); // eslint-disable-line no-console
  }
};
/**
 * Marks a function, component or property (via `propTypes`) as deprecated. Deprecated items will
 * log a message on first invocation. Can also be used 'stand-alone' to issue a deprecation warning.
 * In stand-alone mode it currently will log every time.  In production mode, the deprecation
 * warning disappears.
 *
 * @function
 * @param {*} thing - The thing to be wrapped, or the deprecation config in stand-alone
 * @param {Object?} config - The deprecation config
 * @param {String?} config.name - An optional name for the deprecated item
 * @param {String?} config.message - An optional message to display
 * @param {String?} config.since - The version where deprecation started (optional)
 * @param {String?} config.until - The version where the functionality will be removed (optional)
 * @param {String?} config.replacedBy - An optional alternative
 * @param {Boolean?} config.alwaysWarn - If `true`, a warning will be issued for every access
 * @returns {*} Either a wrapped version of `thing` or an unwrapped version of `thing` in
 *	production or stand-alone mode
 * @memberof core/internal/deprecate
 * @private
 */


var deprecate = function deprecate(thing, config) {
  if (true) {
    if (!config) {
      // If no config, config only invocation, just log message
      var msg = formatMsg(thing);
      warn(msg);
      return thing;
    } else {
      var displayed, _msg;

      return function () {
        if (!displayed || config.alwaysWarn) {
          if (!_msg) {
            _msg = formatMsg(config);
          }

          warn(_msg);
          displayed = true;
        }

        return thing.apply(void 0, arguments);
      };
    }
  } else {}
};

exports.deprecate = deprecate;
var _default = deprecate;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/internal/prop-types/prop-types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@enact/core/internal/prop-types/prop-types.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _util = __webpack_require__(/*! ../../util */ "./node_modules/@enact/core/util/util.js");

var _deprecate = _interopRequireDefault(__webpack_require__(/*! ../deprecate */ "./node_modules/@enact/core/internal/deprecate/deprecate.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var isRequired = function isRequired(fn) {
  fn.isRequired = function (props, key, componentName, location, propFullName) {
    var propValue = props[key];

    if (typeof propValue === 'undefined') {
      return new Error("'".concat(propFullName, "' is required for '").concat(componentName, "' but was undefined."));
    }

    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }

    return fn.apply(void 0, [propValue, key, componentName, location, propFullName].concat(rest));
  };

  return fn;
};

var renderable = isRequired(function (props, key, componentName) {
  var propValue = props[key];

  if (propValue && !(0, _util.isRenderable)(propValue)) {
    return new Error("Invalid prop '".concat(key, "' supplied to '").concat(componentName, "'. ") + "Expected a renderable value but received '".concat(typeof propValue, "' instead."));
  }
});
var component = isRequired(function (props, key, componentName) {
  var propValue = props[key];

  if (propValue && (typeof propValue === 'string' || !(0, _util.isRenderable)(propValue))) {
    return new Error("Invalid prop '".concat(key, "' supplied to '").concat(componentName, "'. ") + "Expected a function but received '".concat(typeof propValue, "' instead."));
  }
});

var renderableOverride = _propTypes["default"].oneOfType([_propTypes["default"].element, renderable]);

var componentOverride = _propTypes["default"].oneOfType([_propTypes["default"].element, component]);

var ref = _propTypes["default"].oneOfType([_propTypes["default"].shape({
  current: _propTypes["default"].any
}), _propTypes["default"].func]);
/*
 * Wrap a prop type validator with a deprecation warning when the prop has a non-null value
 *
 * @param {Function} base Prop type validator
 * @param {Object} config deprecatioon configuration
 */


var deprecated = function deprecated(base, config) {
  // Wrap in a no-op so deprecate only warns once
  var warn = (0, _deprecate["default"])(function () {
    return true;
  }, config);
  return function (props, key) {
    // Warn on a non-null value for the prop
    if (props[key] != null) warn(); // Pass on to the prop type validator

    for (var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      rest[_key2 - 2] = arguments[_key2];
    }

    return base.apply(void 0, [props, key].concat(rest));
  };
};

var EnactPropTypes = {
  component: component,
  componentOverride: componentOverride,
  ref: ref,
  deprecated: deprecated,
  renderable: renderable,
  renderableOverride: renderableOverride
};
var _default = EnactPropTypes;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/keymap/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@enact/core/keymap/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var _keymap = __webpack_require__(/*! ./keymap */ "./node_modules/@enact/core/keymap/keymap.js");

Object.keys(_keymap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _keymap[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _keymap[key];
    }
  });
});
/**
 * Manages a map of names to key codes to simplify event handlers
 *
 * Example:
 * ```
 * import {add, is} from '@enact/core/keymap';
 *
 * add('enter', 13);
 * const isEnter = is('enter');
 *
 * // within event handler
 * if (isEnter(ev.keyCode)) {
 *   // handle enter
 * }
 * ```
 *
 * @module core/keymap
 * @exports add
 * @exports addAll
 * @exports is
 * @exports remove
 * @exports removeAll
 */
// keymap uses a singleton object, map, to manage the keymap. since webpack may make multiple copies
// of the module available if the import path is different, we ensure a consistent import path for
// the singleton instance by facading it with this module.
// Add the default 5-way navigation key codes

(0, _keymap.addAll)({
  enter: [13, 16777221],
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  pageUp: 33,
  pageDown: 34
});

/***/ }),

/***/ "./node_modules/@enact/core/keymap/keymap.js":
/*!***************************************************!*\
  !*** ./node_modules/@enact/core/keymap/keymap.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.removeAll = exports.remove = exports.is = exports.addAll = exports.add = void 0;

var _curry = _interopRequireDefault(__webpack_require__(/*! ramda/src/curry */ "./node_modules/ramda/src/curry.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/*
 * The singleton map of names to keyCodes. If a name doesn't have any keyCodes mapped to it, it will
 * not exist in this map. If it does, its value will be an array of its keyCodes.
 *
 * @type {Object}
 * @private
 */


var map = {};
/*
 * Safely converts keymap name to lowercase.
 *
 * @function
 * @param   {String} name  Name for keyCode
 *
 * @returns {String}       Name for keyCode in lowercase
 * @memberof core/keymap
 * @private
 */

var toLowerCase = function toLowerCase(name) {
  return name ? name.toLowerCase() : '';
};
/*
 * Iterates over `set` and invokes `fn` with the key and value of each item.
 *
 * @function
 * @param   {Function}  fn   Function to invoke
 * @param   {Object}    set  A map of names to keyCodes
 *
 * @returns {undefined}
 * @memberof core/keymap
 * @private
 */


var forEachObj = (0, _curry["default"])(function (fn, set) {
  Object.keys(set).forEach(function (name) {
    return fn(name, set[name]);
  });
});
/*
 * Invokes `fn` with `name` and `keyCode` for each key code provided.
 *
 * @function
 * @param   {Function}        fn       Function to invoke
 * @param   {String}          name     Name for the key codes
 * @param   {Number|Number[]} keyCode  A key code or array of key codes
 *
 * @returns {undefined}
 * @curried
 * @memberof core/keymap
 * @private
 */

var oneOrArray = (0, _curry["default"])(function (fn, name, keyCode) {
  if (Array.isArray(keyCode)) {
    keyCode.forEach(fn(name));
  } else {
    fn(name, keyCode);
  }
});
/*
 * Adds `keyCode` to `name`.
 *
 * @function
 * @param   {String}    name     Name for the key code
 * @param   {Number}    keyCode  A key code
 *
 * @returns {undefined}
 * @curried
 * @memberof core/keymap
 * @private
 */

var addOne = (0, _curry["default"])(function (name, keyCode) {
  name = toLowerCase(name);

  if (name in map) {
    var index = map[name].indexOf(keyCode);

    if (index === -1) {
      map[name].push(keyCode);
    }
  } else if (name) {
    map[name] = [keyCode];
  }
});
/*
 * Removes `keyCode` from `name`.
 *
 * @function
 * @param   {String}    name     Name for the key code
 * @param   {Number}    keyCode  A key code
 *
 * @returns {undefined}
 * @curried
 * @memberof core/keymap
 * @private
 */

var removeOne = (0, _curry["default"])(function (name, keyCode) {
  name = toLowerCase(name);

  if (name in map) {
    var keys = map[name];
    var index = keys.indexOf(keyCode);

    if (index === -1) {
      delete map[name];
    } else {
      keys.splice(index, 1);
    }
  }
});
/**
 * Registers `keyCode` for `name`.
 *
 * @function add
 * @param   {String}          name     Name for the key code
 * @param   {Number|Number[]} keyCode  A key code or array of key codes
 *
 * @returns {undefined}
 * @curried
 * @memberof core/keymap
 * @public
 */

var add = oneOrArray(addOne);
/**
 * Registers a set of key codes.
 *
 * @function addAll
 * @param   {Object<String,Number|Number[]>}    set  A map of names to keyCodes
 *
 * @returns {undefined}
 * @curried
 * @memberof core/keymap
 * @public
 */

exports.add = add;
var addAll = forEachObj(add);
/**
 * Unregisters `keyCode` from `name`.
 *
 * @function remove
 * @param   {String}          name     Name for the key code
 * @param   {Number|Number[]} keyCode  A key code or array of key codes
 *
 * @returns {undefined}
 * @curried
 * @memberof core/keymap
 * @public
 */

exports.addAll = addAll;
var remove = oneOrArray(removeOne);
/**
 * Unregisters a set of key codes.
 *
 * @function removeAll
 * @param   {Object}    set  A map of names to keyCodes
 *
 * @returns {undefined}
 * @curried
 * @memberof core/keymap
 * @public
 */

exports.remove = remove;
var removeAll = forEachObj(remove);
/**
 * Determines if `keyCode` is mapped to `name`.
 *
 * @function is
 * @param   {String}    name     Name for the key code
 * @param   {Number}    keyCode  A key code
 *
 * @returns {Boolean}            `true` if `keyCode` is mapped to `name`
 * @curried
 * @memberof core/keymap
 * @public
 */

exports.removeAll = removeAll;
var is = (0, _curry["default"])(function (name, keyCode) {
  name = toLowerCase(name);
  return name in map && map[name].indexOf(keyCode) >= 0;
});
exports.is = is;

/***/ }),

/***/ "./node_modules/@enact/core/kind/computed.js":
/*!***************************************************!*\
  !*** ./node_modules/@enact/core/kind/computed.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.computed = void 0;
/**
 * Accepts an object of computed property configurations and a property object, passes the property
 * object through each computed property handler, and merges the resulting computed properties with
 * the original properties.
 *
 * ```
 * const cfg = {
 *   sum: ({x,y,z}) => x+y+z,
 *   product: ({x,y,z}) => x*y*z
 * }
 * const props = {
 *   x: 2,
 *   y: 3,
 *   z: 4
 * }
 * computed(cfg)(props) // => {x: 2, y: 3, z: 4, sum: 9, product: 24}
 * ```
 *
 * @method computed
 * @param   {Object}    cfg  Configuration object mapping transformation functions to property names
 *
 * @returns {Function}       Function that accepts a props object and mutates it to include the
 *                           computed props
 * @private
 */

var computed = function computed(cfg, optProps) {
  var keys = Object.keys(cfg);

  var renderComputed = function renderComputed(props) {
    var updated = {};

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    for (var i = keys.length - 1; i >= 0; i--) {
      updated[keys[i]] = cfg[keys[i]].apply(cfg, [props].concat(args));
    }

    return Object.assign(props, updated);
  }; // maintain compatibility with 1.x


  if (optProps) {
    return renderComputed(optProps);
  }

  return renderComputed;
};

exports.computed = computed;
var _default = computed;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/kind/kind.js":
/*!***********************************************!*\
  !*** ./node_modules/@enact/core/kind/kind.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.kind = exports["default"] = void 0;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _useHandlers = _interopRequireDefault(__webpack_require__(/*! ../useHandlers */ "./node_modules/@enact/core/useHandlers/useHandlers.js"));

var _Handlers = _interopRequireDefault(__webpack_require__(/*! ../useHandlers/Handlers */ "./node_modules/@enact/core/useHandlers/Handlers.js"));

var _computed = _interopRequireDefault(__webpack_require__(/*! ./computed */ "./node_modules/@enact/core/kind/computed.js"));

var _styles = _interopRequireDefault(__webpack_require__(/*! ./styles */ "./node_modules/@enact/core/kind/styles.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
} // Because contextType is optional and hooks must be called in the same order, we need a fallback
// context when none is specified. This likely has some overhead so we may want to deprecate and
// remove contextType support for 4.0 since the context APIs have improved since this was added.


var NoContext = /*#__PURE__*/(0, _react.createContext)(null);
/**
 * @callback RenderFunction
 * @memberof core/kind
 * @param {Object<string, any>} props
 * @param {Object<string, any>} context
 * @returns React.Element|null
 */

/**
 * @callback ComputedPropFunction
 * @memberof core/kind
 * @param {Object<string, any>} props
 * @param {Object<string, any>} context
 * @returns any
 */

/**
 * @callback HandlerFunction
 * @memberof core/kind
 * @param {any} event
 * @param {Object<string, any>} props
 * @param {Object<string, any>} context
 */

/**
 * Configuration for CSS class name mapping
 *
 * @typedef {Object} StylesBlock
 * @memberof core/kind
 * @property {Object.<string, string>} css
 * @property {String} [className]
 * @property {Boolean|String|String[]} [publicClassNames]
 */

/**
 * @typedef {Object} KindConfig
 * @memberof core/kind
 * @property {String} [name]
 * @property {Boolean} [functional]
 * @property {Object.<string, Function>} [propTypes]
 * @property {Object.<string, any>} [defaultProps]
 * @property {Object} [contextType]
 * @property {StylesBlock} [styles]
 * @property {Object.<string, HandlerFunction>} [handlers]
 * @property {Object.<string, ComputedPropFunction>} [computed]
 * @property {RenderFunction} render
 */

/**
 * Creates a new component with some helpful declarative syntactic sugar.
 *
 * Example:
 * ```
 *	import css from './Button.module.less';
 *	const Button = kind({
 *		name: 'Button',
 *		// Return a functional component suitable for use with React hooks
 *		functional: true,
 *		// expect color and onClick properties but neither required
 *		propTypes: {
 *			color: PropTypes.string
 *		},
 *		// if no color is provided, it'll be green
 *		defaultProps: {
 *			color: 'green'
 *		},
 *		// expect backgroundColor via context
 *		contextType: React.createContext({ backgroundColor }),
 *		// configure styles with the static className to merge with user className
 *		styles: {
 *			// include the CSS modules map so 'button' can be resolved to the local name
 *			css,
 *			className: 'button'
 *		},
 *		// add event handlers that are cached between calls to prevent recreating each call. Any
 *		// handlers are added to the props passed to `render()`.  See core/handle.
 *		handlers: {
 *			onKeyDown: (evt, props) => { .... }
 *		},
 *		// add some computed properties, these are added to props passed to `render()`
 *		computed: {
 *			// border color will be the color prepended by 'light'
 *			borderColor: ({color}) => 'light' + color,
 *			// background color will be the contextual background color if specified
 *			color: ({color}, context) => context.backgroundColor || color
 *		},
 *		// Render the thing, already!
 *		render: ({color, borderColor, children, ...rest}) => (
 *			<button
 *				{...rest}
 *				style={{backgroundColor: color, borderColor}}
 *			>
 *				{children}
 *			</button>
 *		)
 *	});
 * ```
 *
 * @function
 * @template Props
 * @param  {KindConfig}    config    Component configuration
 *
 * @returns {Component<Props>}           Component
 * @memberof core/kind
 * @see {@link core/handle}
 * @public
 */

var kind = function kind(config) {
  var cfgComputed = config.computed,
      _config$contextType = config.contextType,
      contextType = _config$contextType === void 0 ? NoContext : _config$contextType,
      defaultProps = config.defaultProps,
      functional = config.functional,
      handlers = config.handlers,
      name = config.name,
      propTypes = config.propTypes,
      render = config.render,
      cfgStyles = config.styles;
  var renderStyles = cfgStyles ? (0, _styles["default"])(cfgStyles) : false;
  var renderComputed = cfgComputed ? (0, _computed["default"])(cfgComputed) : false;

  var renderKind = function renderKind(props, context) {
    if (renderStyles) props = renderStyles(props, context);
    if (renderComputed) props = renderComputed(props, context);
    return render(props, context);
  };

  var Component; // In 4.x, this branch will become the only supported version and the class branch will be
  // removed.

  if (functional) {
    Component = function Component(props) {
      var ctx = (0, _react.useContext)(contextType);
      var boundHandlers = (0, _useHandlers["default"])(handlers, props, ctx);

      var merged = _objectSpread(_objectSpread({}, props), boundHandlers);

      return renderKind(merged, ctx);
    };
  } else {
    var _class;

    Component = (_class = /*#__PURE__*/function (_ReactComponent) {
      _inherits(Component, _ReactComponent);

      var _super = _createSuper(Component);

      function Component() {
        var _this;

        _classCallCheck(this, Component);

        _this = _super.call(this);
        _this.handlers = new _Handlers["default"](handlers);
        return _this;
      }

      _createClass(Component, [{
        key: "render",
        value: function render() {
          this.handlers.setContext(this.props, this.context);

          var merged = _objectSpread(_objectSpread({}, this.props), this.handlers.handlers);

          return renderKind(merged, this.context);
        }
      }]);

      return Component;
    }(_react.Component), _class.contextType = contextType, _class);
  }

  if (name) Component.displayName = name;
  if (propTypes) Component.propTypes = propTypes;
  if (defaultProps) Component.defaultProps = defaultProps; // Decorate the Component with the computed property object in DEV for easier testability

  if ( true && cfgComputed) Component.computed = cfgComputed;
  var defaultPropKeys = defaultProps ? Object.keys(defaultProps) : null;
  var handlerKeys = handlers ? Object.keys(handlers) : null;

  Component.inline = function (props, context) {
    var updated = _objectSpread({}, props);

    if (defaultPropKeys && defaultPropKeys.length > 0) {
      defaultPropKeys.forEach(function (key) {
        // eslint-disable-next-line no-undefined
        if (props == null || props[key] === undefined) {
          updated[key] = defaultProps[key];
        }
      });
    }

    if (handlerKeys && handlerKeys.length > 0) {
      // generate a handler with a clone of updated to ensure each handler receives the same
      // props without the kind.handlers injected.
      updated = handlerKeys.reduce(function (_props, key) {
        _props[key] = function (ev) {
          return handlers[key](ev, updated, context);
        };

        return _props;
      }, _objectSpread({}, updated));
    }

    return renderKind(updated, context);
  };

  return Component;
};

exports.kind = kind;
var _default = kind;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/kind/styles.js":
/*!*************************************************!*\
  !*** ./node_modules/@enact/core/kind/styles.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.styles = exports["default"] = void 0;

var _bind = _interopRequireDefault(__webpack_require__(/*! classnames/bind */ "./node_modules/classnames/bind.js"));

var _util = __webpack_require__(/*! ../util */ "./node_modules/@enact/core/util/util.js");

var _util2 = __webpack_require__(/*! ./util */ "./node_modules/@enact/core/kind/util.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Merges external and internal CSS classes and style objects. Internal CSS classes can be
 * optionally mapped to alternate names (e.g. those generated by CSS modules) by including a
 * `css` parameter.
 *
 * Example:
 * ```
 *	const stylesConfig = {
 *		css: {
 *			button: 'unambiguous-button-class-name',
 *			client: 'unambiguous-button-class-name-client'
 *		},
 *		className: 'button global-class',
 *		style: {
 *			color: 'red'
 *		}
 *	};
 *
 *	const props = {
 *		className: 'my-button',
 *		style: {
 *			display: 'none'
 *		}
 *	};
 *
 *	const renderStyles = styles(stylesConfig);
 *	const renderStyles(props); // {className: 'unambiguous-button-class-name global-class', styles: {color: 'red', display: 'none'}}
 * ```
 *
 * @method styles
 * @param   {Object}    cfg  Configuration object containing one of `css`, `className`,
 *                           `publicClassNames`, and/or `style`
 *
 * @returns {Function}       Function that accepts a props object and mutates it to merge class
 *                           names and style objects and provide the `styler` utility function and
 *                           `css` merged class name map
 * @private
 */


var styles = function styles(cfg, optProps) {
  var className = cfg.className,
      configCss = cfg.css,
      _cfg$prop = cfg.prop,
      prop = _cfg$prop === void 0 ? 'className' : _cfg$prop,
      style = cfg.style;
  var allowedClassNames = cfg.publicClassNames;

  if (configCss && allowedClassNames === true) {
    allowedClassNames = Object.keys(configCss);
  } else if (typeof allowedClassNames === 'string') {
    allowedClassNames = allowedClassNames.split(/\s+/);
  }

  var renderStyles = function renderStyles(props) {
    var css = configCss;

    if (style) {
      props.style = Object.assign({}, style, props.style);
    } // if the props includes a css map, merge them together now


    if (css && allowedClassNames && props.css) {
      css = (0, _util.mergeClassNameMaps)(css, props.css, allowedClassNames);
    }

    var cn = css ? _bind["default"].bind(css) : _bind["default"];
    var joinedClassName = props[prop] = (0, _bind["default"])(className ? cn(className.split(' ')) : null, props.className);
    (0, _util2.addInternalProp)(props, 'css', css);
    (0, _util2.addInternalProp)(props, 'styler', {
      join: cn,
      append: function append() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return cn.apply(void 0, [joinedClassName].concat(args));
      }
    });
    return props;
  };

  if (optProps) {
    return renderStyles(optProps);
  }

  return renderStyles;
};

exports.styles = styles;
var _default = styles;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/kind/util.js":
/*!***********************************************!*\
  !*** ./node_modules/@enact/core/kind/util.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.addInternalProp = void 0;

var addInternalProp = function addInternalProp(props, name, value) {
  Object.defineProperty(props, name, {
    value: value,
    enumerable: false,
    writable: true
  });
  return props;
};

exports.addInternalProp = addInternalProp;

/***/ }),

/***/ "./node_modules/@enact/core/platform/platform.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/core/platform/platform.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.platform = exports.parseUserAgent = exports.detect = exports["default"] = void 0;

var _uniq = _interopRequireDefault(__webpack_require__(/*! ramda/src/uniq */ "./node_modules/ramda/src/uniq.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var hasGesture = function hasGesture() {
  return Boolean('ongesturestart' in window || 'onmsgesturestart' in window && (window.navigator.msMaxTouchPoints > 1 || window.navigator.maxTouchPoints > 1));
};

var hasTouch = function hasTouch() {
  return Boolean('TouchEvent' in window || 'ontouchstart' in window || window.navigator.msMaxTouchPoints || window.navigator.msManipulationViewsEnabled && window.navigator.maxTouchPoints);
}; // Adapted from https://patrickhlauke.github.io/touch/touchscreen-detection/
// I've omitted the touch event fallback since that is covered by hasTouch and we're less concerned
// with legacy browsers used in touchscreen environments.


var hasTouchScreen = function hasTouchScreen() {
  return (// if Pointer Events are supported, just check maxTouchPoints
    window.PointerEvent && 'maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints > 0 || // check for any-pointer:coarse which mostly means touchscreen
    window.matchMedia && window.matchMedia('(any-pointer:coarse)').matches
  );
};

var webOSVersion = {
  38: 3,
  53: 4,
  68: 5,
  79: 6
};
var platforms = [// Windows Phone 7 - 10
{
  platform: 'windowsPhone',
  regex: /Windows Phone (?:OS )?(\d+)[.\d]+/
}, // Android 4+ using Chrome
{
  platform: 'androidChrome',
  regex: /Android .* Chrome\/(\d+)[.\d]+/
}, // Android 2 - 4
{
  platform: 'android',
  regex: /Android(?:\s|\/)(\d+)/
}, // Kindle Fire
// Force version to 2, (desktop mode does not list android version)
{
  platform: 'android',
  regex: /Silk\/1./,
  forceVersion: 2,
  extra: {
    silk: 1
  }
}, // Kindle Fire HD (Silk versions 2 or 3)
// Force version to 4
{
  platform: 'android',
  regex: /Silk\/2./,
  forceVersion: 4,
  extra: {
    silk: 2
  }
}, {
  platform: 'android',
  regex: /Silk\/3./,
  forceVersion: 4,
  extra: {
    silk: 3
  }
}, // IE 8 - 10
{
  platform: 'ie',
  regex: /MSIE (\d+)/
}, // IE 11
{
  platform: 'ie',
  regex: /Trident\/.*; rv:(\d+)/
}, // Edge
{
  platform: 'edge',
  regex: /Edge\/(\d+)/
}, // iOS 3 - 5
// Apple likes to make this complicated
{
  platform: 'ios',
  regex: /iP(?:hone|ad;(?: U;)? CPU) OS (\d+)/
}, // LG webOS
{
  platform: 'webos',
  regex: /Web0S;.*Safari\/537.41/,
  forceVersion: 1
}, {
  platform: 'webos',
  regex: /Web0S;.*Safari\/538.2/,
  forceVersion: 2
}, {
  platform: 'webos',
  regex: /Web0S;.*Chrome\/(\d+)/
}, // LG webOS of indeterminate versionre
{
  platform: 'webos',
  regex: /Web0S;/,
  forceVersion: -1
}, // LuneOS
{
  platform: 'webos',
  regex: /LuneOS/,
  forceVersion: -1,
  extra: {
    luneos: 1
  }
}, // Palm/HP/Open webOS
{
  platform: 'webos',
  regex: /WebAppManager|Isis|webOS\./,
  forceVersion: -1,
  extra: {
    legacy: 4
  }
}, {
  platform: 'webos',
  regex: /(?:web|hpw)OS\/1/,
  forceVersion: -1,
  extra: {
    legacy: 1
  }
}, {
  platform: 'webos',
  regex: /(?:web|hpw)OS\/2/,
  forceVersion: -1,
  extra: {
    legacy: 2
  }
}, {
  platform: 'webos',
  regex: /(?:web|hpw)OS\/3/,
  forceVersion: -1,
  extra: {
    legacy: 3
  }
}, // desktop Safari
{
  platform: 'safari',
  regex: /Version\/(\d+)[.\d]+\s+Safari/
}, // desktop Chrome
{
  platform: 'chrome',
  regex: /Chrome\/(\d+)[.\d]+/
}, // Firefox on Android
{
  platform: 'androidFirefox',
  regex: /Android;.*Firefox\/(\d+)/
}, // FirefoxOS
{
  platform: 'firefoxOS',
  regex: /Mobile;.*Firefox\/(\d+)/
}, // desktop Firefox
{
  platform: 'firefox',
  regex: /Firefox\/(\d+)/
}, // Blackberry Playbook
{
  platform: 'blackberry',
  regex: /PlayBook/i,
  forceVersion: 2
}, // Blackberry 10+
{
  platform: 'blackberry',
  regex: /BB1\d;.*Version\/(\d+\.\d+)/
}, // Tizen
{
  platform: 'tizen',
  regex: /Tizen (\d+)/
}];

var ua = function ua() {
  return window.navigator ? window.navigator.userAgent : '';
};

var _platform;

var parseUserAgent = function parseUserAgent(userAgent) {
  var plat = {
    gesture: hasGesture(),
    node: false,
    touch: hasTouch(),
    touchscreen: hasTouchScreen(),
    unknown: true
  };

  for (var i = 0, p, m, v; p = platforms[i]; i++) {
    m = p.regex.exec(userAgent);

    if (m) {
      plat.unknown = false;

      if ('forceVersion' in p) {
        v = p.forceVersion;
      } else if (p.platform === 'webos') {
        v = webOSVersion[m[1]] || -1;

        if (v >= 7 || v === -1) {
          plat.chrome = Number(m[1]);
        }
      } else {
        v = Number(m[1]);
      }

      plat[p.platform] = v;

      if (p.extra) {
        plat = _objectSpread(_objectSpread({}, plat), p.extra);
      }

      plat.platformName = p.platform;
      break;
    }
  }

  return plat;
};
/**
 * @typedef {Object} PlatformDescription
 * @property {Object} [extra] - Additional information about the detected platform
 * @property {Boolean} gesture - `true` if the platform has native double-finger events
 * @property {Boolean} node - `true` only if `window` is `undefined`
 * @property {String} [platformName] - The name of the platform, if detected
 * @property {Boolean} touch - `true` if the platform has native single-finger events
 * @property {Boolean} touchscreen - `true` if the platform has a touch screen
 * @property {Boolean} unknown - `true` for any unknown system
 *
 * @memberof core/platform
 * @public
 */

/**
 * Returns the {@link core/platform.platform} object.
 *
 * @function detect
 * @returns {PlatformDescription}     The {@link core/platform.platform} object
 * @memberof core/platform
 * @public
 */


exports.parseUserAgent = parseUserAgent;

var detect = function detect() {
  if (_platform) {
    // if we've already determined the platform, we'll use that determination
    return _platform;
  } else if (typeof window === 'undefined') {
    return {
      gesture: false,
      node: true,
      touch: false,
      unknown: true
    };
  }

  var userAgent = ua();
  return _platform = parseUserAgent(userAgent);
};
/**
 * Provides basic information about the running platform.
 *
 * @type {PlatformDescription}
 * @memberof core/platform
 * @public
 */


exports.detect = detect;
var platform = {};
exports.platform = platform;
['gesture', 'node', 'platformName', 'touch', 'touchscreen', 'unknown'].concat(_toConsumableArray((0, _uniq["default"])(platforms.map(function (p) {
  return p.platform;
})))).forEach(function (name) {
  Object.defineProperty(platform, name, {
    enumerable: true,
    get: function get() {
      var p = detect();
      return p[name];
    }
  });
});
var _default = platform;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/snapshot/snapshot.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/core/snapshot/snapshot.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.isWindowReady = isWindowReady;
exports.onWindowReady = onWindowReady;
exports.windowReady = windowReady;

var _invariant = _interopRequireDefault(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Utilities to facilitate integration with v8 snapshot builds
 *
 * @module core/snapshot
 * @exports isWindowReady
 * @exports onWindowReady
 * @exports windowReady
 * @public
 */


var windowCallbacks = [];
/**
 * Determines if the `window` is available
 *
 * @function
 *
 * @returns {Boolean} `true` when `window` is ready
 * @memberof core/snapshot
 * @public
 */

function isWindowReady() {
  return typeof window !== 'undefined';
}
/**
 * Executes a callback, such as registering event handlers, when a valid `window` is available.
 *
 * During normal operation, the callback will be executed immediately. During a pre-rendering pass,
 * the callback is not be executed at all. When using snapshot, the callback is added to a queue
 * and is executed in order once the window is available.
 *
 * *Important Notes*
 * * The callback should not alter the initial HTML state. If it does, it will invalidate the
 * pre-render state and interfere with React rehydration.
 * * The callback should be limited to module-scoped actions and not component instance actions. If
 * the action is tied to a component, it should be invoked from within the component's lifecycle
 * methods.
 *
 * @function
 * @param   {Function}    callback    Function to run when the window is ready
 *
 * @returns {undefined}
 * @memberof core/snapshot
 * @public
 */


function onWindowReady(callback) {
  if (isWindowReady()) {
    callback();
  } else {
    windowCallbacks.push(callback);
  }
}
/**
 * Executes all queued window callbacks.
 *
 * Requires that the window be, in fact, available and will throw an `Error` if not.
 *
 * @function
 *
 * @returns {undefined}
 * @memberof core/snapshot
 * @public
 */


function windowReady() {
  !isWindowReady() ?  true ? (0, _invariant["default"])(false, 'windowReady cannot be run until the window is available') : 0 : void 0;
  windowCallbacks.forEach(function (f) {
    return f();
  });
}

var _default = onWindowReady;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/useClass/useClass.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/core/useClass/useClass.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.useClass = useClass;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
/**
 * Creates one instance of the class, `Ctor` with the provided `args`, for the life of the
 * component.
 *
 * ```
 * class MyClass {
 *   constructor ({value}) {
 *     this.value = value;
 *   }
 *
 *   handleEvent = (ev) => {
 *     if (ev.key === 'Enter') {
 *       // do something with this.value
 *     }
 *   }
 * }
 *
 * function Component (props) {
 *   const inst = useClass(MyClass, props.value);
 *   return <div onClick={inst.handleEvent} />
 * }
 * ```
 *
 * @param {Function} Ctor Class constructor
 * @param  {...any}  args Arguments to pass to the constructor
 * @returns {Object}      An instance of `Ctor`
 * @private
 */


function useClass(Ctor) {
  var ref = (0, _react.useRef)(null);

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  ref.current = ref.current || _construct(Ctor, args);
  return ref.current;
}

var _default = useClass;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/useHandlers/Handlers.js":
/*!**********************************************************!*\
  !*** ./node_modules/@enact/core/useHandlers/Handlers.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Handlers = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var Handlers = /*#__PURE__*/function () {
  function Handlers(_handlers) {
    var _this = this;

    _classCallCheck(this, Handlers);

    this.props = {};
    this.context = {};
    this._handlers = {};

    if (_handlers) {
      Object.keys(_handlers).forEach(function (fn) {
        _this._handlers[fn] = function (ev) {
          return _handlers[fn](ev, _this.props, _this.context);
        };

        _this._handlers[fn].displayName = fn;
      });
    }
  }

  _createClass(Handlers, [{
    key: "handlers",
    get: function get() {
      return this._handlers;
    }
  }, {
    key: "setContext",
    value: function setContext() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.props = props;
      this.context = context;
    }
  }]);

  return Handlers;
}();

exports.Handlers = Handlers;
var _default = Handlers;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/useHandlers/useHandlers.js":
/*!*************************************************************!*\
  !*** ./node_modules/@enact/core/useHandlers/useHandlers.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.useHandlers = useHandlers;

var _useClass = _interopRequireDefault(__webpack_require__(/*! ../useClass */ "./node_modules/@enact/core/useClass/useClass.js"));

var _Handlers = _interopRequireDefault(__webpack_require__(/*! ./Handlers */ "./node_modules/@enact/core/useHandlers/Handlers.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Creates a map of event handlers with consistent references across renders.
 *
 * Each function in the `handlers` will receive the first argument passed by the downstream caller
 * along with the latest `props` and `context` values passed to `useHandlers`. This is designed to
 * work well with {@link core/handle} which generates handlers with this function signature.
 *
 * @param {Object.<String, Function>} handlers  Map of handler names to functions.
 * @params {any}                      [props]   Typically, the props for the component but that is
 *                                              not required.
 * @params {any}                      [context] Additional data or methods the handlers may need.
 * @returns {Object}                            A map of bound handlers
 * @private
 */


function useHandlers(handlers, props, context) {
  var h = (0, _useClass["default"])(_Handlers["default"], handlers);
  h.setContext(props, context);
  return h.handlers;
}

var _default = useHandlers;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/usePublicClassNames/usePublicClassNames.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@enact/core/usePublicClassNames/usePublicClassNames.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.usePublicClassNames = usePublicClassNames;

var _util = __webpack_require__(/*! ../util */ "./node_modules/@enact/core/util/util.js");
/**
 * A hook for supporting `publicClassNames` to functional components.
 * It returns merged CSS of given two CSS objects according to `publicClassNames` option.
 *
 * @param   {Object.<string, string>}    [componentCss]     The CSS of the component
 * @param   {Object.<string, string>}    [customCss]        The supplied collection of CSS class names to the
 *                                                          corresponding internal elements and states of the component
 * @param   {Boolean|String|String[]}    [publicClassNames] The keys of public class names of the component
 *                                                          If this value is `true`, all of the keys from the component
 *                                                          CSS will become public class names.
 * @returns {Object}                                        A merged CSS
 * @private
 */


function usePublicClassNames(_ref) {
  var componentCss = _ref.componentCss,
      customCss = _ref.customCss,
      publicClassNames = _ref.publicClassNames;
  var allowedClassNames = publicClassNames;
  var mergedCss = componentCss;

  if (!componentCss || !customCss) {
    return mergedCss;
  }

  if (allowedClassNames === true) {
    allowedClassNames = Object.keys(componentCss);
  } else if (typeof allowedClassNames === 'string') {
    allowedClassNames = allowedClassNames.split(/\s+/);
  } // if the config includes a css map, merge them together now


  if (allowedClassNames) {
    mergedCss = (0, _util.mergeClassNameMaps)(componentCss, customCss, allowedClassNames);
  }

  return mergedCss;
}

var _default = usePublicClassNames;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/util/Job.js":
/*!**********************************************!*\
  !*** ./node_modules/@enact/core/util/Job.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Job = void 0;

var _invariant = _interopRequireDefault(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
/**
 * Provides a convenient way to manage timed execution of functions.
 *
 * @class Job
 * @memberof core/util
 * @public
 */


var Job = /*#__PURE__*/function () {
  /**
   * @constructor
   * @param {Function}    fn       Function to execute as the requested job.
   * @param {Number}      timeout  The number of milliseconds to wait before starting the job.
   *
   * @memberof core/util.Job.prototype
   */
  function Job(fn, _timeout) {
    var _this = this;

    _classCallCheck(this, Job);

    this.id = null;
    this.fn = null;
    this.timeout = null;
    this.type = null;

    this.start = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this.startAfter.apply(_this, [_this.timeout].concat(args));
    };

    this.startAfter = function (timeout) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      _this.stop();

      _this.type = 'timeout';
      _this.id = setTimeout(function () {
        return _this.run(args);
      }, timeout);
    };

    this.stop = function () {
      if (_this.id) {
        if (_this.type === 'idle') {
          window.cancelIdleCallback(_this.id);
        } else if (_this.type === 'raf') {
          window.cancelAnimationFrame(_this.id);
        } else if (_this.type === 'timeout') {
          clearTimeout(_this.id);
        }

        _this.id = _this.type = null;
      }
    };

    this.throttle = function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      _this.throttleUntil.apply(_this, [_this.timeout].concat(args));
    };

    this.throttleUntil = function (timeout) {
      if (!_this.id) {
        _this.type = 'timeout';

        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }

        _this.run(args);

        _this.id = setTimeout(_this.stop, timeout);
      }
    };

    this.idle = function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      _this.idleUntil.apply(_this, [null].concat(args));
    };

    this.idleUntil = function (timeout) {
      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        args[_key6 - 1] = arguments[_key6];
      }

      if (typeof window !== 'undefined' && window.requestIdleCallback) {
        _this.stop();

        _this.type = 'idle';
        _this.id = window.requestIdleCallback(function () {
          return _this.run(args);
        }, {
          timeout: timeout
        });
      } else {
        // since we can't request an idle callback, just pass to startAfter()
        _this.startAfter.apply(_this, [timeout].concat(args));
      }
    };

    this.startRaf = function () {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      _this.startRafAfter.apply(_this, [_this.timeout].concat(args));
    };

    this.startRafAfter = function (timeout) {
      for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
        args[_key8 - 1] = arguments[_key8];
      }

      _this.type = 'raf';

      if (typeof window !== 'undefined') {
        var time = null;

        var callback = function callback(timestamp) {
          if (time === null) {
            time = timestamp;
          }

          if (timeout && timestamp - time < timeout) {
            _this.id = window.requestAnimationFrame(callback);
          } else {
            time = null;

            _this.run(args);

            window.cancelAnimationFrame(_this.id);
            _this.id = null;
          }
        };

        _this.id = window.requestAnimationFrame(callback);
      } else {
        // If requestAnimationFrame is not supported just run the function immediately
        _this.run(args);
      }
    };

    this.promise = function (promise) {
      !(promise && typeof promise.then === 'function') ?  true ? (0, _invariant["default"])(false, 'promise expects a thenable') : 0 : void 0;
      _this.type = 'promise';
      _this.id = promise;
      return promise.then(function (result) {
        if (_this.id === promise) {
          _this.stop();

          return _this.run([result]);
        }
      });
    };

    this.fn = fn;
    this.timeout = _timeout;
  }

  _createClass(Job, [{
    key: "run",
    value: function run(args) {
      // don't want to inadvertently apply Job's context on `fn`
      return this.fn.apply(null, args);
    }
    /**
     * Starts the job.
     *
     * @method
     * @param   {...*}       [args]  Any args passed are forwarded to the callback
     *
     * @returns {undefined}
     * @memberof core/util.Job.prototype
     * @public
     */

  }]);

  return Job;
}();

exports.Job = Job;
var _default = Job;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/core/util/util.js":
/*!***********************************************!*\
  !*** ./node_modules/@enact/core/util/util.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "Job", ({
  enumerable: true,
  get: function get() {
    return _Job["default"];
  }
}));
exports.shallowEqual = exports.perfNow = exports.mergeClassNameMaps = exports.memoize = exports.mapAndFilterChildren = exports.isRenderable = exports.extractAriaProps = exports.coerceFunction = exports.coerceArray = exports.clamp = exports.cap = void 0;

var _always = _interopRequireDefault(__webpack_require__(/*! ramda/src/always */ "./node_modules/ramda/src/always.js"));

var _is = _interopRequireDefault(__webpack_require__(/*! ramda/src/is */ "./node_modules/ramda/src/is.js"));

var _unless = _interopRequireDefault(__webpack_require__(/*! ramda/src/unless */ "./node_modules/ramda/src/unless.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var ReactIs = _interopRequireWildcard(__webpack_require__(/*! react-is */ "./node_modules/react-is/index.js"));

var _Job = _interopRequireDefault(__webpack_require__(/*! ./Job */ "./node_modules/@enact/core/util/Job.js"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * A collection of utility methods.
 *
 * @module core/util
 * @exports cap
 * @exports clamp
 * @exports coerceArray
 * @exports coerceFunction
 * @exports extractAriaProps
 * @exports isRenderable
 * @exports Job
 * @exports memoize
 * @exports mergeClassNameMaps
 * @exports perfNow
 * @exports mapAndFilterChildren
 * @exports shallowEqual
 */

/**
 * Capitalizes a given string (not locale-aware).
 *
 * @function
 * @param   {String}    str   The string to capitalize.
 *
 * @returns {String}          The capitalized string.
 * @memberof core/util
 * @public
 */


var cap = function cap(str) {
  return str.slice(0, 1).toUpperCase() + str.slice(1);
};
/**
 * Limits `value` to be between `min` and `max`.
 *
 * If `min` is greater than `max`, `min` is returned.
 *
 * @function
 * @param   {Number}    min   The minimum value of the range
 * @param   {Number}    max   The maximum value of the range
 * @param   {Number}    value The value that must be within the range
 *
 * @returns {Number}          The clamped value
 * @memberof core/util
 * @public
 */


exports.cap = cap;

var clamp = function clamp(min, max, value) {
  if (min > max || value < min) return min;
  if (value > max) return max;
  return value;
};
/**
 * If `arg` is a function, return it. Otherwise returns a function that returns `arg`.
 *
 * Example:
 * ```
 *	const returnsZero = coerceFunction(0);
 *	const returnsArg = coerceFunction(() => 0);
 * ```
 * @function
 * @param {*}    arg    Function or value
 *
 * @returns {Function}  Either `arg` if `arg` is a function, or a function that returns `arg`
 * @memberof core/util
 * @public
 */


exports.clamp = clamp;
var coerceFunction = (0, _unless["default"])((0, _is["default"])(Function), _always["default"]);
/**
 * If `arg` is array-like, return it. Otherwise returns a single element array containing `arg`.
 *
 * Example:
 * ```
 *	const returnsArray = coerceArray(0); // [0]
 *	const returnsArg = coerceArray([0]); // [0]
 *	const returnsObjArg = coerceArray({0: 'zeroth', length: 1});
 * ```
 * @see http://ramdajs.com/docs/#isArrayLike
 * @function
 * @param {*}    array    Array or value
 *
 * @returns {Array}       Either `array` or `[array]`
 * @memberof core/util
 * @public
 */

exports.coerceFunction = coerceFunction;

var coerceArray = function coerceArray(array) {
  return Array.isArray(array) ? array : [array];
};
/**
 * Loosely determines if `tag` is a renderable component (either a string or a function).
 *
 * @function
 * @param {*}    tag    Component to test
 *
 * @returns {Boolean}   `true` if `tag` is either a string or a function
 * @memberof core/util
 * @public
 */


exports.coerceArray = coerceArray;

var isRenderable = function isRenderable(tag) {
  return ReactIs.isValidElementType(tag);
};
/**
 * Removes ARIA-related props from `props` and returns them in a new object.
 *
 * Specifically, it removes the `role` prop and any prop prefixed with `aria-`. This is useful when
 * redirecting ARIA-related props from a non-focusable root element to a focusable child element.
 *
 * @function
 * @param   {Object}    props    Props object
 *
 * @returns {Object}             ARIA-related props
 * @memberof core/util
 * @public
 */


exports.isRenderable = isRenderable;

var extractAriaProps = function extractAriaProps(props) {
  var aria = {};
  Object.keys(props).forEach(function (key) {
    if (key === 'role' || key.indexOf('aria-') === 0) {
      aria[key] = props[key];
      delete props[key];
    }
  });
  return aria;
};
/**
 * Gets the current timestamp of either `window.performance.now` or `Date.now`
 *
 * @function
 *
 * @returns {Number}                    The timestamp from `window.performance.now` or `Date.now`
 * @memberof core/util
 * @public
 */


exports.extractAriaProps = extractAriaProps;

var perfNow = function perfNow() {
  if (typeof window === 'object') {
    return window.performance.now();
  } else {
    return Date.now();
  }
};
/**
 * Merges two class name maps into one.
 *
 * The resulting map will only contain the class names defined in the `baseMap` and will be appended
 * with the value from `additiveMap` if it exists. Further, `allowedClassNames` may optionally limit
 * which keys will be merged from `additiveMap` into `baseMap`.
 *
 * Example:
 * ```
 * // merges all matching class names from additiveMap1 with baseMap1
 * const newMap1 = mergeClassNameMaps(baseMap1, additiveMap1);
 *
 * // merge only 'a' and 'b' class names from additiveMap2 with baseMap2
 * const newMap2 = mergeClassNameMaps(baseMap2, additiveMap2, ['a', 'b']);
 * ```
 *
 * @function
 * @param {Object}     baseMap             The source mapping of logical class name to physical
 *                                         class name
 * @param {Object}     additiveMap         Mapping of logical to physical class names which are
 *                                         concatenated with `baseMap` where the logical names match
 * @param {String[]}  [allowedClassNames]  Array of logical class names that can be augmented. When
 *                                         set, the logical class name must exist in `baseMap`,
 *                                         `additiveMap`, and this array to be concatenated.
 *
 * @returns {Object}                       The merged class name map.
 * @memberof core/util
 * @public
 */


exports.perfNow = perfNow;

var mergeClassNameMaps = function mergeClassNameMaps(baseMap, additiveMap, allowedClassNames) {
  var css = baseMap;

  if (baseMap && additiveMap) {
    allowedClassNames = allowedClassNames || Object.keys(additiveMap); // if the props includes a css map, merge them together now

    css = Object.assign({}, baseMap);
    allowedClassNames.forEach(function (key) {
      if (baseMap[key] && additiveMap[key]) {
        css[key] = baseMap[key] + ' ' + additiveMap[key];
      }
    });

    if (false) {}
  }

  return css;
};
/**
 * Creates a function that memoizes the result of `fn`.
 *
 * Note that this function is a naive implementation and only checks the first argument for
 * memoization.
 *
 * @function
 * @param {Function}    fn    The function to have its output memoized.
 *
 * @returns {Function}        The new memoized function.
 * @memberof core/util
 * @public
 */


exports.mergeClassNameMaps = mergeClassNameMaps;

var memoize = function memoize(fn) {
  var cache = {};
  return function () {
    var n = arguments.length <= 0 ? undefined : arguments[0];

    if (n in cache) {
      return cache[n];
    } else {
      var result = fn.apply(void 0, arguments);
      cache[n] = result;
      return result;
    }
  };
};
/**
 * Maps over the `children`, discarding any `null` children before and after calling the callback.
 *
 * A replacement for `React.Children.map`.
 *
 * @function
 * @param {*}        children  Children to map over
 * @param {Function} callback  Function to apply to each child. Will not be called if the child is
 *                              `null`. If `callback` returns `null`, the child will be removed from
 *                              the result. If `null` is returned, the item will not be included in
 *                              the final output, regardless of the filter function.
 * @param {Function} [filter]  Filter function applied after mapping.
 *
 * @returns {*}                The processed children or the value of `children` if not an array.
 * @memberof core/util
 * @see https://reactjs.org/docs/react-api.html#reactchildrenmap
 * @public
 */


exports.memoize = memoize;

var mapAndFilterChildren = function mapAndFilterChildren(children, callback, filter) {
  var result = _react.Children.map(children, function (child) {
    if (child != null) {
      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }

      return callback.apply(void 0, [child].concat(rest));
    } else {
      return child;
    }
  });

  if (result && filter) {
    return result.filter(filter);
  } else {
    return result;
  }
};
/**
 * Performs shallow comparison for given objects.
 *
 * @function
 * @param {Obejct}        a    An object to compare.
 * @param {Obejct}        b    An object to compare.
 *
 * @returns {Boolean}          `true` if the values of all keys are strictly equal.
 * @memberof core/util
 * @public
 */


exports.mapAndFilterChildren = mapAndFilterChildren;

var shallowEqual = function shallowEqual(a, b) {
  if (Object.is(a, b)) {
    return true;
  }

  if (typeof a !== 'object' || a === null || typeof b !== 'object' || b === null) {
    return false;
  }

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b); // early bail out if the objects have a different number of keys

  if (aKeys.length !== bKeys.length) {
    return false;
  }

  var hasOwn = Object.prototype.hasOwnProperty.bind(b);

  for (var i = 0; i < aKeys.length; i++) {
    var prop = aKeys[i];

    if (!hasOwn(prop) || !Object.is(a[prop], b[prop])) {
      return false;
    }
  }

  return true;
};

exports.shallowEqual = shallowEqual;

/***/ }),

/***/ "./node_modules/@enact/i18n/I18nDecorator/I18n.js":
/*!********************************************************!*\
  !*** ./node_modules/@enact/i18n/I18nDecorator/I18n.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.I18n = void 0;

var _dispatcher = __webpack_require__(/*! @enact/core/dispatcher */ "./node_modules/@enact/core/dispatcher/dispatcher.js");

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _locale = __webpack_require__(/*! ../locale */ "./node_modules/@enact/i18n/locale/locale.js");

var _resBundle = __webpack_require__(/*! ../src/resBundle */ "./node_modules/@enact/i18n/src/resBundle.js");

var _wrapIlibCallback = _interopRequireDefault(__webpack_require__(/*! ../src/wrapIlibCallback */ "./node_modules/@enact/i18n/src/wrapIlibCallback.js"));

var _getI18nClasses = _interopRequireDefault(__webpack_require__(/*! ./getI18nClasses */ "./node_modules/@enact/i18n/I18nDecorator/getI18nClasses.js"));

var _windowFocus = __webpack_require__(/*! ./windowFocus */ "./node_modules/@enact/i18n/I18nDecorator/windowFocus.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _toArray(arr) {
  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
/**
 * Manages i18n resource loading.
 *
 * @class I18n
 * @private
 */


var I18n = /*#__PURE__*/function () {
  function I18n(_ref) {
    var _this = this;

    var latinLanguageOverrides = _ref.latinLanguageOverrides,
        nonLatinLanguageOverrides = _ref.nonLatinLanguageOverrides,
        resources = _ref.resources,
        _ref$sync = _ref.sync,
        sync = _ref$sync === void 0 ? true : _ref$sync;

    _classCallCheck(this, I18n);

    this.handleLocaleChange = function () {
      (0, _windowFocus.onWindowFocus)(_this.updateLocale);
    };

    this.updateLocale = function (newLocale) {
      _this.loadResources(newLocale);
    };

    this._locale = null;
    this._ready = sync;

    this._onLoadResources = function () {};

    this.loadResourceJob = null;
    this.latinLanguageOverrides = latinLanguageOverrides;
    this.nonLatinLanguageOverrides = nonLatinLanguageOverrides;
    this.resources = this.normalizeResources(resources);
    this.sync = sync;
  }
  /**
   * Sets the current locale and load callback.
   *
   * Changing the locale will request new resource files for that locale.
   *
   * @type {String}
   * @public
   */


  _createClass(I18n, [{
    key: "setContext",
    value: function setContext(locale, onLoadResources) {
      this.loadResourceJob = new _util.Job(onLoadResources);
      this._onLoadResources = onLoadResources;

      if (this._locale !== locale) {
        this._locale = locale;
        this.loadResources(locale);
      }
    }
    /**
     * Normalize the structure of the external resources to be an array of resource/onLoad pairs.
     *
     * @private
     */

  }, {
    key: "normalizeResources",
    value: function normalizeResources(resources) {
      return Array.isArray(resources) ? resources.map(function (res) {
        if (!res) return;
        var fn = res.resource || res;
        var onLoad = res.onLoad;
        if (typeof fn !== 'function') return;
        return {
          resource: fn,
          onLoad: onLoad
        };
      }).filter(Boolean) : [];
    }
    /**
     * Adds the `languagechange` event listener and initiates async resource retrieval.
     *
     * Should only be called after `window` is available and the DOM is ready.
     *
     * @public
     */

  }, {
    key: "load",
    value: function load() {
      this._ready = true;

      if (typeof window === 'object') {
        (0, _dispatcher.on)('languagechange', this.handleLocaleChange, window);
      } // When async, we defer loading resources until DOM is ready


      if (!this.sync) {
        this.loadResources(this._locale);
      }
    }
    /**
     * Cleans up resource retrieval and event listeners.
     *
     * @public
     */

  }, {
    key: "unload",
    value: function unload() {
      this._ready = false;
      this.loadResourceJob.stop();

      if (typeof window === 'object') {
        (0, _dispatcher.off)('languagechange', this.handleLocaleChange, window);
      }
    }
    /**
     * Loads the resources for the given locale.
     *
     * @private
     */

  }, {
    key: "loadResources",
    value: function loadResources(spec) {
      var _this2 = this;

      if (!this._ready) return;
      var locale = (0, _locale.updateLocale)(spec);
      var options = {
        sync: this.sync,
        locale: locale
      };
      var rtl = (0, _wrapIlibCallback["default"])(_locale.isRtlLocale, options);
      var className = (0, _wrapIlibCallback["default"])(_getI18nClasses["default"], _objectSpread(_objectSpread({}, options), {}, {
        latinLanguageOverrides: this.latinLanguageOverrides,
        nonLatinLanguageOverrides: this.nonLatinLanguageOverrides
      }));
      var bundle = (0, _wrapIlibCallback["default"])(_resBundle.createResBundle, options);

      if (this.sync) {
        var state = {
          className: className,
          loaded: true,
          locale: locale,
          rtl: rtl
        };
        (0, _resBundle.setResBundle)(bundle);
        this.resources.forEach(function (_ref2) {
          var resource = _ref2.resource,
              onLoad = _ref2.onLoad;
          var result = resource(options);
          if (onLoad) onLoad(result);
        });

        this._onLoadResources(state);
      } else {
        var resources = Promise.all([rtl, className, // move updating into a new method with call to setState
        bundle].concat(_toConsumableArray(this.resources.map(function (res) {
          return (0, _wrapIlibCallback["default"])(res.resource, options);
        })))).then(function (_ref3) {
          var _ref4 = _toArray(_ref3),
              rtlResult = _ref4[0],
              classNameResult = _ref4[1],
              bundleResult = _ref4[2],
              userResources = _ref4.slice(3);

          (0, _resBundle.setResBundle)(bundleResult);

          _this2.resources.forEach(function (_ref5, i) {
            var onLoad = _ref5.onLoad;
            return onLoad && onLoad(userResources[i]);
          });

          return {
            className: classNameResult,
            loaded: true,
            locale: locale,
            rtl: rtlResult
          };
        }); // TODO: Resolve how to handle failed resource requests
        // .catch(...);

        this.loadResourceJob.promise(resources);
      }
    }
    /**
     * Called when the `languagechange` event fires.
     */

  }]);

  return I18n;
}();

exports.I18n = I18n;
var _default = I18n;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/i18n/I18nDecorator/I18nDecorator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@enact/i18n/I18nDecorator/I18nDecorator.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "I18nContext", ({
  enumerable: true,
  get: function get() {
    return _useI18nContext.I18nContext;
  }
}));
exports["default"] = exports.I18nDecorator = exports.I18nContextDecorator = void 0;
Object.defineProperty(exports, "useI18n", ({
  enumerable: true,
  get: function get() {
    return _useI18n2["default"];
  }
}));
Object.defineProperty(exports, "useI18nContext", ({
  enumerable: true,
  get: function get() {
    return _useI18nContext.useI18nContext;
  }
}));

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

__webpack_require__(/*! ../src/glue */ "./node_modules/@enact/i18n/src/glue.js");

var _useI18n2 = _interopRequireDefault(__webpack_require__(/*! ./useI18n */ "./node_modules/@enact/i18n/I18nDecorator/useI18n.js"));

var _useI18nContext = __webpack_require__(/*! ./useI18nContext */ "./node_modules/@enact/i18n/I18nDecorator/useI18nContext.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["locale"],
    _excluded2 = ["className"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var join = function join(a, b) {
  return a && b ? a + ' ' + b : a || b || '';
};
/**
 * Default config for `I18nDecorator`.
 *
 * @memberof i18n/I18nDecorator.I18nDecorator
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Array of locales that should be treated as latin regardless of their script.
   *
   * @type {String[]}
   * @default	null
   * @public
   * @memberof i18n/I18nDecorator.I18nDecorator.defaultConfig
   */
  latinLanguageOverrides: null,

  /**
   * Array of locales that should be treated as non-latin regardless of their script.
   *
   * @type {String[]}
   * @default null
   * @public
   * @memberof i18n/I18nDecorator.I18nDecorator.defaultConfig
   */
  nonLatinLanguageOverrides: null,

  /**
   * Array of resource loaders to be invoked after a locale change.
   *
   * Each loader must be a function which accepts an object and returns either the resource when
   * `options.sync` is `true` or a `Promise` for the resource when `options.sync` is `false`.
   *
   * ```
   * resources: [
   *   (options) => new Promise((resolve, reject) => {
   *     fetchResource({onLoad: resolve, onError: reject});
   *   })
   * ]
   * ```
   *
   * If you need to handle the resource in some way on load, you can pass an object with an
   * `onLoad` member that will be called once all resources have been loaded. This should be used
   * if loading a resource has side effects that should only be applied once all loading has
   * completed.
   *
   * ```
   * resources: [
   *   {resource: (options) => { ... fetch ... }, onLoad: (res) => { ... apply side effect ... }}
   * ]
   * ```
   *
   * @type {Array<Function|Object>}
   * @default null
   * @public
   * @memberof i18n/I18nDecorator.I18nDecorator.defaultConfig
   */
  resources: null,

  /**
   * Retrieve i18n resource files synchronously
   *
   * @type {Boolean}
   * @default false
   * @public
   * @memberof i18n/I18nDecorator.I18nDecorator.defaultConfig
   */
  sync: false
};
/**
 * A higher-order component that is used to wrap the root element in an app. It provides an `rtl`
 * member on the context of the wrapped component, allowing the children to check the current text
 * directionality as well as an `updateLocale` method that can be used to update the current locale.
 *
 * There are no configurable options on this HOC.
 *
 * Note: This HoC passes `className` to the wrapped component. It must be passed to the main DOM
 * node.
 *
 * @class I18nDecorator
 * @memberof i18n/I18nDecorator
 * @hoc
 * @public
 */

var I18nDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  // eslint-disable-next-line no-shadow
  function I18nDecorator(props) {
    var locale = props.locale,
        rest = _objectWithoutProperties(props, _excluded);

    var _useI18n = (0, _useI18n2["default"])(_objectSpread({
      locale: locale
    }, config)),
        i18nClassName = _useI18n.className,
        i18n = _objectWithoutProperties(_useI18n, _excluded2);

    var className = join(i18nClassName, props.className);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_useI18nContext.I18nContext.Provider, {
      value: i18n,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, rest), {}, {
        className: className
      }))
    });
  }

  I18nDecorator.propTypes =
  /** @lends i18n/I18nDecorator.I18nDecorator.prototype */
  {
    /**
     * Classes to apply to the wrapped component.
     *
     * @type {String}
     * @public
     */
    className: _propTypes["default"].string,

    /**
     * The locale to use.
     *
     * A string with a {@link https://tools.ietf.org/html/rfc5646|BCP 47 language tag}. The
     * system locale will be used by default.
     *
     * @type {String}
     * @public
     */
    locale: _propTypes["default"].string
  };
  return I18nDecorator;
});
exports.I18nDecorator = I18nDecorator;
var contextDefaultConfig = {
  localeProp: null,
  rtlProp: null,
  updateLocaleProp: null
};
var I18nContextDecorator = (0, _hoc["default"])(contextDefaultConfig, function (config, Wrapped) {
  var loadedProp = config.loadedProp,
      localeProp = config.localeProp,
      rtlProp = config.rtlProp,
      updateLocaleProp = config.updateLocaleProp; // eslint-disable-next-line no-shadow

  return function I18nContextDecorator(props) {
    var i18nContext = (0, _useI18nContext.useI18nContext)();

    if (i18nContext) {
      var loaded = i18nContext.loaded,
          locale = i18nContext.locale,
          rtl = i18nContext.rtl,
          updateLocale = i18nContext.updateLocale;
      props = _objectSpread({}, props);

      if (loadedProp) {
        props[loadedProp] = loaded;
      }

      if (localeProp) {
        props[localeProp] = locale;
      }

      if (rtlProp) {
        props[rtlProp] = rtl;
      }

      if (updateLocaleProp) {
        props[updateLocaleProp] = updateLocale;
      }
    }

    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
  };
});
exports.I18nContextDecorator = I18nContextDecorator;
var _default = I18nDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/i18n/I18nDecorator/getI18nClasses.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/i18n/I18nDecorator/getI18nClasses.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _LocaleInfo = _interopRequireDefault(__webpack_require__(/*! ilib/lib/LocaleInfo */ "./node_modules/ilib/lib/LocaleInfo.js"));

var _locale = __webpack_require__(/*! ../locale */ "./node_modules/@enact/i18n/locale/locale.js");

var _excluded = ["latinLanguageOverrides", "nonLatinLanguageOverrides"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var base = 'enact-locale-'; // Callback-friendly version of Promise.all()

function all(fns, callback) {
  var result = [];
  var complete = 0;

  var done = function done(index) {
    return function (value) {
      result[index] = value;
      complete++;

      if (complete === fns.length) {
        callback(result);
      }
    };
  };

  fns.forEach(function (fn, index) {
    return fn(done(index));
  });
}

function getClassesForLocale(li, options) {
  var locale = li.getLocale();

  var latinLanguageOverrides = options.latinLanguageOverrides,
      nonLatinLanguageOverrides = options.nonLatinLanguageOverrides,
      rest = _objectWithoutProperties(options, _excluded);

  all([// allow enact to define other fonts for non-Latin languages, or for certain
  // Latin-based languages where the characters with some accents don't appear in the
  // regular fonts, creating a strange 'ransom note' look with a mix of fonts in the
  // same word. So, treat it like a non-Latin language in order to get all the characters
  // to display with the same font.
  function (done) {
    return (0, _locale.isNonLatinLocale)(locale, _objectSpread(_objectSpread({}, rest), {}, {
      latinLanguageOverrides: latinLanguageOverrides,
      nonLatinLanguageOverrides: nonLatinLanguageOverrides,
      onLoad: function onLoad(isNonLatin) {
        return done(isNonLatin ? base + 'non-latin' : '');
      }
    }));
  }, // allow enact to apply right-to-left styles to the app and widgets if necessary
  function (done) {
    return (0, _locale.isRtlLocale)(_objectSpread(_objectSpread({}, rest), {}, {
      onLoad: function onLoad(isRtl) {
        return done(isRtl ? base + 'right-to-left' : '');
      }
    }));
  }], function (classes) {
    var scriptName = li.getScript();

    if (scriptName !== 'Latn' && scriptName !== 'Cyrl' && scriptName !== 'Grek' && scriptName !== 'Kore') {
      // GF-45884: allow enact to avoid setting italic fonts for those scripts that do not
      // commonly use italics
      classes.push(base + 'non-italic');
    } // allow enact or the apps to give CSS classes that are specific to the language, country, or script


    if (locale.getLanguage()) {
      classes.push(base + locale.getLanguage());

      if (locale.getScript()) {
        classes.push(base + locale.getLanguage() + '-' + locale.getScript());

        if (locale.getRegion()) {
          classes.push(base + locale.getLanguage() + '-' + locale.getScript() + '-' + locale.getRegion());
        }
      } else if (locale.getRegion()) {
        classes.push(base + locale.getLanguage() + '-' + locale.getRegion());
      }
    }

    if (locale.getScript()) {
      classes.push(base + locale.getScript());
    }

    if (locale.getRegion()) {
      classes.push(base + locale.getRegion());
    }

    options.onLoad(classes.filter(Boolean).join(' '));
  });
}
/*
 * A function that returns locale in class name.
 *
 * @memberof i18n/I18nDecorator
 * @param {options.sync} Perform a synchronous request for the classes
 * @param {options.onLoad} Called with a string of i18n classes
 * @param {options.latinLanguageOverrides} Array of locales to treat as latin
 * @param {options.nonLatinLanguageOverrides} Array of locales to treat as non-latin
 * @private
 */


function getI18nClasses() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var sync = options.sync,
      _onLoad = options.onLoad;
  if (!_onLoad) return; // eslint-disable-next-line no-new,no-undefined

  new _LocaleInfo["default"](undefined, {
    sync: sync,
    onLoad: function onLoad(li) {
      return getClassesForLocale(li, _objectSpread(_objectSpread({}, options), {}, {
        onLoad: _onLoad
      }));
    }
  }); // for the current locale
}

var _default = getI18nClasses;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/i18n/I18nDecorator/useI18n.js":
/*!***********************************************************!*\
  !*** ./node_modules/@enact/i18n/I18nDecorator/useI18n.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.useI18n = useI18n;

var _useClass = _interopRequireDefault(__webpack_require__(/*! @enact/core/useClass */ "./node_modules/@enact/core/useClass/useClass.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _index = _interopRequireDefault(__webpack_require__(/*! ../src/index.js */ "./node_modules/@enact/i18n/src/index.js"));

var _I18n = _interopRequireDefault(__webpack_require__(/*! ./I18n */ "./node_modules/@enact/i18n/I18nDecorator/I18n.js"));

var _excluded = ["locale"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Configuration for `useI18n`
 *
 * @typedef {Object} useI18nConfig
 * @memberof i18n/I18nDecorator
 * @property {String[]}   [latinLanguageOverrides]    Locales that should be treated as latin
 * @property {String[]}   [nonLatinLanguageOverrides] Locales that should be treated as non-latin
 * @property {Function}   [onLoadResources]           Called when resources have been loaded after a
 *                                                    locale change
 * @property {Function[]} [resources]                 Additional resource callbacks to be invoked
 *                                                    during a locale change
 * @property {Boolean}    [sync = false]              Load the resources synchronously
 * @private
 */

/**
 * Object returned by `useI18n`
 *
 * @typedef {Object} useI18nInterface
 * @property {String}  className CSS classes that should be applied to the root node
 * @property {Boolean} loaded    Indicates if resources have been loaded
 * @property {String}  locale    Current locale
 * @property {Boolean} rtl       Indicates the current locale uses right-to-left text direction
 * @private
 */

/**
 * Adds internationalization support
 *
 * @param {useI18nConfig} config Configuration options
 * @returns {useI18nInterface}
 * @private
 */


function useI18n() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      locale = _ref.locale,
      config = _objectWithoutProperties(_ref, _excluded);

  var ilibLocale = _index["default"].getLocale();

  locale = locale && locale !== ilibLocale ? locale : ilibLocale;

  var _useState = (0, _react.useState)({
    locale: locale,
    loaded: Boolean(config.sync)
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var i18n = (0, _useClass["default"])(_I18n["default"], config);
  i18n.setContext(locale, setState); // Add/remove listeners on mount/unmount

  (0, _react.useEffect)(function () {
    i18n.load();
    return function () {
      return i18n.unload();
    };
  }, [i18n]);
  return _objectSpread(_objectSpread({}, state), {}, {
    updateLocale: i18n.updateLocale
  });
}

var _default = useI18n;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/i18n/I18nDecorator/useI18nContext.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/i18n/I18nDecorator/useI18nContext.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.I18nContext = void 0;
exports.useI18nContext = useI18nContext;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var I18nContext = /*#__PURE__*/(0, _react.createContext)(null);
/**
 * Object returned by `useI18nContext`
 *
 * @typedef {Object} useI18nContextInterface
 * @memberof i18n/I18nDecorator
 * @property {Boolean}  loaded       `true` when external resource files have been loaded
 * @property {Boolean}  rtl          `true` for locales with right-to-left reading order
 * @property {Function} updateLocale Updates the locale
 * @property {String}   locale       Current locale
 * @private
 */

/**
 * Retrieves the current locale and a method to update the current locale
 *
 * @returns {useI18nContextInterface}
 * @private
 */

exports.I18nContext = I18nContext;

function useI18nContext() {
  // This isn't adding much value but does allow a layer of abstraction so we don't have to export
  // the I18nContext object and can add private API if needed later.
  return (0, _react.useContext)(I18nContext);
}

var _default = useI18nContext;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/i18n/I18nDecorator/windowFocus.js":
/*!***************************************************************!*\
  !*** ./node_modules/@enact/i18n/I18nDecorator/windowFocus.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.onWindowFocus = void 0;

var _dispatcher = __webpack_require__(/*! @enact/core/dispatcher */ "./node_modules/@enact/core/dispatcher/dispatcher.js");

var _snapshot = __webpack_require__(/*! @enact/core/snapshot */ "./node_modules/@enact/core/snapshot/snapshot.js");

var focused = false;
var queue = new Set();

var invoke = function invoke(fn) {
  try {
    fn();
  } catch (e) {// failing silently
  }
};

var flush = function flush() {
  return queue.forEach(invoke);
};

var onWindowFocus = function onWindowFocus(handler) {
  if (focused) {
    handler();
  } else {
    queue.add(handler);
  }
};

exports.onWindowFocus = onWindowFocus;
(0, _snapshot.onWindowReady)(function () {
  focused = true; // Treat window as initially focused once ready

  flush();
  (0, _dispatcher.on)('focus', function () {
    focused = true;
    flush();
  }, window);
  (0, _dispatcher.on)('blur', function () {
    focused = false;
  }, window);
});

/***/ }),

/***/ "./node_modules/@enact/i18n/locale/locale.js":
/*!***************************************************!*\
  !*** ./node_modules/@enact/i18n/locale/locale.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isNonLatinLocale = isNonLatinLocale;
exports.isRtlLocale = isRtlLocale;
exports.updateLocale = void 0;

var _ilib = _interopRequireDefault(__webpack_require__(/*! ilib */ "./node_modules/ilib/index.js"));

var _LocaleInfo = _interopRequireDefault(__webpack_require__(/*! ilib/lib/LocaleInfo */ "./node_modules/ilib/lib/LocaleInfo.js"));

var _ScriptInfo = _interopRequireDefault(__webpack_require__(/*! ilib/lib/ScriptInfo */ "./node_modules/ilib/lib/ScriptInfo.js"));

var _case = __webpack_require__(/*! ../src/case */ "./node_modules/@enact/i18n/src/case.js");

var _excluded = ["onLoad", "latinLanguageOverrides", "nonLatinLanguageOverrides"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
} // Returns `true` if a locale list is provided and it includes either the language (the first part
// of the spec e.g. ko) or the entire spec (e.g. ko-KR)


var includesLocale = function includesLocale(localeList, locale) {
  return Array.isArray(localeList) && (localeList.includes(locale.getLanguage()) || localeList.includes(locale.toString()));
};
/**
 * Tell whether or not the given locale is considered a non-Latin locale for webOS purposes. This
 * controls which fonts are used in various places to show the various languages. An undefined spec
 * parameter means to test the current locale.
 *
 * @memberof i18n/locale
 * @param {ilib.Locale|string|undefined} spec locale specifier or locale object of the locale to
 *	test, or undefined to test the current locale
 * @param {Object} [options] An object configuring the request. Must include an `onLoad` member to
 *                           receive the result.
 */


function isNonLatinLocale(spec) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _onLoad = options.onLoad,
      latinLanguageOverrides = options.latinLanguageOverrides,
      nonLatinLanguageOverrides = options.nonLatinLanguageOverrides,
      rest = _objectWithoutProperties(options, _excluded);

  if (!_onLoad) return; // eslint-disable-next-line no-new

  new _LocaleInfo["default"](spec, _objectSpread(_objectSpread({}, rest), {}, {
    onLoad: function onLoad(li) {
      var locale = li.getLocale();

      _onLoad( // the language actually is non-latin and should not be treated as latin
      li.getScript() !== 'Latn' && !includesLocale(latinLanguageOverrides, locale) || // the language is latin but should be treated as non-latin
      includesLocale(nonLatinLanguageOverrides, locale));
    }
  }));
}
/**
 * Determines if current locale is a right-to-left locale.
 *
 * @memberof i18n/locale
 * @param {Object} [options] An object configuring the request. Must include an `onLoad` member to
 *                           receive the result.
 */


function isRtlLocale() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _onLoad2 = options.onLoad,
      sync = options.sync;
  if (!_onLoad2) return; // eslint-disable-next-line no-new

  new _LocaleInfo["default"](_ilib["default"].getLocale(), _objectSpread(_objectSpread({}, options), {}, {
    onLoad: function onLoad(li) {
      var scriptName = li.getScript(); // eslint-disable-next-line no-new

      new _ScriptInfo["default"](scriptName, {
        sync: sync,
        onLoad: function onLoad(script) {
          _onLoad2(script.getScriptDirection() === 'rtl');
        }
      });
    }
  }));
}
/**
 * This Enact hook lets us know that the system locale has changed and gives
 * us a chance to update the iLib locale before Enact broadcasts its
 * `onlocalechange` signal.
 * Provide a locale string, like 'en-US' or 'ja-JP', to conveniently set
 * that locale immediately. Provide nothing, and reset the locale back to the
 * browser's default language.
 *
 * @memberof i18n/locale
 * @param {String} locale Locale identifier
 * @returns {undefined}
 */


var updateLocale = function updateLocale(locale) {
  // blow away the cache to force it to reload the manifest files for the new app
  // eslint-disable-next-line no-undefined
  if (_ilib["default"]._load) _ilib["default"]._load.manifest = undefined; // remove the cache of the platform name to allow transition between snapshot and browser

  delete _ilib["default"]._platform; // load any external ilib/resbundle data

  _ilib["default"].data = __webpack_require__.g.ilibData || _ilib["default"].data;
  _ilib["default"].data.cache = _ilib["default"].data.cache || {};
  _ilib["default"].data.cache['ResBundle-strings'] = __webpack_require__.g.resBundleData || {}; // ilib handles falsy values and automatically uses local locale when encountered which
  // is expected and desired

  _ilib["default"].setLocale(locale);

  var newLocale = _ilib["default"].getLocale(); // Recreate the case mappers to use the just-recently-set locale


  (0, _case.initCaseMappers)();
  return newLocale;
};

exports.updateLocale = updateLocale;

/***/ }),

/***/ "./node_modules/@enact/i18n/src/Loader.js":
/*!************************************************!*\
  !*** ./node_modules/@enact/i18n/src/Loader.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Loader = EnyoLoader;
exports["default"] = void 0;

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _Loader = _interopRequireDefault(__webpack_require__(/*! ilib/lib/Loader */ "./node_modules/ilib/lib/Loader.js"));

var _LocaleInfo = _interopRequireDefault(__webpack_require__(/*! ilib/lib/LocaleInfo */ "./node_modules/ilib/lib/LocaleInfo.js"));

var _xhr = _interopRequireDefault(__webpack_require__(/*! xhr */ "./node_modules/xhr/index.js"));

var _zoneinfo = _interopRequireDefault(__webpack_require__(/*! ./zoneinfo */ "./node_modules/@enact/i18n/src/zoneinfo.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function F() {};

      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var getImpl = function getImpl(url, callback, sync) {
  if (typeof XMLHttpRequest !== 'undefined') {
    _xhr["default"].XMLHttpRequest = XMLHttpRequest || _xhr["default"].XMLHttpRequest;
    var req;
    (0, _xhr["default"])({
      url: url,
      sync: sync,
      beforeSend: function beforeSend(r) {
        return req = r;
      }
    }, function (err, resp, body) {
      var error = err || resp.statusCode !== 200 && resp.statusCode; // false failure from chrome and file:// urls

      if (error && req.status === 0 && req.response.length > 0) {
        body = req.response;
        error = false;
      }

      var json = null;

      try {
        json = error ? null : JSON.parse(body);
      } catch (e) {
        error = 'Failed to parse ILIB JSON data';
      }

      callback(json, error);
    });
  } else {
    callback(null, new Error('Not a web browser environment'));
  }
};

var getSync = function getSync(url, callback) {
  return getImpl(url, callback, true);
};

var get = (0, _util.memoize)(function (url) {
  return new Promise(function (resolve, reject) {
    getImpl(url, function (json, error) {
      if (error) {
        reject(error);
      } else {
        resolve(json);
      }
    }, false);
  });
});
var iLibBase =  false ? 0 : "node_modules/ilib";
var iLibResources =  false ? 0 : "resources";
var cachePrefix = 'ENACT-ILIB-';
var cacheKey = cachePrefix + 'CACHE-ID';
var cacheID = typeof __webpack_require__.ilib_cache_id === 'undefined' ? '$ILIB' : __webpack_require__.ilib_cache_id;
var timeStampKey = 'l10n_timestamp';

function EnyoLoader() {
  this.base = iLibBase; // TODO: full enyo.platform implementation for improved accuracy

  if (typeof window === 'object' && typeof window.PalmSystem === 'object') {
    this.webos = true;
  }
}

EnyoLoader.prototype = new _Loader["default"]();
EnyoLoader.prototype.constructor = EnyoLoader;

EnyoLoader.prototype._createZoneFile = function (path) {
  var zone = path.substring(path.indexOf('zoneinfo')); // remove the .json suffix to get the name of the zone

  zone = zone.substring(0, zone.length - 5);

  try {
    var zif = new _zoneinfo["default"]('/usr/share/' + zone); // only get the info for this year. Later we can get the info
    // for any historical or future year too

    return zif.getIlibZoneInfo(new Date());
  } catch (e) {// no file, so just return nothing
  }
};

EnyoLoader.prototype._pathjoin = function (_root, subpath) {
  if (!_root || !_root.length) {
    return subpath;
  }

  if (!subpath || !subpath.length) {
    return _root;
  }

  return _root + (_root.charAt(_root.length - 1) !== '/' ? '/' : '') + subpath;
};
/**
 * Load the list of files asynchronously. This uses recursion in
 * order to create a queue of files that will be loaded serially.
 * Each layer, starting at the bottom, loads a file and then loads
 * the layer on top of it. The very top file on the stack will have
 * zero files to load, so instead it will be the one to call the
 * callback to notify the caller that all the content is loaded.
 *
 * @param {Array.<string>} paths array of strings containing relative paths for required locale data
 *	files
 * @param {Array} results empty array in which to place the resulting json when it is loaded from a
 *	file
 * @param {Object} params An object full of parameters that the caller is passing to this function
 *	to help load the files
 * @param {function(Array.<Object>)} callback callback to call when this function is finished
 *	attempting to load all the files that exist and can be loaded
 *
 * @returns {Promise}
 */


EnyoLoader.prototype._loadFilesAsync = function (path, params, cache, rootPath) {
  var _this = this;

  var _root = iLibResources;

  if (typeof rootPath !== 'undefined') {
    _root = rootPath;
  } else if (params && typeof params.root !== 'undefined') {
    _root = params.root; // Deprecated; to be removed in future
  }

  var cacheItem = cache.data.shift(),
      url;

  if (this.webos && path.indexOf('zoneinfo') !== -1) {
    // TODO: Sort out async zone file loading
    return this._createZoneFile(path);
  } else if (cacheItem) {
    return Promise.resolve(cacheItem);
  }

  return this.loadManifests(_root).then(function () {
    var isRootAvailable = _this.isAvailable(_root, path);

    if (isRootAvailable) {
      url = _this._pathjoin(_root, path);
    } else {
      var localeBase = _this._pathjoin(_this.base, 'locale');

      var isBaseAvailable = _this.isAvailable(localeBase, path);

      if (isBaseAvailable) {
        url = _this._pathjoin(localeBase, path);
      }
    }

    if (url) {
      return get(url).then(function (json) {
        if (typeof json === 'object') {
          cache.update = true;
          return json;
        } else if (path === 'localeinfo.json') {
          return _LocaleInfo["default"].defaultInfo;
        }
      });
    }

    return null;
  });
};

EnyoLoader.prototype._loadFilesCache = function (_root, paths) {
  this._validateCache();

  if (typeof window !== 'undefined' && window.localStorage && paths.length > 0) {
    var stored = window.localStorage.getItem(cachePrefix + _root + '/' + paths[0]);

    if (stored) {
      var target = JSON.stringify(paths);
      var data = JSON.parse(stored);

      if (data.target === target) {
        return data.value;
      } else {
        window.localStorage.removeItem(cachePrefix + _root + '/' + paths[0]);
      }
    }
  }

  return new Array(paths.length);
};

EnyoLoader.prototype._storeFilesCache = function (_root, paths, data) {
  if (typeof window !== 'undefined' && window.localStorage && paths.length > 0) {
    var target = JSON.stringify(paths);
    window.localStorage.setItem(cachePrefix + _root + '/' + paths[0], JSON.stringify({
      target: target,
      value: data
    }));
  }
};

EnyoLoader.prototype._clearStringsCache = function () {
  if (typeof window !== 'undefined' && window.localStorage) {
    // Remove cache of app's strings
    for (var i = 0; i < window.localStorage.length; i++) {
      var currentKey = window.localStorage.key(i);

      if (currentKey.includes('strings.json')) {
        window.localStorage.removeItem(currentKey);
      }
    }
  }
};

EnyoLoader.prototype._validateCache = function () {
  if (!this._cacheValidated && typeof window !== 'undefined' && window.localStorage) {
    var activeID = window.localStorage.getItem(cacheKey);

    if (activeID !== cacheID) {
      for (var i = 0; i < window.localStorage.length; i++) {
        var key = window.localStorage.key(i);

        if (key.indexOf(cachePrefix) === 0) {
          window.localStorage.removeItem(key);
          i--;
        }
      }

      window.localStorage.setItem(cacheKey, cacheID);
    }
  }

  this._cacheValidated = true;
};

EnyoLoader.prototype.loadFiles = function (paths, sync, params, callback, rootPath) {
  var _this2 = this;

  var _root = iLibResources;

  if (typeof rootPath !== 'undefined') {
    _root = rootPath;
  } else if (params && typeof params.root !== 'undefined') {
    _root = params.root; // Deprecated; to be removed in future
  }

  if (sync) {
    this.loadManifestsSync(_root);

    if (this.addPaths && Array.isArray(this.addPaths)) {
      var _iterator = _createForOfIteratorHelper(this.addPaths),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var addedRoot = _step.value;
          this.loadManifestsSync(addedRoot);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    var cache = {
      data: this._loadFilesCache(_root, paths)
    };
    var ret = [];

    var locdata = this._pathjoin(this.base, 'locale'); // synchronous


    paths.forEach(function (path, index) {
      if (this.webos && path.indexOf('zoneinfo') !== -1) {
        ret.push(this._createZoneFile(path));
      } else if (cache.data[index]) {
        ret.push(cache.data[index]);
      } else {
        var found = false;

        var handler = function handler(json, err) {
          if (!err && typeof json === 'object') {
            cache.update = true;
            ret.push(json);
            found = true;
          }
        };

        var handleAdditionalResourcesPath = function handleAdditionalResourcesPath(json, err) {
          if (found && !err && typeof json === 'object') {
            // Overwrite the _root/path result
            Object.assign(ret[ret.length - 1], json);
          }
        };

        if (this.isAvailable(_root, path)) {
          getSync(this._pathjoin(_root, path), handler);

          if (this.addPaths && Array.isArray(this.addPaths)) {
            var _iterator2 = _createForOfIteratorHelper(this.addPaths),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var _addedRoot = _step2.value;

                if (this.isAvailable(_addedRoot, path)) {
                  getSync(this._pathjoin(_addedRoot, path), handleAdditionalResourcesPath);
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        }

        if (!found && this.isAvailable(locdata, path)) {
          getSync(this._pathjoin(locdata, path), handler);
        }

        if (!found) {
          if (path === 'localeinfo.json') {
            // Use default locale info when xhr on root localeinfo.json fails/skips
            ret.push(_LocaleInfo["default"].defaultInfo);
          } else {
            // not there, so fill in a blank entry in the array
            // eslint-disable-next-line no-undefined
            ret.push(undefined);
          }
        }
      }
    }.bind(this));

    if (cache.update) {
      this._storeFilesCache(_root, paths, ret);
    }

    if (typeof callback === 'function') {
      callback.call(this, ret);
    }

    return ret;
  } else {
    // asynchronous
    var _cache = {
      data: this._loadFilesCache(_root, paths)
    };
    Promise.all(paths.map(function (path) {
      return _this2._loadFilesAsync(path, params, _cache);
    })).then(function (results) {
      if (_cache.update) {
        _this2._storeFilesCache(_root, paths, results);
      }

      if (typeof callback === 'function') {
        callback.call(_this2, results);
      }
    });
  }
};

EnyoLoader.prototype._handleManifest = function (dirpath, filepath, json) {
  var isAdditionalPath = typeof ILIB_ADDITIONAL_RESOURCES_PATH !== 'undefined' ? dirpath.includes(ILIB_ADDITIONAL_RESOURCES_PATH) : false; // star indicates there was no ilibmanifest.json, so always try to load files from
  // that dir

  if (json != null) {
    if (typeof window !== 'undefined' && window.localStorage) {
      window.localStorage.setItem(cachePrefix + filepath, JSON.stringify(json));
    } // Need to clear string cache


    this._clearStringsCache();

    this.manifest[dirpath] = json.files;
  } else if (isAdditionalPath) {
    // If the path is an ilib additional resources path and json is null then make it null
    // so that we prevent loading everything.
    this.manifest[dirpath] = [];

    if (typeof window !== 'undefined' && window.localStorage) {
      window.localStorage.setItem(cachePrefix + filepath, JSON.stringify(_defineProperty({}, timeStampKey, new Date().getTime())));
    }
  } else {
    this.manifest[dirpath] = '*';
  }

  return this.manifest[dirpath];
};

EnyoLoader.prototype._validateManifest = function (cachedManifest, filepath, sync) {
  if (cachedManifest) {
    var cachedTimeStamp = JSON.parse(cachedManifest)[timeStampKey];

    if (cachedTimeStamp) {
      var newManifest;

      if (sync) {
        getSync(filepath, function (json) {
          newManifest = json;
        });
      } else {
        get(filepath).then(function (json) {
          newManifest = json;
        });
      }

      if (newManifest === null && typeof ILIB_ADDITIONAL_RESOURCES_PATH !== 'undefined' && filepath.includes(ILIB_ADDITIONAL_RESOURCES_PATH)) {
        // If new manifest is null and the filepath has ILIB_ADDITIONAL_RESOURCES_PATH,
        // meaning we need to clear string cache
        this._clearStringsCache();

        return false;
      } else if (newManifest && newManifest[timeStampKey]) {
        // If new manifest has timestamp, compare old one and see if it's the same
        return cachedTimeStamp === newManifest[timeStampKey];
      } else {
        return false;
      }
    } else {
      // Use cachedManifest as usual
      return true;
    }
  }

  return false;
};

EnyoLoader.prototype._loadManifest = function (_root, subpath, sync) {
  var _this3 = this;

  if (!this.manifest) {
    this.manifest = {};
  }

  var dirpath = this._pathjoin(_root, subpath);

  var filepath = this._pathjoin(dirpath, 'ilibmanifest.json');

  var cachedManifest;

  if (typeof window !== 'undefined' && window.localStorage) {
    cachedManifest = window.localStorage.getItem(cachePrefix + filepath);
  }

  if (this._validateManifest(cachedManifest, filepath, sync)) {
    this.manifest[dirpath] = JSON.parse(cachedManifest).files;
    return sync ? this.manifest[dirpath] : Promise.resolve(this.manifest[dirpath]);
  }

  if (sync) {
    getSync(filepath, function (json) {
      _this3._handleManifest(dirpath, filepath, json);
    });
    return;
  }

  return get(filepath).then(function (json) {
    return _this3._handleManifest(dirpath, filepath, json);
  });
};

EnyoLoader.prototype.loadManifests = function (_root) {
  this._validateCache();

  return Promise.all([// standard ilib locale data
  this._loadManifest(this.base, 'locale'), // the app's resources dir
  this._loadManifest('', iLibResources), // maybe it's a custom root? If so, try to load
  // the manifest file first in case it is there
  this._loadManifest(_root, '')]);
};

EnyoLoader.prototype.loadManifestsSync = function (_root) {
  // load standard manifests
  if (!this.manifest) {
    this._validateCache();

    this._loadManifest(this.base, 'locale', true); // standard ilib locale data


    this._loadManifest('', iLibResources, true); // the app's resources dir

  }

  if (!this.manifest[_root]) {
    // maybe it's a custom root? If so, try to load
    // the manifest file first in case it is there
    this._loadManifest(_root, '', true);
  }
};

EnyoLoader.prototype.isAvailable = function (_root, path) {
  // util.print('enyo loader: isAvailable ' + path + '? ');
  // star means attempt to load everything because there was no manifest in that dir
  if (this.manifest[_root] === '*' || this.manifest[_root] && this.manifest[_root].indexOf(path) !== -1) {
    // util.print('true\n');
    return true;
  } // util.print('false\n');


  return false;
};

var _default = EnyoLoader;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/i18n/src/case.js":
/*!**********************************************!*\
  !*** ./node_modules/@enact/i18n/src/case.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.initCaseMappers = initCaseMappers;
exports.toUpperCase = exports.toLowerCase = void 0;

var _CaseMapper = _interopRequireDefault(__webpack_require__(/*! ilib/lib/CaseMapper */ "./node_modules/ilib/lib/CaseMapper.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var toLowerCaseMapper, toUpperCaseMapper;
/**
 * Set CaseMapper object references to ilib's current locale (its most recently set, by default)
 *
 * @returns {undefined}
 */

function initCaseMappers() {
  toLowerCaseMapper = new _CaseMapper["default"]({
    direction: 'tolower'
  });
  toUpperCaseMapper = new _CaseMapper["default"]({
    direction: 'toupper'
  });
}
/**
 * Locale-safely convert a string to lower case.
 *
 * @function
 * @param {String} inString String to convert to lower case
 * @returns {String} Lower-cased string
 */


var toLowerCase = function toLowerCase(inString) {
  if (inString != null) {
    return toLowerCaseMapper.map(inString.toString());
  }

  return inString;
};
/**
 * Locale-safely convert a string to upper case.
 *
 * @function
 * @param {String} inString String to convert to upper case
 * @returns {String} Upper-cased string
 */


exports.toLowerCase = toLowerCase;

var toUpperCase = function toUpperCase(inString) {
  if (inString != null) {
    return toUpperCaseMapper.map(inString.toString());
  }

  return inString;
};

exports.toUpperCase = toUpperCase;

/***/ }),

/***/ "./node_modules/@enact/i18n/src/dates.js":
/*!***********************************************!*\
  !*** ./node_modules/@enact/i18n/src/dates.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";
 // ilib doesn't load the non-Gregorian calendars and dates initially. To ensure they are packaged
// by Enact CLI, we've added explicit requires for each Date (which in turn requires the relevant
// Calendar). This is only necessary for builds not using the library-mode build of i18n which
// would have included everything

__webpack_require__(/*! ilib/lib/GregorianDate */ "./node_modules/ilib/lib/GregorianDate.js"); // not required (rimshot) but included for completeness


__webpack_require__(/*! ilib/lib/CopticDate */ "./node_modules/ilib/lib/CopticDate.js");

__webpack_require__(/*! ilib/lib/EthiopicDate */ "./node_modules/ilib/lib/EthiopicDate.js");

__webpack_require__(/*! ilib/lib/GregorianDate */ "./node_modules/ilib/lib/GregorianDate.js");

__webpack_require__(/*! ilib/lib/HanDate */ "./node_modules/ilib/lib/HanDate.js");

__webpack_require__(/*! ilib/lib/HebrewDate */ "./node_modules/ilib/lib/HebrewDate.js");

__webpack_require__(/*! ilib/lib/IslamicDate */ "./node_modules/ilib/lib/IslamicDate.js");

__webpack_require__(/*! ilib/lib/JulianDate */ "./node_modules/ilib/lib/JulianDate.js");

__webpack_require__(/*! ilib/lib/PersianDate */ "./node_modules/ilib/lib/PersianDate.js");

__webpack_require__(/*! ilib/lib/PersianAlgoDate */ "./node_modules/ilib/lib/PersianAlgoDate.js");

__webpack_require__(/*! ilib/lib/ThaiSolarDate */ "./node_modules/ilib/lib/ThaiSolarDate.js");

/***/ }),

/***/ "./node_modules/@enact/i18n/src/glue.js":
/*!**********************************************!*\
  !*** ./node_modules/@enact/i18n/src/glue.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var _ilib = _interopRequireDefault(__webpack_require__(/*! ilib */ "./node_modules/ilib/index.js"));

__webpack_require__(/*! ./dates */ "./node_modules/@enact/i18n/src/dates.js");

var _Loader = _interopRequireDefault(__webpack_require__(/*! ./Loader */ "./node_modules/@enact/i18n/src/Loader.js"));

var _locale = __webpack_require__(/*! ../locale */ "./node_modules/@enact/i18n/locale/locale.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/* global ILIB_ADDITIONAL_RESOURCES_PATH */

/*
 * glue.js - glue code to fit ilib into enyo
 *
 * Copyright © 2013-2014 LG Electronics, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


_ilib["default"].setLoaderCallback(new _Loader["default"]());

if (typeof ILIB_ADDITIONAL_RESOURCES_PATH !== 'undefined') {
  _ilib["default"].getLoader().addPath(ILIB_ADDITIONAL_RESOURCES_PATH);
}

if (typeof window === 'object' && typeof window.UILocale !== 'undefined') {
  // this is a hack until GF-1581 is fixed
  _ilib["default"].setLocale(window.UILocale);
} // we go ahead and run this once during loading of iLib settings are valid
// during the loads of later libraries.


(0, _locale.updateLocale)(null, true);

/***/ }),

/***/ "./node_modules/@enact/i18n/src/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@enact/i18n/src/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "default", ({
  enumerable: true,
  get: function get() {
    return _ilib["default"];
  }
}));

__webpack_require__(/*! ./glue */ "./node_modules/@enact/i18n/src/glue.js");

var _ilib = _interopRequireDefault(__webpack_require__(/*! ilib */ "./node_modules/ilib/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

/***/ }),

/***/ "./node_modules/@enact/i18n/src/packedbuffer.js":
/*!******************************************************!*\
  !*** ./node_modules/@enact/i18n/src/packedbuffer.js ***!
  \******************************************************/
/***/ (function(module) {

"use strict";

/*
 * packedbuffer.js - represent a packed buffer of bytes
 *
 * Copyright © 2014 LG Electronics, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a binary buffer of unsigned bytes that will be parsed in various ways. The buffer
 * can be decoded by reading various lengths of bytes and interpreting them as longs
 * or unsigned bytes, etc. The bytes are interpreted in big-endian (network) format.
 * @constructor
 * @param {string} buffer the binary buffer represented as a string
 */

var PackedBuffer = function PackedBuffer(buffer) {
  this.buffer = buffer;
  this.index = 0;
};
/**
 * Return the specified number of signed long integers from the current location in
 * the buffer as an array of numbers and advance the current pointer in the buffer.
 * This method will only return as many longs as are available in the rest of the
 * buffer.
 *
 * @param {number} num The number of longs to return
 * @returns {Array.<number>} the array of signed long integers
 */


PackedBuffer.prototype.getLongs = function (num) {
  var result;

  if (this.buffer && this.index < this.buffer.length) {
    result = [];

    for (var i = 0; i < num && this.index + 3 < this.buffer.length; i++) {
      var longnum = this.buffer[this.index] << 24 | this.buffer[this.index + 1] << 16 | this.buffer[this.index + 2] << 8 | this.buffer[this.index + 3];
      result.push(longnum);
      this.index += 4;
    }
  }

  return result;
};
/**
 * Return a signed long integer from the current location in
 * the buffer as an array of numbers and advance the current pointer in the buffer.
 * This method will only return a long if it is available in the buffer, otherwise
 * it will return undefined.
 *
 * @returns {number} the long at the current point in the buffer, or undefined if
 * there is not enough bytes left in the buffer to form a long
 */


PackedBuffer.prototype.getLong = function () {
  var longs = this.getLongs(1);

  if (longs && longs.length > 0) {
    return longs[0];
  }
};
/**
 * Return the specified number of signed byte integers from the current location in
 * the buffer as an array of numbers and advance the current pointer in the buffer.
 * This method will only return as many bytes as are available in the rest of the
 * buffer.
 *
 * @param {number|undefined} num The number of bytes to return
 * @returns {Array.<number>} the array of signed byte integers
 */


PackedBuffer.prototype.getBytes = function (num) {
  var result;

  if (this.buffer && this.index < this.buffer.length) {
    result = [];

    for (var i = 0; i < num && this.index < this.buffer.length; i++) {
      var bytenum = this.buffer[this.index++];

      if (bytenum & 0x80) {
        bytenum -= 0x100;
      }

      result.push(bytenum);
    }
  }

  return result;
};
/**
 * Return a signed byte integer from the current location in
 * the buffer as an array of numbers and advance the current pointer in the buffer.
 * This method will only return a byte if it is available in the buffer, otherwise
 * it will return undefined.
 *
 * @returns {number} the byte at the current point in the buffer, or undefined if
 * there is not enough bytes left in the buffer to form a byte
 */


PackedBuffer.prototype.getByte = function () {
  var bytes = this.getBytes(1);

  if (bytes && bytes.length > 0) {
    return bytes[0];
  }
};
/**
 * Return the specified number of unsigned byte integers from the current location in
 * the buffer as an array of numbers and advance the current pointer in the buffer.
 * This method will only return as many bytes as are available in the rest of the
 * buffer.
 *
 * @param {number} num The number of bytes to return
 * @returns {Array.<number>} the array of unsigned byte integers
 */


PackedBuffer.prototype.getUnsignedBytes = function (num) {
  var result;

  if (this.buffer && this.index < this.buffer.length) {
    result = [];

    for (var i = 0; i < num && this.index < this.buffer.length; i++) {
      result.push(this.buffer[this.index++]);
    }
  }

  return result;
};
/**
 * Return a string made out of the given number of bytes and convert
 * from UTF-8 to UTF-16.
 *
 * @param {number} num The number of bytes to make a string out of
 * @returns {string} a string made out of the given bytes
 */


PackedBuffer.prototype.getString = function (num) {
  var arr = this.getUnsignedBytes(num);
  var str = '';

  for (var i = 0; i < arr.length; i++) {
    str += String.fromCharCode(arr[i]);
  }

  return str;
};
/**
 * Advance the current pointer in the buffer by the specified number of
 * bytes in the string.
 *
 * @param {number} num The number of bytes to skip
 * @returns {void}
 */


PackedBuffer.prototype.skip = function (num) {
  this.index += num;
};

module.exports = PackedBuffer;

/***/ }),

/***/ "./node_modules/@enact/i18n/src/resBundle.js":
/*!***************************************************!*\
  !*** ./node_modules/@enact/i18n/src/resBundle.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.clearResBundle = clearResBundle;
exports.createResBundle = createResBundle;
exports.getIStringFromBundle = getIStringFromBundle;
exports.getResBundle = getResBundle;
exports.setResBundle = setResBundle;

var _IString = _interopRequireDefault(__webpack_require__(/*! ilib/lib/IString */ "./node_modules/ilib/lib/IString.js"));

var _ResBundle = _interopRequireDefault(__webpack_require__(/*! ilib/lib/ResBundle */ "./node_modules/ilib/lib/ResBundle.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
} // The ilib.ResBundle for the active locale used by $L


var resBundle;
/**
 * Returns the current ilib.ResBundle
 *
 * @returns {ilib.ResBundle} Current ResBundle
 */

function getResBundle() {
  return resBundle;
}
/**
 * Creates a new ilib.ResBundle for string translation
 *
 * @param  {ilib.Locale} locale Locale for ResBundle
 *
 * @returns {Promise|ResBundle} Resolves with a new ilib.ResBundle
 */


function createResBundle(options) {
  var opts = _objectSpread({
    type: 'html',
    name: 'strings',
    lengthen: true
  }, options);

  if (!opts.onLoad) return; // eslint-disable-next-line no-new

  new _ResBundle["default"](_objectSpread(_objectSpread({}, opts), {}, {
    onLoad: function onLoad(bundle) {
      opts.onLoad(bundle || null);
    }
  }));
}
/**
 * Set the locale for the strings that $L loads. This may reload the
 * string resources if necessary.
 *
 * @param {string} spec the locale specifier
 * @returns {ilib.ResBundle} Current ResBundle
 */


function setResBundle(bundle) {
  return resBundle = bundle;
}
/**
 * Deletes the current bundle object of strings and clears the cache.
 * @returns {undefined}
 */


function clearResBundle() {
  delete _ResBundle["default"].strings;
  delete _ResBundle["default"].sysres;
  resBundle = null;
}
/**
 * Retrieves an IString from a resource bundle by key.
 *
 * If the bundle doesn't exist, the key is returned wrapped by IString.
 *
 * @param {String|Object} str Key for localized string
 * @param {ResBundl} rb ilib resource bundle
 * @returns	{IString} The string value wrapped by an IString
 */


function getIStringFromBundle(str, rb) {
  var isObject = typeof str === 'object';

  if (rb) {
    return isObject ? rb.getString(str.value, str.key) : rb.getString(str);
  }

  return new _IString["default"](isObject ? str.value : str);
}

/***/ }),

/***/ "./node_modules/@enact/i18n/src/wrapIlibCallback.js":
/*!**********************************************************!*\
  !*** ./node_modules/@enact/i18n/src/wrapIlibCallback.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.wrapIlibCallback = exports["default"] = void 0;

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var invoke = function invoke(fn, options, callback) {
  var _onLoad = options.onLoad;
  fn(_objectSpread(_objectSpread({}, options), {}, {
    onLoad: function onLoad(result) {
      callback(result);
      if (_onLoad) _onLoad(result);
    }
  }));
};

var wrapIlibCallback = function wrapIlibCallback(fn) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$sync = options.sync,
      sync = _options$sync === void 0 ? false : _options$sync;

  if (!fn) {
    return sync ? null : Promise.resolve(null);
  }

  if (sync) {
    var value = null;
    invoke(fn, options, function (v) {
      return value = v;
    });
    return value;
  }

  return new Promise(function (resolve) {
    return invoke(fn, options, resolve);
  });
};

exports.wrapIlibCallback = wrapIlibCallback;
var _default = wrapIlibCallback;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/i18n/src/zoneinfo.js":
/*!**************************************************!*\
  !*** ./node_modules/@enact/i18n/src/zoneinfo.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

/* eslint-env browser,es6 */

/*
 * zoneinfo.js - represent a binary zone info file
 *
 * Copyright © 2014 LG Electronics, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * The portion of this code that parses the zone info file format is derived
 * from the code in the node-zoneinfo project by Gregory McWhirter licensed
 * under the MIT license:
 *
 * Copyright (c) 2013 Gregory McWhirter
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject
 * to the following conditions:

 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

var PackedBuffer = __webpack_require__(/*! ./packedbuffer.js */ "./node_modules/@enact/i18n/src/packedbuffer.js");

var _platform = typeof PalmSystem !== 'undefined' ? 'webos' : 'browser';
/**
 * Represents a binary zone info file of the sort that the Unix Zone Info Compiler
 * produces.
 * @constructor
 * @param {string} path path to the file to be loaded
 * @param {number} year year of the zone info rules needed
 */


var ZoneInfoFile = function ZoneInfoFile(path) {
  var that = this;

  switch (_platform) {
    /*
    Uncomment and use this when enyo works for binary load.
    case 'enyo':
    	let ajax = new enyo.Ajax({
    		xhrFields: {
    			responseType:'arraybuffer'
    		},
    		cacheBust: false,
    		sync: true,
    		handleAs: 'binary',
    		url: 'file://' + path
    	});
    	ajax.response(this, function (s, r) {
    		let byteArray = new Uint8Array(r);
    		// console.log('ZoneInfoFile bytes received: ' + byteArray.length);
    		that._parseInfo(byteArray);
    	});
    	//ajax.error(this, function (s, r) {
    	//	console.log('ZoneInfoFile: failed to load files ' + JSON.stringify(s) + ' ' + r);
    	//});
    	ajax.go();
    	break;
    */
    default:
      {
        // use normal web techniques for sync binary data fetching
        // see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data
        var req = new XMLHttpRequest();
        req.open('GET', 'file:' + path, false);
        req.overrideMimeType('text/plain; charset=x-user-defined');

        req.onload = function () {
          var byteArray = new Uint8Array(req.response.length);

          for (var i = 0; i < req.response.length; i++) {
            byteArray[i] = req.response.charCodeAt(i) & 0xff;
          } // console.log('ZoneInfoFile bytes received: ' + byteArray.length);


          that._parseInfo(byteArray);
        };

        req.onerror = function () {
          throw new Error('Cannot load file ' + path);
        };

        req.send();
        break;
      }
  }
};
/**
 * @private
 * Parse the binary buffer to find the zone info
 * @param {Buffer} buffer The buffer to process
 * @returns {void}
 */


ZoneInfoFile.prototype._parseInfo = function (buffer) {
  var packed = new PackedBuffer(buffer); // The time zone information files used by tzset(3)
  // begin with the magic characters 'TZif' to identify
  // them as time zone information files, followed by
  // sixteen bytes reserved for future use, followed by
  // six four-byte values of type long, written in a
  // ''standard'' byte order (the high-order byte
  // of the value is written first).

  if (packed.getString(4) !== 'TZif') {
    throw new Error('file format not recognized');
  } else {
    // ignore 16 bytes
    packed.skip(16);
    /* eslint-disable camelcase */
    // The number of UTC/local indicators stored in the file.

    var tzh_ttisgmtcnt = packed.getLong(); // The number of standard/wall indicators stored in the file.

    var tzh_ttisstdcnt = packed.getLong(); // The number of leap seconds for which data is stored in the file.

    var tzh_leapcnt = packed.getLong(); // The number of 'transition times' for which data is stored in the file.

    var tzh_timecnt = packed.getLong(); // The number of 'local time types' for which data is stored in the file (must not be zero).

    var tzh_typecnt = packed.getLong(); // The number of characters of 'time zone abbreviation strings' stored in the file.

    var tzh_charcnt = packed.getLong();
    this.transitionTimes = tzh_timecnt ? packed.getLongs(tzh_timecnt) : [];
    this.transitionTimes = this.transitionTimes.map(function (item) {
      return item * 1000;
    }); // these are indexes into the zonesInfo that correspond to each transition time

    this.ruleIndex = tzh_timecnt ? packed.getUnsignedBytes(tzh_timecnt) : [];
    this.zoneInfo = [];

    for (var i = 0; i < tzh_typecnt; i++) {
      this.zoneInfo.push({
        offset: Math.floor(packed.getLong() / 60),
        // offset in seconds, so convert to minutes
        isdst: !!packed.getByte(),
        abbreviationIndex: packed.getByte()
      });
    }

    var allAbbreviations = packed.getString(tzh_charcnt);

    for (var _i = 0; _i < tzh_typecnt; _i++) {
      var abbreviation = allAbbreviations.substring(this.zoneInfo[_i].abbreviationIndex);
      this.zoneInfo[_i].abbreviation = abbreviation.substring(0, abbreviation.indexOf('\x00'));
    } // ignore the leap seconds


    if (tzh_leapcnt) {
      packed.skip(tzh_leapcnt * 2);
    } // skip the standard/wall time indicators


    if (tzh_ttisstdcnt) {
      packed.skip(tzh_ttisstdcnt);
    } // ignore the UTC/local time indicators -- everything should be UTC


    if (tzh_ttisgmtcnt) {
      packed.skip(tzh_ttisgmtcnt);
    } // finished reading
    // Replace ttinfo indexes for ttinfo objects.


    var that = this;
    this.ruleIndex = this.ruleIndex.map(function (item) {
      return {
        offset: that.zoneInfo[item].offset,
        isdst: that.zoneInfo[item].isdst,
        abbreviation: that.zoneInfo[item].abbreviation
      };
    }); // calculate the dst savings for each daylight time

    for (var _i2 = 0; _i2 < tzh_timecnt; _i2++) {
      if (_i2 > 0 && this.ruleIndex[_i2].isdst) {
        this.ruleIndex[_i2].savings = this.ruleIndex[_i2].offset - this.ruleIndex[_i2 - 1].offset;
      }
    } // Set standard, dst, and before ttinfos. before will be
    // used when a given time is before any transitions,
    // and will be set to the first non-dst ttinfo, or to
    // the first dst, if all of them are dst.


    if (!this.transitionTimes.length) {
      this.standardTime = this.zoneInfo[0];
    } else {
      for (var j = tzh_timecnt - 1; j > -1; j--) {
        var tti = this.ruleIndex[j];

        if (!this.standardTime && !tti.isdst) {
          this.standardTime = tti;
        } else if (!this.daylightTime && tti.isdst) {
          this.daylightTime = tti;
        }

        if (this.daylightTime && this.standardTime) {
          break;
        }
      }

      if (this.daylightTime && !this.standardTime) {
        this.standardTime = this.daylightTime;
      }

      for (var k = this.zoneInfo.length - 1; k > 0; k--) {
        if (!this.zoneInfo[k].isdst) {
          this.defaultTime = this.zoneInfo[k];
          break;
        }
      }
    }

    if (!this.defaultTime) {
      this.defaultTime = this.zoneInfo[this.zoneInfo.length - 1];
    }
  }
};
/**
 * Binary search a sorted array of numbers for a particular target value.
 * If the exact value is not found, it returns the index of the largest
 * entry that is smaller than the given target value.<p>
 *
 * @param {number} target element being sought
 * @param {Array} arr the array being searched
 * @returns {number} the index of the array into which the value would fit if
 * inserted, or -1 if given array is not an array or the target is not
 * a number
 */


ZoneInfoFile.prototype.bsearch = function (target, arr) {
  if (typeof arr === 'undefined' || !arr || typeof target === 'undefined' || target < arr[0]) {
    return -1;
  } // greater than the end of the array


  if (target > arr[arr.length - 1]) {
    return arr.length - 1;
  }

  var high = arr.length - 1,
      low = 0,
      mid = 0,
      value;

  while (low <= high) {
    mid = Math.floor((high + low) / 2);
    value = arr[mid] - target;

    if (value > 0) {
      high = mid - 1;
    } else if (value < 0) {
      low = mid + 1;
    } else {
      return mid;
    }
  }

  return high;
};
/**
 * Return whether or not this zone uses DST in the given year.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {boolean} true if the zone uses DST in the given year
 */


ZoneInfoFile.prototype.usesDST = function (date) {
  var thisYear = date.getTime();
  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year
  // search for the zone that was effective Jan 1 of this year
  // to Jan 1 of next year, and if any of the infos is DST, then
  // this zone supports DST in the given year.

  var index = this.bsearch(thisYear, this.transitionTimes);

  if (index !== -1) {
    while (index < this.transitionTimes.length && this.transitionTimes[index] < nextYear) {
      if (this.ruleIndex[index++].isdst) {
        return true;
      }
    }
  }

  return false;
};
/**
 * Return the raw offset from UTC that this zone uses at the given time.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {number} offset from from UTC in number of minutes. Negative
 * numbers are west of Greenwich, positive are east of Greenwich
 */


ZoneInfoFile.prototype.getRawOffset = function (date) {
  var thisYear = date.getTime();
  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year

  var index = this.bsearch(thisYear, this.transitionTimes);
  var offset = this.defaultTime.offset;

  if (index > -1) {
    while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
      index++;
    }

    if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {
      offset = this.ruleIndex[index].offset;
    }
  }

  return offset;
};
/**
 * If this zone uses DST in the given year, return the DST savings
 * in use. If the zone does not use DST in the given year, this
 * method will return 0.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {number} number of minutes in DST savings if the zone
 * uses DST in the given year, or zero otherwise
 */


ZoneInfoFile.prototype.getDSTSavings = function (date) {
  var thisYear = date.getTime();
  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year
  // search for all transitions between now and one year
  // from now, and calculate the difference in DST (if any)

  var index = this.bsearch(thisYear, this.transitionTimes);
  var savings = 0;

  if (index > -1) {
    while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
      index++;
    }

    if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {
      savings = this.ruleIndex[index].savings;
    }
  }

  return savings;
};
/**
 * Return the start date/time of DST if this zone uses
 * DST in the given year.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {number} unixtime representation of the start
 * of DST in the given year, or -1 if the zone does not
 * use DST in the given year
 */


ZoneInfoFile.prototype.getDSTStartDate = function (date) {
  var year = date.getFullYear();
  var thisYear = new Date(year, 0, 1).getTime();
  var nextYear = new Date(year + 1, 0, 1).getTime(); // search for all transitions between Jan 1 of this year
  // to Jan 1 of next year, and calculate the difference
  // in DST (if any)

  var index = this.bsearch(thisYear, this.transitionTimes);
  var startDate = -1;

  if (index > -1) {
    if (this.transitionTimes[index] < thisYear) {
      index++; // start in this year instead of the previous year
    }

    while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
      index++;
    }

    if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {
      startDate = this.transitionTimes[index];
    }
  }

  return startDate;
};
/**
 * Return the end date/time of DST if this zone uses
 * DST in the given year.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {number} unixtime representation of the end
 * of DST in the given year, or -1 if the zone does not
 * use DST in the given year
 */


ZoneInfoFile.prototype.getDSTEndDate = function (date) {
  var year = date.getFullYear();
  var thisYear = new Date(year, 0, 1).getTime();
  var nextYear = new Date(year + 1, 0, 1).getTime(); // search for all transitions between Jan 1 of this year
  // to Jan 1 of next year, and calculate the difference
  // in DST (if any)

  var index = this.bsearch(thisYear, this.transitionTimes);
  var endDate = -1;

  if (index > -1) {
    if (this.transitionTimes[index] < thisYear) {
      index++; // start in this year instead of the previous year
    }

    while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
      index++;
    }

    if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {
      endDate = this.transitionTimes[index];
    }
  }

  return endDate;
};
/**
 * Return the abbreviation used by this zone in standard
 * time.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {string} a string representing the abbreviation
 * used in this time zone during standard time
 */


ZoneInfoFile.prototype.getAbbreviation = function (date) {
  var thisYear = date.getTime();
  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year
  // search for all transitions between now and one year from now, and calculate the difference
  // in DST (if any)

  var abbr;

  if (this.transitionTimes.length > 0) {
    var index = this.bsearch(thisYear, this.transitionTimes);
    abbr = this.ruleIndex[index].abbreviation;

    if (index > -1) {
      while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
        index++;
      }

      if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {
        abbr = this.ruleIndex[index].abbreviation;
      }
    }
  } else {
    abbr = this.standardTime.abbreviation;
  }

  return abbr;
};
/**
 * Return the abbreviation used by this zone in daylight
 * time. If the zone does not use DST in the given year,
 * this returns the same thing as getAbbreviation().
 *
 * @param {Date} date the Gregorian date to test
 * @returns {string} a string representing the abbreviation
 * used in this time zone during daylight time
 */


ZoneInfoFile.prototype.getDSTAbbreviation = function (date) {
  var thisYear = date.getTime();
  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year
  // search for all transitions between now and one year from now, and calculate the difference
  // in DST (if any)

  var abbr;

  if (this.transitionTimes.length > 0) {
    var index = this.bsearch(thisYear, this.transitionTimes);
    abbr = this.ruleIndex[index].abbreviation;

    if (index > -1) {
      while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
        index++;
      }

      if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {
        abbr = this.ruleIndex[index].abbreviation;
      }
    }
  } else {
    abbr = this.standardTime.abbreviation;
  }

  return abbr;
};
/**
 * Return the zone information for the given date in ilib
 * format.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {Object} an object containing the zone information
 * for the given date in the format that ilib can use directly
 */


ZoneInfoFile.prototype.getIlibZoneInfo = function (date) {
  function minutesToStr(min) {
    var hours = Math.floor(min / 60);
    var minutes = min - hours * 60;
    return hours + ':' + minutes;
  }

  function unixtimeToJD(millis) {
    return 2440587.5 + millis / 86400000;
  }

  var res = {
    'o': minutesToStr(this.getRawOffset(date))
  };

  if (this.usesDST(date)) {
    res.f = '{c}';
    res.e = {
      'c': this.getAbbreviation(date),
      'j': unixtimeToJD(this.getDSTEndDate(date))
    };
    res.s = {
      'c': this.getDSTAbbreviation(date),
      'j': unixtimeToJD(this.getDSTStartDate(date)),
      'v': minutesToStr(this.getDSTSavings(date))
    };
  } else {
    res.f = this.getAbbreviation(date);
  }

  return res;
};

module.exports = ZoneInfoFile;

/***/ }),

/***/ "./node_modules/@enact/i18n/util/util.js":
/*!***********************************************!*\
  !*** ./node_modules/@enact/i18n/util/util.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.toCapitalized = exports.isRtlText = void 0;
Object.defineProperty(exports, "toLowerCase", ({
  enumerable: true,
  get: function get() {
    return _case.toLowerCase;
  }
}));
Object.defineProperty(exports, "toUpperCase", ({
  enumerable: true,
  get: function get() {
    return _case.toUpperCase;
  }
}));
exports.toWordCase = void 0;

__webpack_require__(/*! ../src/glue */ "./node_modules/@enact/i18n/src/glue.js");

var _case = __webpack_require__(/*! ../src/case */ "./node_modules/@enact/i18n/src/case.js");
/**
 * A collection of locale-aware text utility function.
 *
 * @module i18n/util
 * @exports isRtlText
 * @exports toCapitalized
 * @exports toLowerCase
 * @exports toUpperCase
 * @exports toWordCase
 */

/*
 * This regex pattern is used by the [isRtlText()]{@link i18n/utils.isRtlText} function.
 *
 * Arabic: \u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFE
 * Hebrew: \u0590-\u05FF\uFB1D-\uFB4F
 *
 * @private
 */


var rtlPattern = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFE\u0590-\u05FF\uFB1D-\uFB4F]/;
/**
 * Takes content `str` and determines whether or not it is [RTL]{@link /docs/developer-guide/glossary/#rtl}.
 *
 * @function
 * @memberof i18n/util
 * @param {String} str - A string to check the [RTL]{@link /docs/developer-guide/glossary/#rtl}-ness of.
 * @returns {Boolean} `true` if `str` should be RTL; `false` if not.
 * @public
 */

var isRtlText = function isRtlText(str) {
  if (typeof str === 'string') {
    return rtlPattern.test(str);
  }

  return false;
};
/**
 * Capitalizes the first letter of a given string (locale aware).
 *
 * @function
 * @memberof i18n/util
 * @param {String} str - The string to capitalize.
 * @returns {String} The capitalized string.
 * @public
 */


exports.isRtlText = isRtlText;

var toCapitalized = function toCapitalized(str) {
  return (0, _case.toUpperCase)(str.slice(0, 1)) + str.slice(1);
};
/**
 * Capitalizes every word in a string. Words are separated by spaces, not necessarily
 * word-breaks (locale aware).
 *
 * @function
 * @memberof i18n/util
 * @param {String} str - The string to capitalize.
 * @returns {String} The word-cased string.
 * @public
 */


exports.toCapitalized = toCapitalized;

var toWordCase = function toWordCase(str) {
  return str.split(' ').map(toCapitalized).join(' ');
};
/**
 * Locale-safely convert a string to lower case.
 *
 * @name toLowerCase
 * @function
 * @memberof i18n/util
 * @param {String} inString String to convert to lower case
 * @returns {String} Lower-cased string
 * @public
 */

/**
 * Locale-safely convert a string to upper case.
 *
 * @name toUpperCase
 * @function
 * @memberof i18n/util
 * @param {String} inString String to convert to upper case
 * @returns {String} Upper-cased string
 * @public
 */


exports.toWordCase = toWordCase;

/***/ }),

/***/ "./node_modules/@enact/sandstone/ActionGuide/ActionGuide.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ActionGuide/ActionGuide.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ActionGuideDecorator = exports.ActionGuideBase = exports.ActionGuide = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _Pure = _interopRequireDefault(__webpack_require__(/*! @enact/ui/internal/Pure */ "./node_modules/@enact/ui/internal/Pure/Pure.js"));

var _Touchable = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Touchable */ "./node_modules/@enact/ui/Touchable/Touchable.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _Icon = _interopRequireDefault(__webpack_require__(/*! ../Icon */ "./node_modules/@enact/sandstone/Icon/Icon.js"));

var _Marquee = __webpack_require__(/*! ../Marquee */ "./node_modules/@enact/sandstone/Marquee/Marquee.js");

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _ActionGuideModule = _interopRequireDefault(__webpack_require__(/*! ./ActionGuide.module.css */ "./node_modules/@enact/sandstone/ActionGuide/ActionGuide.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["icon", "children", "css"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var TouchableDiv = (0, _Touchable["default"])('div');
/**
 * An Action Guide component.
 *
 * This component is most often not used directly but may be composed within another component as it
 * is within [ActionGuide]{@link sandstone/ActionGuide.ActionGuide}.
 *
 * @class ActionGuideBase
 * @memberof sandstone/ActionGuide
 * @ui
 * @public
 */

var ActionGuideBase = (0, _kind["default"])({
  name: 'ActionGuide',
  propTypes:
  /** @lends sandstone/ActionGuide.ActionGuideBase.prototype */
  {
    /**
     * The contents for the action guide.
     *
     * @type {String}
     * @public
     */
    children: _propTypes["default"].string,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `actionGuide` - The root component class
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,

    /**
     * The icon displayed within the action guide.
     *
     * @type {String}
     * @default 'arrowsmalldown'
     * @public
     */
    icon: _propTypes["default"].string
  },
  defaultProps: {
    icon: 'arrowsmalldown'
  },
  styles: {
    css: _ActionGuideModule["default"],
    className: 'actionGuide',
    publicClassNames: ['actionGuide']
  },
  render: function render(_ref) {
    var icon = _ref.icon,
        children = _ref.children,
        css = _ref.css,
        rest = _objectWithoutProperties(_ref, _excluded);

    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(TouchableDiv, _objectSpread(_objectSpread({}, rest), {}, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon["default"], {
        size: "small",
        className: css.icon,
        children: icon
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Marquee.Marquee, {
        className: css.label,
        marqueeOn: "render",
        alignment: "center",
        children: children
      })]
    }));
  }
});
/**
 * Applies Sandstone specific behaviors to [ActionGuide]{@link sandstone/ActionGuide.ActionGuideBase}.
 *
 * @hoc
 * @memberof sandstone/ActionGuide
 * @mixes sandstone/Skinnable.Skinnable
 * @public
 */

exports.ActionGuideBase = ActionGuideBase;
var ActionGuideDecorator = (0, _compose["default"])(_Pure["default"], _Skinnable["default"]);
/**
 * An Action Guide component, ready to use in Sandstone applications.
 *
 * `ActionGuide` may be used to display text and icon to describe an action.
 *
 * Usage:
 * ```
 * <ActionGuide icon="arrowlargedown">Hello</ActionGuide>
 * ```
 *
 * @class ActionGuide
 * @memberof sandstone/ActionGuide
 * @extends sandstone/ActionGuide.ActionGuideBase
 * @mixes sandstone/ActionGuide.ActionGuideDecorator
 * @ui
 * @public
 */

exports.ActionGuideDecorator = ActionGuideDecorator;
var ActionGuide = ActionGuideDecorator(ActionGuideBase);
exports.ActionGuide = ActionGuide;
var _default = ActionGuide;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/Button/Button.js":
/*!********************************************************!*\
  !*** ./node_modules/@enact/sandstone/Button/Button.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ButtonDecorator = exports.ButtonBase = exports.Button = void 0;

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _Spottable = _interopRequireDefault(__webpack_require__(/*! @enact/spotlight/Spottable */ "./node_modules/@enact/spotlight/Spottable/Spottable.js"));

var _Button = __webpack_require__(/*! @enact/ui/Button */ "./node_modules/@enact/ui/Button/Button.js");

var _Pure = _interopRequireDefault(__webpack_require__(/*! @enact/ui/internal/Pure */ "./node_modules/@enact/ui/internal/Pure/Pure.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _Icon = _interopRequireDefault(__webpack_require__(/*! ../Icon */ "./node_modules/@enact/sandstone/Icon/Icon.js"));

var _Marquee = __webpack_require__(/*! ../Marquee */ "./node_modules/@enact/sandstone/Marquee/Marquee.js");

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _TooltipDecorator = _interopRequireDefault(__webpack_require__(/*! ../TooltipDecorator */ "./node_modules/@enact/sandstone/TooltipDecorator/TooltipDecorator.js"));

var _ButtonModule = _interopRequireDefault(__webpack_require__(/*! ./Button.module.css */ "./node_modules/@enact/sandstone/Button/Button.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["css"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * A button component.
 *
 * This component is most often not used directly but may be composed within another component as it
 * is within [Button]{@link sandstone/Button.Button}.
 *
 * @class ButtonBase
 * @memberof sandstone/Button
 * @extends ui/Button.ButtonBase
 * @ui
 * @public
 */


var ButtonBase = (0, _kind["default"])({
  name: 'Button',
  propTypes:
  /** @lends sandstone/Button.ButtonBase.prototype */
  {
    /**
     * The background opacity of this button.
     *
     * Text buttons and icon+text buttons, by default are opaque, while icon-only buttons
     * default to transparent. This value can be overridden by setting this prop.
     *
     * Valid values are: `'opaque'`, and `'transparent'`.
     *
     * @type {('opaque'|'transparent')}
     * @default 'opaque'
     * @public
     */
    backgroundOpacity: _propTypes2["default"].oneOf(['opaque', 'transparent']),

    /**
     * Enables the `collapsed` feature.
     *
     * This requires that both the text and [icon]{@link sandstone/Button.Button#icon} are
     * defined.
     *
     * Use [collapsed]{@link sandstone/Button.Button#collapsed} to toggle the collapsed state.
     *
     * @type {Boolean}
     * @default false
     * @see {@link sandstone/Button.Button#collapsed}
     * @private
     */
    collapsable: _propTypes2["default"].bool,

    /**
     * Toggles the collapsed state of this button, down to just its icon.
     *
     * This requires that [collapsable]{@link sandstone/Button.Button#collapsable} is enabled
     * and both the text and [icon]{@link sandstone/Button.Button#icon} are defined.
     *
     * @type {Boolean}
     * @default false
     * @see {@link sandstone/Button.Button#collapsable}
     * @private
     */
    collapsed: _propTypes2["default"].bool,

    /**
     * The color of the underline beneath button's content.
     *
     * Accepts one of the following color names, which correspond with the colored buttons on a
     * standard remote control: `'red'`, `'green'`, `'yellow'`, `'blue'`.
     *
     * @type {('red'|'green'|'yellow'|'blue')}
     * @public
     */
    color: _propTypes2["default"].oneOf(['red', 'green', 'yellow', 'blue']),

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `button` - The root class name
     * * `bg` - The background node of the button
     * * `large` - Applied to a `size='large'` button
     * * `selected` - Applied to a `selected` button
     * * `small` - Applied to a `size='small'` button
     *
     * @type {Object}
     * @public
     */
    // `client` was intentionally excluded from the above documented exported classes as they do
    // not appear to provide value to the end-developer, but are needed by PopupTabLayout
    // internally for its design guidelines. Same for `pressed` which is used by Dropdown to
    // nullify the key-press activate animation.
    css: _propTypes2["default"].object,

    /**
     * Set the visual effect applied to the button when focused.
     *
     * @type {('expand'|'static')}
     * @default 'expand'
     * @private
     */
    focusEffect: _propTypes2["default"].oneOf(['expand', 'static']),

    /**
     * The component used to render the [icon]{@link sandstone/Button.ButtonBase.icon}.
     *
     * This component will receive the `icon` class to customize its styling.
     *
     * @type {Component|Node}
     * @private
     */
    iconComponent: _propTypes["default"].componentOverride,

    /**
     * True if button is an icon only button.
     *
     * @type {Boolean}
     * @default false
     * @private
     */
    iconOnly: _propTypes2["default"].bool,

    /**
     * Specifies on which side (`'before'` or `'after'`) of the text the icon appears.
     *
     * @type {('before'|'after')}
     * @default 'before'
     * @public
     */
    iconPosition: _propTypes2["default"].oneOf(['before', 'after']),

    /**
     * Boolean controlling whether this component should enforce the "minimum width" rules.
     *
     * *NOTE*: If you don't specify this prop, it works as `false` for icon only Button
     * and as `true` for other Buttons.
     *
     * @type {Boolean}
     * @public
     */
    minWidth: _propTypes2["default"].bool,

    /**
     * The size of the button.
     *
     * @type {('large'|'small')}
     * @default 'large'
     * @public
     */
    size: _propTypes2["default"].oneOf(['large', 'small'])
  },
  defaultProps: {
    backgroundOpacity: null,
    collapsable: false,
    collapsed: false,
    focusEffect: 'expand',
    iconComponent: _Icon["default"],
    iconOnly: false,
    iconPosition: 'before',
    size: 'large'
  },
  styles: {
    css: _ButtonModule["default"],
    publicClassNames: ['button', 'bg', 'client', 'hasIcon', 'icon', 'iconAfter', 'iconBefore', 'large', 'pressed', 'selected', 'small']
  },
  computed: {
    className: function className(_ref) {
      var backgroundOpacity = _ref.backgroundOpacity,
          collapsable = _ref.collapsable,
          collapsed = _ref.collapsed,
          color = _ref.color,
          focusEffect = _ref.focusEffect,
          iconOnly = _ref.iconOnly,
          iconPosition = _ref.iconPosition,
          size = _ref.size,
          styler = _ref.styler;
      return styler.append({
        hasColor: color,
        iconOnly: iconOnly,
        collapsable: collapsable,
        collapsed: collapsed
      }, backgroundOpacity || (iconOnly ? 'transparent' : 'opaque'), // Defaults to opaque, unless otherwise specified
      color, "focus".concat((0, _util.cap)(focusEffect)), // iconBefore/iconAfter only applies when using text and an icon
      !iconOnly && "icon".concat((0, _util.cap)(iconPosition)), size);
    },
    minWidth: function minWidth(_ref2) {
      var iconOnly = _ref2.iconOnly,
          _minWidth = _ref2.minWidth;
      return _minWidth != null ? _minWidth : !iconOnly;
    }
  },
  render: function render(_ref3) {
    var css = _ref3.css,
        rest = _objectWithoutProperties(_ref3, _excluded);

    delete rest.backgroundOpacity;
    delete rest.color;
    delete rest.collapsable;
    delete rest.collapsed;
    delete rest.iconOnly;
    delete rest.iconPosition;
    delete rest.focusEffect;
    return _Button.ButtonBase.inline(_objectSpread(_objectSpread({
      'data-webos-voice-intent': 'Select'
    }, rest), {}, {
      css: css
    }));
  }
});
/**
 * A higher-order component that determines if it is a button that only displays an icon.
 *
 * @class IconButtonDecorator
 * @memberof sandstone/Button
 * @hoc
 * @private
 */

exports.ButtonBase = ButtonBase;
var IconButtonDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  return (0, _kind["default"])({
    name: 'IconButtonDecorator',
    computed: {
      iconOnly: function iconOnly(_ref4) {
        var children = _ref4.children;
        return _react.Children.toArray(children).filter(Boolean).length === 0;
      }
    },
    render: function render(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
    }
  });
});
/**
 * Applies Sandstone specific behaviors to [Button]{@link sandstone/Button.ButtonBase} components.
 *
 * @hoc
 * @memberof sandstone/Button
 * @mixes sandstone/Marquee.MarqueeDecorator
 * @mixes ui/Button.ButtonDecorator
 * @mixes spotlight/Spottable.Spottable
 * @mixes sandstone/Skinnable.Skinnable
 * @public
 */

var ButtonDecorator = (0, _compose["default"])(_Pure["default"], IconButtonDecorator, (0, _TooltipDecorator["default"])({
  tooltipDestinationProp: 'decoration'
}), // Future note: This should eventually be conditionally applied via hooks (after refactoring)
(0, _Marquee.MarqueeDecorator)({
  css: _ButtonModule["default"]
}), _Button.ButtonDecorator, _Spottable["default"], _Skinnable["default"]);
/**
 * A button component, ready to use in Sandstone applications.
 *
 * Usage:
 * ```
 * <Button
 *	backgroundOpacity="transparent"
 *	size="small"
 *	icon="home"
 * >
 * 	Press me!
 * </Button>
 * ```
 *
 * @class Button
 * @memberof sandstone/Button
 * @extends sandstone/Button.ButtonBase
 * @mixes sandstone/Button.ButtonDecorator
 * @ui
 * @public
 */

exports.ButtonDecorator = ButtonDecorator;
var Button = ButtonDecorator(ButtonBase);
exports.Button = Button;
var _default = Button;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/Icon/Icon.js":
/*!****************************************************!*\
  !*** ./node_modules/@enact/sandstone/Icon/Icon.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.IconDecorator = exports.IconBase = exports.Icon = void 0;
Object.defineProperty(exports, "icons", ({
  enumerable: true,
  get: function get() {
    return _IconList["default"];
  }
}));

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _I18nDecorator = __webpack_require__(/*! @enact/i18n/I18nDecorator */ "./node_modules/@enact/i18n/I18nDecorator/I18nDecorator.js");

var _Icon = __webpack_require__(/*! @enact/ui/Icon */ "./node_modules/@enact/ui/Icon/Icon.js");

var _Pure = _interopRequireDefault(__webpack_require__(/*! @enact/ui/internal/Pure */ "./node_modules/@enact/ui/internal/Pure/Pure.js"));

var _resolution = __webpack_require__(/*! @enact/ui/resolution */ "./node_modules/@enact/ui/resolution/index.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _IconList = _interopRequireDefault(__webpack_require__(/*! ./IconList.js */ "./node_modules/@enact/sandstone/Icon/IconList.js"));

var _IconModule = _interopRequireDefault(__webpack_require__(/*! ./Icon.module.css */ "./node_modules/@enact/sandstone/Icon/Icon.module.css"));

var _excluded = ["css", "size"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Renders a sandstone-styled icon without any behavior.
 *
 * @class IconBase
 * @memberof sandstone/Icon
 * @extends ui/Icon.Icon
 * @ui
 * @public
 */


var IconBase = (0, _kind["default"])({
  name: 'Icon',
  propTypes:
  /** @lends sandstone/Icon.IconBase.prototype */
  {
    /**
     * The icon content.
     *
     * @see {@link ui/Icon.Icon.children}
     * @type {String|Object}
     * @public
     */
    children: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `icon` - The root component class
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,

    /**
     * Flips the icon
     *
     * When `'auto'` and `rtl`, the icon is flipped horizontally.
     *
     * @type {('auto'|'both'|'horizontal'|'vertical')}
     * @public
     */
    flip: _propTypes["default"].oneOf(['auto', 'both', 'horizontal', 'vertical']),

    /**
     * Indicates the content's text direction is right-to-left.
     *
     * This is set automatically when using {@link ui/Icon.Icon}.
     *
     * @type {Boolean}
     * @public
     */
    rtl: _propTypes["default"].bool,

    /**
     * The size of the icon.
     *
     * A collection of preset sizes is available in addition to a numeric size option.
     * A number represents the design-time pixel dimensions of the icon. The final value will
     * automatically adapt to the screen resolutions, as defined in the `screenTypes` file of
     * this theme.
     *
     * @type {('large'|'medium'|'small'|'tiny'|Number)}
     * @default 'small'
     * @public
     */
    size: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(['large', 'medium', 'small', 'tiny']), _propTypes["default"].number])
  },
  defaultProps: {
    size: 'small'
  },
  styles: {
    css: _IconModule["default"],
    publicClassNames: ['icon']
  },
  computed: {
    className: function className(_ref) {
      var size = _ref.size,
          styler = _ref.styler;
      return styler.append(typeof size === 'string' ? size : null);
    },
    flip: function flip(_ref2) {
      var _flip = _ref2.flip,
          rtl = _ref2.rtl;

      if (_flip === 'auto') {
        return rtl ? 'horizontal' : null;
      }

      return _flip;
    },
    style: function style(_ref3) {
      var size = _ref3.size,
          _style = _ref3.style;
      return _objectSpread(_objectSpread({}, _style), {}, {
        '--icon-size': typeof size === 'number' ? (0, _resolution.scaleToRem)(size) : null
      });
    }
  },
  render: function render(_ref4) {
    var css = _ref4.css,
        size = _ref4.size,
        rest = _objectWithoutProperties(_ref4, _excluded);

    delete rest.rtl;
    return _Icon.IconBase.inline(_objectSpread(_objectSpread({}, rest), {}, {
      size: typeof size === 'string' ? size : void 0,
      css: css,
      iconList: _IconList["default"]
    }));
  }
}); // Let's find a way to import this list directly, and bonus feature, render our icons in the docs
// next to their names.

/**
 * An object whose keys can be used as the child of an [Icon]{@link sandstone/Icon.Icon} component.
 *
 * List of Icons:
 * ```
 * plus
 * minus
 * arrowhookleft
 * arrowhookright
 * ellipsis
 * check
 * triangleup
 * triangleright
 * triangledown
 * triangleleft
 * arrowupdown
 * arrowup
 * arrowupwhite
 * arrowuphollow
 * backspace
 * space
 * trianglerightwhite
 * triangleleftwhite
 * trianglerighthollow
 * trianglelefthollow
 * heart
 * hearthollow
 * record
 * circle
 * stop
 * square
 * play
 * pause
 * forward
 * backward
 * pauseforward
 * pausebackward
 * pausejumpforward
 * pausejumpbackward
 * jumpforward
 * jumpbackward
 * skip
 * list
 * arrowlargedown
 * arrowlargeup
 * arrowlargeleft
 * arrowlargeright
 * arrowsmallup
 * arrowsmalldown
 * arrowsmallleft
 * arrowsmallright
 * closex
 * search
 * chup
 * chdown
 * exitfullscreen
 * fullscreen
 * trash
 * star
 * starhalf
 * starhollow
 * gear
 * plug
 * lock
 * music
 * view360
 * info
 * verticalellipsis
 * arrowcurveright
 * picture
 * home
 * liverecord
 * liveplay
 * trashlock
 * movecursor
 * repeatone
 * repeatall
 * repeatnone
 * zoomin
 * zoomout
 * download
 * shuffle
 * shuffleon
 * notification
 * voice
 * soundmute
 * stargroup
 * checker
 * transponder
 * selected
 * bgm
 * bgmoff
 * playcircle
 * pausecircle
 * lockcircle
 * unlockcircle
 * powercircle
 * wifi1
 * wifi2
 * wifi3
 * wifi4
 * wifilock1
 * wifilock2
 * wifilock3
 * wifilock4
 * dashboard1
 * dashboard2
 * dashboard3
 * language
 * rotate
 * lyrics
 * screenpower
 * miniplayer
 * nowplaying
 * playspeed
 * folder
 * folderupper
 * support
 * soundout
 * mobile
 * keyboard
 * mouse
 * controller
 * btspeaker
 * headset
 * dns
 * speaker
 * speakersurround
 * speakercenter
 * speakerbass
 * router
 * demosync
 * browser
 * sound
 * wisa
 * demooptions
 * newfeature
 * youtube
 * ostsearch
 * shopping
 * bookmark
 * eject
 * power
 * timer
 * network
 * edit
 * aspectratio
 * link
 * light
 * pointersize
 * pointerspeed
 * soundmode
 * contrast
 * picturemode
 * basketball
 * soccer
 * baseball
 * golf
 * football
 * hockey
 * volleyball
 * cricket
 * heartadd
 * heartlist
 * refresh
 * help
 * share
 * files
 * quickstart
 * scheduler
 * recording
 * guide
 * channel
 * oneminplay
 * oneminrecord
 * fifteenforward
 * fifteenbackward
 * liveplayoff
 * liveplayon
 * popupscale
 * arrowrightskip
 * closedcaption
 * subtitle
 * subtitlekr
 * subtitlecn
 * samples
 * googledrive
 * googlephotos
 * dlna
 * replay
 * usb
 * ftp
 * profile
 * profilecheck
 * mediaserver
 * wallpaper
 * spanner
 * bluetooth
 * moodmode
 * changepassword
 * r2rappcall
 * ```
 *
 * @name iconList
 * @memberof sandstone/Icon
 * @constant
 * @type {Object}
 * @public
 */

/**
 * Sandstone-specific behaviors to apply to [IconBase]{@link sandstone/Icon.IconBase}.
 *
 * @hoc
 * @memberof sandstone/Icon
 * @mixes sandstone/Skinnable.Skinnable
 * @public
 */

exports.IconBase = IconBase;
var IconDecorator = (0, _compose["default"])(_Pure["default"], _Skinnable["default"], (0, _I18nDecorator.I18nContextDecorator)({
  rtlProp: 'rtl'
}));
/**
 * A Sandstone-styled icon.
 *
 * @class Icon
 * @memberof sandstone/Icon
 * @extends sandstone/Icon.IconBase
 * @mixes sandstone/Icon.IconDecorator
 * @ui
 * @public
 */

exports.IconDecorator = IconDecorator;
var Icon = IconDecorator(IconBase);
exports.Icon = Icon;
var _default = Icon;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/Icon/IconList.js":
/*!********************************************************!*\
  !*** ./node_modules/@enact/sandstone/Icon/IconList.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0; // Full List (Hash) of Sandstone Supported Icons
//

var _default = {
  plus: 0x0002B,
  // plus
  minus: 0x0002D,
  // hyphen
  arrowhookleft: 0x021A9,
  // LeftArrowHook
  arrowhookright: 0x021AA,
  // RightArrowHook
  ellipsis: 0x022EF,
  // ellipsis
  check: 0x02713,
  // checkmark
  triangleup: 0x025B2,
  // triagup
  triangleright: 0x025B6,
  // triagright
  triangledown: 0x025BC,
  // triagdown
  triangleleft: 0x025C0,
  // triagleft
  arrowupdown: 0x021C5,
  // arrowupdown
  arrowup: 0x02191,
  // arrowup
  arrowupwhite: 0x021E7,
  // arrowupwhite
  arrowuphollow: 0x021E7,
  // arrowupwhite
  backspace: 0x02408,
  // backspace
  space: 0x02420,
  // space
  trianglerightwhite: 0x025B7,
  // triaglerightwhite
  triangleleftwhite: 0x025C1,
  // triagleleftwhite
  trianglerighthollow: 0x025B7,
  // triaglerightwhite
  trianglelefthollow: 0x025C1,
  // triagleleftwhite
  heart: 0x02665,
  // black heart suit
  heartblack: 0x02661,
  // white heart suit
  hearthollow: 0x02661,
  // white heart suit
  record: 0x0EFFDB,
  // record
  circle: 0x0EFFDB,
  // record
  stop: 0x0EFFDC,
  // stop
  square: 0x0EFFDC,
  // stop
  play: 0x0EFFDD,
  // play
  pause: 0x0EFFDE,
  // pause
  forward: 0x0EFFDF,
  // forward
  backward: 0x0EFFE0,
  // rewind
  pauseforward: 0x0EFFE1,
  // pauseforward
  pausebackward: 0x0EFFE2,
  // pausebackward
  pausejumpforward: 0x0EFFE3,
  // pausejumpforward
  pausejumpbackward: 0x0EFFE4,
  // pausejumpbackward
  jumpforward: 0x0EFFE7,
  // indicator_end
  jumpbackward: 0x0EFFE8,
  // indicator_begin
  skip: 0x0EFFE9,
  // skip
  list: 0x0EFFEB,
  // list_simple
  arrowlargedown: 0x0EFFED,
  // caret_down_large
  arrowlargeup: 0x0EFFEE,
  // caret_up_large
  arrowlargeleft: 0x0EFFEF,
  // caret_left_large
  arrowlargeright: 0x0EFFF0,
  // caret_right_large
  arrowsmallup: 0x0EFFF1,
  // caret_up_small
  arrowsmalldown: 0x0EFFF2,
  // caret_down_small
  arrowsmallleft: 0x0EFFF3,
  // caret_left_small
  arrowsmallright: 0x0EFFF4,
  // caret_right_small
  closex: 0x0EFFF5,
  // close_x
  search: 0x0EFFF6,
  // magnify
  chup: 0x0EFFF7,
  // chup
  chdown: 0x0EFFF8,
  // chdown
  exitfullscreen: 0x0EFFF9,
  // minimize
  fullscreen: 0x0EFFFA,
  // maximize
  trash: 0x0F0025,
  // trash
  star: 0x0F0028,
  // star_full
  starhalf: 0x0F0029,
  // star_half
  starhollow: 0x0F002A,
  // star_empty
  gear: 0x0F002B,
  // gear
  plug: 0x0F002C,
  // input
  lock: 0x0F002D,
  // lock
  music: 0x0F0062,
  // music
  view360: 0x0F00A9,
  // view_360
  info: 0x0F00AB,
  // info
  verticalellipsis: 0x0F00B5,
  // vertical_ellipsis
  arrowcurveright: 0x0F00B6,
  // arrow_curve_right
  picture: 0x0F00BA,
  // picture
  home: 0x0F00BB,
  // home
  liverecord: 0x0F00C1,
  // live_record
  liveplay: 0x0F00C2,
  // live_play
  trashlock: 0x0F00C7,
  // trash_lock
  movecursor: 0x0F00CC,
  // move_cursor
  repeatone: 0x0F00DF,
  // repeat_one
  repeatall: 0x0F00E0,
  // repeat_all
  repeatnone: 0x0F00E1,
  // repeat_none
  zoomin: 0x0F00EF,
  // zoom_in
  zoomout: 0x0F00F0,
  // zoom_out
  download: 0x0F00FA,
  // download
  shuffle: 0x0F0103,
  // shuffle
  shuffleon: 0x0F0104,
  // shuffleon
  notification: 0x0F0105,
  // notification.001
  voice: 0x0F0108,
  // voice
  soundmute: 0x0F0109,
  // mute
  stargroup: 0x0F010A,
  // star_group
  checker: 0x0F010B,
  // checker
  transponder: 0x0F010C,
  // transponder
  selected: 0x0F010D,
  // selected
  bgm: 0x0F010E,
  // bgm
  bgmoff: 0x0F010F,
  // bgmoff
  playcircle: 0x0F0110,
  // play_circle
  pausecircle: 0x0F0111,
  // pause_circle
  lockcircle: 0x0F0112,
  // lock_circle
  unlockcircle: 0x0F0113,
  // unlock_circle
  powercircle: 0x0F0114,
  // power_circle
  wifi1: 0x0F0116,
  // wifi.01
  wifi2: 0x0F0117,
  // wifi.02
  wifi3: 0x0F0118,
  // wifi.03
  wifi4: 0x0F0119,
  // wifi.04
  wifilock1: 0x0F011A,
  // wifilock.01
  wifilock2: 0x0F011B,
  // wifilock.02
  wifilock3: 0x0F011C,
  // wifilock.03
  wifilock4: 0x0F011D,
  // wifilock.04
  dashboard1: 0x0F011E,
  // dashboard.01
  dashboard2: 0x0F011F,
  // dashboard.02
  dashboard3: 0x0F0120,
  // dashboard.03
  language: 0x0F0124,
  // language
  rotate: 0x0F0125,
  // rotate
  lyrics: 0x0F0126,
  // lyrics
  screenpower: 0x0F0127,
  // screen_power
  miniplayer: 0x0F0128,
  // miniplayer
  nowplaying: 0x0F0129,
  // now_playing
  playspeed: 0x0F012A,
  // playspeed
  folder: 0x0F012B,
  // folder
  folderupper: 0x0F012C,
  // folder_upper
  support: 0x0F012D,
  // support
  soundout: 0x0F012E,
  // sound_out
  mobile: 0x0F012F,
  // mobile
  keyboard: 0x0F0130,
  // keyboard
  mouse: 0x0F0131,
  // mouse
  controller: 0x0F0132,
  // controller
  btspeaker: 0x0F0133,
  // btspeaker
  headset: 0x0F0134,
  // headset
  dns: 0x0F0135,
  // dns
  speaker: 0x0F0136,
  // speaker
  speakersurround: 0x0F0137,
  // speaker_surround
  speakercenter: 0x0F0138,
  // speaker_center
  speakerbass: 0x0F0139,
  // speaker_bassboost
  router: 0x0F013A,
  // router
  demosync: 0x0F013B,
  // sync_demo
  browser: 0x0F013C,
  // browser
  sound: 0x0F013D,
  // sound
  wisa: 0x0F013E,
  // wisa
  demooptions: 0x0F013F,
  // demo_options
  newfeature: 0x0F0140,
  // new_feature
  youtube: 0x0F0141,
  // youtube
  ostsearch: 0x0F0142,
  // ostsearch
  shopping: 0x0F0143,
  // shopping
  bookmark: 0x0F0144,
  // bookmark
  eject: 0x0F0145,
  // eject
  power: 0x0F0146,
  // power
  timer: 0x0F0147,
  // timer
  network: 0x0F0148,
  // network
  edit: 0x0F0149,
  // edit
  aspectratio: 0x0F014A,
  // aspectratio
  link: 0x0F014B,
  // link
  light: 0x0F014C,
  // light
  pointersize: 0x0F014D,
  // pointersize
  pointerspeed: 0x0F014E,
  // pointerspeed
  soundmode: 0x0F0150,
  // soundmode
  contrast: 0x0F0151,
  // contrast
  picturemode: 0x0F0152,
  // picturemode
  basketball: 0x0F0153,
  // basketball
  soccer: 0x0F0154,
  // soccer
  baseball: 0x0F0155,
  // baseball
  golf: 0x0F0156,
  // golf
  football: 0x0F0157,
  // football
  hockey: 0x0F0158,
  // hockey
  volleyball: 0x0F0159,
  // volleyball
  cricket: 0x0F015A,
  // cricket
  heartadd: 0x0F015B,
  // heartadd
  heartlist: 0x0F015C,
  // heartlist
  refresh: 0x0F015D,
  // refresh
  help: 0x0F015E,
  // help
  share: 0x0F015F,
  // share
  files: 0x0F0160,
  // files
  quickstart: 0x0F0161,
  // quickstart
  scheduler: 0x0F0162,
  // scheduler
  recording: 0x0F0163,
  // recording
  guide: 0x0F0164,
  // guide
  channel: 0x0F0165,
  // channel
  oneminplay: 0x0F0166,
  // oneminplay
  oneminrecord: 0x0F0167,
  // oneminrecord
  fifteenforward: 0x0F0168,
  // fifteenforward
  fifteenbackward: 0x0F0169,
  // fifteenbackward
  liveplayoff: 0x0F016A,
  // liveplayoff
  liveplayon: 0x0F016B,
  // liveplayon
  popupscale: 0x0F016C,
  // popupscale
  arrowrightskip: 0x0F016D,
  // arrowrightskip
  closedcaption: 0x0F016E,
  // closedcaption
  subtitle: 0x0F016F,
  // subtitle
  subtitlekr: 0x0F0170,
  // subtitlekr
  subtitlecn: 0x0F0171,
  // subtitlecn
  samples: 0x0F0172,
  // samples
  googledrive: 0x0F0173,
  // googledrive
  googlephotos: 0x0F0174,
  // googlephotos
  dlna: 0x0F0175,
  // dlna
  replay: 0x0F0176,
  // replay
  usb: 0x0F0177,
  // usb
  ftp: 0x0F0178,
  // ftp
  profile: 0x0F0179,
  // profile
  profilecheck: 0x0F017A,
  // profilecheck
  mediaserver: 0x0F017B,
  // mediaserver
  wallpaper: 0x0F017E,
  // wallpaper
  spanner: 0x0F0180,
  // spanner
  bluetooth: 0x0F0181,
  // bluetooth
  moodmode: 0x0F0182,
  // moodmode
  changepassword: 0x0F0183,
  // changepassword
  r2rappcall: 0x0F0184 // r2rappcall

};
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/Image/Image.js":
/*!******************************************************!*\
  !*** ./node_modules/@enact/sandstone/Image/Image.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ImageDecorator = exports.ImageBase = exports.Image = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _Image = __webpack_require__(/*! @enact/ui/Image */ "./node_modules/@enact/ui/Image/Image.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _ForwardRef = _interopRequireDefault(__webpack_require__(/*! @enact/ui/ForwardRef */ "./node_modules/@enact/ui/ForwardRef/ForwardRef.js"));

var _Pure = _interopRequireDefault(__webpack_require__(/*! @enact/ui/internal/Pure */ "./node_modules/@enact/ui/internal/Pure/Pure.js"));

var _resolution = __webpack_require__(/*! @enact/ui/resolution */ "./node_modules/@enact/ui/resolution/index.js");

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _ImageModule = _interopRequireDefault(__webpack_require__(/*! ./Image.module.css */ "./node_modules/@enact/sandstone/Image/Image.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["css", "componentRef"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * A Sandstone-styled image component without any behavior
 *
 * @class ImageBase
 * @memberof sandstone/Image
 * @extends ui/Image.Image
 * @ui
 * @public
 */


var ImageBase = (0, _kind["default"])({
  name: 'Image',
  propTypes:
  /** @lends sandstone/Image.ImageBase.prototype */
  {
    /**
     * Called with a reference to the root component.
     *
     * When using {@link sandstone/Image.Image}, the `ref` prop is forwarded to this component
     * as `componentRef`.
     *
     * @type {Object|Function}
     * @public
     */
    componentRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `image` - The root component class for Image
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object
  },
  styles: {
    css: _ImageModule["default"],
    publicClassNames: ['image']
  },
  render: function render(_ref) {
    var css = _ref.css,
        componentRef = _ref.componentRef,
        rest = _objectWithoutProperties(_ref, _excluded);

    return _Image.ImageBase.inline(_objectSpread(_objectSpread({
      draggable: 'false'
    }, rest), {}, {
      componentRef: componentRef,
      css: css
    }));
  }
}); // This induces a render when there is a screen size change that has a corresponding image src value
// associated with the new screen size. The render is kicked off by remembering the new image src.
//
// This hoc could (should) be rewritten at a later time to use a smarter context API and callbacks,
// or something like pub/sub; each of which would be hooked together from the resolution.js that
// would coordinate any screen size/orientation changes and emit events from there.
//
// This is ripe for refactoring, and could probably move into UI to be generalized, but that's for
// another time. -B 2018-05-01

exports.ImageBase = ImageBase;
var ResponsiveImageDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class;

  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class(_props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, _props);

      _this.handleResize = function () {
        _this.setState(function (state, props) {
          var src = (0, _resolution.selectSrc)(props.src); // Trigger a render and save the currently selected src for later comparisons

          if (src !== state.src) {
            return {
              src: src
            };
          }

          return null;
        });
      };

      _this.state = {
        src: (0, _resolution.selectSrc)(_this.props.src)
      };
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        window.addEventListener('resize', this.handleResize);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        window.removeEventListener('resize', this.handleResize);
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, this.props));
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'ResponsiveImageDecorator', _class.propTypes = {
    src: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object])
  }, _class;
});
/**
 * Sandstone-specific behaviors to apply to [Image]{@link sandstone/Image.ImageBase}.
 *
 * @hoc
 * @memberof sandstone/Image
 * @mixes sandstone/Skinnable.Skinnable
 * @public
 */

var ImageDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'componentRef'
}), _Pure["default"], ResponsiveImageDecorator, _Skinnable["default"]);
/**
 * A Sandstone-styled image component
 *
 * ```
 * <Image
 *   src={{
 *     'hd': 'https://dummyimage.com/64/e048e0/0011ff',
 *     'fhd': 'https://dummyimage.com/128/e048e0/0011ff',
 *     'uhd': 'https://dummyimage.com/256/e048e0/0011ff'
 *   }}
 * >
 * ```
 *
 * @class Image
 * @memberof sandstone/Image
 * @extends sandstone/Image.ImageBase
 * @mixes sandstone/Image.ImageDecorator
 * @ui
 * @public
 */

exports.ImageDecorator = ImageDecorator;
var Image = ImageDecorator(ImageBase);
exports.Image = Image;
var _default = Image;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/Marquee/Marquee.js":
/*!**********************************************************!*\
  !*** ./node_modules/@enact/sandstone/Marquee/Marquee.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Marquee = void 0;
Object.defineProperty(exports, "MarqueeBase", ({
  enumerable: true,
  get: function get() {
    return _Marquee.MarqueeBase;
  }
}));
Object.defineProperty(exports, "MarqueeController", ({
  enumerable: true,
  get: function get() {
    return _Marquee.MarqueeController;
  }
}));
exports["default"] = exports.MarqueeDecorator = void 0;

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _I18nDecorator = __webpack_require__(/*! @enact/i18n/I18nDecorator */ "./node_modules/@enact/i18n/I18nDecorator/I18nDecorator.js");

var _util = __webpack_require__(/*! @enact/i18n/util */ "./node_modules/@enact/i18n/util/util.js");

var _Marquee = __webpack_require__(/*! @enact/ui/Marquee */ "./node_modules/@enact/ui/Marquee/index.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Provides components for displaying and controlling marqueed text.
 *
 * @example
 * <Marquee marqueeOn="render">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</Marquee>
 *
 * @see {@link ui/Marquee}
 * @module sandstone/Marquee
 * @exports Marquee
 * @exports MarqueeBase
 * @exports MarqueeController
 * @exports MarqueeDecorator
 */


var MarqueeDecorator = (0, _hoc["default"])({
  marqueeDirection: function marqueeDirection(str) {
    return (0, _util.isRtlText)(str) ? 'rtl' : 'ltr';
  }
}, function (config, Wrapped) {
  return (0, _I18nDecorator.I18nContextDecorator)({
    rtlProp: 'rtl',
    localeProp: 'locale'
  }, (0, _Marquee.MarqueeDecorator)(config, Wrapped));
});
exports.MarqueeDecorator = MarqueeDecorator;
var Marquee = MarqueeDecorator('div');
exports.Marquee = Marquee;
var _default = Marquee;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/MediaPlayer/MediaControls.js":
/*!********************************************************************!*\
  !*** ./node_modules/@enact/sandstone/MediaPlayer/MediaControls.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.MediaControlsDecorator = exports.MediaControlsBase = exports.MediaControls = void 0;

var _dispatcher = __webpack_require__(/*! @enact/core/dispatcher */ "./node_modules/@enact/core/dispatcher/dispatcher.js");

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _keymap = __webpack_require__(/*! @enact/core/keymap */ "./node_modules/@enact/core/keymap/index.js");

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _ApiDecorator = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/ApiDecorator */ "./node_modules/@enact/core/internal/ApiDecorator/ApiDecorator.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _spotlight = _interopRequireDefault(__webpack_require__(/*! @enact/spotlight */ "./node_modules/@enact/spotlight/src/spotlight.js"));

var _Pause = _interopRequireDefault(__webpack_require__(/*! @enact/spotlight/Pause */ "./node_modules/@enact/spotlight/Pause/Pause.js"));

var _SpotlightContainerDecorator = __webpack_require__(/*! @enact/spotlight/SpotlightContainerDecorator */ "./node_modules/@enact/spotlight/SpotlightContainerDecorator/SpotlightContainerDecorator.js");

var _Cancelable = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Cancelable */ "./node_modules/@enact/ui/Cancelable/Cancelable.js"));

var _Slottable = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Slottable */ "./node_modules/@enact/ui/Slottable/Slottable.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _ActionGuide = _interopRequireDefault(__webpack_require__(/*! ../ActionGuide */ "./node_modules/@enact/sandstone/ActionGuide/ActionGuide.js"));

var _Button = _interopRequireDefault(__webpack_require__(/*! ../Button */ "./node_modules/@enact/sandstone/Button/Button.js"));

var _$L = _interopRequireDefault(__webpack_require__(/*! ../internal/$L */ "./node_modules/@enact/sandstone/internal/$L/$L.js"));

var _util2 = __webpack_require__(/*! ../internal/util */ "./node_modules/@enact/sandstone/internal/util/util.js");

var _util3 = __webpack_require__(/*! ./util */ "./node_modules/@enact/sandstone/MediaPlayer/util.js");

var _MediaControlsModule = _interopRequireDefault(__webpack_require__(/*! ./MediaControls.module.css */ "./node_modules/@enact/sandstone/MediaPlayer/MediaControls.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["mediaControlsRef"],
    _excluded2 = ["actionGuideAriaLabel", "actionGuideLabel", "actionGuideShowing", "children", "id", "jumpBackwardIcon", "jumpButtonsDisabled", "jumpForwardIcon", "bottomComponents", "mediaControlsRef", "mediaDisabled", "moreComponentsSpotlightId", "noJumpButtons", "onFlickFromActionGuide", "onJumpBackwardButtonClick", "onJumpForwardButtonClick", "onKeyDownFromMediaButtons", "onPlayButtonClick", "paused", "pauseIcon", "playIcon", "playPauseButtonDisabled", "showMoreComponents", "moreComponentsRendered", "moreButtonsClassName", "actionGuideClassName", "spotlightDisabled", "spotlightId"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var DivComponent = function DivComponent(_ref) {
  var mediaControlsRef = _ref.mediaControlsRef,
      rest = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({
    ref: mediaControlsRef
  }, rest));
};

DivComponent.propTypes = {
  /*
   * Called with the reference to the mediaControls node.
   *
   * @type {Object|Function}
   * @public
   */
  mediaControlsRef: _propTypes["default"].ref
};
var OuterContainer = (0, _SpotlightContainerDecorator.SpotlightContainerDecorator)({
  defaultElement: [".".concat(_SpotlightContainerDecorator.spotlightDefaultClass)],
  leaveFor: {
    left: '',
    right: ''
  }
}, DivComponent);
var Container = (0, _SpotlightContainerDecorator.SpotlightContainerDecorator)({
  enterTo: 'default-element'
}, 'div');
var MediaButton = (0, _util2.onlyUpdateForProps)(_Button["default"], ['children', 'className', 'disabled', 'icon', 'onClick', 'spotlightDisabled']);
var forwardToggleMore = (0, _handle.forward)('onToggleMore');
var animationDuration = 300;
/**
 * A set of components for controlling media playback and rendering additional components.
 *
 * @class MediaControlsBase
 * @memberof sandstone/MediaPlayer
 * @ui
 * @private
 */

var MediaControlsBase = (0, _kind["default"])({
  name: 'MediaControls',
  // intentionally assigning these props to MediaControls instead of Base (which is private)
  propTypes:
  /** @lends sandstone/MediaPlayer.MediaControls.prototype */
  {
    /**
     * DOM id for the component.
     *
     * This child component `ActionGuide`'s id is generated from the id.
     *
     * @type {String}
     * @required
     * @public
     */
    id: _propTypes2["default"].string.isRequired,

    /**
     * The `aria-label` for the action guide.
     *
     * @type {String}
     * @public
     */
    actionGuideAriaLabel: _propTypes2["default"].string,

    /**
     * The label for the action guide.
     *
     * @type {String}
     * @public
     */
    actionGuideLabel: _propTypes2["default"].string,

    /**
     * These components are placed below the action guide. Typically these will be media playlist controls.
     *
     * @type {Node}
     * @public
     */
    bottomComponents: _propTypes2["default"].node,

    /**
     * Jump backward [icon]{@link sandstone/Icon.Icon} name. Accepts any
     * [icon]{@link sandstone/Icon.Icon} component type.
     *
     * @type {String}
     * @default 'jumpbackward'
     * @public
     */
    jumpBackwardIcon: _propTypes2["default"].string,

    /**
     * Disables state on the media "jump" buttons; the outer pair.
     *
     * @type {Boolean}
     * @public
     */
    jumpButtonsDisabled: _propTypes2["default"].bool,

    /**
     * Jump forward [icon]{@link sandstone/Icon.Icon} name. Accepts any
     * [icon]{@link sandstone/Icon.Icon} component type.
     *
     * @type {String}
     * @default 'jumpforward'
     * @public
     */
    jumpForwardIcon: _propTypes2["default"].string,

    /**
     * Called with the reference to the mediaControls node.
     *
     * @type {Object|Function}
     * @public
     */
    mediaControlsRef: _propTypes["default"].ref,

    /**
     * Disables the media buttons.
     *
     * @type {Boolean}
     * @public
     */
    mediaDisabled: _propTypes2["default"].bool,

    /**
     * When `true`, more components are rendered. This does not indicate the visibility of more components.
     *
     * @type {Boolean}
     * @public
     */
    moreComponentsRendered: _propTypes2["default"].bool,

    /**
     * The spotlight ID for the moreComponent container.
     *
     * @type {String}
     * @public
     * @default 'moreComponents'
     */
    moreComponentsSpotlightId: _propTypes2["default"].string,

    /**
     * Removes the "jump" buttons. The buttons that skip forward or backward in the video.
     *
     * @type {Boolean}
     * @public
     */
    noJumpButtons: _propTypes2["default"].bool,

    /**
     * Called when cancel/back key events are fired.
     *
     * @type {Function}
     * @public
     */
    onClose: _propTypes2["default"].func,

    /**
     * Called when the user flicks on the action guide.
     *
     * @type {Function}
     * @private
     */
    onFlickFromActionGuide: _propTypes2["default"].func,

    /**
     * Called when the user clicks the JumpBackward button
     *
     * @type {Function}
     * @public
     */
    onJumpBackwardButtonClick: _propTypes2["default"].func,

    /**
     * Called when the user clicks the JumpForward button.
     *
     * @type {Function}
     * @public
     */
    onJumpForwardButtonClick: _propTypes2["default"].func,

    /**
     * Called when the user presses a media control button.
     *
     * @type {Function}
     * @public
     */
    onKeyDownFromMediaButtons: _propTypes2["default"].func,

    /**
     * Called when the user clicks the Play button.
     *
     * @type {Function}
     * @public
     */
    onPlayButtonClick: _propTypes2["default"].func,

    /**
     * `true` when the video is paused.
     *
     * @type {Boolean}
     * @public
     */
    paused: _propTypes2["default"].bool,

    /**
     * A string which is sent to the `pause` icon of the player controls. This can be
     * anything that is accepted by [Icon]{@link sandstone/Icon.Icon}. This will be temporarily replaced by
     * the [playIcon]{@link sandstone/MediaPlayer.MediaControls.playIcon} when the
     * [paused]{@link sandstone/MediaPlayer.MediaControls.paused} boolean is `false`.
     *
     * @type {String}
     * @default 'pause'
     * @public
     */
    pauseIcon: _propTypes2["default"].string,

    /**
     * A string which is sent to the `play` icon of the player controls. This can be
     * anything that is accepted by {@link sandstone/Icon.Icon}. This will be temporarily replaced by
     * the [pauseIcon]{@link sandstone/MediaPlayer.MediaControls.pauseIcon} when the
     * [paused]{@link sandstone/MediaPlayer.MediaControls.paused} boolean is `true`.
     *
     * @type {String}
     * @default 'play'
     * @public
     */
    playIcon: _propTypes2["default"].string,

    /**
     * Disables the media "play"/"pause" button.
     *
     * @type {Boolean}
     * @public
     */
    playPauseButtonDisabled: _propTypes2["default"].bool,

    /**
     * When `true`, more components are visible.
     *
     * @type {Boolean}
     * @private
     */
    showMoreComponents: _propTypes2["default"].bool,

    /**
     * `true` controls are disabled from Spotlight.
     *
     * @type {Boolean}
     * @public
     */
    spotlightDisabled: _propTypes2["default"].bool,

    /**
     * The spotlight ID for the media controls container.
     *
     * @type {String}
     * @public
     * @default 'mediaControls'
     */
    spotlightId: _propTypes2["default"].string,

    /**
     * The visibility of the component. When `false`, the component will be hidden.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    visible: _propTypes2["default"].bool
  },
  defaultProps: {
    jumpBackwardIcon: 'jumpbackward',
    jumpForwardIcon: 'jumpforward',
    moreComponentsSpotlightId: 'moreComponents',
    spotlightId: 'mediaControls',
    pauseIcon: 'pause',
    playIcon: 'play',
    visible: true
  },
  styles: {
    css: _MediaControlsModule["default"],
    className: 'controlsFrame'
  },
  computed: {
    actionGuideClassName: function actionGuideClassName(_ref2) {
      var styler = _ref2.styler,
          showMoreComponents = _ref2.showMoreComponents;
      return styler.join({
        hidden: showMoreComponents
      });
    },
    actionGuideShowing: function actionGuideShowing(_ref3) {
      var bottomComponents = _ref3.bottomComponents,
          children = _ref3.children;
      return (0, _util3.countReactChildren)(children) || bottomComponents;
    },
    className: function className(_ref4) {
      var visible = _ref4.visible,
          styler = _ref4.styler;
      return styler.append({
        hidden: !visible
      });
    },
    moreButtonsClassName: function moreButtonsClassName(_ref5) {
      var styler = _ref5.styler;
      return styler.join('mediaControls', 'moreButtonsComponents');
    },
    moreComponentsRendered: function moreComponentsRendered(_ref6) {
      var showMoreComponents = _ref6.showMoreComponents,
          _moreComponentsRendered = _ref6.moreComponentsRendered;
      return showMoreComponents || _moreComponentsRendered;
    }
  },
  render: function render(_ref7) {
    var actionGuideAriaLabel = _ref7.actionGuideAriaLabel,
        actionGuideLabel = _ref7.actionGuideLabel,
        actionGuideShowing = _ref7.actionGuideShowing,
        children = _ref7.children,
        id = _ref7.id,
        jumpBackwardIcon = _ref7.jumpBackwardIcon,
        jumpButtonsDisabled = _ref7.jumpButtonsDisabled,
        jumpForwardIcon = _ref7.jumpForwardIcon,
        bottomComponents = _ref7.bottomComponents,
        mediaControlsRef = _ref7.mediaControlsRef,
        mediaDisabled = _ref7.mediaDisabled,
        moreComponentsSpotlightId = _ref7.moreComponentsSpotlightId,
        noJumpButtons = _ref7.noJumpButtons,
        onFlickFromActionGuide = _ref7.onFlickFromActionGuide,
        onJumpBackwardButtonClick = _ref7.onJumpBackwardButtonClick,
        onJumpForwardButtonClick = _ref7.onJumpForwardButtonClick,
        onKeyDownFromMediaButtons = _ref7.onKeyDownFromMediaButtons,
        onPlayButtonClick = _ref7.onPlayButtonClick,
        paused = _ref7.paused,
        pauseIcon = _ref7.pauseIcon,
        playIcon = _ref7.playIcon,
        playPauseButtonDisabled = _ref7.playPauseButtonDisabled,
        showMoreComponents = _ref7.showMoreComponents,
        moreComponentsRendered = _ref7.moreComponentsRendered,
        moreButtonsClassName = _ref7.moreButtonsClassName,
        actionGuideClassName = _ref7.actionGuideClassName,
        spotlightDisabled = _ref7.spotlightDisabled,
        spotlightId = _ref7.spotlightId,
        rest = _objectWithoutProperties(_ref7, _excluded2);

    delete rest.onClose;
    delete rest.visible;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(OuterContainer, _objectSpread(_objectSpread({}, rest), {}, {
      id: id,
      mediaControlsRef: mediaControlsRef,
      spotlightId: spotlightId,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(Container, {
        className: _MediaControlsModule["default"].mediaControls,
        spotlightDisabled: spotlightDisabled,
        onKeyDown: onKeyDownFromMediaButtons,
        children: [noJumpButtons ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)(MediaButton, {
          "aria-label": (0, _$L["default"])('Previous'),
          backgroundOpacity: "transparent",
          css: _MediaControlsModule["default"],
          disabled: mediaDisabled || jumpButtonsDisabled,
          icon: jumpBackwardIcon,
          onClick: onJumpBackwardButtonClick,
          size: "large",
          spotlightDisabled: spotlightDisabled
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(MediaButton, {
          "aria-label": paused ? (0, _$L["default"])('Play') : (0, _$L["default"])('Pause'),
          className: _SpotlightContainerDecorator.spotlightDefaultClass,
          backgroundOpacity: "transparent",
          css: _MediaControlsModule["default"],
          disabled: mediaDisabled || playPauseButtonDisabled,
          icon: paused ? playIcon : pauseIcon,
          onClick: onPlayButtonClick,
          size: "large",
          spotlightDisabled: spotlightDisabled
        }), noJumpButtons ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)(MediaButton, {
          "aria-label": (0, _$L["default"])('Next'),
          backgroundOpacity: "transparent",
          css: _MediaControlsModule["default"],
          disabled: mediaDisabled || jumpButtonsDisabled,
          icon: jumpForwardIcon,
          onClick: onJumpForwardButtonClick,
          size: "large",
          spotlightDisabled: spotlightDisabled
        })]
      }), actionGuideShowing ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ActionGuide["default"], {
        id: "".concat(id, "_actionGuide"),
        "aria-label": actionGuideAriaLabel != null ? actionGuideAriaLabel : null,
        css: _MediaControlsModule["default"],
        className: actionGuideClassName,
        icon: "arrowsmalldown",
        onFlick: onFlickFromActionGuide,
        children: actionGuideLabel
      }) : null, moreComponentsRendered ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(Container, {
        spotlightId: moreComponentsSpotlightId,
        className: _MediaControlsModule["default"].moreComponents,
        spotlightDisabled: !showMoreComponents || spotlightDisabled,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Container, {
          className: moreButtonsClassName,
          children: children
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: bottomComponents
        })]
      }) : null]
    }));
  }
});
/**
 * Media control behaviors to apply to [MediaControlsBase]{@link sandstone/MediaPlayer.MediaControlsBase}.
 * Provides built-in support for showing more components and key handling for basic playback
 * controls.
 *
 * @class MediaControlsDecorator
 * @memberof sandstone/MediaPlayer
 * @mixes ui/Slottable.Slottable
 * @hoc
 * @private
 */

exports.MediaControlsBase = MediaControlsBase;
var MediaControlsDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var MediaControlsDecoratorHOC = /*#__PURE__*/function (_Component) {
    _inherits(MediaControlsDecoratorHOC, _Component);

    var _super = _createSuper(MediaControlsDecoratorHOC);

    function MediaControlsDecoratorHOC(props) {
      var _this;

      _classCallCheck(this, MediaControlsDecoratorHOC);

      _this = _super.call(this, props);
      _this.moreComponentsRenderingJob = new _util.Job(function () {
        _this.setState({
          moreComponentsRendered: true
        });
      });

      _this.calculateMoreComponentsHeight = function () {
        if (!_this.mediaControlsNode) {
          _this.bottomComponentsHeight = 0;
          return;
        }

        var bottomElement = _this.mediaControlsNode.querySelector(".".concat(_MediaControlsModule["default"].moreComponents));

        _this.bottomComponentsHeight = bottomElement ? bottomElement.scrollHeight : 0;
      };

      _this.canShowMoreComponents = function () {
        return !_this.props.moreActionDisabled && !_this.state.showMoreComponents;
      };

      _this.handleKeyDownFromMediaButtons = function (ev) {
        if ((0, _keymap.is)('down', ev.keyCode) && _this.canShowMoreComponents()) {
          _this.showMoreComponents();

          ev.stopPropagation();
        }
      };

      _this.handleFlickFromActionGuide = function (_ref8) {
        var direction = _ref8.direction,
            velocityY = _ref8.velocityY;

        if (direction === 'vertical' && velocityY < 0 && _this.canShowMoreComponents()) {
          _this.showMoreComponents();
        }
      };

      _this.handleKeyDown = function (ev) {
        var _this$props = _this.props,
            mediaDisabled = _this$props.mediaDisabled,
            no5WayJump = _this$props.no5WayJump,
            visible = _this$props.visible;

        var current = _spotlight["default"].getCurrent();

        if (!no5WayJump && !visible && !mediaDisabled && !current && ((0, _keymap.is)('left', ev.keyCode) || (0, _keymap.is)('right', ev.keyCode))) {
          _this.paused.pause();

          _this.startListeningForPulses(ev.keyCode);
        }
      };

      _this.handleKeyUp = function (ev) {
        var _this$props2 = _this.props,
            mediaDisabled = _this$props2.mediaDisabled,
            no5WayJump = _this$props2.no5WayJump,
            rateChangeDisabled = _this$props2.rateChangeDisabled,
            playPauseButtonDisabled = _this$props2.playPauseButtonDisabled;
        if (mediaDisabled) return;

        if (!playPauseButtonDisabled) {
          if ((0, _keymap.is)('play', ev.keyCode)) {
            (0, _handle.forward)('onPlay', ev, _this.props);
          } else if ((0, _keymap.is)('pause', ev.keyCode)) {
            (0, _handle.forward)('onPause', ev, _this.props);
          }
        }

        if (!no5WayJump && ((0, _keymap.is)('left', ev.keyCode) || (0, _keymap.is)('right', ev.keyCode))) {
          _this.stopListeningForPulses();

          _this.paused.resume();
        }

        if (!rateChangeDisabled) {
          if ((0, _keymap.is)('rewind', ev.keyCode)) {
            (0, _handle.forward)('onRewind', ev, _this.props);
          } else if ((0, _keymap.is)('fastForward', ev.keyCode)) {
            (0, _handle.forward)('onFastForward', ev, _this.props);
          }
        }
      };

      _this.handleBlur = function () {
        _this.stopListeningForPulses();

        _this.paused.resume();
      };

      _this.handleWheel = function (ev) {
        if (_this.canShowMoreComponents() && _this.props.visible && ev.deltaY > 0) {
          _this.showMoreComponents();
        }
      };

      _this.startListeningForPulses = function (keyCode) {
        // Ignore new pulse calls if key code is same, otherwise start new series if we're pulsing
        if (_this.pulsing && keyCode !== _this.pulsingKeyCode) {
          _this.stopListeningForPulses();
        }

        if (!_this.pulsing) {
          _this.pulsingKeyCode = keyCode;
          _this.pulsing = true;
          _this.keyLoop = setTimeout(_this.handlePulse, _this.props.initialJumpDelay);
          (0, _handle.forward)('onJump', {
            keyCode: keyCode
          }, _this.props);
        }
      };

      _this.handlePulse = function () {
        (0, _handle.forward)('onJump', {
          keyCode: _this.pulsingKeyCode
        }, _this.props);
        _this.keyLoop = setTimeout(_this.handlePulse, _this.props.jumpDelay);
      };

      _this.handlePlayButtonClick = function (ev) {
        (0, _handle.forward)('onPlayButtonClick', ev, _this.props);

        if (_this.props.paused) {
          (0, _handle.forward)('onPlay', ev, _this.props);
        } else {
          (0, _handle.forward)('onPause', ev, _this.props);
        }
      };

      _this.getMediaControls = function (node) {
        if (!node) {
          _this.actionGuideHeight = 0;
          return;
        }

        _this.mediaControlsNode = _this.mediaControlsRef.current;

        var guideElement = _this.mediaControlsNode.querySelector(".".concat(_MediaControlsModule["default"].actionGuide));

        _this.actionGuideHeight = guideElement ? guideElement.scrollHeight : 0;
      };

      _this.areMoreComponentsAvailable = function () {
        return _this.state.showMoreComponents;
      };

      _this.showMoreComponents = function () {
        _this.setState({
          showMoreComponents: true
        });
      };

      _this.hideMoreComponents = function () {
        _this.setState({
          showMoreComponents: false
        });
      };

      _this.handleClose = function (ev) {
        if (_this.props.visible) {
          (0, _handle.forward)('onClose', ev, _this.props);
        }
      };

      _this.handleFinish = function () {
        if (_this.state.showMoreComponents) {
          _this.paused.resume();

          if (!_spotlight["default"].getPointerMode()) {
            _spotlight["default"].move('down');
          }
        }
      };

      _this.handleCancel = function () {
        _this.paused.resume();
      };

      _this.mediaControlsNode = null;
      _this.moreComponentsNode = null;
      _this.actionGuideHeight = 0;
      _this.animation = null;
      _this.bottomComponentsHeight = 0;
      _this.keyLoop = null;
      _this.pulsingKeyCode = null;
      _this.pulsing = null;
      _this.paused = new _Pause["default"]('MediaPlayer');
      _this.mediaControlsRef = /*#__PURE__*/(0, _react.createRef)();
      _this.state = {
        showMoreComponents: false,
        moreComponentsRendered: false
      };

      if (props.setApiProvider) {
        props.setApiProvider(_assertThisInitialized(_this));
      }

      return _this;
    }

    _createClass(MediaControlsDecoratorHOC, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        (0, _dispatcher.on)('keydown', this.handleKeyDown, document);
        (0, _dispatcher.on)('keyup', this.handleKeyUp, document);
        (0, _dispatcher.on)('blur', this.handleBlur, window);
        (0, _dispatcher.on)('wheel', this.handleWheel, document);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        // Need to render `moreComponents` to show it. For performance, render `moreComponents` if it is actually shown.
        if (!prevState.showMoreComponents && this.state.showMoreComponents && !this.state.moreComponentsRendered) {
          this.moreComponentsRenderingJob.startRafAfter();
        } else if (prevState.showMoreComponents && !this.state.showMoreComponents) {
          this.moreComponentsRenderingJob.stop();
        }

        if (!prevState.moreComponentsRendered && this.state.moreComponentsRendered || this.state.moreComponentsRendered && prevProps.bottomComponents !== this.props.bottomComponents || !(0, _util2.compareChildren)(this.props.children, prevProps.children)) {
          this.calculateMoreComponentsHeight();
        }

        if (this.state.showMoreComponents && !prevState.moreComponentsRendered && this.state.moreComponentsRendered || this.state.moreComponentsRendered && prevState.showMoreComponents !== this.state.showMoreComponents) {
          forwardToggleMore({
            type: 'onToggleMore',
            showMoreComponents: this.state.showMoreComponents,
            liftDistance: this.bottomComponentsHeight - this.actionGuideHeight
          }, this.props);

          if (this.state.showMoreComponents) {
            this.moreComponentsNode = this.moreComponentsNode || this.mediaControlsNode.querySelector(".".concat(_MediaControlsModule["default"].moreComponents));
            this.paused.pause();
            this.animation = this.moreComponentsNode.animate([{
              transform: 'none',
              opacity: 0,
              offset: 0
            }, {
              transform: "translateY(".concat(-this.actionGuideHeight, "px)"),
              opacity: 1,
              offset: 1
            }], {
              duration: animationDuration,
              fill: 'forwards'
            });
            this.animation.onfinish = this.handleFinish;
            this.animation.oncancel = this.handleCancel;
          } else if (this.animation != null) {
            this.animation.cancel();
          }
        } // if media controls disabled, reset key loop


        if (!prevProps.mediaDisabled && this.props.mediaDisabled) {
          this.stopListeningForPulses();
          this.paused.resume();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        (0, _dispatcher.off)('keydown', this.handleKeyDown, document);
        (0, _dispatcher.off)('keyup', this.handleKeyUp, document);
        (0, _dispatcher.off)('blur', this.handleBlur, window);
        (0, _dispatcher.off)('wheel', this.handleWheel, document);
        this.stopListeningForPulses();
        this.moreComponentsRenderingJob.stop();

        if (this.animation) {
          this.animation.cancel();
        }
      }
    }, {
      key: "stopListeningForPulses",
      value: function stopListeningForPulses() {
        this.pulsing = false;

        if (this.keyLoop) {
          clearTimeout(this.keyLoop);
          this.keyLoop = null;
        }
      }
    }, {
      key: "toggleMoreComponents",
      value: function toggleMoreComponents() {
        this.setState(function (prevState) {
          return {
            showMoreComponents: !prevState.showMoreComponents
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var props = Object.assign({}, this.props);
        delete props.initialJumpDelay;
        delete props.jumpDelay;
        delete props.moreActionDisabled;
        delete props.no5WayJump;
        delete props.onFastForward;
        delete props.onJump;
        delete props.onPause;
        delete props.onPlay;
        delete props.onRewind;
        delete props.onToggleMore;
        delete props.rateChangeDisabled;
        delete props.setApiProvider;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, props), {}, {
          mediaControlsRef: this.mediaControlsRef,
          moreComponentsRendered: this.state.moreComponentsRendered,
          onClose: this.handleClose,
          onFlickFromActionGuide: this.handleFlickFromActionGuide,
          onKeyDownFromMediaButtons: this.handleKeyDownFromMediaButtons,
          onPlayButtonClick: this.handlePlayButtonClick,
          onTransitionEnd: this.handleTransitionEnd,
          ref: this.getMediaControls,
          showMoreComponents: this.state.showMoreComponents
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props) {
        if (!props.visible) {
          return {
            showMoreComponents: false
          };
        }

        return null;
      }
    }]);

    return MediaControlsDecoratorHOC;
  }(_react.Component);

  MediaControlsDecoratorHOC.displayName = 'MediaControlsDecorator';
  MediaControlsDecoratorHOC.propTypes =
  /** @lends sandstone/MediaPlayer.MediaControlsDecorator.prototype */
  {
    /**
     * The label for the action guide.
     *
     * @type {String}
     * @public
     */
    actionGuideLabel: _propTypes2["default"].string,

    /**
     * These components are placed below the children. Typically these will be media playlist items.
     *
     * @type {Node}
     * @public
     */
    bottomComponents: _propTypes2["default"].node,

    /**
     * The number of milliseconds that the player will pause before firing the
     * first jump event on a right or left pulse.
     *
     * @type {Number}
     * @default 400
     * @public
     */
    initialJumpDelay: _propTypes2["default"].number,

    /**
     * The number of milliseconds that the player will throttle before firing a
     * jump event on a right or left pulse.
     *
     * @type {Number}
     * @default 200
     * @public
     */
    jumpDelay: _propTypes2["default"].number,

    /**
     * Disables the media buttons.
     *
     * @type {Boolean}
     * @public
     */
    mediaDisabled: _propTypes2["default"].bool,

    /**
     * Disables showing more components.
     *
     * @type {Boolean}
     * @public
     */
    moreActionDisabled: _propTypes2["default"].bool,

    /**
     * Setting this to `true` will disable left and right keys for seeking.
     *
     * @type {Boolean}
     * @public
     */
    no5WayJump: _propTypes2["default"].bool,

    /**
     * Called when media fast forwards.
     *
     * @type {Function}
     * @public
     */
    onFastForward: _propTypes2["default"].func,

    /**
     * Called when media jumps.
     *
     * @type {Function}
     * @public
     */
    onJump: _propTypes2["default"].func,

    /**
     * Called when media gets paused.
     *
     * @type {Function}
     * @public
     */
    onPause: _propTypes2["default"].func,

    /**
     * Called when media starts playing.
     *
     * @type {Function}
     * @public
     */
    onPlay: _propTypes2["default"].func,

    /**
     * Called when media rewinds.
     *
     * @type {Function}
     * @public
     */
    onRewind: _propTypes2["default"].func,

    /**
     * Called when the visibility of more components is changed
     *
    	 * Event payload includes:
     *
     * * `type` - Type of event, `'onToggleMore'`
     * * `showMoreComponents` - `true` when the components are visible`
     * * `liftDistance` - The distance, in pixels, the component animates
     *
     * @type {Function}
     * @public
     */
    onToggleMore: _propTypes2["default"].func,

    /**
     * The video pause state.
     *
     * @type {Boolean}
     * @public
     */
    paused: _propTypes2["default"].bool,

    /**
     * Disables state on the media "play"/"pause" button
     *
     * @type {Boolean}
     * @public
     */
    playPauseButtonDisabled: _propTypes2["default"].bool,

    /**
     * Disables the media playback-rate control via rewind and fast forward keys
     *
     * @type {Boolean}
     * @public
     */
    rateChangeDisabled: _propTypes2["default"].bool,

    /**
     * Registers the MediaControls component with an
     * [ApiDecorator]{@link core/internal/ApiDecorator.ApiDecorator}.
     *
     * @type {Function}
     * @private
     */
    setApiProvider: _propTypes2["default"].func,

    /**
     * The visibility of the component. When `false`, the component will be hidden.
     *
     * @type {Boolean}
     * @public
     */
    visible: _propTypes2["default"].bool
  };
  MediaControlsDecoratorHOC.defaultProps = {
    initialJumpDelay: 400,
    jumpDelay: 200
  };
  return (0, _Slottable["default"])({
    slots: ['bottomComponents']
  }, MediaControlsDecoratorHOC);
});
exports.MediaControlsDecorator = MediaControlsDecorator;

var handleCancel = function handleCancel(ev, _ref9) {
  var onClose = _ref9.onClose;

  if (onClose) {
    onClose(ev);
  }
};
/**
 * A set of components for controlling media playback and rendering additional components.
 *
 * This uses [Slottable]{@link ui/Slottable} to accept the custom tags, `<bottomComponents>`
 * to add components to the bottom of the media controls. Any additional children will be
 * rendered into the "more" controls area. Showing the additional components is handled by
 * `MediaControls` when the user navigates down from the media buttons.
 *
 * @class MediaControls
 * @memberof sandstone/MediaPlayer
 * @mixes ui/Cancelable.Cancelable
 * @ui
 * @public
 */


var MediaControls = (0, _ApiDecorator["default"])({
  api: ['areMoreComponentsAvailable', 'showMoreComponents', 'hideMoreComponents']
}, MediaControlsDecorator((0, _Cancelable["default"])({
  modal: true,
  onCancel: handleCancel
}, MediaControlsBase)));
exports.MediaControls = MediaControls;
MediaControls.defaultSlot = 'mediaControlsComponent';
var _default = MediaControls;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/MediaPlayer/MediaKnob.js":
/*!****************************************************************!*\
  !*** ./node_modules/@enact/sandstone/MediaPlayer/MediaKnob.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.MediaKnob = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _Slider = __webpack_require__(/*! @enact/ui/Slider */ "./node_modules/@enact/ui/Slider/Slider.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["preview", "previewProportion", "value"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Knob for the MediaSlider in {@link sandstone/MediaPlayer}.
 *
 * @class MediaKnob
 * @memberof sandstone/MediaPlayer
 * @ui
 * @private
 */


var MediaKnob = (0, _kind["default"])({
  name: 'MediaKnob',
  propTypes: {
    preview: _propTypes["default"].bool,
    previewProportion: _propTypes["default"].number,
    value: _propTypes["default"].number
  },
  computed: {
    style: function style(_ref) {
      var _style = _ref.style,
          preview = _ref.preview,
          previewProportion = _ref.previewProportion;

      if (!preview) {
        return _style;
      }

      return _objectSpread(_objectSpread({}, _style), {}, {
        '--ui-slider-proportion-end-knob': previewProportion
      });
    }
  },
  render: function render(_ref2) {
    var preview = _ref2.preview,
        previewProportion = _ref2.previewProportion,
        value = _ref2.value,
        rest = _objectWithoutProperties(_ref2, _excluded);

    if (preview) {
      value = previewProportion;
    }

    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Slider.Knob, _objectSpread(_objectSpread({}, rest), {}, {
      proportion: value,
      value: value
    }));
  }
});
exports.MediaKnob = MediaKnob;
var _default = MediaKnob;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/MediaPlayer/MediaSlider.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/sandstone/MediaPlayer/MediaSlider.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.MediaSliderBase = exports.MediaSlider = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _Slider = _interopRequireDefault(__webpack_require__(/*! ../Slider */ "./node_modules/@enact/sandstone/Slider/Slider.js"));

var _MediaKnob = _interopRequireDefault(__webpack_require__(/*! ./MediaKnob */ "./node_modules/@enact/sandstone/MediaPlayer/MediaKnob.js"));

var _MediaSliderDecorator = _interopRequireDefault(__webpack_require__(/*! ./MediaSliderDecorator */ "./node_modules/@enact/sandstone/MediaPlayer/MediaSliderDecorator.js"));

var _MediaSliderModule = _interopRequireDefault(__webpack_require__(/*! ./MediaSlider.module.css */ "./node_modules/@enact/sandstone/MediaPlayer/MediaSlider.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["className", "preview", "previewProportion", "sliderClassName"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * The base component to render a customized [Slider]{@link sandstone/Slider.Slider} for use in
 * media player components such as [VideoPlayer]{@link sandstone/VideoPlayer.VideoPlayer}.
 *
 * @class MediaSliderBase
 * @memberof sandstone/MediaPlayer
 * @ui
 * @private
 */


var MediaSliderBase = (0, _kind["default"])({
  name: 'MediaSlider',
  propTypes:
  /** @lends sandstone/MediaPlayer.MediaSlider.prototype */
  {
    /**
     * When `true`, the knob will expand. Note that Slider is a controlled
     * component. Changing the value would only affect pressed visual and
     * not the state.
     *
     * @type {Boolean}
     * @public
     */
    forcePressed: _propTypes["default"].bool,

    /**
     * Allow moving the knob via pointer or 5-way without emitting `onChange` events
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    preview: _propTypes["default"].bool,

    /**
     * The position of the knob when in `preview` mode
     *
     * @type {Number}
     * @public
     */
    previewProportion: _propTypes["default"].number,

    /**
     * The visibility of the component. When `false`, the component will be hidden.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    visible: _propTypes["default"].bool
  },
  defaultProps: {
    preview: false,
    visible: true
  },
  styles: {
    css: _MediaSliderModule["default"],
    className: 'sliderFrame'
  },
  computed: {
    className: function className(_ref) {
      var styler = _ref.styler,
          visible = _ref.visible;
      return styler.append({
        hidden: !visible
      });
    },
    sliderClassName: function sliderClassName(_ref2) {
      var styler = _ref2.styler,
          forcePressed = _ref2.forcePressed;
      return styler.join({
        pressed: forcePressed,
        mediaSlider: true
      });
    }
  },
  render: function render(_ref3) {
    var className = _ref3.className,
        preview = _ref3.preview,
        previewProportion = _ref3.previewProportion,
        sliderClassName = _ref3.sliderClassName,
        rest = _objectWithoutProperties(_ref3, _excluded);

    delete rest.forcePressed;
    delete rest.visible;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: className,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Slider["default"], _objectSpread(_objectSpread({}, rest), {}, {
        "aria-hidden": "true",
        className: sliderClassName,
        css: _MediaSliderModule["default"],
        knobComponent: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MediaKnob["default"], {
          preview: preview,
          previewProportion: previewProportion
        }),
        max: 1,
        min: 0,
        noWheel: true,
        step: 0.00001
      }))
    });
  }
});
/**
 * A customized slider suitable for use within media player components such as
 * [VideoPlayer]{@link sandstone/VideoPlayer.VideoPlayer}.
 *
 * @class MediaSlider
 * @extends sandstone/Slider.Slider
 * @memberof sandstone/MediaPlayer
 * @ui
 * @public
 */

exports.MediaSliderBase = MediaSliderBase;
var MediaSlider = (0, _MediaSliderDecorator["default"])(MediaSliderBase);
exports.MediaSlider = MediaSlider;
var _default = MediaSlider;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/MediaPlayer/MediaSliderDecorator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/MediaPlayer/MediaSliderDecorator.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.MediaSliderDecorator = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _platform = _interopRequireDefault(__webpack_require__(/*! @enact/core/platform */ "./node_modules/@enact/core/platform/platform.js"));

var _utils = __webpack_require__(/*! @enact/ui/Slider/utils */ "./node_modules/@enact/ui/Slider/utils.js");

var _clamp = _interopRequireDefault(__webpack_require__(/*! ramda/src/clamp */ "./node_modules/ramda/src/clamp.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["selection"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
} // decrements the MediaKnob position if we're tracking


var _decrement = function decrement(state) {
  if (state.tracking && state.x > 0) {
    var x = Math.max(0, state.x - 0.05);
    return {
      x: x
    };
  }

  return null;
}; // increments the MediaKnob position if we're tracking


var _increment = function increment(state) {
  if (state.tracking && state.x < 1) {
    var x = Math.min(1, state.x + 0.05);
    return {
      x: x
    };
  }

  return null;
};

var handleBlur = (0, _handle.handle)((0, _handle.forward)('onBlur'), (0, _handle.call)('untrack'));
var handleFocus = (0, _handle.handle)((0, _handle.forward)('onFocus'), // extract target from the event and pass it to track()
(0, _handle.adaptEvent)(function (_ref) {
  var target = _ref.target;
  return target;
}, (0, _handle.call)('track')));
var handleKeyDown = (0, _handle.handle)((0, _handle.forward)('onKeyDown'), (0, _handle.call)('isTracking'), // if tracking and the key is left/right update the preview x position
(0, _handle.oneOf)([(0, _handle.forKey)('left'), (0, _handle.returnsTrue)((0, _handle.call)('decrement'))], [(0, _handle.forKey)('right'), (0, _handle.returnsTrue)((0, _handle.call)('increment'))]), // if we handled left or right, preventDefault to prevent browser scroll behavior
_handle.preventDefault, // stopImmediate to prevent spotlight handling
_handle.stopImmediate);
var handleKeyUp = (0, _handle.handle)((0, _handle.forward)('onKeyUp'), (0, _handle.call)('isTracking'), (0, _handle.forKey)('enter'), // prevent sandstone/Slider from activating the knob
_handle.preventDefault, (0, _handle.adaptEvent)((0, _handle.call)('getEventPayload'), (0, _handle.forward)('onChange')));
/**
 * MediaSlider for {@link sandstone/VideoPlayer}.
 *
 * @class MediaSliderDecorator
 * @memberof sandstone/MediaPlayer
 * @hoc
 * @private
 */

var MediaSliderDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class;

  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);
      _this.handleMouseOver = _this.handleMouseOver.bind(_assertThisInitialized(_this));
      _this.handleMouseOut = _this.handleMouseOut.bind(_assertThisInitialized(_this));
      _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_this));

      if (_platform["default"].touch) {
        _this.handleTouchMove = _this.handleTouchMove.bind(_assertThisInitialized(_this));
      }

      handleBlur.bindAs(_assertThisInitialized(_this), 'handleBlur');
      handleFocus.bindAs(_assertThisInitialized(_this), 'handleFocus');
      handleKeyDown.bindAs(_assertThisInitialized(_this), 'handleKeyDown');
      handleKeyUp.bindAs(_assertThisInitialized(_this), 'handleKeyUp');
      _this.state = {
        maxX: 0,
        minX: 0,
        tracking: false,
        x: 0
      };
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (prevState.x !== this.state.x) {
          (0, _handle.forward)('onKnobMove', this.getEventPayload('onKnobMove'), this.props);
        }
      }
    }, {
      key: "getEventPayload",
      value: function getEventPayload(type) {
        return {
          type: type,
          value: this.state.x,
          proportion: this.state.x
        };
      }
    }, {
      key: "track",
      value: function track(target) {
        var bounds = target.getBoundingClientRect();
        this.setState({
          maxX: bounds.right,
          minX: bounds.left,
          tracking: true,
          x: this.props.value
        });
      }
    }, {
      key: "move",
      value: function move(clientX) {
        this.setState(function (state) {
          var value = (0, _clamp["default"])(state.minX, state.maxX, clientX);
          return {
            x: (0, _utils.calcProportion)(state.minX, state.maxX, value)
          };
        });
      }
    }, {
      key: "untrack",
      value: function untrack() {
        this.setState({
          maxX: 0,
          minX: 0,
          tracking: false
        });
      }
    }, {
      key: "decrement",
      value: function decrement() {
        this.setState(_decrement);
      }
    }, {
      key: "increment",
      value: function increment() {
        this.setState(_increment);
      }
    }, {
      key: "isTracking",
      value: function isTracking() {
        return this.state.tracking;
      }
    }, {
      key: "handleMouseOver",
      value: function handleMouseOver(ev) {
        if (ev.currentTarget.contains(ev.relatedTarget)) {
          return;
        }

        this.track(ev.currentTarget);
        this.move(ev.clientX);
      }
    }, {
      key: "handleMouseOut",
      value: function handleMouseOut(ev) {
        if (ev.currentTarget.contains(ev.relatedTarget)) {
          return;
        }

        this.untrack();
      }
    }, {
      key: "handleMouseMove",
      value: function handleMouseMove(ev) {
        this.move(ev.clientX);
      }
    }, {
      key: "handleTouchMove",
      value: function handleTouchMove(ev) {
        // ignores multi touch
        this.move(ev.touches[0].clientX);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            selection = _this$props.selection,
            rest = _objectWithoutProperties(_this$props, _excluded);

        var backgroundProgress = this.props.backgroundProgress;
        var progressAnchor = 0;

        if (selection != null && selection.length > 0) {
          // extracts both values from selection, defaulting backgroundProgress to
          // progressAnchor if not defined
          var _selection = _slicedToArray(selection, 2);

          progressAnchor = _selection[0];
          var _selection$ = _selection[1];
          backgroundProgress = _selection$ === void 0 ? progressAnchor : _selection$;
        }

        delete rest.onKnobMove;

        if (_platform["default"].touch) {
          rest.onTouchMove = this.handleTouchMove;
        }

        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, rest), {}, {
          backgroundProgress: backgroundProgress,
          onBlur: this.handleBlur,
          onFocus: this.handleFocus,
          onKeyDown: this.handleKeyDown,
          onKeyUp: this.handleKeyUp,
          onMouseOver: this.handleMouseOver,
          onMouseOut: this.handleMouseOut,
          onMouseMove: this.handleMouseMove,
          preview: this.state.tracking,
          previewProportion: this.state.x,
          progressAnchor: progressAnchor
        }));
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'MediaSliderDecorator', _class.propTypes = {
    backgroundProgress: _propTypes["default"].number,
    selection: _propTypes["default"].arrayOf(_propTypes["default"].number),
    value: _propTypes["default"].number
  }, _class;
});
exports.MediaSliderDecorator = MediaSliderDecorator;
var _default = MediaSliderDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/MediaPlayer/Times.js":
/*!************************************************************!*\
  !*** ./node_modules/@enact/sandstone/MediaPlayer/Times.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.TimesBase = exports.Times = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _util = __webpack_require__(/*! ../internal/util */ "./node_modules/@enact/sandstone/internal/util/util.js");

var _util2 = __webpack_require__(/*! ./util */ "./node_modules/@enact/sandstone/MediaPlayer/util.js");

var _TimesModule = _interopRequireDefault(__webpack_require__(/*! ./Times.module.css */ "./node_modules/@enact/sandstone/MediaPlayer/Times.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["currentPeriod", "currentReadable", "noCurrentTime", "noSeparator", "noTotalTime", "totalPeriod", "totalReadable"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Sandstone-styled formatted time component.
 *
 * @class Times
 * @memberof sandstone/MediaPlayer
 * @ui
 * @public
 */


var TimesBase = (0, _kind["default"])({
  name: 'Times',
  propTypes:
  /** @lends sandstone/MediaPlayer.Times.prototype */
  {
    /**
     * An instance of a Duration Formatter from i18n.
     *
     * Must has a `format()` method that returns a string.
     *
     * @type {Object}
     * @required
     * @public
     */
    formatter: _propTypes["default"].object.isRequired,

    /**
     * The current time in seconds of the video source.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    current: _propTypes["default"].number,

    /**
     * Removes the current time.
     *
     * @type {Boolean}
     * @public
     */
    noCurrentTime: _propTypes["default"].bool,

    /**
     * Removes the total time.
     *
     * @type {Boolean}
     * @public
     */
    noTotalTime: _propTypes["default"].bool,

    /**
     * The total time (duration) in seconds of the loaded video source.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    total: _propTypes["default"].number
  },
  defaultProps: {
    current: 0,
    total: 0
  },
  styles: {
    css: _TimesModule["default"],
    className: 'times'
  },
  computed: {
    currentPeriod: function currentPeriod(_ref) {
      var current = _ref.current;
      return (0, _util2.secondsToPeriod)(current);
    },
    currentReadable: function currentReadable(_ref2) {
      var current = _ref2.current,
          formatter = _ref2.formatter;
      return (0, _util2.secondsToTime)(current, formatter);
    },
    noSeparator: function noSeparator(_ref3) {
      var noCurrentTime = _ref3.noCurrentTime,
          noTotalTime = _ref3.noTotalTime;
      return noCurrentTime || noTotalTime;
    },
    totalPeriod: function totalPeriod(_ref4) {
      var total = _ref4.total;
      return (0, _util2.secondsToPeriod)(total);
    },
    totalReadable: function totalReadable(_ref5) {
      var total = _ref5.total,
          formatter = _ref5.formatter;
      return (0, _util2.secondsToTime)(total, formatter);
    }
  },
  render: function render(_ref6) {
    var currentPeriod = _ref6.currentPeriod,
        currentReadable = _ref6.currentReadable,
        noCurrentTime = _ref6.noCurrentTime,
        noSeparator = _ref6.noSeparator,
        noTotalTime = _ref6.noTotalTime,
        totalPeriod = _ref6.totalPeriod,
        totalReadable = _ref6.totalReadable,
        rest = _objectWithoutProperties(_ref6, _excluded);

    delete rest.current;
    delete rest.formatter;
    delete rest.total;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
      children: [noCurrentTime ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)("time", {
        className: _TimesModule["default"].currentTime,
        dateTime: currentPeriod,
        children: currentReadable
      }), noSeparator ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        className: _TimesModule["default"].separator,
        children: "/"
      }), noTotalTime ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)("time", {
        className: _TimesModule["default"].totalTime,
        dateTime: totalPeriod,
        children: totalReadable
      })]
    }));
  }
});
exports.TimesBase = TimesBase;
var Times = (0, _util.onlyUpdateForProps)(TimesBase, ['current', 'formatter', 'total']);
exports.Times = Times;
var _default = Times;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/MediaPlayer/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@enact/sandstone/MediaPlayer/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "MediaControls", ({
  enumerable: true,
  get: function get() {
    return _MediaControls["default"];
  }
}));
Object.defineProperty(exports, "MediaSlider", ({
  enumerable: true,
  get: function get() {
    return _MediaSlider["default"];
  }
}));
Object.defineProperty(exports, "Times", ({
  enumerable: true,
  get: function get() {
    return _Times["default"];
  }
}));
Object.defineProperty(exports, "secondsToTime", ({
  enumerable: true,
  get: function get() {
    return _util.secondsToTime;
  }
}));

var _util = __webpack_require__(/*! ./util */ "./node_modules/@enact/sandstone/MediaPlayer/util.js");

var _MediaControls = _interopRequireDefault(__webpack_require__(/*! ./MediaControls */ "./node_modules/@enact/sandstone/MediaPlayer/MediaControls.js"));

var _MediaSlider = _interopRequireDefault(__webpack_require__(/*! ./MediaSlider */ "./node_modules/@enact/sandstone/MediaPlayer/MediaSlider.js"));

var _Times = _interopRequireDefault(__webpack_require__(/*! ./Times */ "./node_modules/@enact/sandstone/MediaPlayer/Times.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

/***/ }),

/***/ "./node_modules/@enact/sandstone/MediaPlayer/util.js":
/*!***********************************************************!*\
  !*** ./node_modules/@enact/sandstone/MediaPlayer/util.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.secondsToTime = exports.secondsToPeriod = exports.parseTime = exports.countReactChildren = void 0;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js"); // MediaPlayer utils.js
//

/**
 * Create a time object (hour, minute, second) from an amount of seconds.
 *
 * @param  {Number|String} value A duration of time represented in seconds
 *
 * @returns {Object}       An object with keys {hour, minute, second} representing the duration
 *                        seconds provided as an argument.
 * @private
 */


var parseTime = function parseTime(value) {
  value = parseFloat(value);
  var time = {};
  var hour = Math.floor(value / (60 * 60));
  time.minute = Math.floor(value / 60 % 60);
  time.second = Math.floor(value % 60);

  if (hour) {
    time.hour = hour;
  }

  return time;
};
/**
 * Generate a time usable by <time datetime />.
 *
 * @param  {Number|String} seconds A duration of time represented in seconds
 *
 * @returns {String}      String formatted for use in a `datetime` field of a `<time>` tag.
 * @private
 */


exports.parseTime = parseTime;

var secondsToPeriod = function secondsToPeriod(seconds) {
  return 'P' + seconds + 'S';
};
/**
 * Formats a duration in seconds into a human-readable time.
 *
 * @type {Function}
 * @param  {Number|String} seconds A duration of time represented in seconds
 * @param  {DurationFmt}   durfmt  An instance of a `ilib.DurationFmt` object from iLib configured
 *                                 to display time
 * @param  {Object}        config  Additional configuration object that includes `includeHour`
 *
 * @returns {String} Formatted duration string
 * @memberof sandstone/MediaPlayer
 * @public
 */


exports.secondsToPeriod = secondsToPeriod;

var secondsToTime = function secondsToTime(seconds, durfmt, config) {
  var includeHour = config && config.includeHour;

  if (durfmt) {
    var parsedTime = parseTime(seconds);
    var timeString = durfmt.format(parsedTime).toString();

    if (includeHour && !parsedTime.hour) {
      return '00:' + timeString;
    } else {
      return timeString;
    }
  }

  return includeHour ? '00:00:00' : '00:00';
};
/**
 * Safely count the children nodes and exclude null & undefined values for an accurate count of
 * real children
 *
 * @param {component} children React.Component or React.PureComponent
 * @returns {Number} Number of children nodes
 * @private
 */


exports.secondsToTime = secondsToTime;

var countReactChildren = function countReactChildren(children) {
  return _react.Children.toArray(children).filter(function (n) {
    return n != null;
  }).length;
};

exports.countReactChildren = countReactChildren;

/***/ }),

/***/ "./node_modules/@enact/sandstone/ProgressBar/ProgressBar.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ProgressBar/ProgressBar.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ProgressBarDecorator = exports.ProgressBarBase = exports.ProgressBar = void 0;
Object.defineProperty(exports, "ProgressBarTooltip", ({
  enumerable: true,
  get: function get() {
    return _ProgressBarTooltip.ProgressBarTooltip;
  }
}));
exports["default"] = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _ComponentOverride = _interopRequireDefault(__webpack_require__(/*! @enact/ui/ComponentOverride */ "./node_modules/@enact/ui/ComponentOverride/ComponentOverride.js"));

var _ProgressBar = _interopRequireDefault(__webpack_require__(/*! @enact/ui/ProgressBar */ "./node_modules/@enact/ui/ProgressBar/ProgressBar.js"));

var _Pure = _interopRequireDefault(__webpack_require__(/*! @enact/ui/internal/Pure */ "./node_modules/@enact/ui/internal/Pure/Pure.js"));

var _Slottable = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Slottable */ "./node_modules/@enact/ui/Slottable/Slottable.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _ProgressBarTooltip = __webpack_require__(/*! ./ProgressBarTooltip */ "./node_modules/@enact/sandstone/ProgressBar/ProgressBarTooltip.js");

var _ProgressBarModule = _interopRequireDefault(__webpack_require__(/*! ./ProgressBar.module.css */ "./node_modules/@enact/sandstone/ProgressBar/ProgressBar.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["css", "orientation", "progress", "tooltip"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Renders a sandstone-styled progress bar.
 *
 * @class ProgressBarBase
 * @memberof sandstone/ProgressBar
 * @ui
 * @public
 */


var ProgressBarBase = (0, _kind["default"])({
  name: 'ProgressBar',
  propTypes:
  /** @lends sandstone/ProgressBar.ProgressBarBase.prototype */
  {
    /**
     * The proportion of the loaded portion of the progress bar.
     *
     * * Valid values are between `0` and `1`.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    backgroundProgress: _propTypes["default"].number,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `progressBar` - The root component class
     * * `radial` - Applied when `orientation` is `'radial'`
     *
     * @type {Object}
     * @public
     */
    // `'bar` and `fill'` were intentionally excluded from the above documented
    // exported classes as they do not appear to provide value to the end-developer, but are
    // needed by ProgressButton internally for its design guidelines.
    css: _propTypes["default"].object,

    /**
     * Highlights the filled portion.
     *
     * @type {Boolean}
     * @public
     */
    highlighted: _propTypes["default"].bool,

    /**
     * The orientation of the slider.
     *
     * @type {('horizontal'|'vertical'|'radial')}
     * @default 'horizontal'
     * @public
     */
    orientation: _propTypes["default"].oneOf(['horizontal', 'vertical', 'radial']),

    /**
     * A number between `0` and `1` indicating the proportion of the filled portion of the bar.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    progress: _propTypes["default"].number,

    /**
     * Displays an anchor at `progressAnchor`.
     *
     * @type {Boolean}
     * @public
     */
    showAnchor: _propTypes["default"].bool,

    /**
     * Enables the built-in tooltip.
     *
     * To customize the tooltip, pass either a custom tooltip component or an instance of
     * [ProgressBarTooltip]{@link sandstone/ProgressBar.ProgressBarTooltip} with additional
     * props configured.
     *
     * The provided component will receive the following props from `ProgressBar`:
     *
     * * `orientation`  - The value of `orientation`
     * * `percent`      - Always `true` indicating the value should be presented as a percentage
     *                    rather than an absolute value
     * * `progress`     - The `value` as a proportion between `min` and `max`
     * * `visible`      - Always `true` indicating that the tooltip should be visible
     *
     * Usage:
     * ```
     * <ProgressBar
     *   tooltip={
     *     <ProgressBarTooltip position="after" />
     *   }
     * />
     * ```
     *
     * The tooltip may also be passed as a child via the `"tooltip"` slot. See
     * [Slottable]{@link ui/Slottable} for more information on how slots can be used.
     *
     * Usage:
     * ```
     * <ProgressBar>
     *   <ProgressBarTooltip position="after" />
     * </ProgressBar>
     * ```
     *
     * @type {Boolean|Component|Element}
     * @public
     */
    tooltip: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].element, _propTypes["default"].func])
  },
  defaultProps: {
    backgroundProgress: 0,
    orientation: 'horizontal',
    progress: 0
  },
  styles: {
    css: _ProgressBarModule["default"],
    publicClassNames: ['progressBar', 'radial', 'bar', 'fill']
  },
  computed: {
    className: function className(_ref) {
      var highlighted = _ref.highlighted,
          showAnchor = _ref.showAnchor,
          styler = _ref.styler;
      return styler.append({
        highlighted: highlighted,
        showAnchor: showAnchor
      });
    },
    tooltip: function tooltip(_ref2) {
      var _tooltip = _ref2.tooltip;
      return _tooltip === true ? _ProgressBarTooltip.ProgressBarTooltip : _tooltip;
    }
  },
  render: function render(_ref3) {
    var css = _ref3.css,
        orientation = _ref3.orientation,
        progress = _ref3.progress,
        tooltip = _ref3.tooltip,
        rest = _objectWithoutProperties(_ref3, _excluded);

    delete rest.tooltip;
    delete rest.highlighted;
    delete rest.showAnchor;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ProgressBar["default"], _objectSpread(_objectSpread({}, rest), {}, {
      orientation: orientation,
      progress: progress,
      css: css,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComponentOverride["default"], {
        component: tooltip,
        orientation: orientation,
        percent: true,
        proportion: progress,
        visible: true
      })
    }));
  }
});
/**
 * Sandstone-specific behaviors to apply to [ProgressBar]{@link sandstone/ProgressBar.ProgressBarBase}.
 *
 * @hoc
 * @memberof sandstone/ProgressBar
 * @mixes sandstone/Skinnable.Skinnable
 * @public
 */

exports.ProgressBarBase = ProgressBarBase;
var ProgressBarDecorator = (0, _compose["default"])(_Pure["default"], (0, _Slottable["default"])({
  slots: ['tooltip']
}), _Skinnable["default"]);
/**
 * The ready-to-use Sandstone-styled ProgressBar.
 *
 * @class ProgressBar
 * @memberof sandstone/ProgressBar
 * @extends sandstone/ProgressBar.ProgressBarBase
 * @mixes sandstone/ProgressBar.ProgressBarDecorator
 * @ui
 * @public
 */

exports.ProgressBarDecorator = ProgressBarDecorator;
var ProgressBar = ProgressBarDecorator(ProgressBarBase);
exports.ProgressBar = ProgressBar;
var _default = ProgressBar;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/ProgressBar/ProgressBarTooltip.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ProgressBar/ProgressBarTooltip.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ProgressBarTooltipBase = exports.ProgressBarTooltip = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _i18n = _interopRequireDefault(__webpack_require__(/*! @enact/i18n */ "./node_modules/@enact/i18n/src/index.js"));

var _I18nDecorator = __webpack_require__(/*! @enact/i18n/I18nDecorator */ "./node_modules/@enact/i18n/I18nDecorator/I18nDecorator.js");

var _NumFmt = _interopRequireDefault(__webpack_require__(/*! ilib/lib/NumFmt */ "./node_modules/ilib/lib/NumFmt.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _Tooltip = _interopRequireDefault(__webpack_require__(/*! ../TooltipDecorator/Tooltip */ "./node_modules/@enact/sandstone/TooltipDecorator/Tooltip.js"));

var _ProgressBarTooltipModule = _interopRequireDefault(__webpack_require__(/*! ./ProgressBarTooltip.module.css */ "./node_modules/@enact/sandstone/ProgressBar/ProgressBarTooltip.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["children", "css", "visible"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

var verticalPositions = ['before', 'after', 'left', 'right'];

var isVerticalModeRadial = function isVerticalModeRadial(orientation, position) {
  return orientation === 'radial' && verticalPositions.includes(position);
}; // prop-type validator that warns on invalid orientation + position

/* istanbul ignore next */


var validatePosition = function validatePosition(base) {
  return function (props, key, componentName, location, propFullName) {
    var position = props.position;

    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }

    var result = base.apply(void 0, [props, key, componentName, location, propFullName].concat(rest));

    if (!result && position) {
      var orientation = props.orientation || 'horizontal';
      var hasVerticalValue = verticalPositions.includes(position);

      if (orientation === 'vertical' && !hasVerticalValue || orientation === 'horizontal' && hasVerticalValue) {
        result = new Error("'".concat(key, "' value '").concat(position, "' is not a valid value for the orientation '").concat(orientation, "'"));
      }
    }

    return result;
  };
};

var memoizedPercentFormatter = (0, _util.memoize)(function
  /* locale */
() {
  return new _NumFmt["default"]({
    type: 'percentage',
    useNative: false
  });
});

var getDefaultPosition = function getDefaultPosition(orientation) {
  return orientation === 'horizontal' ? 'above' : 'after';
}; // Returns an array of keywords with horizontal first and vertical second


var getSide = function getSide(orientation, position) {
  position = position || getDefaultPosition(orientation);

  if (orientation === 'horizontal') {
    switch (position) {
      case 'above':
      case 'below':
        return ['auto', position];

      case 'above after':
      case 'above before':
      case 'above center':
      case 'above left':
      case 'above right':
      case 'below after':
      case 'below before':
      case 'below center':
      case 'below left':
      case 'below right':
        return position.split(' ').reverse();

      default:
        // invalid values for horizontal so use defaults
        return ['auto', 'above'];
    }
  } else if (orientation === 'vertical') {
    switch (position) {
      case 'after':
      case 'before':
      case 'left':
      case 'right':
        return [position, 'above'];

      default:
        // invalid values for horizontal so use defaults
        return ['after', 'auto'];
    }
  } else {
    switch (position) {
      case 'above':
      case 'below':
        return ['auto', position];

      case 'above after':
      case 'above before':
      case 'above center':
      case 'above left':
      case 'above right':
      case 'below after':
      case 'below before':
      case 'below center':
      case 'below left':
      case 'below right':
        return position.split(' ').reverse();

      case 'after':
      case 'before':
      case 'left':
      case 'right':
        return [position, 'above'];

      default:
        // invalid values for radial so use defaults
        return ['auto', 'above'];
    }
  }
};
/**
 * A [Tooltip]{@link sandstone/TooltipDecorator.Tooltip} specifically adapted for use with
 * [ProgressBar]{@link sandstone/ProgressBar.ProgressBar} or
 * [Slider]{@link sandstone/Slider.Slider}.
 *
 * @class ProgressBarTooltip
 * @memberof sandstone/ProgressBar
 * @ui
 * @public
 */


var ProgressBarTooltipBase = (0, _kind["default"])({
  name: 'ProgressBarTooltip',
  propTypes:
  /** @lends sandstone/ProgressBar.ProgressBarTooltip.prototype */
  {
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `tooltip` - The root component class
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,

    /**
     * Sets the orientation of the tooltip based on the orientation of the bar.
     *
     * 'vertical' sends the tooltip to one of the sides, 'horizontal' positions it above the
     * bar, 'radial' can position it on all sides.
     *
     * @type {('horizontal'|'vertical'|'radial')}
     * @default 'horizontal'
     * @public
     */
    orientation: _propTypes["default"].oneOf(['horizontal', 'vertical', 'radial']),

    /**
     * Displays the value as a percentage.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    percent: _propTypes["default"].bool,

    /**
     * Position of the tooltip with respect to the progress bar.
     *
     * * For `orientation="horizontal"` or `orientation="radial"` progress bars, the default value is `'above'`.
     * * For `orientation="vertical"` progress bars, the default value is `'before'`.
     *
     * When using `'before'` or `'after'` alone or in any of the below combinations, `'before'`
     * will position the tooltip on the side of the current locale's text directionality. In LTR
     * locales, it will be on the left; in RTL locales, it will be on the right. Similarly,
     * `'after'` will position the tooltip on the opposite side: the right side for LTR and
     * left for RTL.
     *
     * Valid values when `orientation="horizontal"` or `orientation="radial"`
     *
     * | *Value* | *Tooltip Direction* |
     * |---|---|
     * | `'above'` | Above component, flowing to the nearest end |
     * | `'above left'` | Above component, flowing to the left |
     * | `'above before'` | Above component, flowing to the start of text |
     * | `'above center'` | Above component, flowing to the center |
     * | `'above right'` | Above component, flowing to the right |
     * | `'above after'` | Above component, flowing to the end of text |
     * | `'below'` | Below component, flowing to the nearest end |
     * | `'below left'` | Below component, flowing to the left |
     * | `'below before'` | Below component, flowing to the start of text |
     * | `'below center'` | Below component, flowing to the center |
     * | `'below right'` | Below component, flowing to the right |
     * | `'below after'` | Below component, flowing to the end of text |
     *
     * Valid values when `orientation="vertical"` or `orientation="radial"`
     *
     * | *Value* | *Tooltip Direction* |
     * |---|---|
     * | `'left'` | Left of the component, contents middle aligned |
     * | `'before'` | Start of text side of the component, contents middle aligned |
     * | `'right'` | right of the component, contents middle aligned |
     * | `'after'` | End of text side of the component, contents middle aligned |
     *
     * @type {('above'|'above before'|'above left'|'above after'|'above center'|'above right'|'below'|'below left'|'below before'|'below center'|'below right'|'below after'|'left'|'before'|'right'|'after')}
     * @public
     */
    position: validatePosition(_propTypes["default"].oneOf([// horizontal or radial
    'above', 'above before', 'above left', 'above center', 'above after', 'above right', 'below', 'below left', 'below before', 'below center', 'below right', 'below after', // vertical or radial
    'left', 'before', 'right', 'after'])),

    /**
     * The proportion of the filled part of the bar.
     *
     * * Should be a number between 0 and 1.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    proportion: _propTypes["default"].number,

    /**
     * Sets the text direction to be right-to-left
     *
     * @type {Boolean}
     * @private
     */
    rtl: _propTypes["default"].bool,

    /**
     * Visibility of the tooltip
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    visible: _propTypes["default"].bool
  },
  defaultProps: {
    orientation: 'horizontal',
    percent: false,
    proportion: 0,
    visible: false
  },
  styles: {
    css: _ProgressBarTooltipModule["default"],
    className: 'tooltip',
    publicClassNames: true
  },
  computed: {
    children: function children(_ref) {
      var _children = _ref.children,
          proportion = _ref.proportion,
          percent = _ref.percent;

      if (percent) {
        var formatter = memoizedPercentFormatter(_i18n["default"].getLocale());
        return formatter.format(Math.round(proportion * 100));
      }

      return _children;
    },
    className: function className(_ref2) {
      var orientation = _ref2.orientation,
          position = _ref2.position,
          proportion = _ref2.proportion,
          styler = _ref2.styler;

      var _getSide = getSide(orientation, position),
          _getSide2 = _slicedToArray(_getSide, 2),
          h = _getSide2[0],
          v = _getSide2[1];

      return styler.append(orientation, {
        above: v === 'above' && !isVerticalModeRadial(orientation, position),
        below: v === 'below' && !isVerticalModeRadial(orientation, position),
        before: h === 'before',
        after: h === 'after',
        center: h === 'center',
        left: h === 'left' || h === 'auto' && proportion <= 0.5,
        right: h === 'right' || h === 'auto' && proportion > 0.5
      });
    },
    arrowAnchor: function arrowAnchor(_ref3) {
      var orientation = _ref3.orientation,
          position = _ref3.position,
          rtl = _ref3.rtl;
      if (orientation === 'vertical' || isVerticalModeRadial(orientation, position)) return 'middle';

      var _getSide3 = getSide(orientation, position),
          _getSide4 = _slicedToArray(_getSide3, 1),
          h = _getSide4[0];

      switch (h) {
        case 'auto':
          return 'center';

        case 'before':
          return rtl ? 'right' : 'left';

        case 'after':
          return rtl ? 'left' : 'right';

        case 'left':
        case 'right':
        case 'center':
          return h;
      }
    },
    direction: function direction(_ref4) {
      var orientation = _ref4.orientation,
          position = _ref4.position,
          rtl = _ref4.rtl;

      var _getSide5 = getSide(orientation, position),
          _getSide6 = _slicedToArray(_getSide5, 2),
          h = _getSide6[0],
          v = _getSide6[1];

      var dir = 'right';

      if (orientation === 'vertical' || isVerticalModeRadial(orientation, position)) {
        if ( // forced to the left
        h === 'left' || // LTR before
        !rtl && h === 'before' || // RTL after
        rtl && h === 'after') {
          dir = 'left';
        }
      } else {
        dir = v !== 'below' ? 'above' : 'below';
      }

      return dir;
    },
    style: function style(_ref5) {
      var proportion = _ref5.proportion,
          _style = _ref5.style;
      return _objectSpread(_objectSpread({}, _style), {}, {
        '--tooltip-progress-proportion': proportion
      });
    }
  },
  render: function render(_ref6) {
    var children = _ref6.children,
        css = _ref6.css,
        visible = _ref6.visible,
        rest = _objectWithoutProperties(_ref6, _excluded);

    if (!visible) return null;
    delete rest.orientation;
    delete rest.percent;
    delete rest.position;
    delete rest.proportion;
    delete rest.rtl;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tooltip["default"], _objectSpread(_objectSpread({}, rest), {}, {
      css: css,
      children: children
    }));
  }
});
exports.ProgressBarTooltipBase = ProgressBarTooltipBase;
var ProgressBarTooltip = (0, _I18nDecorator.I18nContextDecorator)({
  rtlProp: 'rtl'
}, ProgressBarTooltipBase);
exports.ProgressBarTooltip = ProgressBarTooltip;
ProgressBarTooltip.defaultSlot = 'tooltip';
var _default = ProgressBarTooltip;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js":
/*!**************************************************************!*\
  !*** ./node_modules/@enact/sandstone/Skinnable/Skinnable.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Skinnable = void 0;

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Skinnable */ "./node_modules/@enact/ui/Skinnable/Skinnable.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Exports the {@link sandstone/Skinnable.Skinnable} higher-order component (HOC).
 *
 * @module sandstone/Skinnable
 * @exports Skinnable
 * @public
 */


var defaultConfig = {
  skins: {
    neutral: 'neutral',
    light: 'light',
    game: 'game'
  },
  allowedVariants: ['highContrast', 'largeText', 'grayscale'],
  defaultVariants: null
};
/**
 * This higher-order component is based on [ui/Skinnable]{@link ui/Skinnable.Skinnable}.
 *
 * `Skinnable` comes pre-configured for Sandstone's supported skins: "neutral" (default) and "light".
 * It is used to apply the relevant skinning classes to each component and has been used to
 * pre-select specific skins for some components.
 *
 * Note: This HoC passes `className` to the wrapped component. It must be passed to the main DOM
 * node.
 *
 * @class Skinnable
 * @memberof sandstone/Skinnable
 * @extends ui/Skinnable.Skinnable
 * @hoc
 * @public
 */

var Skinnable = (0, _hoc["default"])(defaultConfig, _Skinnable["default"]);
/**
 * Select a skin by name by specifying this property.
 *
 * Available Sandstone skins are `"neutral"` (default) and `"light"`. This may be changed at runtime.
 * All components already use their defaults, but a skin may be changed via this prop or by using
 * `Skinnable` directly and a config object.
 *
 * Example:
 * ```
 * <Button skin="light">
 * ```
 *
 * @name skin
 * @type {String}
 * @default 'neutral'
 * @memberof sandstone/Skinnable.Skinnable
 * @instance
 * @public
 */

exports.Skinnable = Skinnable;
var _default = Skinnable;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/Slider/Slider.js":
/*!********************************************************!*\
  !*** ./node_modules/@enact/sandstone/Slider/Slider.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SliderDecorator = exports.SliderBase = exports.Slider = void 0;
Object.defineProperty(exports, "SliderTooltip", ({
  enumerable: true,
  get: function get() {
    return _ProgressBar2.ProgressBarTooltip;
  }
}));
exports["default"] = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _useHandlers = _interopRequireDefault(__webpack_require__(/*! @enact/core/useHandlers */ "./node_modules/@enact/core/useHandlers/useHandlers.js"));

var _usePublicClassNames = __webpack_require__(/*! @enact/core/usePublicClassNames */ "./node_modules/@enact/core/usePublicClassNames/usePublicClassNames.js");

var _Accelerator = _interopRequireDefault(__webpack_require__(/*! @enact/spotlight/Accelerator */ "./node_modules/@enact/spotlight/Accelerator/Accelerator.js"));

var _Spottable = _interopRequireDefault(__webpack_require__(/*! @enact/spotlight/Spottable */ "./node_modules/@enact/spotlight/Spottable/Spottable.js"));

var _Changeable = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Changeable */ "./node_modules/@enact/ui/Changeable/Changeable.js"));

var _ComponentOverride = _interopRequireDefault(__webpack_require__(/*! @enact/ui/ComponentOverride */ "./node_modules/@enact/ui/ComponentOverride/ComponentOverride.js"));

var _ProgressBar = _interopRequireDefault(__webpack_require__(/*! @enact/ui/ProgressBar */ "./node_modules/@enact/ui/ProgressBar/ProgressBar.js"));

var _Pure = _interopRequireDefault(__webpack_require__(/*! @enact/ui/internal/Pure */ "./node_modules/@enact/ui/internal/Pure/Pure.js"));

var _Slottable = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Slottable */ "./node_modules/@enact/ui/Slottable/Slottable.js"));

var _Slider = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Slider */ "./node_modules/@enact/ui/Slider/Slider.js"));

var _classnames2 = _interopRequireDefault(__webpack_require__(/*! classnames */ "./node_modules/classnames/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _anyPass = _interopRequireDefault(__webpack_require__(/*! ramda/src/anyPass */ "./node_modules/ramda/src/anyPass.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _ProgressBar2 = __webpack_require__(/*! ../ProgressBar */ "./node_modules/@enact/sandstone/ProgressBar/ProgressBar.js");

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _validators = __webpack_require__(/*! ../internal/validators */ "./node_modules/@enact/sandstone/internal/validators/validators.js");

var _SliderBehaviorDecorator = _interopRequireDefault(__webpack_require__(/*! ./SliderBehaviorDecorator */ "./node_modules/@enact/sandstone/Slider/SliderBehaviorDecorator.js"));

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@enact/sandstone/Slider/utils.js");

var _SliderModule = _interopRequireDefault(__webpack_require__(/*! ./Slider.module.css */ "./node_modules/@enact/sandstone/Slider/Slider.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["active", "className", "css", "disabled", "focused", "keyFrequency", "showAnchor"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Range-selection input component.
 *
 * @class SliderBase
 * @extends ui/Slider.SliderBase
 * @omit progressBarComponent
 * @memberof sandstone/Slider
 * @ui
 * @public
 */


var SliderBase = function SliderBase(props) {
  var _classnames;

  var active = props.active,
      className = props.className,
      css = props.css,
      disabled = props.disabled,
      focused = props.focused,
      keyFrequency = props.keyFrequency,
      showAnchor = props.showAnchor,
      rest = _objectWithoutProperties(props, _excluded);

  (0, _validators.validateSteppedOnce)(function (p) {
    return p.knobStep;
  }, {
    component: 'Slider',
    stepName: 'knobStep',
    valueName: 'max'
  })(props);
  var step = (0, _validators.validateSteppedOnce)(function (p) {
    return p.step;
  }, {
    component: 'Slider',
    valueName: 'max'
  })(props);
  var tooltip = props.tooltip === true ? _ProgressBar2.ProgressBarTooltip : props.tooltip;
  var spotlightAccelerator = (0, _react.useRef)();
  var ref = (0, _react.useRef)();

  var _useRef = (0, _react.useRef)({
    lastWheelTimeStamp: 0
  }),
      context = _useRef.current;

  var handlers = (0, _useHandlers["default"])({
    onBlur: (0, _handle.handle)((0, _handle.forward)('onBlur'), (0, _handle.forProp)('active', true), (0, _handle.forward)('onActivate')),
    onKeyDown: (0, _handle.handle)((0, _handle.forProp)('disabled', false), (0, _handle.forwardWithPrevent)('onKeyDown'), (0, _anyPass["default"])([_utils.handleIncrement, _utils.handleDecrement])),
    onKeyUp: (0, _handle.handle)((0, _handle.forProp)('disabled', false), (0, _handle.forwardWithPrevent)('onKeyUp'), (0, _handle.forProp)('activateOnSelect', true), (0, _handle.forKey)('enter'), (0, _handle.forward)('onActivate'))
  }, props, spotlightAccelerator);
  var nativeEventHandlers = (0, _useHandlers["default"])({
    onWheel: (0, _handle.handle)((0, _handle.forProp)('disabled', false), (0, _handle.not)((0, _handle.forProp)('noWheel', true)), (0, _handle.forwardWithPrevent)('onWheel'), (0, _anyPass["default"])([_utils.handleIncrementByWheel, _utils.handleDecrementByWheel]))
  }, props, context); // if the props includes a css map, merge them together

  var mergedCss = (0, _usePublicClassNames.usePublicClassNames)({
    componentCss: _SliderModule["default"],
    customCss: css,
    publicClassNames: true
  });
  var componentClassName = (0, _classnames2["default"])(_SliderModule["default"].slider, className, (_classnames = {}, _defineProperty(_classnames, mergedCss.active, active), _defineProperty(_classnames, mergedCss.showAnchor, showAnchor), _classnames), css && css.slider);
  (0, _react.useEffect)(function () {
    spotlightAccelerator.current = new _Accelerator["default"](keyFrequency);
  }, [keyFrequency]);
  (0, _react.useLayoutEffect)(function () {
    var sliderRef = ref.current;

    if (sliderRef) {
      sliderRef.addEventListener('wheel', nativeEventHandlers.onWheel, {
        passive: false
      });
    }

    return function () {
      if (sliderRef) {
        sliderRef.removeEventListener('wheel', nativeEventHandlers.onWheel, {
          passive: false
        });
      }
    };
  }, [ref, nativeEventHandlers.onWheel]);
  delete rest.activateOnSelect;
  delete rest.knobStep;
  delete rest.noWheel;
  delete rest.onActivate;
  delete rest.step;
  delete rest.tooltip;
  delete rest.wheelInterval;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Slider["default"], _objectSpread(_objectSpread(_objectSpread({}, rest), handlers), {}, {
    "aria-disabled": disabled,
    className: componentClassName,
    css: mergedCss,
    disabled: disabled,
    progressBarComponent: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ProgressBar["default"], {
      css: mergedCss
    }),
    ref: ref,
    step: step,
    tooltipComponent: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComponentOverride["default"], {
      component: tooltip,
      css: mergedCss,
      visible: focused
    })
  }));
};

exports.SliderBase = SliderBase;
SliderBase.displayName = 'Slider';
SliderBase.propTypes =
/** @lends sandstone/Slider.SliderBase.prototype */
{
  /**
   * Activates the component when selected so that it may be manipulated via the directional
   * input keys.
   *
   * @type {Boolean}
   * @public
   */
  activateOnSelect: _propTypes["default"].bool,

  /**
   * Sets the knob to selected state and allows it to move via 5-way controls.
   *
   * @type {Boolean}
   * @public
   */
  active: _propTypes["default"].bool,

  /**
   * Customizes the component by mapping the supplied collection of CSS class names to the
   * corresponding internal elements and states of this component.
   *
   * The following classes are supported:
   *
   * * `slider` - The root component class
   *
   * @type {Object}
   * @public
   */
  css: _propTypes["default"].object,

  /**
   * Disables component and does not generate events.
   *
   * @type {Boolean}
   * @public
   */
  disabled: _propTypes["default"].bool,

  /**
   * Indicates that the slider has gained focus and if the tooltip is present, it will be
   * shown.
   *
   * @type {Boolean}
   * @public
   */
  focused: _propTypes["default"].bool,

  /**
   * Controls the keydown frequency with which the acceleration will "freeze".
   * While frozen, the value of the slider is not changed via arrow key.
   *
   * To customize the key acceleration speed, pass an array for [frequency]{@link spotlight/Accelerator.Accelerator}.
   * Each number represents a number of an event for sampling.
   * For example, 1 means to process all events while 3 means to process one of the three events.
   * If the number is large, the slider value changes slowly.
   * Example for accelerating:
   * ```
   * keyFrequency={[3, 3, 3, 2, 2, 2, 1]}
   * ```
   *
   * @type {Number[]}
   * @default [1]
   * @public
   */
  keyFrequency: _propTypes["default"].arrayOf(_propTypes["default"].number),

  /**
   * The amount to increment or decrement the position of the knob via 5-way controls.
   *
   * It must evenly divide into the range designated by `min` and `max`. If not specified,
   * `step` is used for the default value.
   *
   * @type {Number}
   * @public
   */
  knobStep: _propTypes["default"].number,

  /**
   * The maximum value of the slider.
   *
   * The range between `min` and `max` should be evenly divisible by
   * [step]{@link sandstone/Slider.SliderBase.step}.
   *
   * @type {Number}
   * @default 100
   * @public
   */
  max: _propTypes["default"].number,

  /**
   * The minimum value of the slider.
   *
   * The range between `min` and `max` should be evenly divisible by
   * [step]{@link sandstone/Slider.SliderBase.step}.
   *
   * @type {Number}
   * @default 0
   * @public
   */
  min: _propTypes["default"].number,

  /**
   * Disable wheel event.
   *
   * @type {Boolean}
   * @public
   */
  noWheel: _propTypes["default"].bool,

  /**
   * The handler when the knob is activated or deactivated by selecting it via 5-way
   *
   * @type {Function}
   * @public
   */
  onActivate: _propTypes["default"].func,

  /**
   * Called when a key is pressed down while the slider is focused.
   *
   * When a directional key is pressed down and the knob is active (either by first
   * pressing enter or when `activateOnSelect` is disabled), the Slider will increment or
   * decrement the current value and emit an `onChange` event. This default behavior can be
   * prevented by calling `preventDefault()` on the event passed to this callback.
   *
   * @type {Function}
   * @public
   */
  onKeyDown: _propTypes["default"].func,

  /**
   * Called when a key is released while the slider is focused.
   *
   * When the enter key is released and `activateOnSelect` is enabled, the slider will be
   * activated to enable incrementing or decrementing the value via directional keys. This
   * default behavior can be prevented by calling `preventDefault()` on the event passed to
   * this callback.
   *
   * @type {Function}
   * @public
   */
  onKeyUp: _propTypes["default"].func,

  /**
   * Displays an anchor at `progressAnchor`.
   *
   * @type {Boolean}
   * @public
   */
  showAnchor: _propTypes["default"].bool,

  /**
   * The amount to increment or decrement the value.
   *
   * It must evenly divide into the range designated by `min` and `max`.
   *
   * @type {Number}
   * @default 1
   * @public
   */
  step: _propTypes["default"].number,

  /**
   * Enables the built-in tooltip
   *
   * To customize the tooltip, pass either a custom tooltip component or an instance of
   * [SliderTooltip]{@link sandstone/Slider.SliderTooltip} with additional props configured.
   *
   * ```
   * <Slider
   *   tooltip={
   *     <SliderTooltip percent side="after" />
   *   }
   * />
   * ```
   *
   * The tooltip may also be passed as a child via the `"tooltip"` slot. See
   * [Slottable]{@link ui/Slottable} for more information on how slots can be used.
   *
   * ```
   * <Slider>
   *   <SliderTooltip percent side="after" />
   * </Slider>
   * ```
   *
   * If a custom tooltip is provided, it will receive the following props:
   *
   * * `children` - The `value` prop from the slider
   * * `visible` - `true` if the tooltip should be displayed
   * * `orientation` - The value of the `orientation` prop from the slider
   * * `proportion` - A number between 0 and 1 representing the proportion of the `value` in
   *   terms of `min` and `max`
   *
   * @type {Boolean|Element|Function}
   * @public
   */
  tooltip: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].object, _propTypes["default"].func]),

  /**
   * The value of the slider.
   *
   * Defaults to the value of `min`.
   *
   * @type {Number}
   * @public
   */
  value: _propTypes["default"].number,

  /**
   * The interval (in milliseconds) between valid wheel events.
   *
   * For example, 200 means to ignore wheel events occurred within 200ms
   * of the last processed wheel event while 0 means to process all wheel events.
   * If the number is large, the slider value changes slowly.
   *
   * @type {Number}
   * @default 0
   * @public
   */
  wheelInterval: _propTypes["default"].number
};
SliderBase.defaultProps = {
  activateOnSelect: false,
  active: false,
  disabled: false,
  keyFrequency: [1],
  max: 100,
  min: 0,
  step: 1,
  wheelInterval: 0
};
/**
 * Sandstone-specific slider behaviors to apply to [SliderBase]{@link sandstone/Slider.SliderBase}.
 *
 * @hoc
 * @memberof sandstone/Slider
 * @mixes ui/Changeable.Changeable
 * @mixes spotlight/Spottable.Spottable
 * @mixes sandstone/Skinnable.Skinnable
 * @mixes ui/Slottable.Slottable
 * @mixes ui/Slider.SliderDecorator
 * @public
 */

var SliderDecorator = (0, _compose["default"])(_Pure["default"], _Changeable["default"], _SliderBehaviorDecorator["default"], _Spottable["default"], (0, _Slottable["default"])({
  slots: ['knob', 'tooltip']
}), _Skinnable["default"]);
/**
 * Slider input with Sandstone styling, [`Spottable`]{@link spotlight/Spottable.Spottable},
 * [Touchable]{@link ui/Touchable} and [`SliderDecorator`]{@link sandstone/Slider.SliderDecorator}
 * applied.
 *
 * By default, `Slider` maintains the state of its `value` property. Supply the `defaultValue`
 * property to control its initial value. If you wish to directly control updates to the
 * component, supply a value to `value` at creation time and update it in response to `onChange`
 * events.
 *
 * @class Slider
 * @memberof sandstone/Slider
 * @mixes sandstone/Slider.SliderDecorator
 * @ui
 * @public
 */

/**
 * Overrides the `aria-valuetext` for the slider.
 *
 * By default, `aria-valuetext` is set to the current value. This should only be used when
 * the parent controls the value of the slider directly through the props.
 *
 * @name aria-valuetext
 * @memberof sandstone/Slider.Slider.prototype
 * @type {String|Number}
 * @public
 */

exports.SliderDecorator = SliderDecorator;
var Slider = SliderDecorator(SliderBase);
/**
 * A [Tooltip]{@link sandstone/TooltipDecorator.Tooltip} specifically adapted for use with
 * [ProgressBar]{@link sandstone/ProgressBar.ProgressBar} or
 * [Slider]{@link sandstone/Slider.Slider}.
 *
 * @see {@link sandstone/ProgressBar.ProgressBarTooltip}
 * @class SliderTooltip
 * @memberof sandstone/Slider
 * @ui
 * @public
 */

exports.Slider = Slider;
var _default = Slider;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/Slider/SliderBehaviorDecorator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/Slider/SliderBehaviorDecorator.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.SliderBehaviorDecorator = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _platform = _interopRequireDefault(__webpack_require__(/*! @enact/core/platform */ "./node_modules/@enact/core/platform/platform.js"));

var _Pause = _interopRequireDefault(__webpack_require__(/*! @enact/spotlight/Pause */ "./node_modules/@enact/spotlight/Pause/Pause.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _$L = _interopRequireDefault(__webpack_require__(/*! ../internal/$L */ "./node_modules/@enact/sandstone/internal/$L/$L.js"));

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@enact/sandstone/Slider/utils.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var toggleActive = function toggleActive(_ref) {
  var active = _ref.active;
  return {
    active: !active
  };
};

var defaultConfig = {
  // FIXME: This is a compromise to maintain a single decorator for Slider and IncrementSlider
  // that handles both a consolidated focus state and spotlight directional event mgmt. When this
  // is unset (for Slider), this decorator will listen to onKeyDown and fire spotlight events.
  // When set (for IncrementSlider), it specifies the event that is passed down to trigger
  // spotlight events and also doesn't remove the spotlight directional callbacks from the props
  // so the Wrapped component can fire them manually or use the callback for the default behavior.
  emitSpotlightEvents: null
}; // Adds sandstone-specific slider behaviors
// * aria-valuetext handling
//   * use aria-valuetext when set
//   * defaults to current value
//   * onActivate, set to hint text
//   * on value change, reset to value or aria-valuetext
// * Spotlight
//   * Pause Spotlight when dragging to prevent spotlight from leaving when pointer enters another
//     component
//   * Forward directional spotlight events from slider
// * Managing focused state to show/hide tooltip

var SliderBehaviorDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var emitSpotlightEvents = config.emitSpotlightEvents;
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);
      _this.paused = new _Pause["default"]();
      _this.handleActivate = _this.handleActivate.bind(_assertThisInitialized(_this));
      _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_this));
      _this.handleDragEnd = _this.handleDragEnd.bind(_assertThisInitialized(_this));
      _this.handleDragStart = _this.handleDragStart.bind(_assertThisInitialized(_this));
      _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_this));
      _this.handleSpotlightEvents = _this.handleSpotlightEvents.bind(_assertThisInitialized(_this));
      _this.bounds = {};
      _this.sliderRef = /*#__PURE__*/(0, _react.createRef)();
      _this.state = {
        active: false,
        dragging: false,
        focused: false,
        useHintText: true,
        prevValue: props.value
      };
      return _this;
    }

    _createClass(_class, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.paused.resume();
      }
    }, {
      key: "getValueText",
      value: function getValueText() {
        var _this$props = this.props,
            ariaValueText = _this$props['aria-valuetext'],
            min = _this$props.min,
            orientation = _this$props.orientation,
            _this$props$value = _this$props.value,
            value = _this$props$value === void 0 ? min : _this$props$value;
        var useHintText = this.state.useHintText;
        var valueText = ariaValueText != null ? ariaValueText : value;
        var verticalHint = "".concat(valueText, " ").concat((0, _$L["default"])('change a value with up down button'));
        var horizontalHint = "".concat(valueText, " ").concat((0, _$L["default"])('change a value with left right button'));

        if (useHintText) {
          return orientation === 'horizontal' ? horizontalHint : verticalHint;
        }

        return valueText;
      }
    }, {
      key: "focusSlider",
      value: function focusSlider() {
        var slider = this.sliderRef.current.node;

        if (slider.getAttribute('role') !== 'slider') {
          slider = slider.querySelector('[role="slider"]');
        }

        slider.focus();
      }
    }, {
      key: "handleActivate",
      value: function handleActivate() {
        (0, _handle.forward)('onActivate', {
          type: 'onActivate'
        }, this.props);
        this.setState(toggleActive);
      }
    }, {
      key: "handleBlur",
      value: function handleBlur(ev) {
        (0, _handle.forward)('onBlur', ev, this.props);
        this.setState({
          focused: false,
          useHintText: true
        });
      }
    }, {
      key: "handleDragStart",
      value: function handleDragStart() {
        // on platforms with a touchscreen, we want to focus slider when dragging begins
        if (_platform["default"].touchscreen) {
          this.focusSlider();
        }

        this.paused.pause();
        this.setState({
          dragging: true
        });
      }
    }, {
      key: "handleDragEnd",
      value: function handleDragEnd() {
        this.paused.resume();
        this.setState({
          dragging: false
        });
      }
    }, {
      key: "handleFocus",
      value: function handleFocus(ev) {
        (0, _handle.forward)('onFocus', ev, this.props);

        if (!this.props.activateOnSelect) {
          this.handleActivate();
        }

        this.setState({
          focused: true
        });
      }
    }, {
      key: "handleSpotlightEvents",
      value: function handleSpotlightEvents(ev) {
        if (!emitSpotlightEvents) {
          (0, _handle.forward)('onKeyDown', ev, this.props);
        }

        (0, _utils.forwardSpotlightEvents)(ev, this.props);
      }
    }, {
      key: "render",
      value: function render() {
        var props = Object.assign({}, this.props);

        if (!emitSpotlightEvents) {
          // Remove spotlight props before hitting spottable since we've handled them uniquely
          delete props.onSpotlightLeft;
          delete props.onSpotlightRight;
          delete props.onSpotlightUp;
          delete props.onSpotlightDown;
          props.onKeyDown = this.handleSpotlightEvents;
        } else {
          props[emitSpotlightEvents] = this.handleSpotlightEvents;
        }

        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({
          role: "slider"
        }, props), {}, {
          active: this.state.active,
          "aria-valuetext": this.getValueText(),
          focused: this.state.focused || this.state.dragging,
          onActivate: this.handleActivate,
          onBlur: this.handleBlur,
          onDragStart: this.handleDragStart,
          onDragEnd: this.handleDragEnd,
          onFocus: this.handleFocus,
          ref: this.sliderRef
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        if (props.value !== state.prevValue) {
          return {
            useHintText: false,
            prevValue: props.value
          };
        }

        return null;
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'SliderBehaviorDecorator', _class.propTypes = {
    activateOnSelect: _propTypes["default"].bool,
    'aria-valuetext': _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
    max: _propTypes["default"].number,
    min: _propTypes["default"].number,
    orientation: _propTypes["default"].string,
    value: _propTypes["default"].number
  }, _class.defaultProps = {
    max: 100,
    min: 0,
    orientation: 'horizontal'
  }, _class;
});
exports.SliderBehaviorDecorator = SliderBehaviorDecorator;
var _default = SliderBehaviorDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/Slider/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/sandstone/Slider/utils.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.handleIncrementByWheel = exports.handleIncrement = exports.handleDecrementByWheel = exports.handleDecrement = exports.forwardSpotlightEvents = exports.emitChange = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _keymap = __webpack_require__(/*! @enact/core/keymap */ "./node_modules/@enact/core/keymap/index.js");

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _utils = __webpack_require__(/*! @enact/ui/Slider/utils */ "./node_modules/@enact/ui/Slider/utils.js");

var nop = function nop() {};

var handleAcceleratedKeyDown = function handleAcceleratedKeyDown(ev, prop, _ref) {
  var spotlightAccelerator = _ref.current;

  if (!spotlightAccelerator) {
    return true;
  }

  if (!ev.repeat) {
    spotlightAccelerator.reset();
  }

  if (spotlightAccelerator.processKey(ev, nop)) {
    return false;
  }

  return true;
};

var calcStep = function calcStep(knobStep, step) {
  var s;

  if (knobStep != null) {
    s = knobStep;
  } else if (step != null) {
    s = step;
  } // default to a step of 1 if neither are set or are set to 0
  // otherwise, increment/decrement would be no-ops


  return s || 1;
};

var isIncrementByWheel = function isIncrementByWheel(_ref2) {
  var deltaY = _ref2.deltaY;
  return deltaY < 0;
};

var isDecrementByWheel = function isDecrementByWheel(_ref3) {
  var deltaY = _ref3.deltaY;
  return deltaY > 0;
};

var isIncrement = function isIncrement(_ref4, _ref5) {
  var keyCode = _ref4.keyCode;
  var orientation = _ref5.orientation;
  return orientation === 'vertical' ? (0, _keymap.is)('up', keyCode) : (0, _keymap.is)('right', keyCode);
};

var isDecrement = function isDecrement(_ref6, _ref7) {
  var keyCode = _ref6.keyCode;
  var orientation = _ref7.orientation;
  return orientation === 'vertical' ? (0, _keymap.is)('down', keyCode) : (0, _keymap.is)('left', keyCode);
};

var isNotMax = function isNotMax(ev, _ref8) {
  var value = _ref8.value,
      max = _ref8.max;
  return value !== max;
};

var isNotMin = function isNotMin(ev, _ref9) {
  var min = _ref9.min,
      _ref9$value = _ref9.value,
      value = _ref9$value === void 0 ? min : _ref9$value;
  return value !== min;
};

var checkInterval = function checkInterval(ev, _ref10, context) {
  var wheelInterval = _ref10.wheelInterval;

  if (ev.timeStamp - context.lastWheelTimeStamp < wheelInterval) {
    return false;
  }

  context.lastWheelTimeStamp = ev.timeStamp;
  return true;
};

var emitChange = function emitChange(direction) {
  return (0, _handle.adaptEvent)(function (ev, _ref11) {
    var knobStep = _ref11.knobStep,
        max = _ref11.max,
        min = _ref11.min,
        step = _ref11.step,
        _ref11$value = _ref11.value,
        value = _ref11$value === void 0 ? min : _ref11$value;
    var newValue = (0, _util.clamp)(min, max, value + calcStep(knobStep, step) * direction);
    return {
      type: 'onChange',
      value: newValue,
      proportion: (0, _utils.calcProportion)(min, max, newValue)
    };
  }, (0, _handle.forward)('onChange'));
};

exports.emitChange = emitChange;

var isActive = function isActive(ev, props) {
  return props.active || !props.activateOnSelect;
};

var handleIncrement = (0, _handle.handle)(isActive, isIncrement, _handle.preventDefault, _handle.stop, handleAcceleratedKeyDown, isNotMax, emitChange(1));
exports.handleIncrement = handleIncrement;
var handleDecrement = (0, _handle.handle)(isActive, isDecrement, _handle.preventDefault, _handle.stop, handleAcceleratedKeyDown, isNotMin, emitChange(-1));
exports.handleDecrement = handleDecrement;
var handleIncrementByWheel = (0, _handle.handle)(isActive, isIncrementByWheel, _handle.preventDefault, _handle.stop, isNotMax, checkInterval, emitChange(1));
exports.handleIncrementByWheel = handleIncrementByWheel;
var handleDecrementByWheel = (0, _handle.handle)(isActive, isDecrementByWheel, _handle.preventDefault, _handle.stop, isNotMin, checkInterval, emitChange(-1));
exports.handleDecrementByWheel = handleDecrementByWheel;

var either = function either(a, b) {
  return function () {
    return a.apply(void 0, arguments) || b.apply(void 0, arguments);
  };
};

var atMinimum = function atMinimum(ev, _ref12) {
  var min = _ref12.min,
      _ref12$value = _ref12.value,
      value = _ref12$value === void 0 ? min : _ref12$value;
  return value <= min;
};

var atMaximum = function atMaximum(ev, _ref13) {
  var max = _ref13.max,
      min = _ref13.min,
      _ref13$value = _ref13.value,
      value = _ref13$value === void 0 ? min : _ref13$value;
  return value >= max;
};

var forwardOnlyType = function forwardOnlyType(type) {
  return (0, _handle.adaptEvent)(function () {
    return {
      type: type
    };
  }, (0, _handle.forward)(type));
};

var forwardSpotlightEvents = (0, _handle.oneOf)([(0, _handle.forKey)('left'), (0, _handle.handle)(either((0, _handle.forProp)('orientation', 'vertical'), atMinimum), forwardOnlyType('onSpotlightLeft'))], [(0, _handle.forKey)('right'), (0, _handle.handle)(either((0, _handle.forProp)('orientation', 'vertical'), atMaximum), forwardOnlyType('onSpotlightRight'))], [(0, _handle.forKey)('down'), (0, _handle.handle)(either((0, _handle.forProp)('orientation', 'horizontal'), atMinimum), forwardOnlyType('onSpotlightDown'))], [(0, _handle.forKey)('up'), (0, _handle.handle)(either((0, _handle.forProp)('orientation', 'horizontal'), atMaximum), forwardOnlyType('onSpotlightUp'))]);
exports.forwardSpotlightEvents = forwardSpotlightEvents;

/***/ }),

/***/ "./node_modules/@enact/sandstone/Spinner/Spinner.js":
/*!**********************************************************!*\
  !*** ./node_modules/@enact/sandstone/Spinner/Spinner.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.SpinnerDecorator = exports.SpinnerBase = exports.Spinner = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _Pure = _interopRequireDefault(__webpack_require__(/*! @enact/ui/internal/Pure */ "./node_modules/@enact/ui/internal/Pure/Pure.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _Pause = _interopRequireDefault(__webpack_require__(/*! @enact/spotlight/Pause */ "./node_modules/@enact/spotlight/Pause/Pause.js"));

var _Spinner = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Spinner */ "./node_modules/@enact/ui/Spinner/Spinner.js"));

var _spotlight = _interopRequireDefault(__webpack_require__(/*! @enact/spotlight */ "./node_modules/@enact/spotlight/src/spotlight.js"));

var _$L = _interopRequireDefault(__webpack_require__(/*! ../internal/$L */ "./node_modules/@enact/sandstone/internal/$L/$L.js"));

var _Marquee = _interopRequireDefault(__webpack_require__(/*! ../Marquee */ "./node_modules/@enact/sandstone/Marquee/Marquee.js"));

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _SpinnerModule = _interopRequireDefault(__webpack_require__(/*! ./Spinner.module.css */ "./node_modules/@enact/sandstone/Spinner/Spinner.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["children", "css"],
    _excluded2 = ["children", "css"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * A component that shows spinning balls, with optional text as children.
 *
 * @class SpinnerCore
 * @memberof sandstone/Spinner
 * @ui
 * @private
 */


var SpinnerCore = (0, _kind["default"])({
  name: 'SpinnerCore',
  propTypes: {
    css: _propTypes["default"].object
  },
  styles: {
    css: _SpinnerModule["default"]
  },
  computed: {
    'aria-label': function ariaLabel(_ref) {
      var aria = _ref['aria-label'],
          children = _ref.children;

      if (aria) {
        return aria;
      } else if (!children) {
        return (0, _$L["default"])('Loading');
      }
    }
  },
  render: function render(_ref2) {
    var children = _ref2.children,
        css = _ref2.css,
        rest = _objectWithoutProperties(_ref2, _excluded);

    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({
      "aria-live": "off",
      role: "alert"
    }, rest), {}, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: css.bg,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: css.decorator,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: css.fan1
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: css.fan2
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: css.fan3
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: css.fan4
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: css.cap
          })]
        })
      }), children ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Marquee["default"], {
        className: css.client,
        marqueeOn: "render",
        alignment: "center",
        children: children
      }) : null]
    }));
  }
});
/**
 * The base component, defining all of the properties.
 *
 * @class SpinnerBase
 * @memberof sandstone/Spinner
 * @extends ui/Spinner.SpinnerBase
 * @ui
 * @public
 */

var SpinnerBase = (0, _kind["default"])({
  name: 'Spinner',
  propTypes:
  /** @lends sandstone/Spinner.SpinnerBase.prototype */
  {
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `spinner` - The root component class, unless there is a scrim. The scrim and floating
     *	layer can be a sibling or parent to this root "spinner" element.
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,

    /**
     * Customize the size of this component.
     *
     * Recommended usage is "medium" (default) for standalone and popup scenarios, while "small"
     * is best suited for use inside other elements, like {@link sandstone/Item.Item}.
     *
     * @type {('medium'|'small')}
     * @default 'medium'
     * @public
     */
    size: _propTypes["default"].oneOf(['medium', 'small']),

    /**
     * Removes the background color (making it transparent).
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    transparent: _propTypes["default"].bool
  },
  defaultProps: {
    size: 'medium',
    transparent: false
  },
  styles: {
    css: _SpinnerModule["default"],
    publicClassNames: 'spinner'
  },
  computed: {
    className: function className(_ref3) {
      var children = _ref3.children,
          size = _ref3.size,
          transparent = _ref3.transparent,
          styler = _ref3.styler;
      return styler.append(size, {
        content: !!children,
        transparent: transparent
      });
    }
  },
  render: function render(_ref4) {
    var children = _ref4.children,
        css = _ref4.css,
        rest = _objectWithoutProperties(_ref4, _excluded2);

    delete rest.transparent;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Spinner["default"], _objectSpread(_objectSpread({}, rest), {}, {
      css: css,
      component: SpinnerCore,
      children: children
    }));
  }
});
/**
 * A higher-order component that pauses spotlight when `blockClickOn` prop is `'screen'`.
 *
 * Resumes spotlight when unmounted. However, spotlight is not paused when `blockClickOn` prop is
 * `'container'`. Blocking spotlight within the container is up to app implementation.
 *
 * @hoc
 * @memberof sandstone/Spinner
 * @private
 */

exports.SpinnerBase = SpinnerBase;
var SpinnerSpotlightDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class;

  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);
      _this.paused = new _Pause["default"]('Spinner');
      var blockClickOn = props.blockClickOn;

      var current = _spotlight["default"].getCurrent();

      if (blockClickOn === 'screen') {
        _this.paused.pause();

        if (current) {
          current.blur();
        }
      }

      return _this;
    }

    _createClass(_class, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var blockClickOn = this.props.blockClickOn;

        if (blockClickOn === 'screen') {
          _spotlight["default"].focus();

          this.paused.resume();
        }
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, this.props));
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'SpinnerSpotlightDecorator', _class.propTypes =
  /** @lends sandstone/Spinner.Spinner.prototype */
  {
    /**
     * Determines how far the click-blocking should extend.
     *
     * It can be either `'screen'`, `'container'`, or `null`. `'screen'` pauses spotlight.
     * Changing this property to `'screen'` after creation is not supported.
     *
     * @type {('screen'|'container')}
     * @default null
     * @public
     */
    blockClickOn: _propTypes["default"].oneOf(['screen', 'container', null])
  }, _class;
});
/**
 * Sandstone-specific Spinner behaviors to apply to [Spinner]{@link sandstone/Spinner.Spinner}.
 *
 * @hoc
 * @memberof sandstone/Spinner
 * @mixes sandstone/Skinnable.Skinnable
 * @public
 */

var SpinnerDecorator = (0, _compose["default"])(_Pure["default"], SpinnerSpotlightDecorator, _Skinnable["default"]);
/**
 * A Sandstone-styled Spinner.
 *
 * @class Spinner
 * @memberof sandstone/Spinner
 * @extends sandstone/Spinner.SpinnerBase
 * @mixes sandstone/Spinner.SpinnerDecorator
 * @ui
 * @public
 */

exports.SpinnerDecorator = SpinnerDecorator;
var Spinner = SpinnerDecorator(SpinnerBase);
exports.Spinner = Spinner;
var _default = Spinner;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/ThemeDecorator/AccessibilityDecorator.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ThemeDecorator/AccessibilityDecorator.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.AccessibilityDecorator = void 0;

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _Registry = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/Registry */ "./node_modules/@enact/core/internal/Registry/Registry.js"));

var _Resizable = __webpack_require__(/*! @enact/ui/Resizable */ "./node_modules/@enact/ui/Resizable/Resizable.js");

var _util = __webpack_require__(/*! @enact/ui/Skinnable/util */ "./node_modules/@enact/ui/Skinnable/util.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["className", "highContrast", "skinVariants", "textSize"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/**
 * A higher-order component that classifies an application with a target set of font sizing rules.
 *
 * @class AccessibilityDecorator
 * @memberof sandstone/ThemeDecorator
 * @hoc
 * @public
 */


var AccessibilityDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class;

  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class() {
      var _this;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.resizeRegistry = _Registry["default"].create();
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.resizeRegistry.parent = this.context;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.textSize !== this.props.textSize) {
          this.resizeRegistry.notify({});
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.resizeRegistry.parent = null;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            className = _this$props.className,
            highContrast = _this$props.highContrast,
            skinVariants = _this$props.skinVariants,
            textSize = _this$props.textSize,
            props = _objectWithoutProperties(_this$props, _excluded);

        var accessibilityClassName = highContrast ? "enact-a11y-high-contrast enact-text-".concat(textSize) : "enact-text-".concat(textSize);
        var combinedClassName = className ? "".concat(className, " ").concat(accessibilityClassName) : accessibilityClassName;
        var variants = (0, _util.objectify)(skinVariants);
        if (highContrast) variants.highContrast = true;
        if (textSize === 'large') variants.largeText = true;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Resizable.ResizeContext.Provider, {
          value: this.resizeRegistry.register,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({
            className: combinedClassName,
            skinVariants: variants
          }, props))
        });
      }
    }]);

    return _class;
  }(_react.Component), _class.contextType = _Resizable.ResizeContext, _class.displayName = 'AccessibilityDecorator', _class.propTypes =
  /** @lends sandstone/ThemeDecorator.AccessibilityDecorator.prototype */
  {
    /**
     * Enables additional features to help users visually differentiate components.
     *
     * The UI library will be responsible for using this information to adjust
     * the components' contrast to this preset.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    highContrast: _propTypes["default"].bool,

    /**
     * The variant(s) on a skin that a component should use when rendering. These will
     * typically alter the appearance of a skin's existing definition in a way that does not
     * override that skin's general styling.
     *
     * Multiple data types are supported by this prop, which afford different conveniences
     * and abilities. String and Array are effectively the same, supporting just additions
     * to the variants being applied to a component, and are much more convenient. Objects
     * may also be used, and have the ability to disable variants being passed by their
     * ancestors. Objects take the format of a basic hash, with variants as key names and
     * true/false Booleans as values, depicting their state. If a variant is excluded from
     * any version of data type used to set this prop, that variant will ignored, falling
     * back to the defaultVariant or parent variant, in that order.
     *
     * skinVariants examples:
     * ```
     *  // String
     *  skinVariants="highContrast"
     *
     *  // Array
     *  skinVariants={['highContrast']}
     *
     *  // Object
     *  skinVariants={{
     *  	highContrast: true,
     *  	grayscale: false
     *  }}
     * ```
     *
     * @type {String|String[]|Object}
     * @public
     */
    skinVariants: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array, _propTypes["default"].object]),

    /**
     * Sets the goal size of the text.
     *
     * The UI library will be responsible for using this
     * information to adjust the components' text sizes to this preset.
     * Current presets are `'normal'` (default), and `'large'`.
     *
     * @type {('normal'|'large')}
     * @default 'normal'
     * @public
     */
    textSize: _propTypes["default"].oneOf(['normal', 'large'])
  }, _class.defaultProps = {
    highContrast: false,
    textSize: 'normal'
  }, _class;
});
exports.AccessibilityDecorator = AccessibilityDecorator;
var _default = AccessibilityDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/ThemeDecorator/I18nFontDecorator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ThemeDecorator/I18nFontDecorator.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.I18nFontDecorator = void 0;

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _i18n = _interopRequireDefault(__webpack_require__(/*! @enact/i18n */ "./node_modules/@enact/i18n/src/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _fontGenerator = __webpack_require__(/*! ./fontGenerator */ "./node_modules/@enact/sandstone/ThemeDecorator/fontGenerator.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var I18nFontDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class;

  return _class = /*#__PURE__*/function (_Component) {
    _inherits(I18nDecorator, _Component);

    var _super = _createSuper(I18nDecorator);

    function I18nDecorator(props) {
      var _this;

      _classCallCheck(this, I18nDecorator);

      _this = _super.call(this, props);
      _this.state = {
        locale: props.locale || _i18n["default"].getLocale()
      };
      return _this;
    }

    _createClass(I18nDecorator, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        (0, _fontGenerator.fontOverrideGenerator)(this.state.locale);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(_, prevState) {
        if (prevState.locale !== this.state.locale) {
          (0, _fontGenerator.fontOverrideGenerator)(this.state.locale);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, this.props));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        var locale = props.locale || _i18n["default"].getLocale();

        return locale !== state.locale ? {
          locale: locale
        } : null;
      }
    }]);

    return I18nDecorator;
  }(_react.Component), _class.displayName = 'I18nFontDecorator', _class.propTypes = {
    locale: _propTypes["default"].string
  }, _class;
});
exports.I18nFontDecorator = I18nFontDecorator;
var _default = I18nFontDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/ThemeDecorator/ThemeDecorator.js":
/*!************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ThemeDecorator/ThemeDecorator.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ThemeDecorator = void 0;
Object.defineProperty(exports, "getLastInputType", ({
  enumerable: true,
  get: function get() {
    return _SpotlightRootDecorator.getInputType;
  }
}));

var _dispatcher = __webpack_require__(/*! @enact/core/dispatcher */ "./node_modules/@enact/core/dispatcher/dispatcher.js");

var _keymap = __webpack_require__(/*! @enact/core/keymap */ "./node_modules/@enact/core/keymap/index.js");

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _platform = _interopRequireDefault(__webpack_require__(/*! @enact/core/platform */ "./node_modules/@enact/core/platform/platform.js"));

var _I18nDecorator = _interopRequireDefault(__webpack_require__(/*! @enact/i18n/I18nDecorator */ "./node_modules/@enact/i18n/I18nDecorator/I18nDecorator.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "./node_modules/classnames/index.js"));

var _resolution = __webpack_require__(/*! @enact/ui/resolution */ "./node_modules/@enact/ui/resolution/index.js");

var _FloatingLayer = __webpack_require__(/*! @enact/ui/FloatingLayer */ "./node_modules/@enact/ui/FloatingLayer/index.js");

var _SpotlightRootDecorator = _interopRequireWildcard(__webpack_require__(/*! @enact/spotlight/SpotlightRootDecorator */ "./node_modules/@enact/spotlight/SpotlightRootDecorator/SpotlightRootDecorator.js"));

var _LS2Request = _interopRequireDefault(__webpack_require__(/*! @enact/webos/LS2Request */ "./node_modules/@enact/webos/LS2Request/LS2Request.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _I18nFontDecorator = _interopRequireDefault(__webpack_require__(/*! ./I18nFontDecorator */ "./node_modules/@enact/sandstone/ThemeDecorator/I18nFontDecorator.js"));

var _AccessibilityDecorator = _interopRequireDefault(__webpack_require__(/*! ./AccessibilityDecorator */ "./node_modules/@enact/sandstone/ThemeDecorator/AccessibilityDecorator.js"));

var _screenTypes = _interopRequireDefault(__webpack_require__(/*! ./screenTypes.json */ "./node_modules/@enact/sandstone/ThemeDecorator/screenTypes.json"));

var _ThemeDecoratorModule = _interopRequireDefault(__webpack_require__(/*! ./ThemeDecorator.module.css */ "./node_modules/@enact/sandstone/ThemeDecorator/ThemeDecorator.module.css"));

var _Touchable = __webpack_require__(/*! @enact/ui/Touchable */ "./node_modules/@enact/ui/Touchable/Touchable.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["skin"];

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Default config for `ThemeDecorator`.
 *
 * @memberof sandstone/ThemeDecorator.ThemeDecorator
 * @hocconfig
 */


var defaultConfig =
/** @lends sandstone/ThemeDecorator.ThemeDecorator.defaultConfig */
{
  /**
   * Applies AccessibilityDecorator.
   *
   * If not applied, app will not support accessibility options.
   *
   * @type {Boolean}
   * @default true
   * @see {@link sandstone/ThemeDecorator.AccessibilityDecorator}
   * @public
   */
  accessible: true,

  /**
   * Disables use of full screen.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  disableFullscreen: false,

  /**
   * Enables a floating layer for popup components.
   *
   * If not applied, app will be responsible for applying the decorator.
   *
   * @type {Boolean}
   * @default true
   * @see {@link ui/FloatingLayer.FloatingLayerDecorator}
   * @public
   */
  "float": true,

  /**
   * Options for I18nDecorator.
   *
   * May be `false` to prevent applying the decorator. If not applied, app will be responsible for
   * applying the decorator.
   *
   * @type {Object|false}
   * @default {sync: true}
   * @see {@link i18n/I18nDecorator}
   * @public
   */
  i18n: {
    sync: true
  },

  /**
   * Disables setting spotlight focus on first render.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  noAutoFocus: false,

  /**
   * Enables overlay mode (no background color will be applied).
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  overlay: false,

  /**
   * Override the resolution independence settings.
   *
   * @type {Object}
   * @see {@link ui/resolution}
   * @public
   */
  ri: {
    screenTypes: _screenTypes["default"]
  },

  /**
   * Specifies the id of the React DOM tree root node
   *
   * @type {String}
   * @default 'root'
   * @public
   */
  rootId: 'root',

  /**
   * Applies skinning support.
   *
   * @type {Boolean}
   * @default true
   * @see {@link sandstone/Skinnable}
   * @public
   */
  skin: true,

  /**
   * Applies spotlight decorator.
   *
   * If not applied, app will be responsible for applying the decorator.
   *
   * @type {Boolean}
   * @default true
   * @see {@link spotlight/SpotlightRootDecorator}
   * @public
   */
  spotlight: true
};
/**
 * A higher-order component that applies Sandstone theming to an application.
 *
 * It also applies [floating layer]{@link ui/FloatingLayer.FloatingLayerDecorator},
 * [resolution independence]{@link ui/resolution.ResolutionDecorator},
 * [skin support]{@link sandstone/Skinnable}, [spotlight]{@link spotlight.SpotlightRootDecorator}, and
 * [internationalization support]{@link i18n/I18nDecorator.I18nDecorator}.
 * It is meant to be applied to the root element of an app.
 *
 * [Skins]{@link sandstone/Skinnable} provide a way to change the coloration of your app. The
 * currently supported skins for Sandstone are "sandstone" (the default, dark skin) and
 * "sandstone-light". Use the `skin` property to assign a skin. Ex: `<DecoratedApp skin="light" />`
 *
 * Note: This HoC passes `className` to the wrapped component. It must be passed to the main DOM
 * node.
 *
 * @class ThemeDecorator
 * @memberof sandstone/ThemeDecorator
 * @mixes ui/FloatingLayer.FloatingLayerDecorator
 * @mixes ui/resolution.ResolutionDecorator
 * @mixes spotlight/SpotlightRootDecorator.SpotlightRootDecorator
 * @mixes sandstone/Skinnable.Skinnable
 * @mixes sandstone/ThemeDecorator.AccessibilityDecorator
 * @hoc
 * @public
 */

var ThemeDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var accessible = config.accessible,
      ri = config.ri,
      i18n = config.i18n,
      spotlight = config.spotlight,
      _float = config["float"],
      noAutoFocus = config.noAutoFocus,
      overlay = config.overlay,
      skin = config.skin,
      disableFullscreen = config.disableFullscreen,
      rootId = config.rootId; // Apply classes depending on screen type (overlay / fullscreen)

  var bgClassName = (0, _classnames["default"])(_defineProperty({
    'enact-fit': !disableFullscreen
  }, _ThemeDecoratorModule["default"].bg, !overlay));
  var requestInputType = null;
  var App = Wrapped;
  if (_float) App = (0, _FloatingLayer.FloatingLayerDecorator)({
    wrappedClassName: bgClassName
  }, App);
  if (ri) App = (0, _resolution.ResolutionDecorator)(ri, App);

  if (i18n) {
    // Apply the @enact/i18n decorator around the font decorator so the latter will update the
    // font stylesheet when the locale changes
    App = (0, _I18nDecorator["default"])(_objectSpread(_objectSpread({}, i18n), {}, {
      // We use the latin fonts (with non-Latin fallback) for these languages (even though
      // their scripts are non-latin)
      latinLanguageOverrides: ['ko', 'ha', 'el', 'bg', 'mk', 'mn', 'ru', 'uk', 'kk'],
      // We use the non-latin fonts for these languages (even though their scripts are
      // technically considered latin)
      nonLatinLanguageOverrides: ['en-JP']
    }), (0, _I18nFontDecorator["default"])(App));
  }

  if (spotlight) App = (0, _SpotlightRootDecorator["default"])({
    noAutoFocus: noAutoFocus
  }, App);
  if (skin) App = (0, _Skinnable["default"])(App);
  if (accessible) App = (0, _AccessibilityDecorator["default"])(App); // add webOS-specific key maps

  (0, _keymap.addAll)({
    cancel: 461,
    nonModal: [461, 415, // play
    19, // pause
    403, // red
    404, // green
    405, // yellow
    406, // blue
    33, // channel up
    34 // channel down
    ],
    red: 403,
    green: 404,
    yellow: 405,
    blue: 406,
    play: 415,
    pause: 19,
    rewind: 412,
    fastForward: 417,
    pointerHide: 1537,
    pointerShow: 1536
  }); // configure the default hold time

  (0, _Touchable.configure)({
    hold: {
      events: [{
        name: 'hold',
        time: 400
      }]
    }
  }); // set the DOM node ID of the React DOM tree root

  (0, _dispatcher.setDefaultTargetById)(rootId);
  var Decorator = (_class = /*#__PURE__*/function (_Component) {
    _inherits(Decorator, _Component);

    var _super = _createSuper(Decorator);

    function Decorator() {
      _classCallCheck(this, Decorator);

      return _super.apply(this, arguments);
    }

    _createClass(Decorator, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (spotlight && _platform["default"].webos) {
          (0, _SpotlightRootDecorator.activateInputType)(true);
          requestInputType = new _LS2Request["default"]().send({
            service: 'luna://com.webos.surfacemanager',
            method: 'getLastInputType',
            subscribe: true,
            onSuccess: function onSuccess(res) {
              (0, _SpotlightRootDecorator.setInputType)(res.lastInputType);
            },
            onFailure: function onFailure() {
              (0, _SpotlightRootDecorator.activateInputType)(false);
            }
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (requestInputType) {
          requestInputType.cancel();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _classNames2;

        var _this$props = this.props,
            skinProp = _this$props.skin,
            rest = _objectWithoutProperties(_this$props, _excluded);

        var skinName = skinProp || 'neutral';
        var className = (0, _classnames["default"])(_ThemeDecoratorModule["default"].root, this.props.className, 'sandstone-theme', 'enact-unselectable', (_classNames2 = {}, _defineProperty(_classNames2, bgClassName, !_float), _defineProperty(_classNames2, 'enact-fit', !disableFullscreen), _classNames2));
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(App, _objectSpread(_objectSpread({}, rest), {}, {
          skin: skinName,
          className: className
        }));
      }
    }]);

    return Decorator;
  }(_react.Component), _class.displayName = 'ThemeDecorator', _class.propTypes =
  /** @lends sandstone/ThemeDecorator.prototype */
  {
    /**
     * Assign a skin.
     *
     * @type {String}
     * @private
     */
    skin: _propTypes["default"].string
  }, _class);
  return Decorator;
});
exports.ThemeDecorator = ThemeDecorator;
var _default = ThemeDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/ThemeDecorator/fontGenerator.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ThemeDecorator/fontGenerator.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

/*
 * This module loads Sandstone's locale specific fonts.
 *
 * _This is not intended to be directly included by external developers._ The purpose of this is to
 * override the existing "Sandstone" font family with a new typeface, conditionally when the system
 * locale matches the corrosponding locale for the font (defined in this component's code).
 *
 */

var _require = __webpack_require__(/*! @enact/ui/internal/localized-fonts */ "./node_modules/@enact/ui/internal/localized-fonts/localized-fonts.js"),
    addLocalizedFont = _require.addLocalizedFont,
    generateFontRules = _require.generateFontRules,
    generateFontOverrideRules = _require.generateFontOverrideRules;

var fontName = 'Sandstone'; // Locale Configuration Block
//
// "Shape" of the object below is as follows: [square brackets indicate optional elements]
// fonts = {
// 	locale|language|region: {
// 		regular: 'font name',
// 		[bold: 'font name',]
// 		[light: 'font name',]
// 		[unicodeRange: 'U+600-6FF,U+FE70-FEFE']
// 	},
// 	'ur': {
// 		regular: 'LG Smart UI Urdu',
// 		unicodeRange:
// 			'U+600-6FF,' +
// 			'U+FE70-FEFE,' +
// 			'U+FB50-FDFF'
// 	}
// };

var fonts = {
  'bn': {
    regular: 'LG Smart UI Bengali'
  },
  'gu': {
    regular: 'LG Smart UI Gujarati'
  },
  'hi': {
    regular: 'LG Smart UI Devanagari'
  },
  'ja': {
    regular: 'LG Smart UI JP'
  },
  'kn': {
    regular: 'LG Smart UI Kannada'
  },
  'pa': {
    regular: 'LG Smart UI Gurmukhi'
  },
  'ta': {
    regular: 'LG Smart UI Tamil'
  },
  'te': {
    regular: 'LG Smart UI Telugu'
  },
  'ur': {
    regular: ['LG Smart UI Urdu', 'LGSmartUIUrdu'] // This needs 2 references because the "full name" differs from the "family name". To target this font file directly in all OSs we must also include the "postscript name" in addition to the "full name".

  },
  'zh-Hans': {
    regular: 'LG Smart UI SC'
  }
}; // Duplications and alternate locale names

fonts['as'] = fonts['bn'];
fonts['mr'] = fonts['hi'];
fonts['en-JP'] = fonts['ja'];
addLocalizedFont(fontName, fonts);
module.exports = generateFontRules;
module.exports.fontGenerator = generateFontRules;
module.exports.fontOverrideGenerator = generateFontOverrideRules;
module.exports.generateFontRules = generateFontRules;

/***/ }),

/***/ "./node_modules/@enact/sandstone/TooltipDecorator/Tooltip.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@enact/sandstone/TooltipDecorator/Tooltip.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.TooltipBase = exports.Tooltip = void 0;
exports.defaultArrowAnchor = defaultArrowAnchor;
exports.defaultDirection = defaultDirection;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _TooltipLabel = _interopRequireDefault(__webpack_require__(/*! ./TooltipLabel */ "./node_modules/@enact/sandstone/TooltipDecorator/TooltipLabel.js"));

var _TooltipModule = _interopRequireDefault(__webpack_require__(/*! ./Tooltip.module.css */ "./node_modules/@enact/sandstone/TooltipDecorator/Tooltip.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["arrowAnchor", "children", "css", "tooltipRef", "width", "labelOffset", "marquee"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
} // Set the default Arrow Anchor value based on the type of tooltip


function defaultArrowAnchor(type) {
  return type === 'transparent' ? 'center' : 'right';
} // Set the default Direction of tooltip based on the type of tooltip


function defaultDirection(type) {
  return type === 'transparent' ? 'below' : 'above';
}
/**
 * A stateless tooltip component with Sandstone styling applied.
 *
 * @class TooltipBase
 * @memberof sandstone/TooltipDecorator
 * @ui
 * @public
 */


var TooltipBase = (0, _kind["default"])({
  name: 'Tooltip',
  propTypes:
  /** @lends sandstone/TooltipDecorator.TooltipBase.prototype */
  {
    /**
     * The node to be displayed as the main content of the tooltip.
     *
     * @type {Node}
     * @required
     */
    children: _propTypes2["default"].node.isRequired,

    /**
     * Position of tooltip arrow in relation to the activator.
     *
     * Note that `'left'`, `'center'`, `'right'` are applicable when direction is in vertical
     * orientation (i.e. `'above'`, `'below'`), and `'top'`, `'middle'`, and `'bottom'` are
     * applicable when direction is in horizontal orientation (i.e. `'left'`, `'right'`)
     *
     * For `type="balloon"`, the default is `"right"`
     * For `type="transparent"`, the default is `"center"` (The arrow will not be visible)
     *
     * @type {('left'|'center'|'right'|'top'|'middle'|'bottom')}
     * @public
     */
    arrowAnchor: _propTypes2["default"].oneOf(['left', 'center', 'right', 'top', 'middle', 'bottom']),

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `tooltip` - The root component class
     * * `tooltipLabel` - Applied the label node
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Direction of label in relation to the activator.
     *
     * For `type="balloon"`, the default is `"above"`
     * For `type="transparent"`, the default is `"below"`
     *
     * @type {('above'|'below'|'left'|'right')}
     * @public
     */
    direction: _propTypes2["default"].oneOf(['above', 'below', 'left', 'right']),

    /**
     * A value representing the amount to offset the label portion of the tooltip.
     *
     * In a "center" aligned tooltip, the label may be desirable to offset to one side or the
     * other. This prop accepts a value between -0.5 and 0.5 (representing 50% to the left or
     * right). This defaults to 0 offset (centered). It also automatically caps the value so it
     * never positions the tooltip label past the anchored arrow. If the tooltip label or arrow
     * has non-rectangular geometry (rounded corners, a wide tail, etc), you'll need to manually
     * account for that in your provided offset value.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    labelOffset: _propTypes2["default"].number,

    /**
     * Allows the tooltip to marquee.
     *
     * Specifying a [`width`]{@link sandstone/TooltipDecorator.TooltipBase#width} restrects
     * the marquee to that size.
     *
     * @type {Boolean}
     * @public
     */
    marquee: _propTypes2["default"].bool,

    /**
     * Style object for tooltip position.
     *
     * @type {Object}
     * @public
     */
    position: _propTypes2["default"].shape({
      bottom: _propTypes2["default"].number,
      left: _propTypes2["default"].number,
      right: _propTypes2["default"].number,
      top: _propTypes2["default"].number
    }),

    /**
     * Anchors the tooltip relative to its container.
     *
     * Reconfigures the component to anchor itself to the designated edge of its container.
     * When this is not specified, the implication is that the component is "absolutely"
     * positioned, relative to the viewport, rather than its parent layer.
     *
     * @type {Boolean}
     * @public
     */
    relative: _propTypes2["default"].bool,

    /**
     * Called when the tooltip mounts/unmounts, giving a reference to the DOM.
     *
     * @type {Object|Function}
     * @public
     */
    tooltipRef: _propTypes["default"].ref,

    /**
     * Type of tooltip.
     *
     * | *Value* | *Tooltip Appearance* |
     * |---|---|
     * | `'balloon'` | Tooltip with a border, background and arrow to the activator |
     * | `'transparent'` | Text only without any of the decorations above |
     *
     * @type {('balloon'|'transparent')}
     * @default 'balloon'
     * @public
     */
    type: _propTypes2["default"].oneOf(['balloon', 'transparent']),

    /**
     * The width of tooltip content.
     *
     * Value expects a number of pixels, which will be automatically scaled to the appropriate
     * size given the current screen resolution, or a string value containing a measurement and
     * a valid CSS unit included.
     * If the content goes over the given width, it will automatically wrap, or marquee if
     * `marquee` is enabled.
     *
     * When `null`, content will auto-size and not wrap. If `marquee` is also enabled,
     * marqueeing will begin when the width is greater than the default (theme specified) width.
     *
     * @type {Number|String}
     * @public
     */
    width: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])
  },
  defaultProps: {
    type: 'balloon',
    labelOffset: 0
  },
  styles: {
    css: _TooltipModule["default"],
    className: 'tooltip',
    publicClassNames: ['tooltip', 'tooltipLabel']
  },
  computed: {
    labelOffset: function labelOffset(_ref) {
      var _labelOffset = _ref.labelOffset;

      if (_labelOffset) {
        var cappedPosition = Math.max(-0.5, Math.min(0.5, _labelOffset));
        return {
          transform: "translateX(".concat(cappedPosition * 100, "%)")
        };
      }
    },
    className: function className(_ref2) {
      var direction = _ref2.direction,
          arrowAnchor = _ref2.arrowAnchor,
          relative = _ref2.relative,
          type = _ref2.type,
          styler = _ref2.styler;
      return styler.append(direction || defaultDirection(type), "".concat(arrowAnchor || defaultArrowAnchor(type), "Arrow"), {
        relative: relative,
        absolute: !relative
      }, type);
    },
    style: function style(_ref3) {
      var position = _ref3.position,
          _style = _ref3.style;
      return _objectSpread(_objectSpread({}, _style), position);
    }
  },
  render: function render(_ref4) {
    var arrowAnchor = _ref4.arrowAnchor,
        children = _ref4.children,
        css = _ref4.css,
        tooltipRef = _ref4.tooltipRef,
        width = _ref4.width,
        labelOffset = _ref4.labelOffset,
        marquee = _ref4.marquee,
        rest = _objectWithoutProperties(_ref4, _excluded);

    delete rest.labelOffset;
    delete rest.direction;
    delete rest.position;
    delete rest.relative;
    delete rest.type;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: css.tooltipAnchor,
        ref: tooltipRef,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: css.tooltipArrow
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TooltipLabel["default"], {
          className: css.tooltipLabel,
          marquee: marquee,
          centered: arrowAnchor === 'center',
          width: width,
          style: labelOffset,
          children: children
        })]
      })
    }));
  }
});
/**
 * A tooltip component with Sandstone styling applied.
 *
 * @class Tooltip
 * @memberof sandstone/TooltipDecorator
 * @ui
 * @public
 */

exports.TooltipBase = TooltipBase;
var Tooltip = (0, _Skinnable["default"])(TooltipBase);
exports.Tooltip = Tooltip;
var _default = Tooltip;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/TooltipDecorator/TooltipDecorator.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/TooltipDecorator/TooltipDecorator.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "Tooltip", ({
  enumerable: true,
  get: function get() {
    return _Tooltip.Tooltip;
  }
}));
Object.defineProperty(exports, "TooltipBase", ({
  enumerable: true,
  get: function get() {
    return _Tooltip.TooltipBase;
  }
}));
exports["default"] = exports.TooltipDecorator = void 0;

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _I18nDecorator = __webpack_require__(/*! @enact/i18n/I18nDecorator */ "./node_modules/@enact/i18n/I18nDecorator/I18nDecorator.js");

var _FloatingLayer = __webpack_require__(/*! @enact/ui/FloatingLayer */ "./node_modules/@enact/ui/FloatingLayer/index.js");

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _resolution = _interopRequireDefault(__webpack_require__(/*! @enact/ui/resolution */ "./node_modules/@enact/ui/resolution/index.js"));

var _Tooltip = __webpack_require__(/*! ./Tooltip */ "./node_modules/@enact/sandstone/TooltipDecorator/Tooltip.js");

var _util2 = __webpack_require__(/*! ./util */ "./node_modules/@enact/sandstone/TooltipDecorator/util.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var currentTooltip; // needed to know whether or not we should stop a showing job when unmounting

/**
 * Default config for [TooltipDecorator]{@link sandstone/TooltipDecorator.TooltipDecorator}
 *
 * @memberof sandstone/TooltipDecorator.TooltipDecorator
 * @hocconfig
 */

var defaultConfig = {
  /**
   * The boundary around the screen which the tooltip should never cross, typically involving
   * flipping to an alternate orientation or adjusting its offset to remain on screen.
   * The default of 48 is derived from a standard 24px screen-keepout size plus the standard
   * Spotlight-outset (24px) margin/padding value which keeps elements and text aligned inside a
   * [Panel]{@link sandstone/Panels.Panel}. Note: This value will be scaled according to the
   * resolution.
   *
   * @type {Number}
   * @default 24
   * @memberof sandstone/TooltipDecorator.TooltipDecorator.defaultConfig
   */
  screenEdgeKeepout: 24 + 24,

  /**
   * The name of the property which will receive the tooltip node.
   *
   * By default, `TooltipDecorator` will add a new child to the wrapped component, following any
   * other children passed in. If a component needs to, it can specify another property to receive
   * the tooltip and the `children` property will not be modified.
   *
   * @type {String}
   * @default 'children'
   * @memberof sandstone/TooltipDecorator.TooltipDecorator.defaultConfig
   */
  tooltipDestinationProp: 'children'
};
/**
 * A higher-order component which positions [Tooltip]{@link sandstone/TooltipDecorator.Tooltip} in
 * relation to the wrapped component.
 *
 * The tooltip is automatically displayed when the decorated component is focused after a set
 * period of time.
 *
 * The tooltip is positioned around the decorator where there is available window space.
 *
 * Note that the direction of tooltip will be flipped horizontally in RTL locales.
 *
 * @class TooltipDecorator
 * @memberof sandstone/TooltipDecorator
 * @hoc
 * @public
 */

var TooltipDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var tooltipDestinationProp = config.tooltipDestinationProp;
  var Decorator = (_class = /*#__PURE__*/function (_Component) {
    _inherits(Decorator, _Component);

    var _super = _createSuper(Decorator);

    function Decorator(props) {
      var _this;

      _classCallCheck(this, Decorator);

      _this = _super.call(this, props);
      _this.showTooltipJob = new _util.Job(function () {
        if (!_this.state.showing) {
          _this.setState({
            showing: true
          });
        }
      });
      _this.setTooltipLayoutJob = new _util.Job(function () {
        _this.setTooltipLayout();
      });

      _this.startTooltipLayoutJob = function () {
        _this.setTooltipLayoutJob.startAfter(_this.props.tooltipUpdateDelay);
      };

      _this.showTooltip = function (client) {
        var _this$props = _this.props,
            tooltipDelay = _this$props.tooltipDelay,
            tooltipText = _this$props.tooltipText;

        if (tooltipText) {
          _this.clientRef = client;
          currentTooltip = _assertThisInitialized(_this);

          _this.showTooltipJob.startAfter(tooltipDelay);

          if (_this.mutationObserver) {
            _this.mutationObserver.observe(_this.clientRef, {
              attributes: true,
              childList: true
            });
          }

          if (_this.resizeObserver) {
            _this.resizeObserver.observe(_this.clientRef);
          }
        }
      };

      _this.hideTooltip = function () {
        if (_this.props.tooltipText) {
          if (_this.mutationObserver) {
            _this.mutationObserver.disconnect();
          }

          if (_this.resizeObserver) {
            _this.resizeObserver.disconnect();
          }

          _this.clientRef = null;
          currentTooltip = null;

          _this.showTooltipJob.stop();

          _this.setTooltipLayoutJob.stop();

          if (_this.state.showing) {
            _this.setState({
              showing: false
            });
          }
        }
      };

      _this.handle = _handle.handle.bind(_assertThisInitialized(_this));
      _this.handleKeyDown = _this.handle((0, _handle.forward)('onKeyDown'), (0, _handle.forProp)('disabled', false), function () {
        _this.startTooltipLayoutJob();
      });
      _this.handleMouseOver = _this.handle((0, _handle.forward)('onMouseOver'), (0, _handle.forProp)('disabled', true), function (ev) {
        _this.showTooltip(ev.currentTarget);
      });
      _this.handleMouseOut = _this.handle((0, _handle.forward)('onMouseOut'), (0, _handle.forProp)('disabled', true), function (ev) {
        if (_this.clientRef && !_this.clientRef.contains(ev.relatedTarget)) {
          _this.hideTooltip();
        }
      });
      _this.handleFocus = _this.handle((0, _handle.forward)('onFocus'), function (_ref) {
        var target = _ref.target;
        return _this.showTooltip(target);
      });
      _this.handleBlur = _this.handle((0, _handle.forward)('onBlur'), _this.hideTooltip);

      _this.getTooltipRef = function (node) {
        _this.tooltipRef = node;

        if (node) {
          _this.setTooltipLayout();
        }
      };

      _this.state = {
        showing: false,
        tooltipDirection: null,
        arrowAnchor: null,
        position: {
          top: 0,
          left: 0
        }
      };
      return _this;
    }

    _createClass(Decorator, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (window.MutationObserver) {
          this.mutationObserver = new MutationObserver(this.startTooltipLayoutJob);
        }

        if (window.ResizeObserver) {
          this.resizeObserver = new ResizeObserver(this.startTooltipLayoutJob);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (this.state.showing && (prevProps.tooltipText !== this.props.tooltipText || prevProps.tooltipPosition !== this.props.tooltipPosition || prevProps.tooltipType !== this.props.tooltipType || prevState.showing !== this.state.showing)) {
          this.setTooltipLayout();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (currentTooltip === this) {
          currentTooltip = null;

          if (this.mutationObserver) {
            this.mutationObserver.disconnect();
          }

          if (this.resizeObserver) {
            this.resizeObserver.disconnect();
          }

          this.showTooltipJob.stop();
          this.setTooltipLayoutJob.stop();
        }
      }
    }, {
      key: "setTooltipLayout",
      value: function setTooltipLayout() {
        var tooltipType = this.props.tooltipType;
        if (!this.tooltipRef || !this.clientRef) return;

        var screenEdgeKeepout = _resolution["default"].scale(config.screenEdgeKeepout);

        var position = this.props.tooltipPosition || (0, _Tooltip.defaultDirection)(tooltipType) + ' ' + (0, _Tooltip.defaultArrowAnchor)(tooltipType);
        var arr = position.split(' ');
        var tooltipDirection = null;
        var arrowAnchor = null;

        if (arr.length === 2) {
          var _arr2 = _slicedToArray(arr, 2);

          tooltipDirection = _arr2[0];
          arrowAnchor = _arr2[1];
        } else if (position === 'above' || position === 'below') {
          tooltipDirection = position;
          arrowAnchor = 'right';
        } else {
          tooltipDirection = 'above';
          arrowAnchor = 'right';
        }

        var tooltipNode = this.tooltipRef.getBoundingClientRect(); // label bound

        var clientNode = this.clientRef.getBoundingClientRect(); // client bound

        var overflow = (0, _util2.calcOverflow)(tooltipNode, clientNode, tooltipDirection, screenEdgeKeepout);
        tooltipDirection = (0, _util2.adjustDirection)(tooltipDirection, overflow, this.props.rtl);
        arrowAnchor = (0, _util2.adjustAnchor)(arrowAnchor, tooltipDirection, overflow, this.props.rtl);
        var tooltipPosition = (0, _util2.getPosition)(clientNode, tooltipDirection);
        var labelOffset = arrowAnchor === 'center' ? (0, _util2.getLabelOffset)(tooltipNode, tooltipDirection, tooltipPosition, overflow) : null;
        var _this$state$position = this.state.position,
            top = _this$state$position.top,
            left = _this$state$position.left;

        if (tooltipPosition.top !== top || tooltipPosition.left !== left || labelOffset !== this.state.labelOffset || arrowAnchor !== this.state.arrowAnchor) {
          this.setState({
            tooltipDirection: tooltipDirection,
            arrowAnchor: arrowAnchor,
            labelOffset: labelOffset,
            position: tooltipPosition
          });
        }
      }
    }, {
      key: "renderTooltip",
      value:
      /**
       * Conditionally creates the FloatingLayer and Tooltip based on the presence of
       * `tooltipText` and returns a property bag to pass onto the Wrapped component
       *
       * @returns {Object} Prop object
       * @private
       */
      function renderTooltip() {
        var _this$props2 = this.props,
            children = _this$props2.children,
            tooltipMarquee = _this$props2.tooltipMarquee,
            tooltipRelative = _this$props2.tooltipRelative,
            tooltipProps = _this$props2.tooltipProps,
            tooltipText = _this$props2.tooltipText,
            tooltipWidth = _this$props2.tooltipWidth,
            tooltipType = _this$props2.tooltipType;
        var _this$state$position2 = this.state.position,
            top = _this$state$position2.top,
            left = _this$state$position2.left;
        var tooltipStyle = {
          // Moving the position to CSS variables where there are additional offset calculations
          '--tooltip-position-top': tooltipRelative ? null : _resolution["default"].unit(top, 'rem'),
          '--tooltip-position-left': tooltipRelative ? null : _resolution["default"].unit(left, 'rem')
        };

        if (tooltipText) {
          var renderedTooltip = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tooltip.Tooltip, _objectSpread(_objectSpread({
            "aria-hidden": true,
            labelOffset: this.state.labelOffset
          }, tooltipProps), {}, {
            arrowAnchor: this.state.arrowAnchor,
            direction: this.state.tooltipDirection,
            marquee: tooltipMarquee,
            relative: tooltipRelative,
            style: tooltipStyle,
            tooltipRef: this.getTooltipRef,
            type: tooltipType,
            width: tooltipWidth,
            children: tooltipText
          }));

          if (!tooltipRelative) {
            renderedTooltip = /*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingLayer.FloatingLayerBase, {
              open: this.state.showing,
              noAutoDismiss: true,
              onDismiss: this.hideTooltip,
              scrimType: "none",
              children: renderedTooltip
            }, "tooltipFloatingLayer");
          } else if (!this.state.showing) {
            renderedTooltip = null;
          }

          if (tooltipDestinationProp === 'children') {
            return {
              children: [children, renderedTooltip]
            };
          } else {
            return _defineProperty({}, tooltipDestinationProp, renderedTooltip);
          }
        }

        return {
          children: children
        };
      }
    }, {
      key: "render",
      value: function render() {
        // minor optimization to merge all the props together once since we also have to delete
        // invalid props before passing downstream
        var props = Object.assign({}, this.props, this.renderTooltip(), {
          onBlur: this.handleBlur,
          onFocus: this.handleFocus,
          onMouseOut: this.handleMouseOut,
          onMouseOver: this.handleMouseOver,
          onKeyDown: this.handleKeyDown
        });
        delete props.rtl;
        delete props.tooltipDelay;
        delete props.tooltipMarquee;
        delete props.tooltipPosition;
        delete props.tooltipProps;
        delete props.tooltipRelative;
        delete props.tooltipText;
        delete props.tooltipType;
        delete props.tooltipUpdateDelay;
        delete props.tooltipWidth;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
      }
    }]);

    return Decorator;
  }(_react.Component), _class.displayName = 'TooltipDecorator', _class.propTypes =
  /** @lends sandstone/TooltipDecorator.TooltipDecorator.prototype */
  {
    /**
     * Disables the component but does not affect tooltip operation.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes["default"].bool,

    /**
     * Indicates the tooltip text direction is right-to-left.
     *
     * @type {Boolean}
     * @private
     */
    rtl: _propTypes["default"].bool,

    /**
     * Time to wait (in milliseconds) before showing tooltip on hover.
     *
     * @type {Number}
     * @default 500
     * @public
     */
    tooltipDelay: _propTypes["default"].number,

    /**
     * Allows the tooltip to marquee.
     *
     * Specifying a [`tooltipWidth`]{@link sandstone/TooltipDecorator.TooltipDecorator#tooltipWidth}
     * restrects the marquee to that size.
     *
     * @type {Boolean}
     * @public
     */
    tooltipMarquee: _propTypes["default"].bool,

    /**
     * Position of the tooltip with respect to the wrapped component.
     *
     * | *Value* | *Tooltip Direction* |
     * |---|---|
     * | `'above'` | Above component, flowing to the right |
     * | `'above center'` | Above component, centered |
     * | `'above left'` | Above component, flowing to the left |
     * | `'above right'` | Above component, flowing to the right |
     * | `'below'` | Below component, flowing to the right |
     * | `'below center'` | Below component, centered |
     * | `'below left'` | Below component, flowing to the left |
     * | `'below right'` | Below component, flowing to the right |
     * | `'left bottom'` | Left of the component, contents at the bottom |
     * | `'left middle'` | Left of the component, contents middle aligned |
     * | `'left top'` | Left of the component, contents at the top |
     * | `'right bottom'` | Right of the component, contents at the bottom |
     * | `'right middle'` | Right of the component, contents middle aligned |
     * | `'right top'` | Right of the component, contents at the top |
     *
     * `TooltipDecorator` attempts to choose the best direction to meet layout and language
     * requirements. Left and right directions will reverse for RTL languages. Additionally,
     * the tooltip will reverse direction if it will prevent overflowing off the viewport
     *
     * For `type="balloon"`, the default is `"top right"`
     * For `type="transparent"`, the default is `"bottom center"`
     *
     * @type {('above'|'above center'|'above left'|'above right'|'below'|
     *  'below center'|'below left'|'below right'|'left bottom'|'left middle'|'left top'|
     * 	'right bottom'|'right middle'|'right top')}
     * @public
     */
    tooltipPosition: _propTypes["default"].oneOf(['above', 'above center', 'above left', 'above right', 'below', 'below center', 'below left', 'below right', 'left bottom', 'left middle', 'left top', 'right bottom', 'right middle', 'right top']),

    /**
     * Properties to be passed to tooltip component.
     *
     * @type {Object}
     * @public
     */
    tooltipProps: _propTypes["default"].object,

    /**
     * Positions the tooltip relative to its container.
     *
     * Determines whether your tooltip should position itself relative to its container or
     * relative to the screen (absolute positioning on the floating layer). When setting to
     * `true`, to enable relative positioning, it may be important to specify the
     * `tooltipDestinationProp` key in this HoC's config object. A relatively positioned
     * Tooltip for a `Button`, for example, must be placed in the `decoration` prop.
     *
     * It may be necessary to assign the CSS rule `position` to the containing element so
     * relatively positioned Tooltip has a frame to "stick to" the edge of.
     *
     * Anchoring points can be visualized as follows:
     * ```
     * ┌───◎───┐
     * ◎       ◎
     * └───◎───┘
     * ```
     *
     * @type {Boolean}
     * @public
     */
    tooltipRelative: _propTypes["default"].bool,

    /**
     * Tooltip content.
     *
     * @type {String|Node}
     * @public
     */
    tooltipText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

    /**
     * Type of tooltip.
     *
     * | *Value* | *Tooltip Appearance* |
     * |---|---|
     * | `'balloon'` | Tooltip with a border, background and arrow to the activator |
     * | `'transparent'` | Text only without any of the decorations above |
     *
     * @type {('balloon'|'transparent')}
     * @default 'balloon'
     * @public
     */
    tooltipType: _propTypes["default"].oneOf(['balloon', 'transparent']),

    /**
     * The interval (in milliseconds) to recheck the math for a currently showing tooltip's
     * positioning and orientation. Useful if your anchor element moves.
     *
     * @type {Number}
     * @default 400
     * @public
     */
    tooltipUpdateDelay: _propTypes["default"].number,

    /**
     * The width of tooltip content.
     *
     * Value expects a number of pixels, which will be automatically scaled to the
     * appropriate size given the current screen resolution, or a string value containing a
     * measurement and a valid CSS unit included. If the content goes over the given width,
     * it will automatically wrap, or marquee if `marquee` is enabled.
     *
     * When `null`, content will auto-size and not wrap. If `tooltipMarquee` is also
     * enabled, marqueeing will begin when the width is greater than the default (theme
     * specified) width.
     *
     * @type {Number|String}
     * @public
     */
    tooltipWidth: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
  }, _class.defaultProps = {
    disabled: false,
    tooltipDelay: 500,
    tooltipType: 'balloon',
    tooltipUpdateDelay: 400
  }, _class);
  return (0, _I18nDecorator.I18nContextDecorator)({
    rtlProp: 'rtl'
  }, Decorator);
});
exports.TooltipDecorator = TooltipDecorator;
var _default = TooltipDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/TooltipDecorator/TooltipLabel.js":
/*!************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/TooltipDecorator/TooltipLabel.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.TooltipLabel = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _util = __webpack_require__(/*! @enact/i18n/util */ "./node_modules/@enact/i18n/util/util.js");

var _resolution = __webpack_require__(/*! @enact/ui/resolution */ "./node_modules/@enact/ui/resolution/index.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _Marquee = _interopRequireDefault(__webpack_require__(/*! ../Marquee */ "./node_modules/@enact/sandstone/Marquee/Marquee.js"));

var _TooltipModule = _interopRequireDefault(__webpack_require__(/*! ./Tooltip.module.css */ "./node_modules/@enact/sandstone/TooltipDecorator/Tooltip.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["centered", "children", "marquee"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * {@link sandstone/TooltipDecorator.TooltipLabel} is a stateless tooltip component with
 * Sandstone styling applied.
 *
 * @class TooltipLabel
 * @memberof sandstone/TooltipDecorator
 * @ui
 * @private
 */


var TooltipLabel = (0, _kind["default"])({
  name: 'TooltipLabel',
  propTypes:
  /** @lends sandstone/TooltipDecorator.TooltipLabel.prototype */
  {
    /**
     * The node to be displayed as the main content of the tooltip.
     *
     * @type {Node}
     * @required
     */
    children: _propTypes["default"].node.isRequired,

    /**
     * Centers the text when `marquee` is also set.
     *
     * @type {Boolean}
     * @public
     */
    centered: _propTypes["default"].bool,

    /**
     * Apply a marquee to support long text.
     *
     * It is recommended that you specify a `width` also. If none is specified, a default width
     * of 600px will be used.
     *
     * @type {Boolean}
     * @public
     */
    marquee: _propTypes["default"].bool,

    /**
     * The width of tooltip content.
     *
     * Value expects a number of pixels, which will be automatically scaled to the appropriate
     * size given the current screen resolution, or a string value containing a measurement and
     * a valid CSS unit included.
     * If the content goes over the given width, it will automatically wrap, or marquee if
     * `marquee` is enabled.
     *
     * When `null`, content will auto-size and not wrap. If `marquee` is also enabled,
     * marqueeing will begin when the width is greater than the default (theme specified) width.
     *
     * @type {Number|String}
     * @public
     */
    width: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
  },
  styles: {
    css: _TooltipModule["default"]
  },
  computed: {
    className: function className(_ref) {
      var marquee = _ref.marquee,
          width = _ref.width,
          styler = _ref.styler;
      return styler.append({
        multi: !marquee && !!width,
        marquee: marquee
      });
    },
    style: function style(_ref2) {
      var children = _ref2.children,
          width = _ref2.width,
          _style = _ref2.style;
      return _objectSpread(_objectSpread({}, _style), {}, {
        direction: (0, _util.isRtlText)(children) ? 'rtl' : 'ltr',
        '--sand-tooltip-label-width': typeof width === 'number' ? (0, _resolution.scaleToRem)(width) : width
      });
    }
  },
  render: function render(_ref3) {
    var centered = _ref3.centered,
        children = _ref3.children,
        marquee = _ref3.marquee,
        rest = _objectWithoutProperties(_ref3, _excluded);

    delete rest.width;

    if (marquee) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Marquee["default"], _objectSpread(_objectSpread({}, rest), {}, {
        alignment: centered ? 'center' : null,
        marqueeOn: "render",
        children: children
      }));
    } else {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
        children: children
      }));
    }
  }
});
exports.TooltipLabel = TooltipLabel;
var _default = TooltipLabel;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/TooltipDecorator/util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@enact/sandstone/TooltipDecorator/util.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getPosition = exports.getLabelOffset = exports.calcOverflow = exports.adjustDirection = exports.adjustAnchor = void 0;

var _resolution = _interopRequireDefault(__webpack_require__(/*! @enact/ui/resolution */ "./node_modules/@enact/ui/resolution/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
} // TooltipDecorator util.js
//

/**
 * Calculates the unusable space of a centered Tooltip, which the Tooltip arrow cannot be positioned,
 * as a percentage of the Tooltip's total width.
 *
 * @param  {Number} tooltipWidth        The measured width of the Tooltip
 * @return {Number}                     The percent of the width of the tooltip that the Tooltip's
 *                                      decorations allocate for themselves (on one side).
 * @private
 */


var getLabelUnavailableSpace = function getLabelUnavailableSpace(tooltipWidth) {
  // Arrow is 30px wide total, we need to know how wide half of it is, since it's centered on the anchor point.
  var arrowWidth = 30 / 2; // Tooltip is 108px tall, divide by half to get the curve radius, add the tooltip width
  // to determine the distance that the anchor cannot progress past.

  var tooltipUnavailableEdge = _resolution["default"].scale(108 / 2 + arrowWidth); // cap the offset at 50% - that percentage


  var tooltipUnavaliablePercentage = 0.5 - tooltipUnavailableEdge / tooltipWidth;
  return tooltipUnavaliablePercentage;
};
/**
 * Adjust anchor position for `Tooltip` based on overflow and rtl.
 * Takes the output of `adjustDirection`, and `calcOverflow`.
 *
 * @method
 * @memberof sandstone/TooltipDecorator
 * @param   {String}  arrowAnchor       Initial anchor position
 * @param   {String}  tooltipDirection  Direction of tooltip; value from `adjustDirection`
 * @param   {Object}  overflow          Tooltip's calculated overflow from `calcOverflow`
 * @param   {Boolean} rtl               RTL mode
 * @returns {String}                    Adjusted anchor position
 * @private
 */


var adjustAnchor = function adjustAnchor(arrowAnchor, tooltipDirection, overflow, rtl) {
  if (tooltipDirection === 'above' || tooltipDirection === 'below') {
    if (rtl && arrowAnchor !== 'center') {
      arrowAnchor = arrowAnchor === 'left' ? 'right' : 'left';
    } // Flip sideways if it overflows to the sides


    if (arrowAnchor === 'center') {// If tooltip is anchored in the center, don't flip. We'll offset it appropriately later.
    } else if (overflow.isOverRight) {
      arrowAnchor = 'left';
    } else if (overflow.isOverLeft) {
      arrowAnchor = 'right';
    } // If tooltip is just too wide for the whole screen, switch it to a center tooltip


    if (overflow.isOverWide && tooltipDirection !== 'left' && tooltipDirection !== 'right') {
      arrowAnchor = 'center';
    }
  }

  return arrowAnchor;
};
/**
 * Adjust direction for `Tooltip` based on overflow and rtl.
 * Takes the output from `calcOverflow`.
 *
 * @method
 * @memberof sandstone/TooltipDecorator
 * @param   {String}  tooltipDirection  Direction of tooltip
 * @param   {Object}  overflow          Tooltip's calculated overflow from `calcOverflow`
 * @param   {Boolean} rtl               RTL mode
 * @returns {String}                    Adjusted tooltip direction
 * @private
 */


exports.adjustAnchor = adjustAnchor;

var adjustDirection = function adjustDirection(tooltipDirection, overflow, rtl) {
  if (rtl && (tooltipDirection === 'left' || tooltipDirection === 'right')) {
    tooltipDirection = tooltipDirection === 'left' ? 'right' : 'left';
  } // Flip tooltip if it overflows towards the tooltip direction


  if (overflow.isOverTop && tooltipDirection === 'above') {
    tooltipDirection = 'below';
  } else if (overflow.isOverBottom && tooltipDirection === 'below') {
    tooltipDirection = 'above';
  } else if (overflow.isOverLeft && tooltipDirection === 'left' && !overflow.isOverWide) {
    tooltipDirection = 'right';
  } else if (overflow.isOverRight && tooltipDirection === 'right' && !overflow.isOverWide) {
    tooltipDirection = 'left';
  }

  return tooltipDirection;
};
/**
 * Calculates the overflow of `Tooltip` — if `Tooltip` is at the edge of the viewport.
 * Return the amount of overflow in a particular direction if there is overflow (false otherwise).
 *
 * @method
 * @memberof sandstone/TooltipDecorator
 * @param   {Object} tooltipNode        The `getBoundingClientRect` values for tooltip node
 * @param   {Object} clientNode         The `getBoundingClientRect` values for client node
 * @param   {String} tooltipDirection   Direction of tooltip
 * @param   {Number} tooltipHeight      Tooltip height
 * @param   {Number} edgeKeepout        Extra margin around the screen to avoid
 * @returns {Object}                    Tooltip's calculated overflow
 * @private
 */


exports.adjustDirection = adjustDirection;

var calcOverflow = function calcOverflow(tooltipNode, clientNode, tooltipDirection, edgeKeepout) {
  // get the distance of space on both the right and left side of the client node. `clientNode.width / 2` because we want the tooltip to be positioned horizontally in middle of the client node.
  var windowWidth = window.innerWidth;
  var windowHeight = window.innerHeight;
  var clientHorizontalCenter = clientNode.left + clientNode.width / 2;
  var tooltipSafeWidth = tooltipNode.width + edgeKeepout;
  var tooltipCenterdSafeWidth = tooltipNode.width / 2 + edgeKeepout;
  var rightDelta = tooltipSafeWidth > clientHorizontalCenter;
  var leftDelta = tooltipSafeWidth > windowWidth - clientHorizontalCenter;
  var isTooltipWide = tooltipSafeWidth > windowWidth || leftDelta && rightDelta;

  if (tooltipDirection === 'above' || tooltipDirection === 'below') {
    var isOverTop = clientNode.top - tooltipNode.height - edgeKeepout;
    var isOverBottom = clientNode.bottom + tooltipNode.height + edgeKeepout;
    var isOverLeft = clientHorizontalCenter - tooltipSafeWidth;
    var isOverRight = clientHorizontalCenter + tooltipSafeWidth;
    var isOverCenterLeft = clientHorizontalCenter - tooltipCenterdSafeWidth;
    var isOverCenterRight = clientHorizontalCenter + tooltipCenterdSafeWidth;
    return {
      isOverTop: isOverTop < 0 ? isOverTop : false,
      isOverBottom: isOverBottom > windowHeight ? isOverBottom - windowHeight : false,
      isOverLeft: isOverLeft < 0 ? isOverLeft : false,
      isOverRight: isOverRight > windowWidth ? isOverRight - windowWidth : false,
      isOverCenterLeft: isOverCenterLeft < 0 ? isOverCenterLeft : false,
      isOverCenterRight: isOverCenterRight > windowWidth ? isOverCenterRight - windowWidth : false,
      isOverWide: isTooltipWide
    };
  } else if (tooltipDirection === 'left' || tooltipDirection === 'right') {
    var _isOverTop = clientNode.top - tooltipNode.height + clientNode.height - edgeKeepout;

    var _isOverBottom = clientNode.bottom + tooltipNode.height - clientNode.height / 2 + edgeKeepout;

    var _isOverLeft = clientNode.left - tooltipNode.width - edgeKeepout;

    var _isOverRight = clientNode.right + tooltipNode.width + edgeKeepout;

    return {
      isOverTop: _isOverTop < 0 ? _isOverTop : false,
      isOverBottom: _isOverBottom > windowHeight ? _isOverBottom - windowHeight : false,
      isOverLeft: _isOverLeft < 0 ? _isOverLeft : false,
      isOverRight: _isOverRight > windowWidth ? _isOverRight - windowWidth : false,
      isOverWide: isTooltipWide
    };
  }
};
/**
 * Calculates the top and left position for `Tooltip`.
 * Takes the output of `adjustAnchor`, `adjustDirection`, and `calcOverflow`.
 *
 * @method
 * @memberof sandstone/TooltipDecorator
 * @param   {Object} tooltipNode        The `getBoundingClientRect` values for tooltip node
 * @param   {Object} clientNode         The `getBoundingClientRect` values for client node
 * @param   {String} arrowAnchor        Anchor position from `adjustAnchor`
 * @param   {String} tooltipDirection   Direction of tooltip
 * @param   {Number} tooltipHeight      Tooltip height
 * @param   {Object} overflow           Tooltip's calculated overflow from `calcOverflow`
 * @param   {Boolean} rtl               RTL mode
 * @returns {Object}                    Tooltip top and left position
 * @private
 */


exports.calcOverflow = calcOverflow;

var getPosition = function getPosition(clientNode, tooltipDirection) {
  var position = {};

  switch (tooltipDirection) {
    case 'above':
      position.top = clientNode.top;
      break;

    case 'below':
      position.top = clientNode.bottom;
      break;

    case 'right':
      position.left = clientNode.right;
      break;

    case 'left':
      position.left = clientNode.left;
      break;

    default:
      position = {};
  }

  if (tooltipDirection === 'above' || tooltipDirection === 'below') {
    position.left = clientNode.left + clientNode.width / 2;
  } else if (tooltipDirection === 'left' || tooltipDirection === 'right') {
    position.top = clientNode.top + clientNode.height / 2;
  }

  return position;
};
/**
 * Adjusts the `Tooltip` arrow anchor when the tooltip is too wide.
 * Takes the output of `calcOverflow`.
 *
 * @method
 * @memberof sandstone/TooltipDecorator
 * @param   {Object}  tooltipNode       The `getBoundingClientRect` values for tooltip node
 * @param   {String}  tooltipDirection  Direction of tooltip
 * @param   {Object}  tooltipPosition   Calculated tooltip position from `getPosition`
 * @param   {Object}  overflow          Tooltip's calculated overflow from `calcOverflow`
 * @private
 */


exports.getPosition = getPosition;

var getLabelOffset = function getLabelOffset(tooltipNode, tooltipDirection, tooltipPosition, overflow) {
  // This method is irrelevent to left and right anchored tooltips, skip entirely.
  if (tooltipDirection !== 'left' && tooltipDirection !== 'right') {
    var tooltipWidth = tooltipNode.width;

    if (overflow.isOverWide || overflow.isOverCenterLeft || overflow.isOverCenterRight) {
      var pixelOffset = 0;

      if (overflow.isOverCenterLeft) {
        // Start shifting the label to the right (negative offset)
        pixelOffset = overflow.isOverCenterLeft;
      } else if (overflow.isOverCenterRight) {
        // Start shifting the label to the left (positive offset)
        pixelOffset = overflow.isOverCenterRight;
      }

      var percentageOffset = pixelOffset / tooltipWidth * -1;
      var offsetBoundaryPercentage = getLabelUnavailableSpace(tooltipWidth);
      var cappedPercentageOffset = Math.max(offsetBoundaryPercentage * -1, Math.min(offsetBoundaryPercentage, percentageOffset));
      return cappedPercentageOffset;
    }
  }

  return null;
};

exports.getLabelOffset = getLabelOffset;

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/Feedback.js":
/*!***************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/Feedback.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.FeedbackBase = exports.Feedback = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _util = __webpack_require__(/*! ../internal/util */ "./node_modules/@enact/sandstone/internal/util/util.js");

var _FeedbackIcon = _interopRequireDefault(__webpack_require__(/*! ./FeedbackIcon */ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackIcon.js"));

var _FeedbackIcons = _interopRequireDefault(__webpack_require__(/*! ./FeedbackIcons.js */ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackIcons.js"));

var _FeedbackModule = _interopRequireDefault(__webpack_require__(/*! ./Feedback.module.css */ "./node_modules/@enact/sandstone/VideoPlayer/Feedback.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["children", "playbackState"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Feedback {@link sandstone/VideoPlayer}. This displays the media's playback rate and other
 * information.
 *
 * @class Feedback
 * @memberof sandstone/VideoPlayer
 * @ui
 * @private
 */


var FeedbackBase = (0, _kind["default"])({
  name: 'Feedback',
  propTypes:
  /** @lends sandstone/VideoPlayer.Feedback.prototype */
  {
    children: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

    /**
     * Refers to one of the following possible media playback states.
     * `'play'`, `'pause'`, `'rewind'`, `'fastForward'` ,
     * `'jumpBackward'`, `'jumpForward'`, `'jumpToStart'`, `'jumpToEnd'`, `'stop'`.
     *
     * Each state understands where its related icon should be positioned, and whether it should
     * respond to changes to the `visible` property.
     *
     * This string feeds directly into {@link sandstone/FeedbackIcon.FeedbackIcon}.
     *
     * @type {('play'|'pause'|'rewind'|'fastForward'|'jumpBackward'|'jumpForward'|'jumpToStart'|'jumpToEnd'|'stop')}
     * @public
     */
    playbackState: _propTypes["default"].oneOf(Object.keys(_FeedbackIcons["default"])),

    /**
     * If the current `playbackState` allows this component's visibility to be changed,
     * this component will be hidden. If not, setting this property will have no effect.
     * All `playbackState`s respond to this property except the following:
     * `'rewind'`, `'fastForward'`.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    visible: _propTypes["default"].bool
  },
  defaultProps: {
    visible: true
  },
  styles: {
    css: _FeedbackModule["default"],
    className: 'feedback'
  },
  computed: {
    className: function className(_ref) {
      var styler = _ref.styler,
          visible = _ref.visible;
      return styler.append({
        hidden: !visible
      });
    },
    children: function children(_ref2) {
      var _children = _ref2.children,
          s = _ref2.playbackState;

      if (_FeedbackIcons["default"][s]) {
        // Working with a known state, treat `children` as playbackRate
        if (_FeedbackIcons["default"][s].message && _children !== 1) {
          // `1` represents a playback rate of 1:1
          return _children.toString().replace(/^-/, '') + _FeedbackIcons["default"][s].message;
        }
      } else {
        // Custom Message
        return _children;
      }
    }
  },
  render: function render(_ref3) {
    var children = _ref3.children,
        playbackState = _ref3.playbackState,
        rest = _objectWithoutProperties(_ref3, _excluded);

    delete rest.visible;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
      children: [_FeedbackIcons["default"][playbackState] && _FeedbackIcons["default"][playbackState].position === 'before' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_FeedbackIcon["default"], {
        children: playbackState
      }) : null, children ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: _FeedbackModule["default"].message,
        children: children
      }) : null, _FeedbackIcons["default"][playbackState] && _FeedbackIcons["default"][playbackState].position === 'after' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_FeedbackIcon["default"], {
        children: playbackState
      }) : null]
    }));
  }
});
exports.FeedbackBase = FeedbackBase;
var Feedback = (0, _util.onlyUpdateForProps)(FeedbackBase, ['children', 'playbackState', 'visible']);
exports.Feedback = Feedback;
var _default = Feedback;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackContent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/FeedbackContent.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.FeedbackContentBase = exports.FeedbackContent = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _util = __webpack_require__(/*! ../internal/util */ "./node_modules/@enact/sandstone/internal/util/util.js");

var _Feedback = _interopRequireDefault(__webpack_require__(/*! ./Feedback */ "./node_modules/@enact/sandstone/VideoPlayer/Feedback.js"));

var _FeedbackIcons = _interopRequireDefault(__webpack_require__(/*! ./FeedbackIcons.js */ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackIcons.js"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["children", "playbackRate", "playbackState", "feedbackVisible", "visible"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * FeedbackContent {@link sandstone/VideoPlayer}. This displays the media's playback rate and other
 * information.
 *
 * @class FeedbackContent
 * @memberof sandstone/VideoPlayer
 * @ui
 * @private
 */


var FeedbackContentBase = (0, _kind["default"])({
  name: 'FeedbackContent',
  propTypes:
  /** @lends sandstone/VideoPlayer.Feedback.prototype */
  {
    /**
     * If the current `playbackState` allows the feedback component's visibility to be changed,
     * the feedback component will be hidden. If not, setting this property will have no effect.
     * All `playbackState`s respond to this property except the following:
     * `'rewind'`, `'fastForward'`.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    feedbackVisible: _propTypes["default"].bool,

    /**
     * Value of the feedback playback rate
     *
     * @type {String|Number}
     * @public
     */
    playbackRate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

    /**
     * Refers to one of the following possible media playback states.
     * `'play'`, `'pause'`, `'rewind'`, `'fastForward'` ,
     * `'jumpBackward'`, `'jumpForward'`, `'jumpToStart'`, `'jumpToEnd'`, `'stop'`.
     *
     * Each state understands where its related icon should be positioned, and whether it should
     * respond to changes to the `visible` property.
     *
     * This string feeds directly into {@link sandstone/FeedbackIcon.FeedbackIcon}.
     *
     * @type {('play'|'pause'|'rewind'|'fastForward'|'jumpBackward'|'jumpForward'|'jumpToStart'|'jumpToEnd'|'stop')}
     * @public
     */
    playbackState: _propTypes["default"].oneOf(Object.keys(_FeedbackIcons["default"])),

    /**
     * The visibility of the component. When `false`, the component will be hidden.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    visible: _propTypes["default"].bool
  },
  defaultProps: {
    feedbackVisible: true,
    visible: true
  },
  render: function render(_ref) {
    var children = _ref.children,
        playbackRate = _ref.playbackRate,
        playbackState = _ref.playbackState,
        feedbackVisible = _ref.feedbackVisible,
        visible = _ref.visible,
        rest = _objectWithoutProperties(_ref, _excluded);

    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
      style: !visible ? {
        display: 'none'
      } : null,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Feedback["default"], {
        playbackState: playbackState,
        visible: feedbackVisible,
        children: playbackRate
      }), children]
    }));
  }
});
exports.FeedbackContentBase = FeedbackContentBase;
var FeedbackContent = (0, _util.onlyUpdateForProps)(FeedbackContentBase, ['children', 'feedbackVisible', 'playbackRate', 'playbackState', 'visible']);
exports.FeedbackContent = FeedbackContent;
var _default = FeedbackContent;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackIcon.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/FeedbackIcon.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.FeedbackIconBase = exports.FeedbackIcon = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _Icon = _interopRequireDefault(__webpack_require__(/*! ../Icon */ "./node_modules/@enact/sandstone/Icon/Icon.js"));

var _FeedbackIcons = _interopRequireDefault(__webpack_require__(/*! ./FeedbackIcons.js */ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackIcons.js"));

var _FeedbackModule = _interopRequireDefault(__webpack_require__(/*! ./Feedback.module.css */ "./node_modules/@enact/sandstone/VideoPlayer/Feedback.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["children"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Feedback Icon for {@link sandstone/VideoPlayer.Feedback}.
 *
 * @class FeedbackIcon
 * @memberof sandstone/VideoPlayer
 * @ui
 * @private
 */


var FeedbackIconBase = (0, _kind["default"])({
  name: 'FeedbackIcon',
  propTypes:
  /** @lends sandstone/VideoPlayer.FeedbackIcon.prototype */
  {
    /**
     * Refers to one of the following possible media playback states.
     * `'play'`, `'pause'`, `'rewind'`, `'fastForward'` ,
     * `'jumpBackward'`, `'jumpForward'`, `'jumpToStart'`, `'jumpToEnd'`, `'stop'`.
     *
     * @type {('play'|'pause'|'rewind'|'fastForward'|'jumpBackward'|'jumpForward'|'jumpToStart'|'jumpToEnd'|'stop')}
     * @public
     */
    children: _propTypes["default"].oneOf(Object.keys(_FeedbackIcons["default"]))
  },
  styles: {
    css: _FeedbackModule["default"],
    className: 'icon'
  },
  computed: {
    children: function children(_ref) {
      var _children = _ref.children;
      return _children && _FeedbackIcons["default"][_children] && _FeedbackIcons["default"][_children].icon;
    }
  },
  render: function render(_ref2) {
    var children = _ref2.children,
        rest = _objectWithoutProperties(_ref2, _excluded);

    if (children) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon["default"], _objectSpread(_objectSpread({}, rest), {}, {
        children: children
      }));
    }

    return null;
  }
});
exports.FeedbackIconBase = FeedbackIconBase;
var FeedbackIcon = (0, _Skinnable["default"])(FeedbackIconBase);
exports.FeedbackIcon = FeedbackIcon;
var _default = FeedbackIcon;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackIcons.js":
/*!********************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/FeedbackIcons.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0; // Full List (Hash) of Feedback states and their icons with metadata
//

var _default = {
  play: {
    icon: 'play',
    position: 'after',
    allowHide: true,
    message: null
  },
  pause: {
    icon: 'pause',
    position: 'after',
    allowHide: false,
    message: null
  },
  rewind: {
    icon: 'backward',
    position: 'before',
    allowHide: false,
    message: 'x'
  },
  slowRewind: {
    icon: 'pausebackward',
    position: 'before',
    allowHide: false,
    message: 'x'
  },
  fastForward: {
    icon: 'forward',
    position: 'after',
    allowHide: false,
    message: 'x'
  },
  slowForward: {
    icon: 'pauseforward',
    position: 'after',
    allowHide: false,
    message: 'x'
  },
  jumpBackward: {
    icon: 'pausejumpbackward',
    position: 'before',
    allowHide: false,
    message: ' '
  },
  jumpForward: {
    icon: 'pausejumpforward',
    position: 'after',
    allowHide: false,
    message: ' '
  },
  jumpToStart: {
    icon: 'jumpbackward',
    position: 'before',
    allowHide: true,
    message: null
  },
  jumpToEnd: {
    icon: 'jumpforward',
    position: 'after',
    allowHide: true,
    message: null
  },
  stop: {
    icon: 'stop',
    position: null,
    allowHide: true,
    message: null
  }
};
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackTooltip.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/FeedbackTooltip.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.FeedbackTooltipBase = exports.FeedbackTooltip = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _ComponentOverride = _interopRequireDefault(__webpack_require__(/*! @enact/ui/ComponentOverride */ "./node_modules/@enact/ui/ComponentOverride/ComponentOverride.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _Image = _interopRequireDefault(__webpack_require__(/*! ../Image */ "./node_modules/@enact/sandstone/Image/Image.js"));

var _util = __webpack_require__(/*! ../internal/util */ "./node_modules/@enact/sandstone/internal/util/util.js");

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _FeedbackContent = _interopRequireDefault(__webpack_require__(/*! ./FeedbackContent */ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackContent.js"));

var _FeedbackIcons = _interopRequireDefault(__webpack_require__(/*! ./FeedbackIcons.js */ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackIcons.js"));

var _MediaPlayer = __webpack_require__(/*! ../MediaPlayer/ */ "./node_modules/@enact/sandstone/MediaPlayer/index.js");

var _FeedbackTooltipModule = _interopRequireDefault(__webpack_require__(/*! ./FeedbackTooltip.module.css */ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackTooltip.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["arrowContainerClassName", "children", "feedbackVisible", "playbackState", "playbackRate", "thumbnailComponent"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * FeedbackTooltip {@link sandstone/VideoPlayer}. This displays the media's playback rate and
 * time information.
 *
 * @class FeedbackTooltip
 * @memberof sandstone/VideoPlayer
 * @ui
 * @private
 */


var FeedbackTooltipBase = (0, _kind["default"])({
  name: 'FeedbackTooltip',
  propTypes:
  /** @lends sandstone/VideoPlayer.FeedbackTooltip.prototype */
  {
    /**
     * Invoke action to display or hide tooltip.
     *
     * @type {('focus'|'blur'|'idle')}
     * @default 'idle'
     */
    action: _propTypes2["default"].oneOf(['focus', 'blur', 'idle']),

    /**
     * Duration of the current media in seconds
     *
     * @type {Number}
     * @default 0
     * @public
     */
    duration: _propTypes2["default"].number,

    /**
     * Instance of `NumFmt` to format the time
     *
     * @type {Object}
     * @public
     */
    formatter: _propTypes2["default"].object,

    /**
     * If the current `playbackState` allows this component's visibility to be changed,
     * this component will be hidden. If not, setting this property will have no effect.
     * All `playbackState`s respond to this property except the following:
     * `'rewind'`, `'fastForward'`.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    hidden: _propTypes2["default"].bool,

    /**
     * Part of the API required by `ui/Slider` but not used by FeedbackTooltip which only
     * supports horizontal orientation
     *
     * @type {String}
     * @private
     */
    orientation: _propTypes2["default"].string,

    /**
     * Value of the feedback playback rate
     *
     * @type {String|Number}
     * @public
     */
    playbackRate: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),

    /**
     * Refers to one of the following possible media playback states.
     * `'play'`, `'pause'`, `'rewind'`, `'fastForward'` ,
     * `'jumpBackward'`, `'jumpForward'`, `'jumpToStart'`, `'jumpToEnd'`, `'stop'`.
     *
     * Each state understands where its related icon should be positioned, and whether it should
     * respond to changes to the `visible` property.
     *
     * This string feeds directly into {@link sandstone/FeedbackIcon.FeedbackIcon}.
     *
     * @type {('play'|'pause'|'rewind'|'fastForward'|'jumpBackward'|'jumpForward'|'jumpToStart'|'jumpToEnd'|'stop')}
     * @public
     */
    playbackState: _propTypes2["default"].oneOf(Object.keys(_FeedbackIcons["default"])),

    /**
     * This component will be used instead of the built-in version. The internal thumbnail style
     * will be applied to this component. This component follows the same rules as the built-in
     * version; hiding and showing according to the state of `action`.
     *
     * This can be a tag name as a string, a rendered DOM node, a component, or a component
     * instance.
     *
     * @type {String|Component|Element}
     * @public
     */
    thumbnailComponent: _propTypes["default"].renderableOverride,

    /**
     * `true` if Slider knob is scrubbing.
     *
     * @type {Boolean}
     * @public
     */
    thumbnailDeactivated: _propTypes2["default"].bool,

    /**
     * Set a thumbnail image source to show on VideoPlayer's Slider knob. This is a standard
     * {@link sandstone/Image} component so it supports all of the same options for the `src`
     * property. If no `thumbnailSrc` is set, no tooltip will display.
     *
     * @type {String|Object}
     * @public
     */
    thumbnailSrc: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),

    /**
     * Required by the interface for sandstone/Slider.tooltip but not used here
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    visible: _propTypes2["default"].bool
  },
  defaultProps: {
    action: 'idle',
    thumbnailDeactivated: false,
    hidden: false
  },
  styles: {
    css: _FeedbackTooltipModule["default"],
    className: 'feedbackTooltip'
  },
  computed: {
    arrowContainerClassName: function arrowContainerClassName(_ref) {
      var action = _ref.action,
          styler = _ref.styler,
          thumbnailComponent = _ref.thumbnailComponent,
          thumbnailSrc = _ref.thumbnailSrc;
      return styler.join('arrowContainer', {
        hidden: action !== 'focus' || !thumbnailComponent && !thumbnailSrc
      });
    },
    children: function children(_ref2) {
      var _children = _ref2.children,
          duration = _ref2.duration,
          formatter = _ref2.formatter;
      return (0, _MediaPlayer.secondsToTime)(_children * duration, formatter);
    },
    className: function className(_ref3) {
      var hidden = _ref3.hidden,
          s = _ref3.playbackState,
          thumbnailDeactivated = _ref3.thumbnailDeactivated,
          styler = _ref3.styler,
          action = _ref3.action,
          thumbnailComponent = _ref3.thumbnailComponent,
          thumbnailSrc = _ref3.thumbnailSrc;
      return styler.append({
        hidden: hidden && _FeedbackIcons["default"][s] && _FeedbackIcons["default"][s].allowHide,
        thumbnailDeactivated: thumbnailDeactivated,
        shift: action === 'focus' && (thumbnailComponent || thumbnailSrc)
      });
    },
    feedbackVisible: function feedbackVisible(_ref4) {
      var action = _ref4.action,
          playbackState = _ref4.playbackState;
      return (action !== 'focus' || action === 'idle') && !(action === 'blur' && playbackState === 'play');
    },
    thumbnailComponent: function thumbnailComponent(_ref5) {
      var action = _ref5.action,
          _thumbnailComponent = _ref5.thumbnailComponent,
          thumbnailSrc = _ref5.thumbnailSrc;

      if (action === 'focus') {
        if (_thumbnailComponent) {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComponentOverride["default"], {
            component: _thumbnailComponent,
            className: _FeedbackTooltipModule["default"].thumbnail
          }, "thumbnailComponent");
        } else if (thumbnailSrc) {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: _FeedbackTooltipModule["default"].thumbnail,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Image["default"], {
              src: thumbnailSrc,
              className: _FeedbackTooltipModule["default"].image
            })
          }, "thumbnailComponent");
        }
      }
    }
  },
  render: function render(_ref6) {
    var arrowContainerClassName = _ref6.arrowContainerClassName,
        children = _ref6.children,
        feedbackVisible = _ref6.feedbackVisible,
        playbackState = _ref6.playbackState,
        playbackRate = _ref6.playbackRate,
        thumbnailComponent = _ref6.thumbnailComponent,
        rest = _objectWithoutProperties(_ref6, _excluded);

    delete rest.action;
    delete rest.duration;
    delete rest.formatter;
    delete rest.hidden;
    delete rest.orientation;
    delete rest.thumbnailDeactivated;
    delete rest.thumbnailSrc;
    delete rest.visible;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: _FeedbackTooltipModule["default"].alignmentContainer,
        children: [thumbnailComponent, /*#__PURE__*/(0, _jsxRuntime.jsx)(_FeedbackContent["default"], {
          className: _FeedbackTooltipModule["default"].content,
          feedbackVisible: feedbackVisible,
          playbackRate: playbackRate,
          playbackState: playbackState,
          children: children
        }, "feedbackContent"), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: arrowContainerClassName,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: _FeedbackTooltipModule["default"].arrow
          })
        })]
      })
    }));
  }
});
exports.FeedbackTooltipBase = FeedbackTooltipBase;
var FeedbackTooltip = (0, _util.onlyUpdateForProps)((0, _Skinnable["default"])(FeedbackTooltipBase), ['action', 'children', 'hidden', 'playbackState', 'playbackRate', 'thumbnailComponent', 'thumbnailDeactivated', 'thumbnailSrc', 'visible']);
exports.FeedbackTooltip = FeedbackTooltip;
FeedbackTooltip.defaultSlot = 'tooltip';
var _default = FeedbackTooltip;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/MediaTitle.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/MediaTitle.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.MediaTitleBase = exports.MediaTitle = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _ForwardRef = _interopRequireDefault(__webpack_require__(/*! @enact/ui/ForwardRef */ "./node_modules/@enact/ui/ForwardRef/ForwardRef.js"));

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _util = __webpack_require__(/*! ../internal/util */ "./node_modules/@enact/sandstone/internal/util/util.js");

var _Marquee = _interopRequireDefault(__webpack_require__(/*! ../Marquee */ "./node_modules/@enact/sandstone/Marquee/Marquee.js"));

var _MediaTitleModule = _interopRequireDefault(__webpack_require__(/*! ./MediaTitle.module.css */ "./node_modules/@enact/sandstone/VideoPlayer/MediaTitle.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["children", "childrenClassName", "id", "forwardRef", "title", "titleClassName"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * MediaTitle {@link sandstone/VideoPlayer}.
 *
 * @class MediaTitle
 * @memberof sandstone/VideoPlayer
 * @ui
 * @private
 */


var MediaTitleBase = (0, _kind["default"])({
  name: 'MediaTitle',
  propTypes:
  /** @lends sandstone/VideoPlayer.MediaTitle.prototype */
  {
    /**
     * DOM id for the component. Also define ids for the title and node wrapping the `children`
     * in the forms `${id}_title` and `${id}_info`, respectively.
     *
     * @type {String}
     * @required
     * @public
     */
    id: _propTypes2["default"].string.isRequired,

    /**
     * Anything supplied to `children` will be rendered. Typically this will be informational
     * badges indicating aspect ratio, audio channels, etc., but it could also be a description.
     *
     * @type {Node}
     * @public
     */
    children: _propTypes2["default"].node,

    /**
     * Forwards a reference to the MediaTitle component.
     *
     * @type {Object|Function}
     * @private
     */
    forwardRef: _propTypes["default"].ref,

    /**
     * Control whether the children (infoComponents) are displayed.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    infoVisible: _propTypes2["default"].bool,

    /**
     * A title string to identify the media's title.
     *
     * @type {String|Node}
     * @public
     */
    title: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].node]),

    /**
     * Setting this to false effectively hides the entire component. Setting it to `false` after
     * the control has rendered causes a fade-out transition. Setting to `true` after or during
     * the transition makes the component immediately visible again, without delay or transition.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    // This property uniquely defaults to true, because it doesn't make sense to have it false
    // and have the control be initially invisible, and is named "visible" to match the other
    // props (current and possible future). Having an `infoVisible` and a `hidden` prop seems weird.
    visible: _propTypes2["default"].bool
  },
  defaultProps: {
    infoVisible: false,
    visible: true
  },
  styles: {
    css: _MediaTitleModule["default"],
    className: 'titleFrame'
  },
  computed: {
    childrenClassName: function childrenClassName(_ref) {
      var infoVisible = _ref.infoVisible,
          styler = _ref.styler;
      return styler.join('infoComponents', infoVisible ? 'visible' : 'hidden');
    },
    className: function className(_ref2) {
      var visible = _ref2.visible,
          styler = _ref2.styler;
      return styler.append(visible ? 'visible' : 'hidden');
    },
    titleClassName: function titleClassName(_ref3) {
      var infoVisible = _ref3.infoVisible,
          styler = _ref3.styler;
      return styler.join({
        title: true,
        infoVisible: infoVisible
      });
    }
  },
  render: function render(_ref4) {
    var children = _ref4.children,
        childrenClassName = _ref4.childrenClassName,
        id = _ref4.id,
        forwardRef = _ref4.forwardRef,
        title = _ref4.title,
        titleClassName = _ref4.titleClassName,
        rest = _objectWithoutProperties(_ref4, _excluded);

    delete rest.infoVisible;
    delete rest.visible;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
      id: id,
      ref: forwardRef,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Marquee["default"], {
        id: "".concat(id, "_title"),
        className: titleClassName,
        marqueeOn: "render",
        children: title
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        id: "".concat(id, "_info"),
        className: childrenClassName,
        children: ["  ", children]
      })]
    }));
  }
});
exports.MediaTitleBase = MediaTitleBase;
var MediaTitle = (0, _ForwardRef["default"])((0, _util.onlyUpdateForProps)(MediaTitleBase, ['children', 'title', 'infoVisible', 'visible']));
exports.MediaTitle = MediaTitle;
var _default = MediaTitle;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/Overlay.js":
/*!**************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/Overlay.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.OverlayBase = exports.Overlay = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _Touchable = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Touchable */ "./node_modules/@enact/ui/Touchable/Touchable.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _util = __webpack_require__(/*! ../internal/util */ "./node_modules/@enact/sandstone/internal/util/util.js");

var _VideoPlayerModule = _interopRequireDefault(__webpack_require__(/*! ./VideoPlayer.module.css */ "./node_modules/@enact/sandstone/VideoPlayer/VideoPlayer.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Overlay {@link sandstone/VideoPlayer}. This covers the Video piece of the
 * {@link sandstone/VideoPlayer} to prevent unnecessary VideoPlayer repaints due to mouse-moves.
 * It also acts as a container for overlaid elements, like the {@link sandstone/Spinner}.
 *
 * @class Overlay
 * @memberof sandstone/VideoPlayer
 * @ui
 * @private
 */


var OverlayBase = (0, _kind["default"])({
  name: 'Overlay',
  propTypes:
  /** @lends sandstone/VideoPlayer.Overlay.prototype */
  {
    bottomControlsVisible: _propTypes["default"].bool,
    children: _propTypes["default"].node
  },
  styles: {
    css: _VideoPlayerModule["default"],
    className: 'overlay'
  },
  computed: {
    className: function className(_ref) {
      var bottomControlsVisible = _ref.bottomControlsVisible,
          styler = _ref.styler;
      return styler.append(_defineProperty({}, 'scrim', bottomControlsVisible));
    }
  },
  render: function render(props) {
    delete props.bottomControlsVisible;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
  }
});
exports.OverlayBase = OverlayBase;
var Overlay = (0, _util.onlyUpdateForProps)((0, _Touchable["default"])(OverlayBase), ['bottomControlsVisible', 'children']);
exports.Overlay = Overlay;
var _default = Overlay;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/Video.js":
/*!************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/Video.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Video = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _ForwardRef = _interopRequireDefault(__webpack_require__(/*! @enact/ui/ForwardRef */ "./node_modules/@enact/ui/ForwardRef/ForwardRef.js"));

var _Media = __webpack_require__(/*! @enact/ui/Media */ "./node_modules/@enact/ui/Media/Media.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _Slottable = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Slottable */ "./node_modules/@enact/ui/Slottable/Slottable.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _VideoPlayerModule = _interopRequireDefault(__webpack_require__(/*! ./VideoPlayer.module.css */ "./node_modules/@enact/sandstone/VideoPlayer/VideoPlayer.module.css"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["preloadSource", "source", "mediaComponent"];

var _class;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/**
 * Adds support for preloading a video source for `VideoPlayer`.
 *
 * @class VideoBase
 * @memberof sandstone/VideoPlayer
 * @ui
 * @private
 */


var VideoBase = (_class = /*#__PURE__*/function (_Component) {
  _inherits(VideoBase, _Component);

  var _super = _createSuper(VideoBase);

  function VideoBase() {
    var _this;

    _classCallCheck(this, VideoBase);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.keys = ['media-1', 'media-2'];
    _this.prevSourceKey = null;
    _this.prevPreloadKey = null;

    _this.handlePreloadLoadStart = function (ev) {
      // persist the event so we can cache it to re-emit when the preload becomes active
      ev.persist();
      _this.preloadLoadStart = ev; // prevent the from bubbling to upstream handlers

      ev.stopPropagation();
    };

    _this.setVideoRef = function (node) {
      _this.video = node;

      _this.setMedia();
    };

    _this.setPreloadRef = function (node) {
      if (node) {
        node.load();
      }

      _this.preloadVideo = node;
    };

    return _this;
  }

  _createClass(VideoBase, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props,
          source = _this$props.source,
          preloadSource = _this$props.preloadSource;
      var prevSource = prevProps.source,
          prevPreloadSource = prevProps.preloadSource;
      var key = (0, _Media.getKeyFromSource)(source);
      var prevKey = (0, _Media.getKeyFromSource)(prevSource);
      var preloadKey = (0, _Media.getKeyFromSource)(preloadSource);
      var prevPreloadKey = (0, _Media.getKeyFromSource)(prevPreloadSource);

      if (this.props.setMedia !== prevProps.setMedia) {
        this.clearMedia(prevProps);
        this.setMedia();
      }

      if (source) {
        if (key === prevPreloadKey && preloadKey !== prevPreloadKey) {
          // if there's source and it was the preload source
          // if the preloaded video didn't error, notify VideoPlayer it is ready to reset
          if (this.preloadLoadStart) {
            (0, _handle.forward)('onLoadStart', this.preloadLoadStart, this.props);
          } // emit onUpdate to give VideoPlayer an opportunity to updates its internal state
          // since it won't receive the onLoadStart or onError event


          (0, _handle.forward)('onUpdate', {
            type: 'onUpdate'
          }, this.props);
          this.autoPlay();
        } else if (key !== prevKey) {
          // if there's source and it has changed.
          this.autoPlay();
        }
      }

      if (preloadSource && preloadKey !== prevPreloadKey) {
        this.preloadLoadStart = null; // In the case that the previous source equalled the previous preload (causing the
        // preload video node to not be created) and then the preload source was changed, we
        // need to guard against accessing the preloadVideo node.

        if (this.preloadVideo) {
          this.preloadVideo.load();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearMedia();
    }
  }, {
    key: "clearMedia",
    value: function clearMedia() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props,
          setMedia = _ref.setMedia;

      if (setMedia) {
        setMedia(null);
      }
    }
  }, {
    key: "setMedia",
    value: function setMedia() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props,
          _setMedia = _ref2.setMedia;

      if (_setMedia) {
        _setMedia(this.video);
      }
    }
  }, {
    key: "autoPlay",
    value: function autoPlay() {
      if (!this.props.autoPlay) return;
      var playPromise = this.video.play();

      if (playPromise) {
        playPromise.then(function () {// Auto-play started
        })["catch"](function () {// Auto-play was prevented
        });
      }
    }
  }, {
    key: "getKeys",
    value: function getKeys() {
      var _this$props2 = this.props,
          source = _this$props2.source,
          preloadSource = _this$props2.preloadSource;
      var sourceKey = source && (0, _Media.getKeyFromSource)(source);
      var preloadKey = preloadSource && (0, _Media.getKeyFromSource)(preloadSource); // If the same source is used for both, clear the preload key to avoid rendering duplicate
      // video elements.

      if (sourceKey === preloadKey) {
        preloadKey = null;
      } // if either the source or preload existed previously in the other "slot", swap the keys so
      // the preload video becomes the active video and vice versa


      if (sourceKey === this.prevPreloadKey && this.prevPreloadKey || preloadKey === this.prevSourceKey && this.prevSourceKey) {
        this.keys.reverse();
      } // cache the previous keys so we know if the sources change the next time


      this.prevSourceKey = sourceKey;
      this.prevPreloadKey = preloadKey; // if preload is unset, clear the key so we don't render that media node at all

      return preloadKey ? this.keys : this.keys.slice(0, 1);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          preloadSource = _this$props3.preloadSource,
          source = _this$props3.source,
          mediaComponent = _this$props3.mediaComponent,
          rest = _objectWithoutProperties(_this$props3, _excluded);

      delete rest.setMedia;

      var _this$getKeys = this.getKeys(),
          _this$getKeys2 = _slicedToArray(_this$getKeys, 2),
          sourceKey = _this$getKeys2[0],
          preloadKey = _this$getKeys2[1];

      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
        children: [sourceKey ? /*#__PURE__*/(0, _react.createElement)(_Media.Media, _objectSpread(_objectSpread({}, rest), {}, {
          className: _VideoPlayerModule["default"].video,
          controls: false,
          key: sourceKey,
          mediaComponent: mediaComponent,
          preload: "none",
          ref: this.setVideoRef,
          source: /*#__PURE__*/(0, _react.isValidElement)(source) ? source : /*#__PURE__*/(0, _jsxRuntime.jsx)("source", {
            src: source
          })
        })) : null, preloadKey ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Media.Media, {
          autoPlay: false,
          className: _VideoPlayerModule["default"].preloadVideo,
          controls: false,
          mediaComponent: mediaComponent,
          onLoadStart: this.handlePreloadLoadStart,
          preload: "none",
          ref: this.setPreloadRef,
          source: /*#__PURE__*/(0, _react.isValidElement)(preloadSource) ? preloadSource : /*#__PURE__*/(0, _jsxRuntime.jsx)("source", {
            src: preloadSource
          })
        }, preloadKey) : null]
      });
    }
  }]);

  return VideoBase;
}(_react.Component), _class.displayName = 'Video', _class.propTypes =
/** @lends sandstone/VideoPlayer.Video.prototype */
{
  /**
   * Video plays automatically.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  autoPlay: _propTypes2["default"].bool,

  /**
   * Video component to use.
   *
   * The default (`'video'`) renders an `HTMLVideoElement`. Custom video components must have
   * a similar API structure, exposing the following APIs:
   *
   * Properties:
   * * `currentTime` {Number} - Playback index of the media in seconds
   * * `duration` {Number} - Media's entire duration in seconds
   * * `error` {Boolean} - `true` if video playback has errored.
   * * `loading` {Boolean} - `true` if video playback is loading.
   * * `paused` {Boolean} - Playing vs paused state. `true` means the media is paused
   * * `playbackRate` {Number} - Current playback rate, as a number
   * * `proportionLoaded` {Number} - A value between `0` and `1`
   *	representing the proportion of the media that has loaded
   * * `proportionPlayed` {Number} - A value between `0` and `1` representing the
   *	proportion of the media that has already been shown
   *
   * Events:
   * * `onLoadStart` - Called when the video starts to load
   * * `onPlay` - Sent when playback of the media starts after having been paused
   * * `onUpdate` - Sent when any of the properties were updated
   *
   * Methods:
   * * `play()` - play video
   * * `pause()` - pause video
   * * `load()` - load video
   *
   * The [`source`]{@link sandstone/VideoPlayer.Video.source} property is passed to
   * the video component as a child node.
   *
   * @type {String|Component|Element}
   * @default 'video'
   * @public
   */
  mediaComponent: _propTypes["default"].renderableOverride,

  /**
   * The video source to be preloaded. Expects a `<source>` node.
   *
   * @type {Node}
   * @public
   */
  preloadSource: _propTypes2["default"].node,

  /**
   * Called with a reference to the active [Media]{@link ui/Media.Media} component.
   *
   * @type {Function}
   * @private
   */
  setMedia: _propTypes2["default"].func,

  /**
   * The video source to be played.
   *
   * Any children `<source>` elements will be sent directly to the `mediaComponent` as video
   * sources.
   *
   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source
   *
   * @type {String|Node}
   * @public
   */
  source: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].node])
}, _class.defaultProps = {
  mediaComponent: 'video'
}, _class);
var VideoDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'setMedia'
}), (0, _Slottable["default"])({
  slots: ['source', 'preloadSource']
}));
/**
 * Provides support for more advanced video configurations for `VideoPlayer`.
 *
 * Custom Video Tag
 *
 * ```
 * <VideoPlayer>
 *   <Video mediaComponent="custom-video-element">
 *     <source src="path/to/source.mp4" />
 *   </Video>
 * </VideoPlayer>
 * ```
 *
 * Preload Video Source
 *
 * ```
 * <VideoPlayer>
 *   <Video>
 *     <source src="path/to/source.mp4" />
 *     <source src="path/to/preload-source.mp4" slot="preloadSource" />
 *   </Video>
 * </VideoPlayer>
 * ```
 *
 * @class Video
 * @mixes ui/Slottable.Slottable
 * @memberof sandstone/VideoPlayer
 * @ui
 * @public
 */

var Video = VideoDecorator(VideoBase);
exports.Video = Video;
Video.defaultSlot = 'videoComponent';
var _default = Video;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/VideoPlayer.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/VideoPlayer.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "Video", ({
  enumerable: true,
  get: function get() {
    return _Video["default"];
  }
}));
exports["default"] = exports.VideoPlayerBase = exports.VideoPlayer = void 0;

var _ApiDecorator = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/ApiDecorator */ "./node_modules/@enact/core/internal/ApiDecorator/ApiDecorator.js"));

var _dispatcher = __webpack_require__(/*! @enact/core/dispatcher */ "./node_modules/@enact/core/dispatcher/dispatcher.js");

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _keymap = __webpack_require__(/*! @enact/core/keymap */ "./node_modules/@enact/core/keymap/index.js");

var _platform = __webpack_require__(/*! @enact/core/platform */ "./node_modules/@enact/core/platform/platform.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _I18nDecorator = __webpack_require__(/*! @enact/i18n/I18nDecorator */ "./node_modules/@enact/i18n/I18nDecorator/I18nDecorator.js");

var _util2 = __webpack_require__(/*! @enact/i18n/util */ "./node_modules/@enact/i18n/util/util.js");

var _spotlight = __webpack_require__(/*! @enact/spotlight */ "./node_modules/@enact/spotlight/src/spotlight.js");

var _SpotlightContainerDecorator = __webpack_require__(/*! @enact/spotlight/SpotlightContainerDecorator */ "./node_modules/@enact/spotlight/SpotlightContainerDecorator/SpotlightContainerDecorator.js");

var _Spottable = __webpack_require__(/*! @enact/spotlight/Spottable */ "./node_modules/@enact/spotlight/Spottable/Spottable.js");

var _Announce = _interopRequireDefault(__webpack_require__(/*! @enact/ui/AnnounceDecorator/Announce */ "./node_modules/@enact/ui/AnnounceDecorator/Announce.js"));

var _ComponentOverride = _interopRequireDefault(__webpack_require__(/*! @enact/ui/ComponentOverride */ "./node_modules/@enact/ui/ComponentOverride/ComponentOverride.js"));

var _FloatingLayer = __webpack_require__(/*! @enact/ui/FloatingLayer */ "./node_modules/@enact/ui/FloatingLayer/index.js");

var _FloatingLayerDecorator = __webpack_require__(/*! @enact/ui/FloatingLayer/FloatingLayerDecorator */ "./node_modules/@enact/ui/FloatingLayer/FloatingLayerDecorator.js");

var _ForwardRef = _interopRequireDefault(__webpack_require__(/*! @enact/ui/ForwardRef */ "./node_modules/@enact/ui/ForwardRef/ForwardRef.js"));

var _Media = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Media */ "./node_modules/@enact/ui/Media/Media.js"));

var _Slottable = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Slottable */ "./node_modules/@enact/ui/Slottable/Slottable.js"));

var _Touchable = _interopRequireDefault(__webpack_require__(/*! @enact/ui/Touchable */ "./node_modules/@enact/ui/Touchable/Touchable.js"));

var _DurationFmt = _interopRequireDefault(__webpack_require__(/*! ilib/lib/DurationFmt */ "./node_modules/ilib/lib/DurationFmt.js"));

var _equals = _interopRequireDefault(__webpack_require__(/*! ramda/src/equals */ "./node_modules/ramda/src/equals.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _$L = _interopRequireDefault(__webpack_require__(/*! ../internal/$L */ "./node_modules/@enact/sandstone/internal/$L/$L.js"));

var _Button = _interopRequireDefault(__webpack_require__(/*! ../Button */ "./node_modules/@enact/sandstone/Button/Button.js"));

var _Skinnable = _interopRequireDefault(__webpack_require__(/*! ../Skinnable */ "./node_modules/@enact/sandstone/Skinnable/Skinnable.js"));

var _Spinner = _interopRequireDefault(__webpack_require__(/*! ../Spinner */ "./node_modules/@enact/sandstone/Spinner/Spinner.js"));

var _MediaPlayer = __webpack_require__(/*! ../MediaPlayer */ "./node_modules/@enact/sandstone/MediaPlayer/index.js");

var _Overlay = _interopRequireDefault(__webpack_require__(/*! ./Overlay */ "./node_modules/@enact/sandstone/VideoPlayer/Overlay.js"));

var _MediaTitle = _interopRequireDefault(__webpack_require__(/*! ./MediaTitle */ "./node_modules/@enact/sandstone/VideoPlayer/MediaTitle.js"));

var _FeedbackContent = _interopRequireDefault(__webpack_require__(/*! ./FeedbackContent */ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackContent.js"));

var _FeedbackTooltip = _interopRequireDefault(__webpack_require__(/*! ./FeedbackTooltip */ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackTooltip.js"));

var _Video = _interopRequireDefault(__webpack_require__(/*! ./Video */ "./node_modules/@enact/sandstone/VideoPlayer/Video.js"));

var _VideoPlayerModule = _interopRequireDefault(__webpack_require__(/*! ./VideoPlayer.module.css */ "./node_modules/@enact/sandstone/VideoPlayer/VideoPlayer.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _class;

var _excluded = ["playerRef"],
    _excluded2 = ["backButtonAriaLabel", "className", "disabled", "infoComponents", "initialJumpDelay", "jumpDelay", "loading", "locale", "mediaControlsComponent", "no5WayJump", "noAutoPlay", "noMiniFeedback", "noSlider", "noSpinner", "selection", "spotlightDisabled", "spotlightId", "style", "thumbnailComponent", "thumbnailSrc", "title", "videoComponent"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var isEnter = (0, _keymap.is)('enter');
var isLeft = (0, _keymap.is)('left');
var isRight = (0, _keymap.is)('right');
var jumpBackKeyCode = 37;
var jumpForwardKeyCode = 39;
var controlsHandleAboveSelectionKeys = [13, 16777221, jumpBackKeyCode, jumpForwardKeyCode];

var getControlsHandleAboveHoldConfig = function getControlsHandleAboveHoldConfig(_ref) {
  var frequency = _ref.frequency,
      time = _ref.time;
  return {
    events: [{
      name: 'hold',
      time: time
    }],
    frequency: frequency
  };
};

var shouldJump = function shouldJump(_ref2, _ref3) {
  var disabled = _ref2.disabled,
      no5WayJump = _ref2.no5WayJump;
  var mediaControlsVisible = _ref3.mediaControlsVisible,
      sourceUnavailable = _ref3.sourceUnavailable;
  return !no5WayJump && !mediaControlsVisible && !(disabled || sourceUnavailable);
};

var calcNumberValueOfPlaybackRate = function calcNumberValueOfPlaybackRate(rate) {
  var pbArray = String(rate).split('/');
  return pbArray.length > 1 ? parseInt(pbArray[0]) / parseInt(pbArray[1]) : parseFloat(rate);
};

var RootComponent = function RootComponent(_ref4) {
  var playerRef = _ref4.playerRef,
      rest = _objectWithoutProperties(_ref4, _excluded);

  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({
    ref: playerRef
  }, rest));
};

RootComponent.propTypes = {
  /*
   * Called with the reference to the mediaControls node.
   *
   * @type {Object|Function}
   * @public
   */
  playerRef: _propTypes["default"].ref
};
var SpottableDiv = (0, _Touchable["default"])((0, _Spottable.Spottable)('div'));
var RootContainer = (0, _ForwardRef["default"])({
  prop: 'playerRef'
}, (0, _SpotlightContainerDecorator.SpotlightContainerDecorator)({
  enterTo: 'default-element',
  defaultElement: [".".concat(_VideoPlayerModule["default"].controlsHandleAbove), ".".concat(_VideoPlayerModule["default"].controlsFrame)]
}, RootComponent));
var ControlsContainer = (0, _SpotlightContainerDecorator.SpotlightContainerDecorator)({
  enterTo: 'default-element',
  straightOnly: true
}, 'div');
var memoGetDurFmt = (0, _util.memoize)(function
  /* locale */
() {
  return new _DurationFmt["default"]({
    length: 'medium',
    style: 'clock',
    useNative: false
  });
});

var getDurFmt = function getDurFmt(locale) {
  if (typeof window === 'undefined') return null;
  return memoGetDurFmt(locale);
};

var forwardWithState = function forwardWithState(type) {
  return (0, _handle.adaptEvent)(function () {
    return {
      type: type
    };
  }, (0, _handle.handle)((0, _handle.adaptEvent)((0, _handle.call)('addStateToEvent'), (0, _handle.forwardWithPrevent)(type))));
};

var forwardToggleMore = (0, _handle.forward)('onToggleMore'); // provide forwarding of events on media controls

var forwardControlsAvailable = (0, _handle.forwardCustom)('onControlsAvailable');
var forwardPlay = forwardWithState('onPlay');
var forwardWillPlay = forwardWithState('onWillPlay');
var forwardPause = forwardWithState('onPause');
var forwardWillPause = forwardWithState('onWillPause');
var forwardRewind = forwardWithState('onRewind');
var forwardWillRewind = forwardWithState('onWillRewind');
var forwardFastForward = forwardWithState('onFastForward');
var forwardWillFastForward = forwardWithState('onWillFastForward');
var forwardJumpBackward = forwardWithState('onJumpBackward');
var forwardWillJumpBackward = forwardWithState('onWillJumpBackward');
var forwardJumpForward = forwardWithState('onJumpForward');
var forwardWillJumpForward = forwardWithState('onWillJumpForward');
var AnnounceState = {
  // Video is loaded but additional announcements have not been made
  READY: 0,
  // The title should be announced
  TITLE: 1,
  // The title has been announce
  TITLE_READ: 2,
  // The infoComponents should be announce
  INFO: 3,
  // All announcements have been made
  DONE: 4
};
/**
 * Every callback sent by [VideoPlayer]{@link sandstone/VideoPlayer} receives a status package,
 * which includes an object with the following key/value pairs as the first argument:
 *
 * @typedef {Object} videoStatus
 * @memberof sandstone/VideoPlayer
 * @property {String} type - Type of event that triggered this callback
 * @property {Number} currentTime - Playback index of the media in seconds
 * @property {Number} duration - Media's entire duration in seconds
 * @property {Boolean} paused - Playing vs paused state. `true` means the media is paused
 * @property {Number} playbackRate - Current playback rate, as a number
 * @property {Number} proportionLoaded - A value between `0` and `1` representing the proportion of the media that has loaded
 * @property {Number} proportionPlayed - A value between `0` and `1` representing the proportion of the media that has already been shown
 *
 * @public
 */

/**
 * A set of playback rates when media fast forwards, rewinds, slow-forwards, or slow-rewinds.
 *
 * The number used for each operation is proportional to the normal playing speed, 1. If the rate
 * is less than 1, it will play slower than normal speed, and, if it is larger than 1, it will play
 * faster. If it is negative, it will play backward.
 *
 * The order of numbers represents the incremental order of rates that will be used for each
 * operation. Note that rates can be expressed as decimals, strings, and fractions.
 * (e.g.: `0.5`, `'0.5'`, `'1/2'`).
 *
 * @typedef {Object} playbackRateHash
 * @memberof sandstone/VideoPlayer
 * @property {[]} fastForward - An array of playback rates when media fast forwards
 * @property {[]} rewind - An array of playback rates when media rewinds
 * @property {[]} slowForward - An array of playback rates when media slow-forwards
 * @property {[]} slowRewind - An array of playback rates when media slow-rewinds
 *
 * @public
 */

/**
 * A player for video {@link sandstone/VideoPlayer.VideoPlayerBase}.
 *
 * @class VideoPlayerBase
 * @memberof sandstone/VideoPlayer
 * @ui
 * @public
 */

var VideoPlayerBase = (_class = /*#__PURE__*/function (_Component) {
  _inherits(VideoPlayerBase, _Component);

  var _super = _createSuper(VideoPlayerBase);

  function VideoPlayerBase(_props) {
    var _this;

    _classCallCheck(this, VideoPlayerBase);

    _this = _super.call(this, _props); // Internal State

    _this.announceJob = new _util.Job(function (msg, clear) {
      return _this.announceRef && _this.announceRef.announce(msg, clear);
    }, 200);

    _this.announce = function (msg, clear) {
      _this.announceJob.start(msg, clear);
    };

    _this.activityDetected = function () {
      _this.startAutoCloseTimeout();
    };

    _this.startAutoCloseTimeout = function () {
      // If this.state.more is used as a reference for when this function should fire, timing for
      // detection of when "more" is pressed vs when the state is updated is mismatched. Using an
      // instance variable that's only set and used for this express purpose seems cleanest.
      if (_this.props.autoCloseTimeout && _this.state.mediaControlsVisible) {
        _this.autoCloseJob.startAfter(_this.props.autoCloseTimeout);
      }
    };

    _this.stopAutoCloseTimeout = function () {
      _this.autoCloseJob.stop();
    };

    _this.generateId = function () {
      return Math.random().toString(36).substr(2, 8);
    };

    _this.markAnnounceRead = function () {
      if (_this.state.announce === AnnounceState.TITLE) {
        _this.setState({
          announce: AnnounceState.TITLE_READ
        });
      } else if (_this.state.announce === AnnounceState.INFO) {
        _this.setState({
          announce: AnnounceState.DONE
        });
      }

      return true;
    };

    _this.showControls = function () {
      if (_this.props.disabled) {
        return;
      }

      _this.startDelayedFeedbackHide();

      _this.startDelayedTitleHide();

      _this.setState(function (_ref5) {
        var announce = _ref5.announce;

        if (announce === AnnounceState.READY) {
          // if we haven't read the title yet, do so this time
          announce = AnnounceState.TITLE;
        } else if (announce === AnnounceState.TITLE) {
          // if we have read the title, advance to INFO so title isn't read again
          announce = AnnounceState.TITLE_READ;
        }

        return {
          announce: announce,
          bottomControlsRendered: true,
          feedbackAction: 'idle',
          feedbackVisible: true,
          mediaControlsVisible: true,
          mediaSliderVisible: true,
          miniFeedbackVisible: false,
          titleVisible: true
        };
      });
    };

    _this.hideControls = function () {
      _this.stopDelayedFeedbackHide();

      _this.stopDelayedMiniFeedbackHide();

      _this.stopDelayedTitleHide();

      _this.stopAutoCloseTimeout();

      _this.setState({
        feedbackAction: 'idle',
        feedbackVisible: false,
        mediaControlsVisible: false,
        mediaSliderVisible: false,
        miniFeedbackVisible: false,
        infoVisible: false
      });

      _this.markAnnounceRead();
    };

    _this.toggleControls = function () {
      if (_this.state.mediaControlsVisible) {
        _this.hideControls();
      } else {
        _this.showControls();
      }
    };

    _this.doAutoClose = function () {
      _this.stopDelayedFeedbackHide();

      _this.stopDelayedTitleHide();

      _this.setState(function (_ref6) {
        var mediaSliderVisible = _ref6.mediaSliderVisible,
            miniFeedbackVisible = _ref6.miniFeedbackVisible;
        return {
          feedbackVisible: false,
          mediaControlsVisible: false,
          mediaSliderVisible: mediaSliderVisible && miniFeedbackVisible,
          infoVisible: false
        };
      });

      _this.markAnnounceRead();
    };

    _this.autoCloseJob = new _util.Job(_this.doAutoClose);

    _this.startDelayedTitleHide = function () {
      if (_this.props.titleHideDelay) {
        _this.hideTitleJob.startAfter(_this.props.titleHideDelay);
      }
    };

    _this.stopDelayedTitleHide = function () {
      _this.hideTitleJob.stop();
    };

    _this.hideTitle = function () {
      _this.setState({
        titleVisible: false
      });
    };

    _this.hideTitleJob = new _util.Job(_this.hideTitle);

    _this.startDelayedFeedbackHide = function () {
      if (_this.props.feedbackHideDelay) {
        _this.hideFeedbackJob.startAfter(_this.props.feedbackHideDelay);
      }
    };

    _this.stopDelayedFeedbackHide = function () {
      _this.hideFeedbackJob.stop();
    };

    _this.showFeedback = function () {
      if (_this.state.mediaControlsVisible) {
        _this.setState({
          feedbackVisible: true
        });
      } else {
        var shouldShowSlider = _this.pulsedPlaybackState !== null || calcNumberValueOfPlaybackRate(_this.playbackRate) !== 1;

        if (_this.showMiniFeedback && (!_this.state.miniFeedbackVisible || _this.state.mediaSliderVisible !== shouldShowSlider)) {
          _this.setState(function (_ref7) {
            var loading = _ref7.loading,
                duration = _ref7.duration,
                error = _ref7.error;
            return {
              mediaSliderVisible: shouldShowSlider && !_this.props.noMediaSliderFeedback,
              miniFeedbackVisible: !(loading || !duration || error)
            };
          });
        }
      }
    };

    _this.hideFeedback = function () {
      if (_this.state.feedbackVisible && _this.state.feedbackAction !== 'focus') {
        _this.setState({
          feedbackVisible: false,
          feedbackAction: 'idle'
        });
      }
    };

    _this.hideFeedbackJob = new _util.Job(_this.hideFeedback);

    _this.startDelayedMiniFeedbackHide = function () {
      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props.miniFeedbackHideDelay;

      if (delay) {
        _this.hideMiniFeedbackJob.startAfter(delay);
      }
    };

    _this.stopDelayedMiniFeedbackHide = function () {
      _this.hideMiniFeedbackJob.stop();
    };

    _this.hideMiniFeedback = function () {
      if (_this.state.miniFeedbackVisible) {
        _this.showMiniFeedback = false;

        _this.setState({
          mediaSliderVisible: false,
          miniFeedbackVisible: false
        });
      }
    };

    _this.hideMiniFeedbackJob = new _util.Job(_this.hideMiniFeedback);
    _this.handle = _handle.handle.bind(_assertThisInitialized(_this));

    _this.showControlsFromPointer = function () {
      _spotlight.Spotlight.setPointerMode(false);

      _this.showControls();
    };

    _this.clearPulsedPlayback = function () {
      _this.pulsedPlaybackRate = null;
      _this.pulsedPlaybackState = null;
    };

    _this.shouldShowMiniFeedback = function (ev) {
      if (ev.type === 'keyup') {
        _this.showMiniFeedback = true;
      }

      return true;
    };

    _this.handleLoadStart = function () {
      _this.firstPlayReadFlag = true;
      _this.prevCommand = _this.props.noAutoPlay ? 'pause' : 'play';
      _this.speedIndex = 0;

      _this.setState({
        announce: AnnounceState.READY,
        currentTime: 0,
        sourceUnavailable: true,
        proportionPlayed: 0,
        proportionLoaded: 0
      });

      if (!_this.props.noAutoShowMediaControls) {
        if (!_this.state.bottomControlsRendered) {
          _this.renderBottomControl.idle();
        } else {
          _this.showControls();
        }
      }
    };

    _this.handlePlay = _this.handle(forwardWillPlay, _this.shouldShowMiniFeedback, function () {
      return _this.play();
    }, forwardPlay);
    _this.handlePause = _this.handle(forwardWillPause, _this.shouldShowMiniFeedback, function () {
      return _this.pause();
    }, forwardPause);
    _this.handleRewind = _this.handle(forwardWillRewind, _this.shouldShowMiniFeedback, function () {
      return _this.rewind();
    }, forwardRewind);
    _this.handleFastForward = _this.handle(forwardWillFastForward, _this.shouldShowMiniFeedback, function () {
      return _this.fastForward();
    }, forwardFastForward);

    _this.handleJump = function (_ref8) {
      var keyCode = _ref8.keyCode;

      if (_this.props.seekDisabled) {
        (0, _handle.forwardCustom)('onSeekFailed')(null, _this.props);
      } else {
        var jumpBy = ((0, _keymap.is)('left', keyCode) ? -1 : 1) * _this.props.jumpBy;
        var time = Math.min(_this.state.duration, Math.max(0, _this.state.currentTime + jumpBy));
        if (_this.preventTimeChange(time)) return;
        _this.showMiniFeedback = true;

        _this.jump(jumpBy);

        _this.announceJob.startAfter(500, (0, _MediaPlayer.secondsToTime)(_this.video.currentTime, getDurFmt(_this.props.locale), {
          includeHour: true
        }));
      }
    };

    _this.handleGlobalKeyDown = _this.handle((0, _handle.returnsTrue)(_this.activityDetected), (0, _handle.forKey)('down'), function () {
      return !_this.state.mediaControlsVisible && !_spotlight.Spotlight.getCurrent() && _spotlight.Spotlight.getPointerMode() && !_this.props.spotlightDisabled;
    }, _handle.preventDefault, _handle.stopImmediate, _this.showControlsFromPointer);

    _this.handleControlsHandleAboveHold = function () {
      if (shouldJump(_this.props, _this.state)) {
        _this.handleJump({
          keyCode: _this.jumpButtonPressed === -1 ? jumpBackKeyCode : jumpForwardKeyCode
        });
      }
    };

    _this.handleControlsHandleAboveKeyDown = function (_ref9) {
      var keyCode = _ref9.keyCode;

      if (isEnter(keyCode)) {
        _this.jumpButtonPressed = 0;
      } else if (isLeft(keyCode)) {
        _this.jumpButtonPressed = -1;
      } else if (isRight(keyCode)) {
        _this.jumpButtonPressed = 1;
      }
    };

    _this.handleControlsHandleAboveKeyUp = function (_ref10) {
      var keyCode = _ref10.keyCode;

      if (isEnter(keyCode) || isLeft(keyCode) || isRight(keyCode)) {
        _this.jumpButtonPressed = null;
      }
    };

    _this.handleControlsHandleAboveDown = function () {
      if (_this.jumpButtonPressed === 0) {
        _this.showControls();
      } else if (_this.jumpButtonPressed === -1 || _this.jumpButtonPressed === 1) {
        var keyCode = _this.jumpButtonPressed === -1 ? jumpBackKeyCode : jumpForwardKeyCode;

        if (shouldJump(_this.props, _this.state)) {
          _this.handleJump({
            keyCode: keyCode
          });
        } else {
          _spotlight.Spotlight.move((0, _spotlight.getDirection)(keyCode));
        }
      }
    };

    _this.handleEvent = function () {
      var el = _this.video;
      var updatedState = {
        // Standard media properties
        currentTime: el.currentTime,
        duration: el.duration,
        paused: el.playbackRate !== 1 || el.paused,
        playbackRate: el.playbackRate,
        // Non-standard state computed from properties
        error: el.error,
        loading: el.loading,
        proportionLoaded: el.proportionLoaded,
        proportionPlayed: el.proportionPlayed || 0,
        sliderTooltipTime: el.currentTime,
        // note: `el.loading && this.state.sourceUnavailable == false` is equivalent to `oncanplaythrough`
        sourceUnavailable: el.loading && _this.state.sourceUnavailable || el.error
      }; // If there's an error, we're obviously not loading, no matter what the readyState is.

      if (updatedState.error) updatedState.loading = false;
      var isRewind = _this.prevCommand === 'rewind' || _this.prevCommand === 'slowRewind';
      var isForward = _this.prevCommand === 'fastForward' || _this.prevCommand === 'slowForward';

      if (_this.props.pauseAtEnd && (el.currentTime === 0 && isRewind || el.currentTime === el.duration && isForward)) {
        _this.pause();
      }

      _this.setState(updatedState);
    };

    _this.renderBottomControl = new _util.Job(function () {
      if (!_this.state.bottomControlsRendered) {
        _this.setState({
          bottomControlsRendered: true
        });
      }
    });

    _this.getMediaState = function () {
      return {
        currentTime: _this.video.currentTime,
        duration: _this.state.duration,
        paused: _this.video.playbackRate !== 1 || _this.video.paused,
        playbackRate: _this.video.playbackRate,
        proportionLoaded: _this.video.proportionLoaded,
        proportionPlayed: _this.video.proportionPlayed || 0
      };
    };

    _this.send = function (action, props) {
      _this.clearPulsedPlayback();

      _this.showFeedback();

      _this.startDelayedFeedbackHide();

      _this.video[action](props);
    };

    _this.play = function () {
      if (_this.state.sourceUnavailable) {
        return false;
      }

      _this.speedIndex = 0; // must happen before send() to ensure feedback uses the right value
      // TODO: refactor into this.state member

      _this.prevCommand = 'play';

      _this.setPlaybackRate(1);

      _this.send('play');

      _this.announce((0, _$L["default"])('Play'));

      _this.startDelayedMiniFeedbackHide(5000);

      return true;
    };

    _this.pause = function () {
      if (_this.state.sourceUnavailable) {
        return false;
      }

      _this.speedIndex = 0; // must happen before send() to ensure feedback uses the right value
      // TODO: refactor into this.state member

      _this.prevCommand = 'pause';

      _this.setPlaybackRate(1);

      _this.send('pause');

      _this.announce((0, _$L["default"])('Pause'));

      _this.stopDelayedMiniFeedbackHide();

      return true;
    };

    _this.seek = function (timeIndex) {
      if (!_this.props.seekDisabled && !isNaN(_this.video.duration) && !_this.state.sourceUnavailable) {
        _this.video.currentTime = timeIndex;
      } else {
        (0, _handle.forwardCustom)('onSeekFailed')(null, _this.props);
      }
    };

    _this.jump = function (distance) {
      if (_this.state.sourceUnavailable) {
        return false;
      }

      _this.pulsedPlaybackRate = (0, _util2.toUpperCase)(new _DurationFmt["default"]({
        length: 'long'
      }).format({
        second: _this.props.jumpBy
      }));
      _this.pulsedPlaybackState = distance > 0 ? 'jumpForward' : 'jumpBackward';

      _this.showFeedback();

      _this.startDelayedFeedbackHide();

      _this.seek(_this.state.currentTime + distance);

      _this.startDelayedMiniFeedbackHide();

      return true;
    };

    _this.fastForward = function () {
      if (_this.state.sourceUnavailable) {
        return false;
      }

      var shouldResumePlayback = false;

      switch (_this.prevCommand) {
        case 'slowForward':
          if (_this.speedIndex === _this.playbackRates.length - 1) {
            // reached to the end of array => fastforward
            _this.selectPlaybackRates('fastForward');

            _this.speedIndex = 0;
            _this.prevCommand = 'fastForward';
          } else {
            _this.speedIndex = _this.clampPlaybackRate(_this.speedIndex + 1);
          }

          break;

        case 'pause':
          _this.selectPlaybackRates('slowForward');

          if (_this.state.paused) {
            shouldResumePlayback = true;
          }

          _this.speedIndex = 0;
          _this.prevCommand = 'slowForward';
          break;

        case 'fastForward':
          _this.speedIndex = _this.clampPlaybackRate(_this.speedIndex + 1);
          _this.prevCommand = 'fastForward';
          break;

        default:
          _this.selectPlaybackRates('fastForward');

          _this.speedIndex = 0;
          _this.prevCommand = 'fastForward';

          if (_this.state.paused) {
            shouldResumePlayback = true;
          }

          break;
      }

      _this.setPlaybackRate(_this.selectPlaybackRate(_this.speedIndex));

      if (shouldResumePlayback) _this.send('play');

      _this.stopDelayedFeedbackHide();

      _this.stopDelayedMiniFeedbackHide();

      _this.clearPulsedPlayback();

      _this.showFeedback();

      return true;
    };

    _this.rewind = function () {
      if (_this.state.sourceUnavailable) {
        return false;
      }

      var rateForSlowRewind = _this.props.playbackRateHash['slowRewind'];
      var shouldResumePlayback = false,
          command = 'rewind';

      if (_this.video.currentTime === 0) {
        // Do not rewind if currentTime is 0. We're already at the beginning.
        return true;
      }

      switch (_this.prevCommand) {
        case 'slowRewind':
          if (_this.speedIndex === _this.playbackRates.length - 1) {
            // reached to the end of array => go to rewind
            _this.selectPlaybackRates(command);

            _this.speedIndex = 0;
            _this.prevCommand = command;
          } else {
            _this.speedIndex = _this.clampPlaybackRate(_this.speedIndex + 1);
          }

          break;

        case 'pause':
          // If it's possible to slowRewind, do it, otherwise just leave it as normal rewind : QEVENTSEVT-17386
          if (rateForSlowRewind && rateForSlowRewind.length >= 0) {
            command = 'slowRewind';
          }

          _this.selectPlaybackRates(command);

          if (_this.state.paused && _this.state.duration > _this.state.currentTime) {
            shouldResumePlayback = true;
          }

          _this.speedIndex = 0;
          _this.prevCommand = command;
          break;

        case 'rewind':
          _this.speedIndex = _this.clampPlaybackRate(_this.speedIndex + 1);
          _this.prevCommand = command;
          break;

        default:
          _this.selectPlaybackRates(command);

          _this.speedIndex = 0;
          _this.prevCommand = command;
          break;
      }

      _this.setPlaybackRate(_this.selectPlaybackRate(_this.speedIndex));

      if (shouldResumePlayback) _this.send('play');

      _this.stopDelayedFeedbackHide();

      _this.stopDelayedMiniFeedbackHide();

      _this.clearPulsedPlayback();

      _this.showFeedback();

      return true;
    };

    _this.videoProxy = typeof Proxy !== 'function' ? null : new Proxy({}, {
      get: function get(target, name) {
        var value = _this.video[name];

        if (typeof value === 'function') {
          value = value.bind(_this.video);
        }

        return value;
      },
      set: function set(target, name, value) {
        return _this.video[name] = value;
      }
    });

    _this.getVideoNode = function () {
      return _this.videoProxy || _this.video;
    };

    _this.areControlsVisible = function () {
      return _this.state.mediaControlsVisible;
    };

    _this.selectPlaybackRates = function (cmd) {
      _this.playbackRates = _this.props.playbackRateHash[cmd];
    };

    _this.clampPlaybackRate = function (idx) {
      if (!_this.playbackRates) {
        return;
      }

      return idx % _this.playbackRates.length;
    };

    _this.selectPlaybackRate = function (idx) {
      return _this.playbackRates[idx];
    };

    _this.setPlaybackRate = function (rate) {
      // Stop rewind (if happening)
      _this.stopRewindJob(); // Make sure rate is a string


      _this.playbackRate = String(rate);
      var pbNumber = calcNumberValueOfPlaybackRate(_this.playbackRate);

      if (!_platform.platform.webos) {
        // ReactDOM throws error for setting negative value for playbackRate
        _this.video.playbackRate = pbNumber < 0 ? 0 : pbNumber; // For supporting cross browser behavior

        if (pbNumber < 0) {
          _this.beginRewind();
        }
      } else {
        // Set native playback rate
        _this.video.playbackRate = pbNumber;
      }
    };

    _this.rewindManually = function () {
      var now = (0, _util.perfNow)(),
          distance = now - _this.rewindBeginTime,
          pbRate = calcNumberValueOfPlaybackRate(_this.playbackRate),
          adjustedDistance = distance * pbRate / 1000;

      _this.jump(adjustedDistance);

      _this.stopDelayedMiniFeedbackHide();

      _this.clearPulsedPlayback();

      _this.startRewindJob(); // Issue another rewind tick

    };

    _this.rewindJob = new _util.Job(_this.rewindManually, 100);

    _this.startRewindJob = function () {
      _this.rewindBeginTime = (0, _util.perfNow)();

      _this.rewindJob.start();
    };

    _this.stopRewindJob = function () {
      _this.rewindJob.stop();
    };

    _this.beginRewind = function () {
      _this.send('pause');

      _this.startRewindJob();
    };

    _this.addStateToEvent = function (ev) {
      return _objectSpread({
        // More props from `ev` may be added here as needed, but a full copy via `...ev`
        // overloads Storybook's Action Logger and likely has other perf fallout.
        type: ev.type
      }, _this.getMediaState());
    };

    _this.onVideoClick = function () {
      _this.toggleControls();
    };

    _this.onSliderChange = function (_ref11) {
      var value = _ref11.value;
      var time = value * _this.state.duration;
      if (_this.preventTimeChange(time)) return;

      _this.seek(time);

      _this.sliderScrubbing = false;
    };

    _this.handleBack = _this.handle((0, _handle.forwardCustom)('onBack'));

    _this.handleKnobMove = function (ev) {
      _this.sliderScrubbing = true; // prevent announcing repeatedly when the knob is detached from the progress.
      // TODO: fix Slider to not send onKnobMove when the knob hasn't, in fact, moved

      if (_this.sliderKnobProportion !== ev.proportion) {
        _this.sliderKnobProportion = ev.proportion;
        var seconds = Math.floor(_this.sliderKnobProportion * _this.video.duration);

        if (!isNaN(seconds)) {
          var knobTime = (0, _MediaPlayer.secondsToTime)(seconds, getDurFmt(_this.props.locale), {
            includeHour: true
          });
          (0, _handle.forward)('onScrub', _objectSpread(_objectSpread({}, ev), {}, {
            seconds: seconds,
            type: 'onScrub'
          }), _this.props);

          _this.announce("".concat((0, _$L["default"])('jump to'), " ").concat(knobTime), true);
        }
      }
    };

    _this.handleSliderFocus = function () {
      var seconds = Math.floor(_this.sliderKnobProportion * _this.video.duration);
      _this.sliderScrubbing = true;

      _this.setState({
        feedbackAction: 'focus',
        feedbackVisible: true
      });

      _this.stopDelayedFeedbackHide();

      if (!isNaN(seconds)) {
        var knobTime = (0, _MediaPlayer.secondsToTime)(seconds, getDurFmt(_this.props.locale), {
          includeHour: true
        });
        (0, _handle.forward)('onScrub', {
          detached: _this.sliderScrubbing,
          proportion: _this.sliderKnobProportion,
          seconds: seconds,
          type: 'onScrub'
        }, _this.props);

        _this.announce("".concat((0, _$L["default"])('jump to'), " ").concat(knobTime), true);
      }
    };

    _this.handleSliderBlur = function () {
      _this.sliderScrubbing = false;

      _this.startDelayedFeedbackHide();

      _this.setState(function () {
        return {
          feedbackAction: 'blur',
          feedbackVisible: true
        };
      });
    };

    _this.slider5WayPressJob = new _util.Job(function () {
      _this.setState({
        slider5WayPressed: false
      });
    }, 200);

    _this.handleSliderKeyDown = function (ev) {
      var keyCode = ev.keyCode;

      if ((0, _keymap.is)('enter', keyCode)) {
        _this.setState({
          slider5WayPressed: true
        }, _this.slider5WayPressJob.start());
      } else if ((0, _keymap.is)('down', keyCode)) {
        _spotlight.Spotlight.setPointerMode(false);

        if (_spotlight.Spotlight.focus(_this.mediaControlsSpotlightId)) {
          (0, _handle.preventDefault)(ev);
          (0, _handle.stopImmediate)(ev);
        }
      } else if ((0, _keymap.is)('up', keyCode)) {
        _spotlight.Spotlight.setPointerMode(false);
      }
    };

    _this.onJumpBackward = _this.handle(forwardWillJumpBackward, function () {
      return _this.jump(-1 * _this.props.jumpBy);
    }, forwardJumpBackward);
    _this.onJumpForward = _this.handle(forwardWillJumpForward, function () {
      return _this.jump(_this.props.jumpBy);
    }, forwardJumpForward);

    _this.handleToggleMore = function (ev) {
      var showMoreComponents = ev.showMoreComponents,
          liftDistance = ev.liftDistance;
      forwardToggleMore(ev, _this.props);

      if (!showMoreComponents) {
        _this.startAutoCloseTimeout(); // Restore the timer since we are leaving "more.
        // Restore the title-hide now that we're finished with "more".


        _this.startDelayedTitleHide();
      } else {
        // Interrupt the title-hide since we don't want it hiding autonomously in "more".
        _this.stopDelayedTitleHide();
      }

      _this.playerRef.current.style.setProperty('--liftDistance', "".concat(liftDistance, "px"));

      _this.setState(function (_ref12) {
        var announce = _ref12.announce;
        return {
          infoVisible: showMoreComponents,
          titleVisible: true,
          announce: announce < AnnounceState.INFO ? AnnounceState.INFO : AnnounceState.DONE
        };
      });
    };

    _this.handleMediaControlsClose = function (ev) {
      _this.hideControls();

      ev.stopPropagation();
    };

    _this.setVideoRef = function (video) {
      _this.video = video;
    };

    _this.setTitleRef = function (node) {
      _this.titleRef = node;
    };

    _this.setAnnounceRef = function (node) {
      _this.announceRef = node;
    };

    _this.video = null;
    _this.pulsedPlaybackRate = null;
    _this.pulsedPlaybackState = null;
    _this.prevCommand = _props.noAutoPlay ? 'pause' : 'play';
    _this.showMiniFeedback = false;
    _this.speedIndex = 0;
    _this.id = _this.generateId();

    _this.selectPlaybackRates('fastForward');

    _this.sliderKnobProportion = 0;
    _this.mediaControlsSpotlightId = _props.spotlightId + '_mediaControls';
    _this.jumpButtonPressed = null;
    _this.playerRef = /*#__PURE__*/(0, _react.createRef)(); // Re-render-necessary State

    _this.state = {
      announce: AnnounceState.READY,
      currentTime: 0,
      duration: 0,
      error: false,
      loading: false,
      paused: _props.noAutoPlay,
      playbackRate: 1,
      titleOffsetHeight: 0,
      bottomOffsetHeight: 0,
      // Non-standard state computed from properties
      bottomControlsRendered: false,
      feedbackAction: 'idle',
      feedbackVisible: false,
      infoVisible: false,
      mediaControlsVisible: false,
      mediaSliderVisible: false,
      miniFeedbackVisible: false,
      proportionLoaded: 0,
      proportionPlayed: 0,
      sourceUnavailable: true,
      titleVisible: true
    };

    if (_props.setApiProvider) {
      _props.setApiProvider(_assertThisInitialized(_this));
    }

    return _this;
  }

  _createClass(VideoPlayerBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      (0, _dispatcher.on)('mousemove', this.activityDetected);

      if (_platform.platform.touch) {
        (0, _dispatcher.on)('touchmove', this.activityDetected);
      }

      document.addEventListener('keydown', this.handleGlobalKeyDown, {
        capture: true
      });
      document.addEventListener('wheel', this.activityDetected, {
        capture: true
      });
      this.startDelayedFeedbackHide();

      if (this.context && typeof this.context === 'function') {
        this.floatingLayerController = this.context(function () {});
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      if ( // Use shallow props compare instead of source comparison to support possible changes
      // from mediaComponent.
      (0, _util.shallowEqual)(this.props, nextProps) && !this.state.miniFeedbackVisible && this.state.miniFeedbackVisible === nextState.miniFeedbackVisible && !this.state.mediaSliderVisible && this.state.mediaSliderVisible === nextState.mediaSliderVisible && this.state.loading === nextState.loading && this.props.loading === nextProps.loading && (this.state.currentTime !== nextState.currentTime || this.state.proportionPlayed !== nextState.proportionPlayed || this.state.sliderTooltipTime !== nextState.sliderTooltipTime)) {
        return false;
      }

      return true;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.titleRef && this.state.infoVisible && (!prevState.infoVisible || !(0, _equals["default"])(this.props.infoComponents, prevProps.infoComponents))) {
        var node = this.titleRef;
        node.style.setProperty('--infoComponentsOffset', "".concat(node.offsetHeight, "px"));
      }

      if (!this.state.mediaControlsVisible && prevState.mediaControlsVisible !== this.state.mediaControlsVisible || !this.state.mediaSliderVisible && prevState.mediaSliderVisible !== this.state.mediaSliderVisible) {
        this.floatingLayerController.notify({
          action: 'closeAll'
        });
      }

      if (this.props.spotlightId !== prevProps.spotlightId) {
        this.mediaControlsSpotlightId = this.props.spotlightId + '_mediaControls';
      }

      if (!this.state.mediaControlsVisible && prevState.mediaControlsVisible) {
        forwardControlsAvailable({
          available: false
        }, this.props);
        this.stopAutoCloseTimeout();

        if (!this.props.spotlightDisabled) {
          // If last focused item were in the media controls or slider, we need to explicitly
          // blur the element when MediaControls hide. See ENYO-5648
          var current = _spotlight.Spotlight.getCurrent();

          var bottomControls = document.querySelector(".".concat(_VideoPlayerModule["default"].bottom));

          if (current && bottomControls && bottomControls.contains(current)) {
            current.blur();
          } // when in pointer mode, the focus call below will only update the last focused for
          // the video player and not set the active container to the video player which will
          // cause focus to land back on the media controls button when spotlight restores
          // focus.


          if (_spotlight.Spotlight.getPointerMode()) {
            _spotlight.Spotlight.setActiveContainer(this.props.spotlightId);
          } // Set focus to the hidden spottable control - maintaining focus on available spottable
          // controls, which prevents an additional 5-way attempt in order to re-show media controls


          _spotlight.Spotlight.focus(".".concat(_VideoPlayerModule["default"].controlsHandleAbove));
        }
      } else if (this.state.mediaControlsVisible && !prevState.mediaControlsVisible) {
        forwardControlsAvailable({
          available: true
        }, this.props);
        this.startAutoCloseTimeout();

        if (!this.props.spotlightDisabled) {
          var _current = _spotlight.Spotlight.getCurrent();

          if (!_current || this.playerRef.current.contains(_current)) {
            // Set focus within media controls when they become visible.
            if (_spotlight.Spotlight.focus(this.mediaControlsSpotlightId) && this.jumpButtonPressed === 0) {
              this.jumpButtonPressed = null;
            }
          }
        }
      } // Once video starts loading it queues bottom control render until idle


      if (this.state.bottomControlsRendered && !prevState.bottomControlsRendered && !this.state.mediaControlsVisible) {
        this.showControls();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      (0, _dispatcher.off)('mousemove', this.activityDetected);

      if (_platform.platform.touch) {
        (0, _dispatcher.off)('touchmove', this.activityDetected);
      }

      document.removeEventListener('keydown', this.handleGlobalKeyDown, {
        capture: true
      });
      document.removeEventListener('wheel', this.activityDetected, {
        capture: true
      });
      this.stopRewindJob();
      this.stopAutoCloseTimeout();
      this.stopDelayedTitleHide();
      this.stopDelayedFeedbackHide();
      this.stopDelayedMiniFeedbackHide();
      this.announceJob.stop();
      this.renderBottomControl.stop();
      this.slider5WayPressJob.stop();

      if (this.floatingLayerController) {
        this.floatingLayerController.unregister();
      }
    } //
    // Internal Methods
    //

  }, {
    key: "isTimeBeyondSelection",
    value: function isTimeBeyondSelection(time) {
      var selection = this.props.selection; // if selection isn't set or only contains the starting value, there isn't a valid selection
      // with which to test the time

      if (selection != null && selection.length >= 2) {
        var _selection = _slicedToArray(selection, 2),
            start = _selection[0],
            end = _selection[1];

        return time > end || time < start;
      }

      return false;
    }
  }, {
    key: "preventTimeChange",
    value: function preventTimeChange(time) {
      return this.isTimeBeyondSelection(time) && !(0, _handle.forwardWithPrevent)('onSeekOutsideSelection', {
        type: 'onSeekOutsideSelection',
        time: time
      }, this.props);
    }
    /**
     * If the announce state is either ready to read the title or ready to read info, advance the
     * state to "read".
     *
     * @returns {Boolean} Returns true to be used in event handlers
     * @private
     */

  }, {
    key: "getControlsAriaProps",
    value: function getControlsAriaProps() {
      if (this.state.announce === AnnounceState.TITLE) {
        return {
          'aria-labelledby': "".concat(this.id, "_mediaTitle_title ").concat(this.id, "_mediaControls_actionGuide"),
          'aria-live': 'off',
          role: 'alert'
        };
      } else if (this.state.announce === AnnounceState.INFO) {
        return {
          'aria-labelledby': "".concat(this.id, "_mediaTitle_info"),
          role: 'region'
        };
      }

      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          backButtonAriaLabel = _this$props.backButtonAriaLabel,
          className = _this$props.className,
          disabled = _this$props.disabled,
          infoComponents = _this$props.infoComponents,
          initialJumpDelay = _this$props.initialJumpDelay,
          jumpDelay = _this$props.jumpDelay,
          loading = _this$props.loading,
          locale = _this$props.locale,
          mediaControlsComponent = _this$props.mediaControlsComponent,
          no5WayJump = _this$props.no5WayJump,
          noAutoPlay = _this$props.noAutoPlay,
          noMiniFeedback = _this$props.noMiniFeedback,
          noSlider = _this$props.noSlider,
          noSpinner = _this$props.noSpinner,
          selection = _this$props.selection,
          spotlightDisabled = _this$props.spotlightDisabled,
          spotlightId = _this$props.spotlightId,
          style = _this$props.style,
          thumbnailComponent = _this$props.thumbnailComponent,
          thumbnailSrc = _this$props.thumbnailSrc,
          title = _this$props.title,
          VideoComponent = _this$props.videoComponent,
          mediaProps = _objectWithoutProperties(_this$props, _excluded2);

      delete mediaProps.announce;
      delete mediaProps.autoCloseTimeout;
      delete mediaProps.children;
      delete mediaProps.feedbackHideDelay;
      delete mediaProps.jumpBy;
      delete mediaProps.miniFeedbackHideDelay;
      delete mediaProps.noAutoShowMediaControls;
      delete mediaProps.noMediaSliderFeedback;
      delete mediaProps.onBack;
      delete mediaProps.onControlsAvailable;
      delete mediaProps.onFastForward;
      delete mediaProps.onJumpBackward;
      delete mediaProps.onJumpForward;
      delete mediaProps.onPause;
      delete mediaProps.onPlay;
      delete mediaProps.onRewind;
      delete mediaProps.onWillFastForward;
      delete mediaProps.onWillJumpBackward;
      delete mediaProps.onWillJumpForward;
      delete mediaProps.onWillPause;
      delete mediaProps.onWillPlay;
      delete mediaProps.onWillRewind;
      delete mediaProps.onScrub;
      delete mediaProps.onSeekFailed;
      delete mediaProps.onSeekOutsideSelection;
      delete mediaProps.onToggleMore;
      delete mediaProps.pauseAtEnd;
      delete mediaProps.playbackRateHash;
      delete mediaProps.seekDisabled;
      delete mediaProps.setApiProvider;
      delete mediaProps.thumbnailUnavailable;
      delete mediaProps.titleHideDelay;
      delete mediaProps.videoPath;
      mediaProps.autoPlay = !noAutoPlay;
      mediaProps.className = _VideoPlayerModule["default"].video;
      mediaProps.controls = false;
      mediaProps.mediaComponent = 'video';
      mediaProps.onLoadStart = this.handleLoadStart;
      mediaProps.onUpdate = this.handleEvent;
      mediaProps.ref = this.setVideoRef;
      var controlsAriaProps = this.getControlsAriaProps();
      var proportionSelection = selection;

      if (proportionSelection != null && this.state.duration) {
        proportionSelection = selection.map(function (t) {
          return t / _this2.state.duration;
        });
      }

      var durFmt = getDurFmt(locale);
      var controlsHandleAboveHoldConfig = getControlsHandleAboveHoldConfig({
        frequency: jumpDelay,
        time: initialJumpDelay
      });
      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(RootContainer, {
        className: _VideoPlayerModule["default"].videoPlayer + ' enact-fit' + (className ? ' ' + className : ''),
        onClick: this.activityDetected,
        ref: this.playerRef,
        spotlightDisabled: spotlightDisabled,
        spotlightId: spotlightId,
        style: style,
        children: [// Duplicating logic from <ComponentOverride /> until enzyme supports forwardRef
        VideoComponent && ((typeof VideoComponent === 'function' || typeof VideoComponent === 'string') && /*#__PURE__*/(0, _jsxRuntime.jsx)(VideoComponent, _objectSpread({}, mediaProps)) || /*#__PURE__*/(0, _react.isValidElement)(VideoComponent) && /*#__PURE__*/(0, _react.cloneElement)(VideoComponent, mediaProps)) || null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_Overlay["default"], {
          bottomControlsVisible: this.state.mediaControlsVisible,
          onClick: this.onVideoClick,
          children: !noSpinner && (this.state.loading || loading) ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Spinner["default"], {
            centered: true
          }) : null
        }), this.state.bottomControlsRendered ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({
          className: _VideoPlayerModule["default"].fullscreen
        }, controlsAriaProps), {}, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_FeedbackContent["default"], {
            className: _VideoPlayerModule["default"].miniFeedback,
            playbackRate: this.pulsedPlaybackRate || this.selectPlaybackRate(this.speedIndex),
            playbackState: this.pulsedPlaybackState || this.prevCommand,
            visible: this.state.miniFeedbackVisible && !noMiniFeedback,
            children: (0, _MediaPlayer.secondsToTime)(this.state.sliderTooltipTime, durFmt)
          }), this.state.mediaControlsVisible ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
            "aria-label": backButtonAriaLabel == null ? (0, _$L["default"])('go to previous') : backButtonAriaLabel,
            className: _VideoPlayerModule["default"].back,
            icon: "arrowhookleft",
            iconFlip: "auto",
            onClick: this.handleBack,
            size: "small"
          }) : null, /*#__PURE__*/(0, _jsxRuntime.jsxs)(ControlsContainer, {
            className: _VideoPlayerModule["default"].bottom + (this.state.mediaControlsVisible ? '' : ' ' + _VideoPlayerModule["default"].hidden) + (this.state.infoVisible ? ' ' + _VideoPlayerModule["default"].lift : ''),
            spotlightDisabled: spotlightDisabled || !this.state.mediaControlsVisible,
            children: [this.state.mediaSliderVisible ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: _VideoPlayerModule["default"].infoFrame,
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_MediaTitle["default"], {
                id: "".concat(this.id, "_mediaTitle"),
                infoVisible: this.state.infoVisible,
                ref: this.setTitleRef,
                title: title,
                visible: this.state.titleVisible && this.state.mediaControlsVisible,
                children: infoComponents
              }), noSlider ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_MediaPlayer.Times, {
                current: this.state.currentTime,
                total: this.state.duration,
                formatter: durFmt
              }) : null]
            }) : null, noSlider ? null : /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: _VideoPlayerModule["default"].sliderContainer,
              children: [this.state.mediaSliderVisible ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_MediaPlayer.Times, {
                noTotalTime: true,
                current: this.state.currentTime,
                formatter: durFmt
              }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_MediaPlayer.MediaSlider, {
                backgroundProgress: this.state.proportionLoaded,
                disabled: disabled || this.state.sourceUnavailable,
                forcePressed: this.state.slider5WayPressed,
                onBlur: this.handleSliderBlur,
                onChange: this.onSliderChange,
                onFocus: this.handleSliderFocus,
                onKeyDown: this.handleSliderKeyDown,
                onKnobMove: this.handleKnobMove,
                selection: proportionSelection,
                spotlightDisabled: spotlightDisabled || !this.state.mediaControlsVisible,
                value: this.state.proportionPlayed,
                visible: this.state.mediaSliderVisible,
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_FeedbackTooltip["default"], {
                  action: this.state.feedbackAction,
                  duration: this.state.duration,
                  formatter: durFmt,
                  hidden: !this.state.feedbackVisible || this.state.sourceUnavailable,
                  playbackRate: this.selectPlaybackRate(this.speedIndex),
                  playbackState: this.prevCommand,
                  thumbnailComponent: thumbnailComponent,
                  thumbnailDeactivated: this.props.thumbnailUnavailable,
                  thumbnailSrc: thumbnailSrc
                })
              }), this.state.mediaSliderVisible ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_MediaPlayer.Times, {
                noCurrentTime: true,
                total: this.state.duration,
                formatter: durFmt
              }) : null]
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComponentOverride["default"], {
              component: mediaControlsComponent,
              id: "".concat(this.id, "_mediaControls"),
              initialJumpDelay: initialJumpDelay,
              jumpDelay: jumpDelay,
              mediaDisabled: disabled || this.state.sourceUnavailable,
              no5WayJump: no5WayJump,
              onClose: this.handleMediaControlsClose,
              onFastForward: this.handleFastForward,
              onJump: this.handleJump,
              onJumpBackwardButtonClick: this.onJumpBackward,
              onJumpForwardButtonClick: this.onJumpForward,
              onPause: this.handlePause,
              onPlay: this.handlePlay,
              onRewind: this.handleRewind,
              onToggleMore: this.handleToggleMore,
              paused: this.state.paused,
              spotlightId: this.mediaControlsSpotlightId,
              spotlightDisabled: !this.state.mediaControlsVisible || spotlightDisabled,
              visible: this.state.mediaControlsVisible
            })]
          })]
        })) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableDiv // This captures spotlight focus for use with 5-way.
        // It's non-visible but lives at the top of the VideoPlayer.
        , {
          className: _VideoPlayerModule["default"].controlsHandleAbove,
          holdConfig: controlsHandleAboveHoldConfig,
          onDown: this.handleControlsHandleAboveDown,
          onHold: this.handleControlsHandleAboveHold,
          onKeyDown: this.handleControlsHandleAboveKeyDown,
          onKeyUp: this.handleControlsHandleAboveKeyUp,
          onSpotlightDown: this.showControls,
          selectionKeys: controlsHandleAboveSelectionKeys,
          spotlightDisabled: this.state.mediaControlsVisible || spotlightDisabled
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Announce["default"], {
          ref: this.setAnnounceRef
        })]
      });
    }
  }]);

  return VideoPlayerBase;
}(_react.Component), _class.displayName = 'VideoPlayerBase', _class.propTypes =
/** @lends sandstone/VideoPlayer.VideoPlayerBase.prototype */
{
  /**
   * passed by AnnounceDecorator for accessibility
   *
   * @type {Function}
   * @private
   */
  announce: _propTypes2["default"].func,

  /**
   * The time (in milliseconds) before the control buttons will hide.
   *
   * Setting this to 0 or `null` disables closing, requiring user input to open and close.
   *
   * @type {Number}
   * @default 5000
   * @public
   */
  autoCloseTimeout: _propTypes2["default"].number,

  /**
   * Sets the hint string read when focusing the back button.
   *
   * @type {String}
   * @default 'go to previous'
   * @public
   */
  backButtonAriaLabel: _propTypes2["default"].string,

  /**
   * Removes interactive capability from this component. This includes, but is not limited to,
   * key-press events, most clickable buttons, and prevents the showing of the controls.
   *
   * @type {Boolean}
   * @public
   */
  disabled: _propTypes2["default"].bool,

  /**
   * Amount of time (in milliseconds) after which the feedback text/icon part of the slider's
   * tooltip will automatically hidden after the last action.
   * Setting this to 0 or `null` disables feedbackHideDelay; feedback will always be present.
   *
   * @type {Number}
   * @default 3000
   * @public
   */
  feedbackHideDelay: _propTypes2["default"].number,

  /**
   * Components placed below the title.
   *
   * Typically these will be media descriptor icons, like how many audio channels, what codec
   * the video uses, but can also be a description for the video or anything else that seems
   * appropriate to provide information about the video to the user.
   *
   * @type {Node}
   * @public
   */
  infoComponents: _propTypes2["default"].node,

  /**
   * The number of milliseconds that the player will pause before firing the
   * first jump event on a right or left pulse.
   *
   * @type {Number}
   * @default 400
   * @public
   */
  initialJumpDelay: _propTypes2["default"].number,

  /**
   * The number of seconds the player should skip forward or backward when a "jump" button is
   * pressed.
   *
   * @type {Number}
   * @default 30
   * @public
   */
  jumpBy: _propTypes2["default"].number,

  /**
   * The number of milliseconds that the player will throttle before firing a
   * jump event on a right or left pulse.
   *
   * @type {Number}
   * @default 200
   * @public
   */
  jumpDelay: _propTypes2["default"].number,

  /**
   * Manually set the loading state of the media, in case you have information that
   * `VideoPlayer` does not have.
   *
   * @type {Boolean}
   * @public
   */
  loading: _propTypes2["default"].bool,

  /**
   * The current locale as a
   * {@link https://tools.ietf.org/html/rfc5646|BCP 47 language tag}.
   *
   * @type {String}
   * @public
   */
  locale: _propTypes2["default"].string,

  /**
   * Overrides the default media control component to support customized behaviors.
   *
   * The provided component will receive the following props from `VideoPlayer`:
   *
   * * `initialJumpDelay` - Time (in ms) to wait before starting a jump
   * * `jumpDelay` -  - Time (in ms) to wait between jumps
   * * `mediaDisabled` - `true` when the media controls are not interactive
   * * `no5WayJump` - `true` when 5-way jumping is disabled
   * * `onClose` - Called when cancel key is pressed when the media controls are visible
   * * `onFastForward` - Called when the media is fast forwarded via a key event
   * * `onJump` - Called when the media jumps either forward or backward
   * * `onJumpBackwardButtonClick` - Called when the jump backward button is pressed
   * * `onJumpForwardButtonClick` - Called when the jump forward button is pressed
   * * `onKeyDown` - Called when a key is pressed
   * * `onPause` - Called when the media is paused via a key event
   * * `onPlay` - Called when the media is played via a key event
   * * `onRewind` - Called when the media is rewound via a key event
   * * `onToggleMore` - Called when the more components are hidden or shown
   * * `paused` - `true` when the media is paused
   * * `spotlightId` - The spotlight container Id for the media controls
   * * `spotlightDisabled` - `true` when spotlight is disabled for the media controls
   * * `visible` - `true` when the media controls should be displayed
   *
   * @type {Component|Element}
   * @default sandstone/MediaPlayer.MediaControls
   * @public
   */
  mediaControlsComponent: _propTypes["default"].componentOverride,

  /**
   * Amount of time (in milliseconds), after the last user action, that the `miniFeedback`
   * will automatically hide.
   * Setting this to 0 or `null` disables `miniFeedbackHideDelay`; `miniFeedback` will always
   * be present.
   *
   * @type {Number}
   * @default 2000
   * @public
   */
  miniFeedbackHideDelay: _propTypes2["default"].number,

  /**
   * Disable audio for this video.
   *
   * In a TV context, this is handled by the remote control, not programmatically in the
   * VideoPlayer API.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  muted: _propTypes2["default"].bool,

  /**
   * Prevents the default behavior of using left and right keys for seeking.
   *
   * @type {Boolean}
   * @public
   */
  no5WayJump: _propTypes2["default"].bool,

  /**
   * Prevents the default behavior of playing a video immediately after it's loaded.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  noAutoPlay: _propTypes2["default"].bool,

  /**
   * Prevents the default behavior of showing media controls immediately after it's loaded.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  noAutoShowMediaControls: _propTypes2["default"].bool,

  /**
   * Hides media slider feedback when fast forward or rewind while media controls are hidden.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  noMediaSliderFeedback: _propTypes2["default"].bool,

  /**
   * Removes the mini feedback.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  noMiniFeedback: _propTypes2["default"].bool,

  /**
   * Removes the media slider.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  noSlider: _propTypes2["default"].bool,

  /**
   * Removes spinner while loading.
   *
   * @type {Boolean}
   * @public
   */
  noSpinner: _propTypes2["default"].bool,

  /**
   * Called when the back button is clicked.
   *
   * @type {Function}
   * @public
   */
  onBack: _propTypes2["default"].func,

  /**
   * Called when the player's controls change availability, whether they are shown
   * or hidden.
   *
   * The current status is sent as the first argument in an object with a key `available`
   * which will be either `true` or `false`. (e.g.: `onControlsAvailable({available: true})`)
   *
   * @type {Function}
   * @public
   */
  onControlsAvailable: _propTypes2["default"].func,

  /**
   * Called when the video has been fast forwarded.
   *
   * @type {Function}
   * @public
   */
  onFastForward: _propTypes2["default"].func,

  /**
   * Called when the user clicks the JumpBackward button.
   *
   * Is passed a {@link sandstone/VideoPlayer.videoStatus} as the first argument.
   *
   * @type {Function}
   * @public
   */
  onJumpBackward: _propTypes2["default"].func,

  /**
   * Called when the user clicks the JumpForward button.
   *
   * Is passed a {@link sandstone/VideoPlayer.videoStatus} as the first argument.
   *
   * @type {Function}
   * @public
   */
  onJumpForward: _propTypes2["default"].func,

  /**
   * Called when the video has been paused.
   *
   * @type {Function}
   * @public
   */
  onPause: _propTypes2["default"].func,

  /**
   * Called when the video has been played.
   *
   * @type {Function}
   * @public
   */
  onPlay: _propTypes2["default"].func,

  /**
   * Called when the video has been rewound.
   *
   * @type {Function}
   * @public
   */
  onRewind: _propTypes2["default"].func,

  /**
   * Called when the user is moving the VideoPlayer's Slider knob independently of
   * the current playback position.
   *
   * It is passed an object with a `seconds` key (float value) to indicate the current time
   * index. It can be used to update the `thumbnailSrc` to the reflect the current scrub
   * position.
   *
   * @type {Function}
   * @public
   */
  onScrub: _propTypes2["default"].func,

  /**
   * Called when seek is attempted while `seekDisabled` is true.
   *
   * @type {Function}
   */
  onSeekFailed: _propTypes2["default"].func,

  /**
   * Called when seeking outside of the current `selection` range.
   *
   * By default, the seek will still be performed. Calling `preventDefault()` on the event
   * will prevent the seek operation.
   *
   * @type {Function}
   * @public
   */
  onSeekOutsideSelection: _propTypes2["default"].func,

  /**
   * Called when the visibility of more components is changed
   *
   * Event payload includes:
   *
   * * `type` - Type of event, `'onToggleMore'`
   * * `showMoreComponents` - `true` when the components are visible`
   * * `liftDistance` - The distance, in pixels, the component animates
   *`
   * @type {Function}
   * @public
   */
  onToggleMore: _propTypes2["default"].func,

  /**
   * Called once before the video is forwarded.
   *
   * @type {Function}
   * @public
   */
  onWillFastForward: _propTypes2["default"].func,

  /**
    * Called once before the video is jump backwarded.
    *
    * Is passed a {@link sandstone/VideoPlayer.videoStatus} as the first argument.
    *
    * @type {Function}
    * @public
    */
  onWillJumpBackward: _propTypes2["default"].func,

  /**
    * Called once before the video is jump forwarded.
    *
    * Is passed a {@link sandstone/VideoPlayer.videoStatus} as the first argument.
    *
    * @type {Function}
    * @public
    */
  onWillJumpForward: _propTypes2["default"].func,

  /**
    * Called once before the video is paused.
    *
    * @type {Function}
    * @public
    */
  onWillPause: _propTypes2["default"].func,

  /**
    * Called once before the video is played
    *
    * @type {Function}
    * @public
    */
  onWillPlay: _propTypes2["default"].func,

  /**
    * Called once before the video is rewound.
    *
    * @type {Function}
    * @public
    */
  onWillRewind: _propTypes2["default"].func,

  /**
   * Pauses the video when it reaches either the start or the end of the video during rewind,
   * slow rewind, fast forward, or slow forward.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  pauseAtEnd: _propTypes2["default"].bool,

  /**
   * Mapping of playback rate names to playback rate values that may be set.
   *
   * @type {sandstone/VideoPlayer.playbackRateHash}
   * @default {
   *	fastForward: ['2', '4', '8', '16'],
   *	rewind: ['-2', '-4', '-8', '-16'],
   *	slowForward: ['1/4', '1/2'],
   *	slowRewind: ['-1/2', '-1']
   * }
   * @public
   */
  playbackRateHash: _propTypes2["default"].shape({
    fastForward: _propTypes2["default"].arrayOf(_propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number])),
    rewind: _propTypes2["default"].arrayOf(_propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number])),
    slowForward: _propTypes2["default"].arrayOf(_propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number])),
    slowRewind: _propTypes2["default"].arrayOf(_propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]))
  }),

  /**
   * Disables seek function.
   *
   * Note that jump by arrow keys will also be disabled when `true`.
   *
   * @type {Boolean}
   * @public
   */
  seekDisabled: _propTypes2["default"].bool,

  /**
   * A range of the video to display as selected.
   *
   * The value of `selection` may either be:
   * * `null` or `undefined` for no selection,
   * * a single-element array with the start time of the selection
   * * a two-element array containing both the start and end time of the selection in seconds
   *
   * When the start time is specified, the media slider will show filled starting at that
   * time to the current time.
   *
   * When the end time is specified, the slider's background will be filled between the two
   * times.
   *
   * @type {Number[]}
   * @public
   */
  selection: _propTypes2["default"].arrayOf(_propTypes2["default"].number),

  /**
   * Registers the VideoPlayer component with an
   * {@link core/internal/ApiDecorator.ApiDecorator}.
   *
   * @type {Function}
   * @private
   */
  setApiProvider: _propTypes2["default"].func,

  /**
   * The video source.
   *
   * Any children `<source>` tag elements of [VideoPlayer]{@link sandstone/VideoPlayer} will
   * be sent directly to the `videoComponent` as video sources.
   *
   * @type {Node}
   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source
   * @public
   */
  source: _propTypes2["default"].node,

  /**
   * Disables spotlight navigation into the component.
   *
   * @type {Boolean}
   * @public
   */
  spotlightDisabled: _propTypes2["default"].bool,

  /**
   * The spotlight container ID for the player.
   *
   * @type {String}
   * @public
   * @default 'videoPlayer'
   */
  spotlightId: _propTypes2["default"].string,

  /**
   * The thumbnail component to be used instead of the built-in version.
   *
   * The internal thumbnail style will not be applied to this component. This component
   * follows the same rules as the built-in version.
   *
   * @type {String|Component|Element}
   * @public
   */
  thumbnailComponent: _propTypes["default"].renderableOverride,

  /**
   * Thumbnail image source to show on the slider knob.
   *
   * This is a standard {@link sandstone/Image} component so it supports all of the same
   * options for the `src` property. If no `thumbnailComponent` and no `thumbnailSrc` is set,
   * no tooltip will display.
   *
   * @type {String|Object}
   * @public
   */
  thumbnailSrc: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),

  /**
  * Enables the thumbnail transition from opaque to translucent.
  *
  * @type {Boolean}
  * @public
  */
  thumbnailUnavailable: _propTypes2["default"].bool,

  /**
   * Title for the video being played.
   *
   * @type {String|Node}
   * @public
   */
  title: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].node]),

  /**
   * The time (in milliseconds) before the title disappears from the controls.
   *
   * Setting this to `0` disables hiding.
   *
   * @type {Number}
   * @default 5000
   * @public
   */
  titleHideDelay: _propTypes2["default"].number,

  /**
   * Video component to use.
   *
   * The default renders an `HTMLVideoElement`. Custom video components must have a similar
   * API structure, exposing the following APIs:
   *
   * Properties:
   * * `currentTime` {Number} - Playback index of the media in seconds
   * * `duration` {Number} - Media's entire duration in seconds
   * * `error` {Boolean} - `true` if video playback has errored.
   * * `loading` {Boolean} - `true` if video playback is loading.
   * * `paused` {Boolean} - Playing vs paused state. `true` means the media is paused
   * * `playbackRate` {Number} - Current playback rate, as a number
   * * `proportionLoaded` {Number} - A value between `0` and `1`
   *	representing the proportion of the media that has loaded
   * * `proportionPlayed` {Number} - A value between `0` and `1` representing the
   *	proportion of the media that has already been shown
   *
   * Events:
   * * `onLoadStart` - Called when the video starts to load
   * * `onUpdate` - Sent when any of the properties were updated
   *
   * Methods:
   * * `play()` - play video
   * * `pause()` - pause video
   * * `load()` - load video
   *
   * The [`source`]{@link sandstone/VideoPlayer.Video.source} property is passed to
   * the video component as a child node.
   *
   * @type {Component|Element}
   * @default {@link ui/Media.Media}
   * @public
   */
  videoComponent: _propTypes["default"].componentOverride
}, _class.contextType = _FloatingLayerDecorator.FloatingLayerContext, _class.defaultProps = {
  autoCloseTimeout: 5000,
  feedbackHideDelay: 3000,
  initialJumpDelay: 400,
  jumpBy: 30,
  jumpDelay: 200,
  mediaControlsComponent: _MediaPlayer.MediaControls,
  miniFeedbackHideDelay: 2000,
  playbackRateHash: {
    fastForward: ['2', '4', '8', '16'],
    rewind: ['-2', '-4', '-8', '-16'],
    slowForward: ['1/4', '1/2'],
    slowRewind: ['-1/2', '-1']
  },
  spotlightId: 'videoPlayer',
  titleHideDelay: 5000,
  videoComponent: _Media["default"]
}, _class);
/**
 * A standard HTML5 video player for Sandstone. It behaves, responds to, and operates like a
 * `<video>` tag in its support for `<source>`.  It also accepts custom tags such as
 * `<infoComponents>` for displaying additional information in the title area and `<MediaControls>`
 * for handling media playback controls and adding more controls.
 *
 * Example usage:
 * ```
 *	<VideoPlayer title="Hilarious Cat Video" poster="http://my.cat.videos/boots-poster.jpg">
 *		<source src="http://my.cat.videos/boots.mp4" type="video/mp4" />
 *		<infoComponents>A video about my cat Boots, wearing boots.</infoComponents>
 *		<MediaControls>
 *			<leftComponents><Button backgroundOpacity="translucent" icon="star" /></leftComponents>
 *			<rightComponents><Button backgroundOpacity="translucent" icon="notification" /></rightComponents>
 *
 *			<Button backgroundOpacity="translucent">Add To Favorites</Button>
 *			<Button backgroundOpacity="translucent" icon="search" />
 *		</MediaControls>
 *	</VideoPlayer>
 * ```
 *
 * To invoke methods (e.g.: `fastForward()`) or get the current state (`getMediaState()`), store a
 * ref to the `VideoPlayer` within your component:
 *
 * ```
 * 	...
 *
 * 	setVideoPlayer = (node) => {
 * 		this.videoPlayer = node;
 * 	}
 *
 * 	play () {
 * 		this.videoPlayer.play();
 * 	}
 *
 * 	render () {
 * 		return (
 * 			<VideoPlayer ref={this.setVideoPlayer} />
 * 		);
 * 	}
 * ```
 *
 * @class VideoPlayer
 * @memberof sandstone/VideoPlayer
 * @mixes ui/Slottable.Slottable
 * @ui
 * @public
 */

exports.VideoPlayerBase = VideoPlayerBase;
var VideoPlayer = (0, _ApiDecorator["default"])({
  api: ['areControlsVisible', 'fastForward', 'getMediaState', 'getVideoNode', 'hideControls', 'jump', 'pause', 'play', 'rewind', 'seek', 'showControls', 'showFeedback', 'toggleControls']
}, (0, _I18nDecorator.I18nContextDecorator)({
  localeProp: 'locale'
}, (0, _Slottable["default"])({
  slots: ['infoComponents', 'mediaControlsComponent', 'source', 'thumbnailComponent', 'videoComponent']
}, (0, _FloatingLayer.FloatingLayerDecorator)({
  floatLayerId: 'videoPlayerFloatingLayer'
}, (0, _Skinnable["default"])(VideoPlayerBase)))));
exports.VideoPlayer = VideoPlayer;
var _default = VideoPlayer;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/internal/$L/$L.js":
/*!*********************************************************!*\
  !*** ./node_modules/@enact/sandstone/internal/$L/$L.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.$L = $L;
exports.clearResBundle = clearResBundle;
exports.createResBundle = createResBundle;
exports["default"] = void 0;
exports.setResBundle = setResBundle;

var _resBundle = __webpack_require__(/*! @enact/i18n/src/resBundle */ "./node_modules/@enact/i18n/src/resBundle.js");

var _ResBundle = _interopRequireDefault(__webpack_require__(/*! ilib/lib/ResBundle */ "./node_modules/ilib/lib/ResBundle.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
} // The ilib.ResBundle for the active locale used by $L


var resBundle;
/**
 * Returns the current ilib.ResBundle
 *
 * @returns {ilib.ResBundle} Current ResBundle
 */

function getResBundle() {
  return resBundle;
}
/**
 * Creates a new ilib.ResBundle for string translation
 *
 * @param  {ilib.Locale} locale Locale for ResBundle
 *
 * @returns {Promise|ResBundle} Resolves with a new ilib.ResBundle
 */


function createResBundle(options) {
  var opts = options;

  if (true) {
    opts.basePath = "node_modules/@enact/sandstone/resources";
  }

  if (!opts.onLoad) return; // eslint-disable-next-line no-new

  new _ResBundle["default"](_objectSpread(_objectSpread({}, opts), {}, {
    onLoad: function onLoad(bundle) {
      opts.onLoad(bundle || null);
    }
  }));
}
/**
 * Deletes the current bundle object of strings.
 * @returns {undefined}
 */


function clearResBundle() {
  delete _ResBundle["default"].strings;
  delete _ResBundle["default"].sysres;
  resBundle = null;
}
/**
 * Set the locale for the strings that $L loads. This may reload the
 * string resources if necessary.
 *
 * @param {string} spec the locale specifier
 * @returns {ilib.ResBundle} Current ResBundle
 */


function setResBundle(bundle) {
  return resBundle = bundle;
}

function toIString(str) {
  var rb = getResBundle();

  if (!rb) {
    createResBundle({
      sync: true,
      onLoad: setResBundle
    });
    rb = getResBundle();
  }

  return (0, _resBundle.getIStringFromBundle)(str, rb);
}
/**
 * Maps a string or key/value object to a translated string for the current locale.
 *
 * @function
 * @memberof i18n/$L
 * @param  {String|Object} str Source string
 *
 * @returns {String} The translated string
 */


function $L(str) {
  return String(toIString(str));
}

var _default = $L;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/sandstone/internal/util/util.js":
/*!*************************************************************!*\
  !*** ./node_modules/@enact/sandstone/internal/util/util.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.onlyUpdateForProps = exports.extractVoiceProps = exports.compareChildren = void 0;

var _equals = _interopRequireDefault(__webpack_require__(/*! ramda/src/equals */ "./node_modules/ramda/src/equals.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Removes voice control related props from `props` and returns them in a new object.
 *
 * @function
 * @param   {Object}    props    Props object
 *
 * @returns {Object}             voice control related props
 * @memberof sandstone/internal/util
 * @private
 */


var extractVoiceProps = function extractVoiceProps(props) {
  var obj = {};
  Object.keys(props).forEach(function (key) {
    if (key.indexOf('data-webos-voice-') === 0) {
      obj[key] = props[key];
      delete props[key];
    }
  });
  return obj;
};
/**
 * Compares two children and returns true if they are equivalent, false otherwise.
 *
 * @function
 * @param   {children}    a    children props
*  @param   {children}    b    children props
 *
 * @returns {Boolean}          `true` if same
 * @memberof sandstone/internal/util
 * @private
 */


exports.extractVoiceProps = extractVoiceProps;

var compareChildren = function compareChildren(a, b) {
  if (!a || !b || a.length !== b.length) return false;
  var type = null;

  for (var i = 0; i < a.length; i++) {
    type = type || typeof a[i];

    if (type === 'string') {
      if (a[i] !== b[i]) {
        return false;
      }
    } else if (!(0, _equals["default"])(a[i], b[i])) {
      return false;
    }
  }

  return true;
};
/**
 * Updates component only when given props are not shallowly equivalent, not updating otherwise.
 *
 * @function
 * @param   {any}    wrapped    A component
*  @param   {Array}  propKeys   Prop keys to compare
 *
 * @returns {any}               Conditionally memoized component
 * @memberof sandstone/internal/util
 * @private
 */


exports.compareChildren = compareChildren;

var onlyUpdateForProps = function onlyUpdateForProps(wrapped, propKeys) {
  return /*#__PURE__*/(0, _react.memo)(wrapped, function (prevProps, nextProps) {
    var hasOwn = Object.prototype.hasOwnProperty;

    if (Array.isArray(propKeys)) {
      return propKeys.every(function (key) {
        return hasOwn.call(prevProps, key) && hasOwn.call(nextProps, key) && Object.is(prevProps[key], nextProps[key]);
      });
    }

    return false;
  });
};

exports.onlyUpdateForProps = onlyUpdateForProps;

/***/ }),

/***/ "./node_modules/@enact/sandstone/internal/validators/validators.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/internal/validators/validators.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.warn = exports.validateSteppedOnce = exports.validateStepped = exports.validateRangeOnce = exports.validateRange = void 0;
/**
 * Exports various utilities for performing dev-time validations
 *
 * @module sandstone/internal/validators
 * @private
 */

/**
 * Issues a warning to the console
 *
 * @function
 * @param {String} msg				Event name
 * @param	{Function}	fn					Event handler
 * @param	{Node}		[target=`document`]	Event listener target
 *
 * @returns {undefined}
 * @memberof sandstone/internal/validators
 * @private
 */

var warn = function warn(msg) {
  if (typeof console !== 'undefined') {
    console.warn(msg); // eslint-disable-line no-console
  }
};
/**
 * Issues a warning to the console if `value` is not within the range
 * `min` to `max` or if `min` is less than `max`. In production mode,
 * no action is taken.
 *
 * @function
 * @param {Number} value The value to validate
 * @param {Number} min   The minimum acceptable value to validate
 * @param {Number} max   The maximum acceptable value to validate
 * @param {String} component The name of the invoker, used to decorate warning message
 * @param {String} [valueName='value'] The name of the value property
 * @param {String} [minName='min'] The name of the min property
 * @param {String} [maxName='max'] The name of the max property
 *
 * @returns {undefined}
 * @memberof sandstone/internal/validators
 * @private
 */


exports.warn = warn;

var validateRange = function validateRange(value, min, max, component) {
  var valueName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'value';
  var minName = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'min';
  var maxName = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'max';

  if (true) {
    var warned = false;

    if (value < min) {
      warn("Warning: ".concat(component, " ").concat(valueName, " (").concat(value, ") less than ").concat(minName, " (").concat(min, ")"));
      warned = true;
    } else if (value > max) {
      warn("Warning: ".concat(component, " ").concat(valueName, " (").concat(value, ") greater than ").concat(maxName, " (").concat(max, ")"));
      warned = true;
    }

    if (min > max) {
      warn("Warning: ".concat(component, " ").concat(minName, " (").concat(min, ") greater than ").concat(maxName, " (").concat(max, ")"));
      warned = true;
    }

    return warned;
  }
};

exports.validateRange = validateRange;

var validateRangeOnce = function validateRangeOnce(thing, _ref) {
  var component = _ref.component,
      _ref$valueName = _ref.valueName,
      valueName = _ref$valueName === void 0 ? 'value' : _ref$valueName,
      _ref$minName = _ref.minName,
      minName = _ref$minName === void 0 ? 'min' : _ref$minName,
      _ref$maxName = _ref.maxName,
      maxName = _ref$maxName === void 0 ? 'max' : _ref$maxName;

  if (true) {
    var displayed;
    return function (props) {
      if (!displayed) {
        displayed = validateRange(props[valueName], props[minName], props[maxName], component, valueName, minName, maxName);
      }

      return thing(props);
    };
  } else {}
};
/**
 * Issues a warning to the console if `value`, adjusted for `min` is not evenly
 * divisible by `step`. In production mode, no action is taken.
 *
 * @function
 * @param {Number} value The value to validate
 * @param {Number} min   The minimum acceptable value to validate
 * @param {Number} step  The step
 * @param {String} component The name of the invoker, used to decorate warning message
 * @param {String} [valueName='value'] The name of the value property
 * @param {String} [stepName='step'] The name of the step property
 *
 * @returns {Boolean} `true` if warned
 * @memberof sandstone/internal/validators
 * @private
 */


exports.validateRangeOnce = validateRangeOnce;

var validateStepped = function validateStepped(value, min, step, component) {
  var valueName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'value';
  var stepName = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'step';

  if (true) {
    // Ignore fractional steps as floating point math can give inconsistent results (1 % 0.1 != 0)
    if (step && step === Math.floor(step) && (value - min) % step !== 0) {
      warn("Warning: ".concat(component, " ").concat(valueName, " (").concat(value, ") must be evenly divisible by ").concat(stepName, " (").concat(step, ")"));
      return true;
    }
  }

  return false;
};

exports.validateStepped = validateStepped;

var validateSteppedOnce = function validateSteppedOnce(thing, _ref2) {
  var component = _ref2.component,
      _ref2$minName = _ref2.minName,
      minName = _ref2$minName === void 0 ? 'min' : _ref2$minName,
      _ref2$stepName = _ref2.stepName,
      stepName = _ref2$stepName === void 0 ? 'step' : _ref2$stepName,
      _ref2$valueName = _ref2.valueName,
      valueName = _ref2$valueName === void 0 ? 'value' : _ref2$valueName;

  if (true) {
    var displayed;
    return function (props) {
      if (!displayed) {
        displayed = validateStepped(props[valueName], props[minName], props[stepName], component, valueName, stepName);
      }

      return thing(props);
    };
  } else {}
};

exports.validateSteppedOnce = validateSteppedOnce;

/***/ }),

/***/ "./node_modules/@enact/spotlight/Accelerator/Accelerator.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/spotlight/Accelerator/Accelerator.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Accelerator = void 0;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
/**
 * Provides the {@link spotlight/Accelerator.Accelerator} class.
 *
 * @module spotlight/Accelerator
 * @exports Accelerator
 */

/**
 * @class Accelerator
 * @memberof spotlight/Accelerator
 */


var Accelerator = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {Number[]} frequency - Controls the frequency with which the acceleration will
 *	"freeze". While frozen, the current target item cannot change, and all events are directed
 *	to it.
 * @memberof spotlight/Accelerator.Accelerator.prototype
 */
function Accelerator() {
  var _this = this;

  var frequency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [3, 3, 3, 2, 2, 2, 1];

  _classCallCheck(this, Accelerator);

  this.processKey = function (event, callback) {
    switch (event.type) {
      case 'keydown':
        if (event.keyCode !== _this.keyCode) {
          _this.reset();

          _this.time = Date.now();
          _this.keyCode = event.keyCode;
          return callback(event);
        } else if (_this.canceled) {
          // Prevent skipped keydown events from bubbling
          event.preventDefault();
          return true;
        } else {
          var elapsedTime = Date.now() - _this.time,
              seconds = Math.floor(elapsedTime / 1000),
              toSkip = 0;

          seconds = seconds > _this.frequency.length - 1 ? _this.frequency.length - 1 : seconds;
          toSkip = _this.frequency[seconds] - 1;

          if (toSkip < 0) {
            toSkip = 0;
          }

          _this.accelerating = !(seconds === 0 && _this.skipped === 0);

          if (_this.skipped >= toSkip) {
            _this.skipped = 0;
            return callback(event);
          } else {
            _this.skipped++; // Prevent skipped keydown events from bubbling

            event.preventDefault();
            return true;
          }
        }

      case 'keyup':
        _this.reset();

        return callback(event);
    }
  };

  this.reset = function () {
    _this.skipped = 0;
    _this.time = 0;
    _this.keyCode = 0;
    _this.canceled = false;
    _this.accelerating = false;
  };

  this.cancel = function () {
    _this.canceled = true;
  };

  this.isAccelerating = function () {
    return _this.accelerating;
  };
  /*
   * Whether the instance is currently in an accelerating state.
   *
   * @type {Boolean}
   * @default false
   */


  this.accelerating = false;
  /*
   * The current count of skipped events.
   *
   * @type {Number}
   * @default 0
   */

  this.skipped = 0;
  /*
   * The timestamp of the last evaluated event.
   *
   * @type {Number}
   * @default 0
   */

  this.time = 0;
  /*
   * The keyCode of the last evaluated event.
   *
   * @type {Number}
   * @default 0
   */

  this.keyCode = 0;
  /*
   * Whether the instance is in a state of being canceled.
   *
   * @type {Boolean}
   * @default false
   */

  this.canceled = false;
  /*
   * Controls the frequency with which the acceleration will "freeze". While frozen,
   * the current target item cannot change, and all events are directed to it.
   *
   * @type {Number[]}
   * @default [3, 3, 3, 2, 2, 2, 1]
   * @public
   */

  this.frequency = frequency;
}
/**
 * Called with the current keydown event and callback, which will be called when the event is
 * allowed through.
 *
 * @function
 * @param  {Object} event - The current event to validate.
 * @param  {Function} callback - The callback to execute.
 * @returns {Boolean} `true` if the event was consumed by processKey and callback was not called
 * @public
 * @memberof spotlight/Accelerator.Accelerator.prototype
 */
);

exports.Accelerator = Accelerator;
var _default = Accelerator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/spotlight/Pause/Pause.js":
/*!******************************************************!*\
  !*** ./node_modules/@enact/spotlight/Pause/Pause.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Pause = void 0;
exports.isPaused = isPaused;
exports.pause = pause;
exports.resume = _resume;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
/**
 * Provides a class which allows consumers to safely pause and resume spotlight without resuming
 * another consumer's pause.
 *
 * When multiple components attempt to pause and resume spotlight at overlapping times using
 * [Spotlight.pause()]{@link spotlight.Spotlight.pause} and
 * [Spotlight.resume()]{@link spotlight.Spotlight.resume}, one component might resume spotlight when
 * another expected it to still be paused.
 *
 * `Pause` helps to address this by setting a "soft lock" on the pause which informs other instances
 * that the spotlight pause state is being controlled. When pause is locked, it can only be resumed
 * by the instance that locked it. Subsequent calls to `pause` and `resume` on another instance of
 * `Pause` have no effect.
 *
 * *Note:* The top-level [Spotlight.pause()]{@link spotlight.Spotlight.pause} and
 * [Spotlight.resume()]{@link spotlight.Spotlight.resume} do not respect the pause locks and act as
 * a user-space escape hatch.
 *
 * ```
 * import Pause from '@enact/spotlight/Pause';
 *
 * const paused1 = new Pause('paused 1');
 * const paused2 = new Pause('paused 2');
 *
 * // pauses spotlight
 * paused1.pause();
 *
 * // has no effect because pause1 is in control
 * paused2.pause();
 *
 * // has no effect because pause1 is in control
 * paused2.resume();
 *
 * // resumes spotlight
 * paused1.resume();
 *
 * ```
 *
 * @module spotlight/Pause
 * @exports Pause
 * @exports isPaused
 * @exports pause
 * @exports resume
 */


var paused = false; // Private, exported methods used by Spotlight to set and query the pause state from its public API

function pause() {
  paused = true;
}

function _resume() {
  paused = false;
}

function isPaused() {
  return paused !== false;
}
/**
 * Acts as a semaphore for Spotlight pause state ensuring that only the last Pause instance can
 * resume Spotlight.
 *
 * *Note* {@link spotlight/Spotlight.resume} will always resume spotlight regardless of what last
 * paused spotlight and can be used as an escape hatch to force resumption.
 *
 * @class Pause
 * @memberof spotlight/Pause
 * @public
 */


var Pause = /*#__PURE__*/function () {
  /**
   * Accepts a name for the instance
   *
   * The `name` is not used but may be useful for debugging which instance has currently paused
   * Spotlight.
   *
   * @param {String} name The name of the pause instance
   * @memberof spotlight/Pause.Pause.prototype
   * @constructor
   * @public
   */
  function Pause(name) {
    _classCallCheck(this, Pause);

    this.name = name;
  }

  _createClass(Pause, [{
    key: "toString",
    value: function toString() {
      return "Pause<".concat(this.name, ">");
    }
    /**
     * Returns `true` when Spotlight is paused by this instance
     *
     * @returns {Boolean}
     * @memberof spotlight/Pause.Pause.prototype
     * @public
     */

  }, {
    key: "isPaused",
    value: function isPaused() {
      return paused === this;
    }
    /**
     * Pauses spotlight if not currently paused
     *
     * @returns {undefined}
     * @memberof spotlight/Pause.Pause.prototype
     * @public
     */

  }, {
    key: "pause",
    value: function pause() {
      if (!isPaused()) {
        paused = this;
      }
    }
    /**
     * Resumes spotlight if this instance was the last to pause spotlight
     *
     * @returns {Boolean} `true` if spotlight was resumed
     * @memberof spotlight/Pause.Pause.prototype
     * @public
     */

  }, {
    key: "resume",
    value: function resume() {
      if (this.isPaused()) {
        _resume();

        return true;
      }

      return false;
    }
  }]);

  return Pause;
}();

exports.Pause = Pause;
var _default = Pause;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/spotlight/SpotlightContainerDecorator/SpotlightContainer.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@enact/spotlight/SpotlightContainerDecorator/SpotlightContainer.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.SpotlightContainer = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _pointer = __webpack_require__(/*! ../src/pointer */ "./node_modules/@enact/spotlight/src/pointer.js");

var _spotlight = _interopRequireDefault(__webpack_require__(/*! ../src/spotlight */ "./node_modules/@enact/spotlight/src/spotlight.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var isNewPointerPosition = function isNewPointerPosition(ev) {
  return (0, _pointer.hasPointerMoved)(ev.clientX, ev.clientY);
};

var SpotlightContainer = /*#__PURE__*/function () {
  // set up context and props so we can use handle binding
  function SpotlightContainer(_ref) {
    var _this = this;

    var containerConfig = _ref.containerConfig,
        navigableFilter = _ref.navigableFilter,
        preserveId = _ref.preserveId;

    _classCallCheck(this, SpotlightContainer);

    this.context = {};
    this.props = {};

    this.navigableFilter = function (elem) {
      // If the component to which this was applied specified a navigableFilter, run it
      if (typeof _this.filter === 'function') {
        if (_this.filter(elem) === false) {
          return false;
        }
      }

      return true;
    };

    this.onBlurCapture = function (ev) {
      if (_this.shouldPreventBlur) {
        (0, _handle.stop)(ev);
        return false;
      }

      return true;
    };

    this.onFocusCapture = function (ev) {
      if (_this.props.disabled === true) {
        (0, _handle.stop)(ev);

        _this.silentBlur(ev);

        return false;
      }

      return true;
    };

    this.onPointerEnter = (0, _handle.handle)(isNewPointerPosition, function () {
      return _spotlight["default"].setActiveContainer(_this.id);
    }).bindAs(this, 'onPointerEnter');
    this.onPointerLeave = (0, _handle.handle)((0, _handle.not)((0, _handle.forProp)('restrict', 'self-only')), isNewPointerPosition, function (ev) {
      var parentContainer = ev.currentTarget.parentNode.closest('[data-spotlight-container]');

      var activeContainer = _spotlight["default"].getActiveContainer(); // if this container is wrapped by another and this is the currently active
      // container, move the active container to the parent


      if (parentContainer && activeContainer === _this.id) {
        activeContainer = parentContainer.dataset.spotlightId;

        _spotlight["default"].setActiveContainer(activeContainer);
      }
    }).bindAs(this, 'onPointerLeave'); // spotlight id - set either via props or generated by Spotlight

    this.id = null; // Preserve the spotlight id across instances when it is set via props and preserveId is set

    this.canPreserveId = preserveId;
    this.preserveId = false; // container config - set once when the container is added

    this.config = containerConfig; // optional filter function to limit the spottable candidates for this container

    this.filter = navigableFilter; // private hash of spotlight DOM attributes

    this.attr = {
      'data-spotlight-container': true
    }; // Used to indicate that we want to stop propagation on blur events that occur as a
    // result of this component imperatively blurring itself on focus when spotlightDisabled

    this.shouldPreventBlur = false;
  }

  _createClass(SpotlightContainer, [{
    key: "attributes",
    get: function get() {
      return this.attr;
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      var disabled = props.disabled,
          id = props.id,
          muted = props.muted,
          restrict = props.restrict;
      this.props = props;

      if (this.id == null || id && this.id !== id) {
        if (this.id) {
          this.releaseContainer(this.id);
        }

        this.id = _spotlight["default"].add(_objectSpread(_objectSpread({}, this.config), {}, {
          id: id,
          restrict: restrict,
          navigableFilter: this.navigableFilter
        }));
        this.preserveId = this.canPreserveId && this.id === id;
      } else {
        _spotlight["default"].set(this.id, {
          restrict: restrict
        });
      }

      this.attr['data-spotlight-id'] = this.id;
      this.attr['data-spotlight-container-disabled'] = disabled;
      this.attr['data-spotlight-container-muted'] = muted;
    }
  }, {
    key: "unload",
    value: function unload() {
      this.releaseContainer();
    }
  }, {
    key: "releaseContainer",
    value: function releaseContainer() {
      if (this.preserveId) {
        _spotlight["default"].unmount(this.id);
      } else {
        _spotlight["default"].remove(this.id);
      }
    }
  }, {
    key: "silentBlur",
    value: function silentBlur(_ref2) {
      var target = _ref2.target;
      this.shouldPreventBlur = true;
      target.blur();
      this.shouldPreventBlur = false;
    }
  }]);

  return SpotlightContainer;
}();

exports.SpotlightContainer = SpotlightContainer;
var _default = SpotlightContainer;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/spotlight/SpotlightContainerDecorator/SpotlightContainerDecorator.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@enact/spotlight/SpotlightContainerDecorator/SpotlightContainerDecorator.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.spotlightDefaultClass = exports["default"] = exports.SpotlightContainerDecorator = void 0;
Object.defineProperty(exports, "useSpotlightContainer", ({
  enumerable: true,
  get: function get() {
    return _useSpotlightContainer["default"];
  }
}));

var _handle = _interopRequireWildcard(__webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js"));

var _useHandlers = _interopRequireDefault(__webpack_require__(/*! @enact/core/useHandlers */ "./node_modules/@enact/core/useHandlers/useHandlers.js"));

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _useSpotlightContainer = _interopRequireDefault(__webpack_require__(/*! ./useSpotlightContainer */ "./node_modules/@enact/spotlight/SpotlightContainerDecorator/useSpotlightContainer.js"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["navigableFilter", "preserveId"],
    _excluded2 = ["spotlightDisabled", "spotlightId", "spotlightMuted", "spotlightRestrict"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var callContext = function callContext(name) {
  return function (ev, props, context) {
    return context[name](ev, props);
  };
};

var containerHandlers = {
  onMouseEnter: (0, _handle["default"])((0, _handle.forward)('onMouseEnter'), callContext('onPointerEnter')),
  onMouseLeave: (0, _handle["default"])((0, _handle.forward)('onMouseLeave'), callContext('onPointerLeave')),
  onFocusCapture: (0, _handle["default"])(callContext('onFocusCapture'), (0, _handle.forward)('onFocusCapture')),
  onBlurCapture: (0, _handle["default"])(callContext('onBlurCapture'), (0, _handle.forward)('onBlurCapture'))
};
/**
 * The class name to apply to the default component to focus in a container.
 *
 * @memberof spotlight/SpotlightContainerDecorator
 * @public
 */

var spotlightDefaultClass = 'spottable-default';
/**
 * Default config for {@link spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator}
 *
 * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator
 * @hocconfig
 */

exports.spotlightDefaultClass = spotlightDefaultClass;
var defaultConfig = {
  /**
   * When `true`, allows focus to move outside the container to the next spottable element when
   * holding 5 way keys.
   *
   * @type {Boolean}
   * @default false
   * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
   * @public
   */
  continue5WayHold: false,

  /**
   * The selector for the default spottable element within the container.
   * When an array of selectors is provided, the first selector that successfully matches a
   * node is used.
   *
   * @type {String|String[]}
   * @default '.spottable-default'
   * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
   * @public
   */
  defaultElement: ".".concat(spotlightDefaultClass),

  /**
   * Directs which element receives focus when gaining focus from another container. If
   * `'default-element'`, the default focused item will be selected. If `'last-focused'`, the
   * container will focus the last focused item; if the container has never had focus, the default
   * element will receive focus. If `null`, the default 5-way behavior will be applied.
   *
   * @type {String}
   * @default null
   * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
   * @public
   */
  enterTo: null,

  /**
   * Filter the navigable elements.
   *
   * @type {Function}
   * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
   * @public
   */
  navigableFilter: null,

  /**
   * Whether the container will preserve the specified `spotlightId` when it unmounts.
   *
   * @type {Boolean}
   * @default false
   * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
   * @public
   */
  preserveId: false,

  /**
   * Restricts or prioritizes navigation when focus attempts to leave the container. It
   * can be either 'none', 'self-first', or 'self-only'. Specifying 'self-first' indicates that
   * elements within the container will have a higher likelihood to be chosen as the next
   * navigable element. Specifying 'self-only' indicates that elements in other containers
   * cannot be navigated to by using 5-way navigation - however, elements in other containers
   * can still receive focus by calling `Spotlight.focus(elem)` explicitly. Specifying 'none'
   * indicates there should be no restrictions when 5-way navigating the container.
   *
   * @type {String}
   * @default 'self-first'
   * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
   * @public
   */
  restrict: _propTypes["default"].oneOf(['none', 'self-first', 'self-only'])
};
/**
 * Constructs a higher-order component that allows Spotlight focus to be passed to its own
 * configurable hierarchy of spottable child controls.
 *
 * Note: This HoC passes a number of props to the wrapped component that should be passed to the
 * main DOM node.
 *
 * Example:
 * ```
 *	const Component = ({myProp, ...rest}) => (
 *		<div {...rest}>{myProp}</div>
 *	);
 *	...
 *	const DefaultContainer = SpotlightContainerDecorator(Component);
 *	const FocusDefaultContainer = SpotlightContainerDecorator({enterTo: 'default-element'}, Component);
 * ```
 *
 * To specify a default element to spot in a container, utilize the `spotlightDefaultClass`.
 *
 * Example:
 * ```
 *	import Spotlight from '@enact/spotlight';
 *	import SpotlightContainerDecorator from '@enact/spotlight/SpotlightContainerDecorator';
 *	const ContainerComponent = SpotlightContainerDecorator(Component);
 *	const View = kind({
 *		render: () => {
 *			<ContainerComponent>
 *				<SpottableComponent>foo</SpottableComponent>
 *				<SpottableComponent className={spotlightDefaultClass}>spot me first</SpottableComponent>
 *			</ContainerComponent>
 *		}
 *	});
 * ```
 * @param  {Object}    defaultConfig  Set of default configuration parameters. Additional parameters
 *                                    are passed as configuration to {@link spotlight/Spotlight.set}
 * @param  {Function} higher-order component
 *
 * @returns {Function} SpotlightContainerDecorator
 * @class SpotlightContainerDecorator
 * @memberof spotlight/SpotlightContainerDecorator
 * @hoc
 */

var SpotlightContainerDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var navigableFilter = config.navigableFilter,
      preserveId = config.preserveId,
      containerConfig = _objectWithoutProperties(config, _excluded); // eslint-disable-next-line no-shadow


  function SpotlightContainerDecorator(props) {
    var spotlightDisabled = props.spotlightDisabled,
        spotlightId = props.spotlightId,
        spotlightMuted = props.spotlightMuted,
        spotlightRestrict = props.spotlightRestrict,
        rest = _objectWithoutProperties(props, _excluded2);

    var spotlightContainer = (0, _useSpotlightContainer["default"])({
      id: spotlightId,
      muted: spotlightMuted,
      disabled: spotlightDisabled,
      restrict: spotlightRestrict,
      containerConfig: containerConfig,
      // continue5WayHold, defaultElement, and enterTo can be in the containerConfig object.
      navigableFilter: navigableFilter,
      preserveId: preserveId
    });
    var handlers = (0, _useHandlers["default"])(containerHandlers, props, spotlightContainer);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread(_objectSpread({}, rest), spotlightContainer.attributes), handlers));
  }

  SpotlightContainerDecorator.propTypes =
  /** @lends spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.prototype */
  {
    /**
     * When `true`, controls in the container cannot be navigated.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    spotlightDisabled: _propTypes["default"].bool,

    /**
     * Used to identify this component within the Spotlight system.
     *
     * If the value is `null`, an id will be generated.
     * To keep the container information for restoring focus, it is required to specify
     * a unique identifier.
     *
     * @type {String}
     * @public
     */
    spotlightId: _propTypes["default"].string,

    /**
     * Whether or not the container is in muted mode.
     *
     * In muted mode, `:focus` CSS styles will not be applied to the
     * Spottable controls giving them the appearance of not having focus
     * while they still have focus.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    spotlightMuted: _propTypes["default"].bool,

    /**
     * Restricts or prioritizes navigation when focus attempts to leave the container. It
     * can be either 'none', 'self-first', or 'self-only'. Specifying 'self-first' indicates that
     * elements within the container will have a higher likelihood to be chosen as the next
     * navigable element. Specifying 'self-only' indicates that elements in other containers
     * cannot be navigated to by using 5-way navigation - however, elements in other containers
     * can still receive focus by calling `Spotlight.focus(elem)` explicitly. Specifying 'none'
     * indicates there should be no restrictions when 5-way navigating the container.
     *
     * @type {String}
     * @default 'self-first'
     * @public
     */
    spotlightRestrict: _propTypes["default"].oneOf(['none', 'self-first', 'self-only'])
  };
  SpotlightContainerDecorator.defaultProps = {
    spotlightDisabled: false,
    spotlightMuted: false,
    spotlightRestrict: 'self-first'
  }; // Wrapping with a React.Component to maintain ref support

  return /*#__PURE__*/function (_Component) {
    _inherits(SpotlightContainerDecoratorAdapter, _Component);

    var _super = _createSuper(SpotlightContainerDecoratorAdapter);

    function SpotlightContainerDecoratorAdapter() {
      _classCallCheck(this, SpotlightContainerDecoratorAdapter);

      return _super.apply(this, arguments);
    }

    _createClass(SpotlightContainerDecoratorAdapter, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(SpotlightContainerDecorator, _objectSpread({}, this.props));
      }
    }]);

    return SpotlightContainerDecoratorAdapter;
  }(_react.Component);
});
exports.SpotlightContainerDecorator = SpotlightContainerDecorator;
var _default = SpotlightContainerDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/spotlight/SpotlightContainerDecorator/useSpotlightContainer.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@enact/spotlight/SpotlightContainerDecorator/useSpotlightContainer.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.useSpotlightContainer = useSpotlightContainer;

var _useClass = _interopRequireDefault(__webpack_require__(/*! @enact/core/useClass */ "./node_modules/@enact/core/useClass/useClass.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _SpotlightContainer = _interopRequireDefault(__webpack_require__(/*! ./SpotlightContainer */ "./node_modules/@enact/spotlight/SpotlightContainerDecorator/SpotlightContainer.js"));

var _excluded = ["disabled", "id", "muted", "restrict"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Configuration for `useSpotlightContainer`
 *
 * @typedef {Object} useSpotlightContainerConfig
 * @memberof spotlight/SpotlightContainerDecorator
 * @property {Object}   [containerConfig]                   Spotlight container configuration. This
 *                                                          is a design-time configuration and only
 *                                                          applied once on first render.
 * @property {Function} [navigableFilter]                   Called to determine if a spottable
 *                                                          component is accessible. This is a
 *                                                          design-time configuration and only
 *                                                          applied once on first render.
 * @property {Boolean}  [preserveId]                        Preserves the spotlight `id`, if
 *                                                          specified, when the component unmounts.
 * @property {Boolean}  [disabled]                          Prevents controls in the container from
 *                                                          being navigable. This is a design-time
 *                                                          configuration and only applied once on
 *                                                          first render.
 * @property {Boolean}  [muted]                             Suppresses appearance of focus within
 *                                                          the container while still allowing the
 *                                                          component to gain focus. The components
 *                                                          within the container are responsible for
 *                                                          adjusting their visual appearance based
 *                                                          on the presence of the
 *                                                          `data-spotlight-container-muted`
 *                                                          attribute on an ancestor container.
 * @property {String}   [id]                                Identifies this component within the
 *                                                          Spotlight system. If unset, an id will
 *                                                          be generated.
 * @property {('self-only'|'self-first'|'none')} [restrict] Restricts or prioritizes navigation when
 *                                                          focus attempts to leave the container.
 *                                                          It can be either 'none', 'self-first',
 *                                                          or 'self-only'. Specifying 'self-first'
 *                                                          indicates that elements within the
 *                                                          container will have a higher likelihood
 *                                                          to be chosen as the next navigable
 *                                                          element. Specifying 'self-only'
 *                                                          indicates that elements in other
 *                                                          containers cannot be navigated to by
 *                                                          using 5-way navigation - however,
 *                                                          elements in other containers can still
 *                                                          receive focus by calling
 *                                                          `Spotlight.focus(elem)` explicitly.
 *                                                          Specifying 'none' indicates there should
 *                                                          be no restrictions when 5-way navigating
 *                                                          the container.
 * @private
 */

/**
 * Object returned by `useSpotlightContainer`.
 *
 * @typedef {Object} useSpotlightContainerInterface
 * @memberof spotlight/SpotlightContainerDecorator
 * @property {Function} onBlurCapture    Callback to notify hook when an node was blurred within the
 *                                       container. Must be called during the capture phase of the
 *                                       event flow.
 * @property {Function} onFocusCapture   Callback to notify hook when an node was focused within the
 *                                       container. Must be called during the capture phase of the
 *                                       event flow.
 * @property {String}   attributes       An object of DOM attributes of representing the current
 *                                       spotlight container metadata. Must be passed onto the
 *                                       container node.
 * @property {Function} onPointerEnter   Callback to notify hook when the pointer enters the
 *                                       container. Must be called during the capture phase of the
 *                                       event flow.
 * @property {Function} onPointerLeave   Callback to notify hook when the pointer leaves the
 *                                       container. Must be called during the capture phase of the
 *                                       event flow.
 * @private
 */

/**
 * Support Spotlight container
 *
 * @param {useSpotlightContainerConfig} [config] Configuration options
 * @returns {useSpotlightContainerInterface}
 * @private
 */


function useSpotlightContainer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var disabled = config.disabled,
      id = config.id,
      muted = config.muted,
      restrict = config.restrict,
      rest = _objectWithoutProperties(config, _excluded);

  var spotlightContainer = (0, _useClass["default"])(_SpotlightContainer["default"], rest);
  spotlightContainer.setProps({
    disabled: disabled,
    id: id,
    muted: muted,
    restrict: restrict
  });
  (0, _react.useLayoutEffect)(function () {
    return function () {
      spotlightContainer.unload();
    };
  }, [spotlightContainer]);
  return {
    attributes: spotlightContainer.attributes,
    onBlurCapture: spotlightContainer.onBlurCapture,
    onFocusCapture: spotlightContainer.onFocusCapture,
    onPointerEnter: spotlightContainer.onPointerEnter,
    onPointerLeave: spotlightContainer.onPointerLeave
  };
}

var _default = useSpotlightContainer;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/spotlight/SpotlightRootDecorator/SpotlightRootDecorator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@enact/spotlight/SpotlightRootDecorator/SpotlightRootDecorator.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setInputType = exports.getInputType = exports["default"] = exports.activateInputType = exports.SpotlightRootDecorator = void 0;

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _keymap = __webpack_require__(/*! @enact/core/keymap */ "./node_modules/@enact/core/keymap/index.js");

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _spotlight = _interopRequireDefault(__webpack_require__(/*! ../src/spotlight */ "./node_modules/@enact/spotlight/src/spotlight.js"));

var _Spottable = __webpack_require__(/*! ../Spottable */ "./node_modules/@enact/spotlight/Spottable/Spottable.js");

var _container = __webpack_require__(/*! ../src/container */ "./node_modules/@enact/spotlight/src/container.js");

__webpack_require__(/*! ../styles/debug.less */ "./node_modules/@enact/spotlight/styles/debug.less");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var input = {
  activated: false,
  applied: false,
  types: {
    key: true,
    mouse: false,
    touch: false
  }
};

var activateInputType = function activateInputType(activated) {
  input.activated = activated;
};

exports.activateInputType = activateInputType;

var getInputType = function getInputType() {
  return Object.keys(input.types).find(function (type) {
    return input.types[type];
  });
};

exports.getInputType = getInputType;

var setInputType = function setInputType(inputType) {
  if (Object.prototype.hasOwnProperty.call(input.types, inputType) && !input.types[inputType]) {
    Object.keys(input.types).map(function (type) {
      input.types[type] = false;
    });
    input.types[inputType] = true;
    input.applied = false;
  }
};
/**
 * Default configuration for SpotlightRootDecorator
 *
 * @hocconfig
 * @memberof spotlight/SpotlightRootDecorator.SpotlightRootDecorator
 */


exports.setInputType = setInputType;
var defaultConfig = {
  /**
   * When `true`, the contents of the component will not receive spotlight focus after being rendered.
   *
   * @type {Boolean}
   * @default false
   * @public
   * @memberof spotlight/SpotlightRootDecorator.SpotlightRootDecorator.defaultConfig
   */
  noAutoFocus: false
};
/**
 * Constructs a higher-order component that initializes and enables Spotlight 5-way navigation
 * within an application.
 *
 * No additional properties are passed to the wrapped component.
 *
 * Example:
 * ```
 *	const App = SpotlightRootDecorator(ApplicationView);
 * ```
 *
 * @class SpotlightRootDecorator
 * @memberof spotlight/SpotlightRootDecorator
 * @param  {Object} defaultConfig Set of default configuration parameters
 * @param  {Function} Wrapped higher-order component
 * @returns {Function} SpotlightRootDecorator
 * @hoc
 */

var SpotlightRootDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var noAutoFocus = config.noAutoFocus;
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);

      _this.applyInputType = function () {
        if (_assertThisInitialized(_this) && _this.containerNode) {
          Object.keys(input.types).map(function (type) {
            _this.containerNode.classList.toggle('spotlight-input-' + type, input.types[type]);
          });
          input.applied = true;
        }
      };

      _this.handleFocusInBeforeMount = function () {
        _this.hasFocusedIn = true;
      };

      _this.handleFocusIn = function () {
        if (!input.applied) {
          _this.applyInputType();
        }
      };

      _this.handleKeyDown = function (ev) {
        var keyCode = ev.keyCode;

        if ((0, _keymap.is)('enter', keyCode) && _this.containerNode.classList.contains('spotlight-input-touch')) {
          // Prevent onclick event trigger by enter key
          ev.preventDefault();
        }

        setTimeout(function () {
          if (!input.activated) {
            setInputType('key');
          }

          _this.applyInputType();
        }, 0);
      };

      _this.handlePointerMove = function (ev) {
        if (ev.pointerType === 'mouse') {
          setInputType('mouse');

          _this.applyInputType();
        }
      };

      _this.handlePointerOver = function (ev) {
        if (ev.pointerType === 'touch') {
          setInputType('touch');

          _this.applyInputType();
        }
      };

      _this.containerNode = null;

      if (typeof window === 'object') {
        _spotlight["default"].initialize({
          selector: '.' + _Spottable.spottableClass,
          restrict: 'none'
        });

        _spotlight["default"].set(_container.rootContainerId, {
          overflow: true
        }); // Sometimes the focusin event is fired before componentDidMount.


        document.addEventListener('focusin', _this.handleFocusInBeforeMount, {
          capture: true
        });
      }

      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (!noAutoFocus) {
          _spotlight["default"].focus();
        }

        if (typeof document === 'object') {
          this.containerNode = document.querySelector('#root');
          document.addEventListener('focusin', this.handleFocusIn, {
            capture: true
          });
          document.addEventListener('keydown', this.handleKeyDown, {
            capture: true
          });
          document.addEventListener('pointermove', this.handlePointerMove, {
            capture: true
          });
          document.addEventListener('pointerover', this.handlePointerOver, {
            capture: true
          });
          document.removeEventListener('focusin', this.handleFocusInBeforeMount, {
            capture: true
          });
        }

        if (this.hasFocusedIn) {
          this.hasFocusedIn = false;
          this.handleFocusIn();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _spotlight["default"].terminate();

        if (typeof document === 'object') {
          document.removeEventListener('focusin', this.handleFocusIn, {
            capture: true
          });
          document.removeEventListener('keydown', this.handleKeyDown, {
            capture: true
          });
          document.removeEventListener('pointermove', this.handlePointerMove, {
            capture: true
          });
          document.removeEventListener('pointerover', this.handlePointerOver, {
            capture: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, this.props));
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'SpotlightRootDecorator', _class;
});
exports.SpotlightRootDecorator = SpotlightRootDecorator;
var _default = SpotlightRootDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/spotlight/Spottable/Spottable.js":
/*!**************************************************************!*\
  !*** ./node_modules/@enact/spotlight/Spottable/Spottable.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Spottable = void 0;
Object.defineProperty(exports, "spottableClass", ({
  enumerable: true,
  get: function get() {
    return _useSpottable.spottableClass;
  }
}));
Object.defineProperty(exports, "useSpottable", ({
  enumerable: true,
  get: function get() {
    return _useSpottable.useSpottable;
  }
}));

var _handle = _interopRequireWildcard(__webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js"));

var _useHandlers = _interopRequireDefault(__webpack_require__(/*! @enact/core/useHandlers */ "./node_modules/@enact/core/useHandlers/useHandlers.js"));

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "./node_modules/classnames/index.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js"));

var _useSpottable = __webpack_require__(/*! ./useSpottable */ "./node_modules/@enact/spotlight/Spottable/useSpottable.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["className", "disabled", "handleForceUpdate", "onSpotlightDisappear", "onSpotlightDown", "onSpotlightLeft", "onSpotlightRight", "onSpotlightUp", "selectionKeys", "spotlightDisabled", "spotlightId", "spotRef"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var forwardMouseDown = (0, _handle.forward)('onMouseDown'),
    forwardMouseUp = (0, _handle.forward)('onMouseUp'),
    forwardClick = (0, _handle.forward)('onClick'),
    forwardBlur = (0, _handle.forward)('onBlur'),
    forwardFocus = (0, _handle.forward)('onFocus'),
    forwardMouseEnter = (0, _handle.forward)('onMouseEnter'),
    forwardMouseLeave = (0, _handle.forward)('onMouseLeave'),
    forwardKeyDown = (0, _handle.forward)('onKeyDown'),
    forwardKeyUp = (0, _handle.forward)('onKeyUp');

var callContext = function callContext(name) {
  return function (ev, props, context) {
    return context[name](ev, props);
  };
};

var spotHandlers = {
  onKeyDown: (0, _handle["default"])(forwardKeyDown, callContext('onKeyDown'), forwardMouseDown),
  onKeyUp: (0, _handle["default"])(forwardKeyUp, callContext('onKeyUp'), forwardMouseUp, forwardClick),
  onBlur: (0, _handle["default"])(callContext('onBlur'), forwardBlur),
  onFocus: (0, _handle["default"])(callContext('onFocus'), forwardFocus),
  onMouseEnter: (0, _handle["default"])((0, _handle.returnsTrue)(function (ev, props) {
    return forwardMouseEnter(ev, props);
  }), callContext('onMouseEnter')),
  onMouseLeave: (0, _handle["default"])((0, _handle.returnsTrue)(function (ev, props) {
    return forwardMouseLeave(ev, props);
  }), callContext('onMouseLeave'))
};
/**
 * Default configuration for Spottable
 *
 * @hocconfig
 * @memberof spotlight/Spottable.Spottable
 */

var defaultConfig = {
  /**
   * Whether or not the component should emulate mouse events as a response
   * to Spotlight 5-way events.
   *
   * @type {Boolean}
   * @default true
   * @public
   * @memberof spotlight/Spottable.Spottable.defaultConfig
   */
  emulateMouse: true
};
/**
 * Constructs a Spotlight 5-way navigation-enabled higher-order component.
 *
 * Note: This HoC passes a number of props to the wrapped component that should be passed to the
 * main DOM node.
 *
 * Example:
 * ```
 *	const Component = ({myProp, ...rest}) => (
 *		<div {...rest}>{myProp}</div>
 *	);
 *	...
 *	const SpottableComponent = Spottable(Component);
 * ```
 * @class Spottable
 * @memberof spotlight/Spottable
 * @param  {Object} defaultConfig Set of default configuration parameters
 * @param  {Function} Wrapped Component to wrap
 *
 * @hoc
 * @returns {Function} Spottable
 */

var Spottable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var emulateMouse = config.emulateMouse;

  function SpottableBase(props) {
    var className = props.className,
        disabled = props.disabled,
        handleForceUpdate = props.handleForceUpdate,
        onSpotlightDisappear = props.onSpotlightDisappear,
        onSpotlightDown = props.onSpotlightDown,
        onSpotlightLeft = props.onSpotlightLeft,
        onSpotlightRight = props.onSpotlightRight,
        onSpotlightUp = props.onSpotlightUp,
        selectionKeys = props.selectionKeys,
        spotlightDisabled = props.spotlightDisabled,
        spotlightId = props.spotlightId,
        spotRef = props.spotRef,
        rest = _objectWithoutProperties(props, _excluded);

    var spot = (0, _useSpottable.useSpottable)({
      disabled: disabled,
      emulateMouse: emulateMouse,
      handleForceUpdate: handleForceUpdate,
      onSelectionCancel: rest.onMouseUp,
      onSpotlightDisappear: onSpotlightDisappear,
      onSpotlightDown: onSpotlightDown,
      onSpotlightLeft: onSpotlightLeft,
      onSpotlightRight: onSpotlightRight,
      onSpotlightUp: onSpotlightUp,
      selectionKeys: selectionKeys,
      spotlightDisabled: spotlightDisabled,
      spotlightId: spotlightId,
      spotRef: spotRef
    });
    var tabIndex = rest.tabIndex;

    if (tabIndex == null) {
      tabIndex = -1;
    }

    rest.tabIndex = tabIndex;
    var handlers = (0, _useHandlers["default"])(spotHandlers, rest, spot);
    delete rest.spotlightId;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), spot.attributes), handlers), {}, {
      className: (0, _classnames["default"])(className, spot.className),
      disabled: disabled
    }));
  }

  SpottableBase.propTypes =
  /** @lends spotlight/Spottable.Spottable.prototype */
  {
    /**
     * Whether or not the component is in a disabled state.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes2["default"].bool,

    /**
     * The handler to force update the component.
     *
     * @type {Function}
     * @public
     */
    handleForceUpdate: _propTypes2["default"].func,

    /**
     * The handler to run when the component is removed while retaining focus.
     *
     * @type {Function}
     * @param {Object} event
     * @public
     */
    onSpotlightDisappear: _propTypes2["default"].func,

    /**
     * The handler to run when the 5-way down key is pressed.
     *
     * @type {Function}
     * @param {Object} event
     * @public
     */
    onSpotlightDown: _propTypes2["default"].func,

    /**
     * The handler to run when the 5-way left key is pressed.
     *
     * @type {Function}
     * @param {Object} event
     * @public
     */
    onSpotlightLeft: _propTypes2["default"].func,

    /**
     * The handler to run when the 5-way right key is pressed.
     *
     * @type {Function}
     * @param {Object} event
     * @public
     */
    onSpotlightRight: _propTypes2["default"].func,

    /**
     * The handler to run when the 5-way up key is pressed.
     *
     * @type {Function}
     * @param {Object} event
     * @public
     */
    onSpotlightUp: _propTypes2["default"].func,

    /**
     * An array of numbers representing keyCodes that should trigger mouse event
     * emulation when `emulateMouse` is `true`. If a keyCode equals a directional
     * key, then default 5-way navigation will be prevented when that key is pressed.
     *
     * @type {Number[]}
     * @default [13, 16777221]
     * @public
     */
    selectionKeys: _propTypes2["default"].arrayOf(_propTypes2["default"].number),

    /**
     * When `true`, the component cannot be navigated using spotlight.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    spotlightDisabled: _propTypes2["default"].bool,

    /**
     * Used to identify this component within the Spotlight system
     *
     * @type {String}
     * @public
     */
    spotlightId: _propTypes2["default"].string,

    /*
     * Called with a reference to [component]{@link spotlight/Spottable.Spottable#component}
     *
     * @type {Object|Function}
     * @private
     */
    spotRef: _propTypes["default"].ref,

    /**
     * The tabIndex of the component. This value will default to -1 if left
     * unset and the control is spottable.
     *
     * @type {Number}
     * @public
     */
    tabIndex: _propTypes2["default"].number
  }; // eslint-disable-next-line no-shadow

  var Spottable = /*#__PURE__*/function (_Component) {
    _inherits(Spottable, _Component);

    var _super = _createSuper(Spottable);

    function Spottable() {
      var _this;

      _classCallCheck(this, Spottable);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _this.handleForceUpdate = function () {
        _this.forceUpdate();
      };

      return _this;
    }

    _createClass(Spottable, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        // eslint-disable-next-line react/no-find-dom-node
        this.node = _reactDom["default"].findDOMNode(this);
        this.forceUpdate();
      }
    }, {
      key: "spotRef",
      get: function get() {
        return this.node;
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableBase, _objectSpread(_objectSpread({}, this.props), {}, {
          handleForceUpdate: this.handleForceUpdate,
          spotRef: this.spotRef
        }));
      }
    }]);

    return Spottable;
  }(_react.Component);

  return Spottable;
});
exports.Spottable = Spottable;
var _default = Spottable;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/spotlight/Spottable/SpottableCore.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/spotlight/Spottable/SpottableCore.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.spottableClass = exports["default"] = exports.SpottableCore = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _keymap = __webpack_require__(/*! @enact/core/keymap */ "./node_modules/@enact/core/keymap/index.js");

var _container = __webpack_require__(/*! ../src/container */ "./node_modules/@enact/spotlight/src/container.js");

var _spotlight = __webpack_require__(/*! ../src/spotlight */ "./node_modules/@enact/spotlight/src/spotlight.js");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var REMOTE_OK_KEY = 16777221;
/**
 * The class name for spottable components. In general, you do not need to directly access this class
 *
 * @memberof spotlight/Spottable
 * @public
 */

var spottableClass = 'spottable';
exports.spottableClass = spottableClass;

var isKeyboardAccessible = function isKeyboardAccessible(node) {
  if (!node) return false;
  var name = node.nodeName.toUpperCase();
  var type = node.type ? node.type.toUpperCase() : null;
  return name === 'BUTTON' || name === 'A' || name === 'INPUT' && (type === 'BUTTON' || type === 'CHECKBOX' || type === 'IMAGE' || type === 'RADIO' || type === 'RESET' || type === 'SUBMIT');
};

var isSpottable = function isSpottable(props) {
  return !props.spotlightDisabled;
}; // Last instance of spottable to be focused


var lastSelectTarget = null; // Should we prevent select being passed through

var selectCancelled = false;

var SpottableCore = /*#__PURE__*/function () {
  function SpottableCore(_ref) {
    var _this = this;

    var emulateMouse = _ref.emulateMouse;

    _classCallCheck(this, SpottableCore);

    this.didUpdate = function () {
      _this.isFocused = _this.node && _this.node === _spotlight.Spotlight.getCurrent(); // if the component is focused and became disabled

      if (_this.isFocused && _this.props.disabled && lastSelectTarget === _this && !selectCancelled) {
        selectCancelled = true;
        (0, _handle.forwardCustom)('onSelectionCancel')(null, _this.props);
      } // if the component became enabled, notify spotlight to enable restoring "lost" focus


      if (isSpottable(_this.props) && _this.context.prevSpotlightDisabled && !_spotlight.Spotlight.isPaused()) {
        if (_spotlight.Spotlight.getPointerMode()) {
          if (_this.isHovered) {
            _spotlight.Spotlight.setPointerMode(false);

            _spotlight.Spotlight.focus(_this.node);

            _spotlight.Spotlight.setPointerMode(true);
          }
        } else if (!_spotlight.Spotlight.getCurrent()) {
          var containers = (0, _container.getContainersForNode)(_this.node);

          var containerId = _spotlight.Spotlight.getActiveContainer();

          if (containers.indexOf(containerId) >= 0) {
            _spotlight.Spotlight.focus(containerId);
          }
        }
      }
    };

    this.forwardSpotlightEvents = function (ev, _ref2) {
      var onSpotlightDown = _ref2.onSpotlightDown,
          onSpotlightLeft = _ref2.onSpotlightLeft,
          onSpotlightRight = _ref2.onSpotlightRight,
          onSpotlightUp = _ref2.onSpotlightUp;
      var keyCode = ev.keyCode;

      if (onSpotlightDown && (0, _keymap.is)('down', keyCode)) {
        onSpotlightDown(ev);
      } else if (onSpotlightLeft && (0, _keymap.is)('left', keyCode)) {
        onSpotlightLeft(ev);
      } else if (onSpotlightRight && (0, _keymap.is)('right', keyCode)) {
        onSpotlightRight(ev);
      } else if (onSpotlightUp && (0, _keymap.is)('up', keyCode)) {
        onSpotlightUp(ev);
      }

      return true;
    };

    this.forwardAndResetLastSelectTarget = function (ev, props) {
      var keyCode = ev.keyCode;
      var selectionKeys = props.selectionKeys;
      var key = selectionKeys.find(function (value) {
        return keyCode === value;
      });
      var notPrevented = !ev.defaultPrevented; // bail early for non-selection keyup to avoid clearing lastSelectTarget prematurely

      if (!key && (!(0, _keymap.is)('enter', keyCode) || !(0, _spotlight.getDirection)(keyCode))) {
        return notPrevented;
      }

      var allow = lastSelectTarget === _this;
      selectCancelled = false;
      lastSelectTarget = null;
      return notPrevented && allow;
    };

    this.shouldEmulateMouse = function (ev, props) {
      if (!_this.config.emulateMouse) {
        return;
      }

      var currentTarget = ev.currentTarget,
          repeat = ev.repeat,
          type = ev.type,
          which = ev.which;
      var selectionKeys = props.selectionKeys;
      var keyboardAccessible = isKeyboardAccessible(currentTarget);
      var keyCode = selectionKeys.find(function (value) {
        return (// emulate mouse events for any remote okay button event
          which === REMOTE_OK_KEY || // or a non-keypress selection event or any selection event on a non-keyboard accessible
          // control
          which === value && (type !== 'keypress' || !keyboardAccessible)
        );
      });

      if ((0, _spotlight.getDirection)(keyCode)) {
        (0, _handle.preventDefault)(ev);
        (0, _handle.stop)(ev);
      } else if (keyCode && keyboardAccessible) {
        (0, _handle.preventDefault)(ev);
      }

      return keyCode && !repeat;
    };

    this.isActionable = function (ev, props) {
      return isSpottable(props);
    };

    this.handleSelect = function (_ref3, props) {
      var which = _ref3.which;
      var selectionKeys = props.selectionKeys; // Only apply accelerator if handling a selection key

      if (selectionKeys.find(function (value) {
        return which === value;
      })) {
        if (selectCancelled || lastSelectTarget && lastSelectTarget !== _this) {
          return false;
        }

        lastSelectTarget = _this;
      }

      return true;
    };

    this.handle = _handle.handle.bind(this);
    this.handleKeyDown = this.handle(function (ev) {
      return !ev.defaultPrevented;
    }, this.forwardSpotlightEvents, this.isActionable, this.handleSelect, this.shouldEmulateMouse // `forwardMouseDown` is usually called out of the useSpottable if the `this.shouldEmulateMouse` returns true.
    );
    this.handleKeyUp = this.handle(this.forwardAndResetLastSelectTarget, this.isActionable, this.shouldEmulateMouse // `forwardMouseUp` and `forwardClick` are usually called out of the useSpottable if the `this.shouldEmulateMouse` returns true.
    );

    this.handleFocus = function (ev) {
      if (_this.props.spotlightDisabled) {
        _this.shouldPreventBlur = true;
        ev.target.blur();
        _this.shouldPreventBlur = false;
        return;
      }

      if (ev.currentTarget === ev.target) {
        _this.isFocused = true;
      }

      if (_spotlight.Spotlight.isMuted(ev.target)) {
        ev.stopPropagation();
        return false;
      }

      return true;
    };

    this.handleBlur = function (ev) {
      if (_this.shouldPreventBlur) return false;

      if (ev.currentTarget === ev.target) {
        _this.isFocused = false;

        if (_this.isFocusedWhenDisabled) {
          _this.isFocusedWhenDisabled = false; // We only need to trigger a rerender if a focused item becomes disabled and still needs its focus.
          // Once it blurs we need to rerender to remove the spottable class so it will not spot again.
          // The reason we don't use state is for performance reasons to avoid updates.

          _this.props.handleForceUpdate();
        }
      }

      if (_spotlight.Spotlight.isMuted(ev.target)) {
        ev.stopPropagation();
        return false;
      }

      return true;
    };

    this.handleEnter = function () {
      _this.isHovered = true;
    };

    this.handleLeave = function () {
      _this.isHovered = false;
    };

    this.config = {
      emulateMouse: emulateMouse
    };
    this.props = {};
    this.context = {};
    this.isFocused = false;
    this.isFocusedWhenDisabled = false;
    this.isHovered = false;
    this.spottableClass = null; // Used to indicate that we want to stop propagation on blur events that occur as a
    // result of this component imperatively blurring itself on focus when spotlightDisabled

    this.shouldPreventBlur = false;
  }

  _createClass(SpottableCore, [{
    key: "setPropsAndContext",
    value: function setPropsAndContext(props, context) {
      this.props = props;
      this.context.prevSpotlightDisabled = context.prevSpotlightDisabled;
      this.isFocusedWhenDisabled = this.isFocused && props.spotlightDisabled;
      this.spottableClass = this.isFocusedWhenDisabled || isSpottable(props) ? spottableClass : null;
    }
  }, {
    key: "load",
    value: function load() {
      var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      this.node = node;
    }
  }, {
    key: "unload",
    value: function unload() {
      if (this.isFocused) {
        (0, _handle.forwardCustom)('onSpotlightDisappear')(null, this.props);
      }

      if (lastSelectTarget === this) {
        lastSelectTarget = null;
      }
    }
  }]);

  return SpottableCore;
}();

exports.SpottableCore = SpottableCore;
var _default = SpottableCore;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/spotlight/Spottable/useSpottable.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@enact/spotlight/Spottable/useSpottable.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
Object.defineProperty(exports, "spottableClass", ({
  enumerable: true,
  get: function get() {
    return _SpottableCore.spottableClass;
  }
}));
exports.useSpottable = void 0;

var _useClass = _interopRequireDefault(__webpack_require__(/*! @enact/core/useClass */ "./node_modules/@enact/core/useClass/useClass.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _SpottableCore = __webpack_require__(/*! ./SpottableCore */ "./node_modules/@enact/spotlight/Spottable/SpottableCore.js");

var _excluded = ["spotRef", "emulateMouse", "selectionKeys", "spotlightDisabled"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var ENTER_KEY = 13;
var REMOTE_OK_KEY = 16777221;
/**
 * Configuration for `useSpottable`
 *
 * @typedef {Object} useSpotConfig
 * @memberof ui/Spottable
 * @property {Boolean}  disabled             Whether or not the component is in a disabled state.
 * @property {Boolean}  emulateMouse         Whether or not the component should emulate mouse events as a response to Spotlight 5-way events.
 * @property {Function} handleForceUpdate    It is called if the component needs to be force updated.
 * @property {Function} onSelectionCancel    It is called if the component is focused and became disabled.
 * @property {Function} onSpotlightDisappear The handler to run when the component is removed while retaining focus.
 * @property {Function} onSpotlightDown      The handler to run when the 5-way down key is pressed.
 * @property {Function} onSpotlightLeft      The handler to run when the 5-way left key is pressed.
 * @property {Function} onSpotlightRight     The handler to run when the 5-way right key is pressed.
 * @property {Function} onSpotlightUp        The handler to run when the 5-way up key is pressed.
 * @property {Number[]} selectionKeys        An array of numbers representing keyCodes that should trigger mouse event
 *                                           emulation when `emulateMouse` is `true`. If a keyCode equals a directional
 *                                           key, then default 5-way navigation will be prevented when that key is pressed.
 * @property {Boolean}  spotlightDisabled    When `true`, the component cannot be navigated using spotlight.
 * @private
 */

/**
 * Object returned by `useSpottable`
 *
 * @typedef {Object} useSpotInterface
 * @memberof ui/Spottable
 * @property {Boolean}  [blur]       Handle when blurred.
 * @property {Boolean}  [className]  The class being spottable and focused when disabled.
 * @property {Boolean}  [focus]      Handle when focused.
 * @property {Boolean}  [keyDown]    Handle to run when the 5-way up key is pressed.
 * @property {Boolean}  [keyUp]      Handle to run when the 5-way up key is released.
 * @property {Boolean}  [mouseEnter] Handle when mouse enters.
 * @property {Boolean}  [mouseLeave] Handle when mouse leaves.
 * @property {Boolean}  [ref]        The ref for the target node.
 * @private
 */

/**
 * Manages a boolean state value.
 *
 * The value may either be Spotd via the `onSpot` or explicitly set via `onActivate` and
 * `onDeactivate`. The initial value can be set using the `defaultSelected` option.
 *
 * @param {useSpotConfig} config Configuration options
 * @returns {useSpotInterface}
 * @private
 */

var useSpottable = function useSpottable() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      spotRef = _ref.spotRef,
      emulateMouse = _ref.emulateMouse,
      _ref$selectionKeys = _ref.selectionKeys,
      selectionKeys = _ref$selectionKeys === void 0 ? [ENTER_KEY, REMOTE_OK_KEY] : _ref$selectionKeys,
      spotlightDisabled = _ref.spotlightDisabled,
      props = _objectWithoutProperties(_ref, _excluded);

  var hook = (0, _useClass["default"])(_SpottableCore.SpottableCore, {
    emulateMouse: emulateMouse
  });
  var context = (0, _react.useRef)({
    prevSpotlightDisabled: spotlightDisabled,
    spotlightDisabled: spotlightDisabled
  });
  context.current = {
    prevSpotlightDisabled: context.current.spotlightDisabled,
    spotlightDisabled: spotlightDisabled
  };
  var attributes = {};

  if (props.spotlightId) {
    attributes['data-spotlight-id'] = props.spotlightId;
  }

  hook.setPropsAndContext(_objectSpread({
    selectionKeys: selectionKeys,
    spotlightDisabled: spotlightDisabled
  }, props), context.current);
  (0, _react.useLayoutEffect)(function () {
    hook.load(spotRef || null);
    return function () {
      hook.unload();
    };
  }, [spotRef]); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useLayoutEffect)(hook.didUpdate); // eslint-disable-line react-hooks/exhaustive-deps

  return {
    attributes: attributes,
    className: hook.spottableClass || null,
    onBlur: hook.handleBlur,
    onFocus: hook.handleFocus,
    onKeyDown: hook.handleKeyDown,
    onKeyUp: hook.handleKeyUp,
    onMouseEnter: hook.handleEnter,
    onMouseLeave: hook.handleLeave
  };
};

exports.useSpottable = useSpottable;
var _default = useSpottable;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/spotlight/src/container.js":
/*!********************************************************!*\
  !*** ./node_modules/@enact/spotlight/src/container.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getContainerConfig = exports.getAllContainerIds = exports.containerAttribute = exports.configureDefaults = exports.configureContainer = exports.addContainer = void 0;
exports.getContainerDefaultElement = getContainerDefaultElement;
exports.getContainerFocusTarget = getContainerFocusTarget;
exports.getContainerId = void 0;
exports.getContainerLastFocusedElement = getContainerLastFocusedElement;
exports.getContainerNavigableElements = getContainerNavigableElements;
exports.getContainerNode = void 0;
exports.getContainerPreviousTarget = getContainerPreviousTarget;
exports.getContainersForNode = getContainersForNode;
exports.getDeepSpottableDescendants = void 0;
exports.getDefaultContainer = getDefaultContainer;
exports.getLastContainer = getLastContainer;
exports.getNavigableContainersForNode = getNavigableContainersForNode;
exports.isNavigable = exports.isContainer5WayHoldable = exports.isContainer = exports.getSpottableDescendants = void 0;
exports.isWithinOverflowContainer = isWithinOverflowContainer;
exports.mayActivateContainer = mayActivateContainer;
exports.notifyEnterContainer = notifyEnterContainer;
exports.notifyLeaveContainer = notifyLeaveContainer;
exports.notifyLeaveContainerFail = notifyLeaveContainerFail;
exports.rootContainerId = exports.removeContainer = exports.removeAllContainers = void 0;
exports.setContainerLastFocusedElement = setContainerLastFocusedElement;
exports.setContainerPreviousTarget = setContainerPreviousTarget;
exports.setDefaultContainer = setDefaultContainer;
exports.setLastContainer = setLastContainer;
exports.setLastContainerFromTarget = setLastContainerFromTarget;
exports.unmountContainer = unmountContainer;

var _and = _interopRequireDefault(__webpack_require__(/*! ramda/src/and */ "./node_modules/ramda/src/and.js"));

var _concat = _interopRequireDefault(__webpack_require__(/*! ramda/src/concat */ "./node_modules/ramda/src/concat.js"));

var _snapshot = __webpack_require__(/*! @enact/core/snapshot */ "./node_modules/@enact/core/snapshot/snapshot.js");

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _intersection = _interopRequireDefault(__webpack_require__(/*! ramda/src/intersection */ "./node_modules/ramda/src/intersection.js"));

var _last = _interopRequireDefault(__webpack_require__(/*! ramda/src/last */ "./node_modules/ramda/src/last.js"));

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@enact/spotlight/src/utils.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var containerAttribute = 'data-spotlight-id';
exports.containerAttribute = containerAttribute;
var containerConfigs = new Map();
var containerKey = 'spotlightId';
var disabledKey = 'spotlightContainerDisabled';
var containerPrefix = 'container-';
var containerSelector = '[data-spotlight-container]';
var rootContainerId = 'spotlightRootDecorator';
exports.rootContainerId = rootContainerId;
var reverseDirections = {
  'left': 'right',
  'up': 'down',
  'right': 'left',
  'down': 'up'
}; // Incrementer for container IDs

var _ids = 0;
var _defaultContainerId = '';
var _lastContainerId = ''; // Note: an <extSelector> can be one of following types:
// - a valid selector string for "querySelectorAll"
// - a NodeList or an array containing DOM elements
// - a single DOM element
// - a string "@<containerId>" to indicate the specified container
// - a string "@" to indicate the default container

var GlobalConfig = {
  // set to false for unmounted containers to omit them from searches
  active: true,
  continue5WayHold: false,
  defaultElement: '',
  // <extSelector> except "@" syntax.
  enterTo: '',
  // '', 'last-focused', 'default-element'
  lastFocusedElement: null,
  lastFocusedKey: null,
  lastFocusedPersist: function lastFocusedPersist(node, all) {
    var container = typeof node === 'string';
    return {
      container: container,
      element: !container,
      key: container ? node : all.indexOf(node)
    };
  },
  lastFocusedRestore: function lastFocusedRestore(_ref, all) {
    var container = _ref.container,
        key = _ref.key;
    return container ? key : all[key];
  },
  leaveFor: null,
  // {left: <extSelector>, right: <extSelector>, up: <extSelector>, down: <extSelector>}
  navigableFilter: null,
  obliqueMultiplier: 5,
  onEnterContainer: null,
  // @private - notify the container when entering via 5-way
  onLeaveContainer: null,
  // @private - notify the container when leaving via 5-way
  onLeaveContainerFail: null,
  // @private - notify the container when failing to leave via 5-way
  overflow: false,
  partition: false,
  // use the container bounds for partitioning when leaving
  rememberSource: false,
  restrict: 'self-first',
  // 'self-first', 'self-only', 'none'
  selector: '',
  // can be a valid <extSelector> except "@" syntax.
  selectorDisabled: false,
  straightMultiplier: 1,
  straightOnly: false,
  straightOverlapThreshold: 0.5,
  tabIndexIgnoreList: 'a, input, select, textarea, button, iframe, [contentEditable=true]'
};
/**
 * Calculates nodes within `node` that match `includeSelector` and do not match `excludeSelector`
 *
 * @param   {Node}    node             DOM Node to query
 * @param   {String}  includeSelector  CSS selector of nodes to include
 * @param   {String}  excludeSelector  CSS selector for nodes to exclude
 *
 * @returns {Node[]}                   Array of nodes
 * @memberof spotlight/container
 * @private
 */

var querySelector = function querySelector(node, includeSelector, excludeSelector) {
  var include = new Set(node.querySelectorAll(includeSelector));
  var exclude = node.querySelectorAll(excludeSelector);

  for (var i = 0; i < exclude.length; i++) {
    include["delete"](exclude[i]);
  }

  return Array.from(include);
};
/**
 * Determines if `node` is a spotlight container
 *
 * @param   {Node}     node   Node to check
 *
 * @returns {Boolean}        `true` if `node` is a spotlight container
 * @memberof spotlight/container
 * @private
 */


var isContainerNode = function isContainerNode(node) {
  return node && node.dataset && 'spotlightContainer' in node.dataset;
};
/**
 * Walks up the node hierarchy calling `fn` on each node that is a container
 *
 * @param   {Node}     node  Node from which to start the search
 * @param   {Function} fn    Called once for each container with the container node as the first
 *                           argument. The return value is accumulated in the array returned by
 *                           `mapContainers`
 *
 * @returns {Array}          Array of values returned by `fn` in order of outermost container to
 *                           innermost container
 * @memberof spotlight/container
 * @private
 */


var mapContainers = function mapContainers(node, fn) {
  var result = [];

  while (node && node !== document) {
    if (isContainerNode(node)) {
      result.unshift(fn(node));
    }

    node = node.parentNode;
  }

  return result;
};
/**
 * Returns the container config for `containerId`
 *
 * @param   {String}  id  Container ID
 *
 * @returns {Object}      Container config
 * @memberof spotlight/container
 * @private
 */


var getContainerConfig = function getContainerConfig(id) {
  return containerConfigs.get(id);
};
/**
 * Determines if node or a container id represents a spotlight container
 *
 * @param   {Node|String}  nodeOrId  Node or container ID
 *
 * @returns {Boolean}                `true` if `nodeOrId` represents a spotlight container
 * @memberof spotlight/container
 * @private
 */


exports.getContainerConfig = getContainerConfig;

var isContainer = function isContainer(nodeOrId) {
  if (typeof nodeOrId === 'string') {
    return containerConfigs.has(nodeOrId);
  }

  return isContainerNode(nodeOrId);
};
/**
 * Determines if any of the containers at or above `node` are disabled and, if so, returns `false`.
 *
 * @param   {Node}     node  Spottable node or spotlight container
 *
 * @returns {Boolean}        `true` if all container ancestors are enabled
 * @memberof spotlight/container
 * @private
 */


exports.isContainer = isContainer;

var isContainerEnabled = function isContainerEnabled(node) {
  return mapContainers(node, function (container) {
    return container.dataset[disabledKey] !== 'true';
  }).reduce(_and["default"], true);
};
/**
 * Returns the container ID for `node`
 *
 * @param   {Node}    node  Container Node
 *
 * @returns {String}        Container ID
 * @memberof spotlight/container
 * @private
 */


var getContainerId = function getContainerId(node) {
  return node.dataset[containerKey];
};
/**
 * Generates a CSS selector string for a current container if `node` is a container
 *
 * @param   {Node}    node  Container Node
 *
 * @returns {String}        CSS selector
 * @memberof spotlight/container
 * @private
 */


exports.getContainerId = getContainerId;

var getContainerSelector = function getContainerSelector(node) {
  if (isContainerNode(node)) {
    return "[".concat(containerAttribute, "=\"").concat(getContainerId(node), "\"]");
  }

  return '';
};
/**
 * Generates a CSS selector string for containers within `node` if it is a container
 *
 * @param   {Node}    node  Container Node
 *
 * @returns {String}        CSS selector
 * @memberof spotlight/container
 * @private
 */


var getSubContainerSelector = function getSubContainerSelector(node) {
  if (isContainerNode(node)) {
    return "".concat(getContainerSelector(node), " ").concat(containerSelector);
  }

  return containerSelector;
};
/**
 * Returns the node for a container
 *
 * @param   {String}  containerId  ID of container
 *
 * @returns {Node}                 DOM node of the container
 * @memberof spotlight/container
 * @private
 */


var getContainerNode = function getContainerNode(containerId) {
  if (!containerId) {
    return null;
  } else if (containerId === rootContainerId) {
    return document;
  }

  return document.querySelector("[".concat(containerAttribute, "=\"").concat(containerId, "\"]"));
};
/**
 * Calls the `navigableFilter` function for the container if defined.
 *
 * @param   {Node}    node         DOM node to check if it is navigable
 * @param   {String}  containerId  ID of container
 *
 * @returns {Boolean}              `true` if it passes the `navigableFilter` method or if that
 *                                  method is not defined for the container
 * @memberof spotlight/container
 * @private
 */


exports.getContainerNode = getContainerNode;

var navigableFilter = function navigableFilter(node, containerId) {
  var nodeStyle = node && (0, _snapshot.isWindowReady)() && window.getComputedStyle(node);
  var config = getContainerConfig(containerId);

  if (!nodeStyle || nodeStyle.display === 'none' || nodeStyle.visibility === 'hidden') {
    return false;
  }

  if (config && typeof config.navigableFilter === 'function') {
    if (config.navigableFilter(node, containerId) === false) {
      return false;
    }
  }

  return true;
};
/**
 * Determines nodes that are owned by `node` based on `aria-owns`.
 *
 * @param   {Node}   node          Owner
 *
 * @returns {Node[]}               Array of owned nodes
 * @memberof spotlight/container
 * @private
 */


var getOwnedNodes = function getOwnedNodes(node, selector) {
  // if node is document, it will not have getAttribute and therefore can't have aria-owns
  var owns = node && node.getAttribute && node.getAttribute('aria-owns');

  if (owns) {
    var ids = owns.split(' ');
    return ids.map(function (id) {
      return id && document.getElementById(id);
    }).filter(Boolean).filter(function (n) {
      return isContainerNode(n) || (0, _utils.matchSelector)(selector, n);
    });
  }

  return [];
};
/**
 * Determines all spottable elements and containers that are directly contained by the container
 * identified by `containerId` and no other subcontainers.
 *
 * @param   {String}  containerId  ID of container
 *
 * @returns {Node[]}               Array of spottable elements and containers.
 * @memberof spotlight/container
 * @public
 */


var getSpottableDescendants = function getSpottableDescendants(containerId) {
  var node = getContainerNode(containerId); // if it's falsy or is a disabled container, return an empty set

  if (!node || isContainerNode(node) && !isContainerEnabled(node)) {
    return [];
  }

  var _ref2 = getContainerConfig(containerId) || {},
      selector = _ref2.selector,
      selectorDisabled = _ref2.selectorDisabled;

  if (!selector || selectorDisabled) {
    return [];
  }

  var spottableSelector = selector;
  var subContainerSelector = getSubContainerSelector(node);
  var candidates = querySelector(node, "".concat(spottableSelector, ", ").concat(getContainerSelector(node), " ").concat(containerSelector, ":not([data-spotlight-container-disabled=\"true\"])"), "".concat(subContainerSelector, " ").concat(spottableSelector, ", ").concat(subContainerSelector, " ").concat(containerSelector));
  candidates.push.apply(candidates, _toConsumableArray(getOwnedNodes(node, selector)));
  return candidates.filter(function (n) {
    return navigableFilter(n, containerId);
  });
};
/**
 * Recursively get spottable descendants by including elements within sub-containers that do not
 * have `enterTo` configured
 *
 * @param   {String}    containerId          ID of container
 * @param   {String[]}  [excludedContainers] IDs of containers to exclude from result set
 *
 * @returns {Node[]}                         Array of spottable elements and containers
 * @memberof spotlight/container
 * @private
 */


exports.getSpottableDescendants = getSpottableDescendants;

var getDeepSpottableDescendants = function getDeepSpottableDescendants(containerId, excludedContainers) {
  return getSpottableDescendants(containerId).map(function (n) {
    if (isContainer(n)) {
      var id = getContainerId(n);
      var config = getContainerConfig(id);

      if (excludedContainers && excludedContainers.indexOf(id) >= 0) {
        return [];
      } else if (config && !config.enterTo) {
        return getDeepSpottableDescendants(id, excludedContainers);
      }
    }

    return [n];
  }).reduce(_concat["default"], []);
};
/**
 * Determines if a container allows 5-way key hold to be preserved or not.
 *
 * @param {String} containerId Container Id
 * @returns {Boolean} `true` if a container is 5 way holdable
 * @memberof spotlight/container
 * @private
 */


exports.getDeepSpottableDescendants = getDeepSpottableDescendants;

var isContainer5WayHoldable = function isContainer5WayHoldable(containerId) {
  var config = getContainerConfig(containerId);
  return config && config.continue5WayHold || false;
};
/**
 * Returns an array of ids for containers that wrap the element, in order of outer-to-inner, with
 * the last array item being the immediate container id of the element.
 *
 * @param   {Node}      node  Node from which to start the search
 *
 * @returns {String[]}        Array on container IDs
 * @memberof spotlight/container
 * @private
 */


exports.isContainer5WayHoldable = isContainer5WayHoldable;

function getContainersForNode(node) {
  var containers = mapContainers(node, getContainerId);
  containers.unshift(rootContainerId);
  return containers;
}
/**
 * Returns an array of ids for containers that wrap the element, in order of outer-to-inner, with
 * the last array item being the immediate container id of the element. The container ids are
 * limited to only those between `node` and the first restrict="self-only" container.
 *
 * @param   {Node}      node  Node from which to start the search
 *
 * @returns {String[]}        Array on container IDs
 * @memberof spotlight/container
 * @private
 */


function getNavigableContainersForNode(node) {
  var containerIds = getContainersForNode(node); // find first self-only container id

  var selfOnlyIndex = containerIds.map(getContainerConfig).filter(function (config) {
    return config != null;
  }).reduceRight(function (index, config, i) {
    if (index === -1 && config.restrict === 'self-only') {
      return i;
    }

    return index;
  }, -1); // if we found one (and it's not the root), slice those off and return

  if (selfOnlyIndex > 0) {
    return containerIds.slice(selfOnlyIndex);
  }

  return containerIds;
}
/**
 * Generates a new unique identifier for a container
 *
 * @returns {String} Container ID
 * @memberof spotlight/container
 * @private
 */


function generateId() {
  var id;
  /* eslint no-constant-condition: ["error", { "checkLoops": false }] */

  while (true) {
    id = containerPrefix + String(++_ids);

    if (!isContainer(id)) {
      break;
    }
  }

  return id;
}
/**
 * Merges two container configurations while only allowing keys from `updated` which are defined in
 * `GlobalConfig`
 *
 * @param   {Object}  current  Current container configuration
 * @param   {Object}  updated  Updated configuration which may only be a partial configuration
 *
 * @returns {Object}           Merged configuration
 * @memberof spotlight/container
 * @private
 */


var mergeConfig = function mergeConfig(current, updated) {
  if (!updated) return current;
  var cfg = null;
  Object.keys(updated).forEach(function (key) {
    if (key in GlobalConfig && current[key] !== updated[key]) {
      if (cfg == null) {
        cfg = Object.assign({}, current);
      }

      cfg[key] = updated[key];
    }
  });
  return cfg || current;
};
/**
 * Adds or updates a container. When a container id is not specified, it will be generated.
 *
 * @param   {String|Object}  containerIdOrConfig  Either a string container id or a configuration
 *                                                object.
 * @param   {Object}         [config]             Container configuration when `containerIdOrConfig`
 *                                                is a string. When omitted, the container will have
 *                                                the default `GlobalConfig`.
 *
 * @returns {String}                              The container id
 * @memberof spotlight/container
 * @public
 */


var configureContainer = function configureContainer() {
  var containerId, config;

  if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'object') {
    config = arguments.length <= 0 ? undefined : arguments[0];
    containerId = config.id;
  } else if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {
    containerId = arguments.length <= 0 ? undefined : arguments[0];

    if (typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'object') {
      config = arguments.length <= 1 ? undefined : arguments[1];
    }
  }

  if (!containerId) {
    containerId = generateId();
  }

  config = mergeConfig(containerConfigs.get(containerId) || _objectSpread({}, GlobalConfig), config);
  containerConfigs.set(containerId, config);
  return containerId;
};
/**
 * Adds a container and marks it active. When a container id is not specified, it will be generated.
 *
 * @param   {String|Object}  containerIdOrConfig  Either a string container id or a configuration
 *                                                object.
 * @param   {Object}         [config]             Container configuration when `containerIdOrConfig`
 *                                                is a string. When omitted, the container will have
 *                                                the default `GlobalConfig`.
 *
 * @returns {String}                              The container id
 * @memberof spotlight/container
 * @public
 */


exports.configureContainer = configureContainer;

var addContainer = function addContainer() {
  var containerId = configureContainer.apply(void 0, arguments);
  var config = getContainerConfig(containerId);
  config.active = true;
  return containerId;
};
/**
 * Removes a container
 *
 * @param   {String}     containerId  ID of the container to remove
 *
 * @returns {undefined}
 * @memberof spotlight/container
 * @public
 */


exports.addContainer = addContainer;

var removeContainer = function removeContainer(containerId) {
  containerConfigs["delete"](containerId);
};
/**
 * Removes all containers
 *
 * @returns {undefined}
 * @memberof spotlight/container
 * @public
 */


exports.removeContainer = removeContainer;

var removeAllContainers = function removeAllContainers() {
  containerConfigs.clear();
};
/**
 * Configures the `GlobalConfig` for containers
 *
 * @param   {Object}  config  New global configuration. Cannot introduce new keys
 *
 * @returns {undefined}
 * @memberof spotlight/container
 * @public
 */


exports.removeAllContainers = removeAllContainers;

var configureDefaults = function configureDefaults(config) {
  GlobalConfig = mergeConfig(GlobalConfig, config);
};
/**
 * Determines if `node` is a navigable element within the container identified by `containerId`.
 *
 * @param   {Node}     node         DOM node to check if it is navigable
 * @param   {String}   containerId  ID of the container containing `node`
 * @param   {Boolean}  verify       `true` to verify the node matches the container's `selector`
 *
 * @returns {Boolean}               `true` if `node` is navigable
 * @memberof spotlight/container
 * @public
 */


exports.configureDefaults = configureDefaults;

var isNavigable = function isNavigable(node, containerId, verify) {
  if (!node || // jsdom reports all nodes as having no size so we must skip this condition in our tests
   true && node.offsetWidth <= 0 && node.offsetHeight <= 0) {
    return false;
  }

  var containerNode = getContainerNode(containerId);

  if (containerNode !== document && containerNode.dataset[disabledKey] === 'true') {
    return false;
  }

  var config = getContainerConfig(containerId);

  if (verify && config && config.selector && !isContainer(node) && !(0, _utils.matchSelector)(config.selector, node)) {
    return false;
  }

  return navigableFilter(node, containerId);
};
/**
 * Returns the IDs of all containers
 *
 * @returns {String[]}  Array of container IDs
 * @memberof spotlight/container
 * @private
 */


exports.isNavigable = isNavigable;

var getAllContainerIds = function getAllContainerIds() {
  var ids = [];
  var keys = containerConfigs.keys(); // PhantomJS-friendly iterator->array conversion

  var id;

  while ((id = keys.next()) && !id.done) {
    if (isActiveContainer(id.value)) {
      ids.push(id.value);
    }
  }

  return ids;
};
/**
 * Returns the default focus element for a container
 *
 * @param   {String}                                       containerId        Container ID
 * @param   {('last-focused'|'default-element'|'topmost')} [preferredEnterTo] Prefer the given enterTo configuration
 *
 * @returns {Node|null}                 Default focus element
 * @memberof spotlight/container
 * @public
 */


exports.getAllContainerIds = getAllContainerIds;

function getContainerDefaultElement(containerId, preferredEnterTo) {
  var config = getContainerConfig(containerId);
  var defaultElementSelector = config && config.defaultElement;

  if (!defaultElementSelector) {
    return null;
  }

  defaultElementSelector = (0, _util.coerceArray)(defaultElementSelector); // If a preferred enterTo has been provided, we will favor it by making it first in search array

  if (preferredEnterTo && typeof preferredEnterTo === 'string' && preferredEnterTo !== 'default-element') {
    defaultElementSelector.unshift(preferredEnterTo);
  }

  var spottables = getDeepSpottableDescendants(containerId);
  return defaultElementSelector.reduce(function (result, selector) {
    if (result) {
      return result;
    }

    if (typeof selector === 'string') {
      return spottables.filter(function (elem) {
        return (0, _utils.matchSelector)(selector, elem) && isNavigable(elem, containerId, true);
      })[0];
    } // FIXME: There is some prior implicit support for `defaultElement` to be an element rather
    // than a selector. This continues that support but should eventually be removed.


    return selector;
  }, null);
}
/**
 * Gets the element last focused within the container.
 *
 * @param   {String}       containerId  ID of container
 *
 * @returns {Node|String|null}               DOM Node last focused
 * @memberof spotlight/container
 * @public
 */


function getContainerLastFocusedElement(containerId) {
  var config = getContainerConfig(containerId);

  if (!config || !config.lastFocusedElement) {
    return null;
  } // lastFocusedElement may be a container ID so try to convert it to a node to test navigability


  var lastFocusedElement = config.lastFocusedElement;
  var node = lastFocusedElement;

  if (typeof node === 'string') {
    node = getContainerNode(lastFocusedElement);
  }

  return isNavigable(node, containerId, true) ? lastFocusedElement : null;
}
/**
 * Sets the element last focused within the container
 *
 * @param   {Node}      node         DOM node last focused
 * @param   {String[]}  containerId  ID of container
 *
 * @returns {undefined}
 * @memberof spotlight/container
 * @public
 */


function setContainerLastFocusedElement(node, containerIds) {
  var lastFocusedElement = node;

  for (var i = containerIds.length - 1; i > -1; i--) {
    var id = containerIds[i];
    configureContainer(id, {
      lastFocusedElement: lastFocusedElement
    }); // If any container in the stack is controlling entering focus, use its container id as the
    // lastFocusedElement instead of the node

    var config = getContainerConfig(id);

    if (config.enterTo) {
      lastFocusedElement = id;
    }
  }
}
/**
 * Returns all navigable nodes (spottable nodes or containers) visible from outside the container.
 * If the container is restricting navigation into itself via `enterTo`, this method will attempt to
 * return that element as the only element in an array. If that fails or if navigation is not
 * restricted, it will return an array of all possible navigable nodes.
 *
 * @param   {String}                                       containerId        Container ID
 * @param   {('last-focused'|'default-element'|'topmost')} [preferredEnterTo] Prefer the given enterTo configuration
 *
 * @returns {Node[]}             Navigable elements within container
 * @memberof spotlight/container
 * @public
 */


function getContainerNavigableElements(containerId, preferredEnterTo) {
  if (!isContainer(containerId)) {
    return [];
  }

  var config = getContainerConfig(containerId);
  var enterTo = config.enterTo,
      overflow = config.overflow;
  var enterLast = preferredEnterTo === 'last-focused' || enterTo === 'last-focused' && !preferredEnterTo;
  var next; // if the container has a preferred entry point, try to find it first

  if (enterLast) {
    next = getContainerLastFocusedElement(containerId);
  } // try default element if last focused can't be focused


  if (!next) {
    next = getContainerDefaultElement(containerId, preferredEnterTo);
  }

  if (!next) {
    var spottables = overflow ? // overflow requires deep recursion to handle selecting the children of unrestricted
    // containers or restricted containers larger than the container
    getDeepSpottableDescendants(containerId) : getSpottableDescendants(containerId); // if there isn't a preferred entry on an overflow container, filter the visible elements

    if (overflow) {
      var containerRect = (0, _utils.getContainerRect)(containerId);
      next = containerRect && spottables.filter(function (element) {
        var elementRect = (0, _utils.getRect)(element);

        if (isContainer(element)) {
          return (0, _utils.intersects)(containerRect, elementRect);
        }

        return (0, _utils.contains)(containerRect, (0, _utils.getRect)(element));
      });

      if (next && preferredEnterTo === 'topmost') {
        next.sort(function (a, b) {
          return (0, _utils.getRect)(a).top - (0, _utils.getRect)(b).top;
        });
      }
    } // otherwise, return all spottables within the container


    if (!next) {
      next = spottables;
    }
  }

  return next ? (0, _util.coerceArray)(next) : [];
}
/**
 * Determines the preferred focus target, traversing any sub-containers as necessary, for the given
 * container.
 *
 * @param   {String}                                       containerId        Container ID
 * @param   {('last-focused'|'default-element'|'topmost')} [preferredEnterTo] Prefer the given enterTo configuration
 *
 * @returns {Node}                 Preferred target as either a DOM node or container-id
 * @memberof spotlight/container
 * @public
 */


function getContainerFocusTarget(containerId, preferredEnterTo) {
  // deferring restoration until it's requested to allow containers to prepare first
  restoreLastFocusedElement(containerId);
  var next = getContainerNavigableElements(containerId, preferredEnterTo); // If multiple candidates returned, we need to find the first viable target since some may
  // be empty containers which should be skipped.

  return next.reduce(function (result, element) {
    if (result) {
      return result;
    } else if (isContainer(element)) {
      var nextId = isContainerNode(element) ? getContainerId(element) : element;
      return getContainerFocusTarget(nextId);
    }

    return element;
  }, null) || null;
}

function getContainerPreviousTarget(containerId, direction, destination) {
  var config = getContainerConfig(containerId);

  if (config && config.rememberSource && config.previous && config.previous.reverse === direction && config.previous.destination === destination) {
    return config.previous.target;
  }
}

function setContainerPreviousTarget(containerId, direction, destination, target) {
  var config = getContainerConfig(containerId);

  if (config && config.rememberSource) {
    configureContainer(containerId, {
      previous: {
        target: target,
        destination: destination,
        reverse: reverseDirections[direction]
      }
    });
  }
}
/**
 * Saves the last focused element into `lastFocusedKey` using a container-defined serialization
 * method configured in `lastFocusedPersist`.
 *
 * @param   {String}     containerId  ID of container
 *
 * @returns {undefined}
 * @memberof spotlight/container
 * @public
 */


function persistLastFocusedElement(containerId) {
  var cfg = getContainerConfig(containerId);

  if (cfg) {
    var lastFocusedElement = cfg.lastFocusedElement;

    if (lastFocusedElement) {
      var all = getDeepSpottableDescendants(containerId);
      var lastFocusedKey = cfg.lastFocusedPersist(lastFocusedElement, all); // store lastFocusedKey and release node reference to lastFocusedElement

      cfg.lastFocusedKey = lastFocusedKey;
      cfg.lastFocusedElement = null;
    }
  }
}
/**
 * Restores the last focused element from `lastFocusedKey` using a container-defined deserialization
 * method configured in `lastFocusedRestore`.
 *
 * @param   {String}     containerId  ID of container
 *
 * @returns {undefined}
 * @memberof spotlight/container
 * @public
 */


function restoreLastFocusedElement(containerId) {
  var cfg = getContainerConfig(containerId);

  if (cfg && cfg.lastFocusedKey) {
    var all = getDeepSpottableDescendants(containerId);
    var lastFocusedElement = cfg.lastFocusedRestore(cfg.lastFocusedKey, all); // restore lastFocusedElement and release lastFocusedKey

    cfg.lastFocusedKey = null;
    cfg.lastFocusedElement = lastFocusedElement;
  }
}

function unmountContainer(containerId) {
  var config = getContainerConfig(containerId);

  if (config) {
    config.active = false;
    persistLastFocusedElement(containerId);

    if (typeof config.defaultElement !== 'string') {
      config.defaultElement = null;
    }
  }
}

function isActiveContainer(containerId) {
  var config = getContainerConfig(containerId);
  return config && config.active;
}
/**
 * Determines if the provided container has a configured restriction.
 *
 * By default, returns `true` for `'self-only'` restrictions but the type of restriction can be
 * passed as well.
 *
 * @param {String} containerId The container id
 * @param {String} [restrict] The container restriction defaulted to `'self-only'`
 * @returns {Boolean} `true` if the container has the specified restriction
 * @private
 */


function isRestrictedContainer(containerId) {
  var restrict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'self-only';
  var config = getContainerConfig(containerId);
  return Boolean(config && config.restrict === restrict);
}
/**
 * Determines if `innerContainerId` is inside `outerContainerId`.
 *
 * @param {String} outerContainerId The outer container id
 * @param {String} innerContainerId The inner container id
 * @returns {Boolean} `true` if both containers exist and `innerContainerId` is within
 *                    `outerContainerId`
 * @private
 */


function containsContainer(outerContainerId, innerContainerId) {
  var outer = getContainerNode(outerContainerId);
  var inner = getContainerNode(innerContainerId);
  return Boolean(outer && inner && outer.contains(inner));
}
/**
 * Determines if `containerId` may become the active container.
 *
 * @param {String} containerId Spotlight container to which focus is leaving
 * @returns	{Boolean} `true` if the active container can change to `containerId`
 * @private
 */


function mayActivateContainer(containerId) {
  var currentContainerId = getLastContainer(); // If the current container or its outer containers are restricted to 'self-only' and
  // if the next container to be activated is not inside the restrict container,
  // the next container should not be activated.

  var currentContainerNode = getContainerNode(currentContainerId);
  var restrictContainer = getContainersForNode(currentContainerNode).reduceRight(function (result, outerContainerId) {
    return result || (isRestrictedContainer(outerContainerId) ? outerContainerId : null);
  }, null);
  return !restrictContainer || containsContainer(restrictContainer, containerId);
}

function getDefaultContainer() {
  return isActiveContainer(_defaultContainerId) ? _defaultContainerId : '';
}

function setDefaultContainer(containerId) {
  if (!containerId) {
    _defaultContainerId = '';
  } else if (!getContainerConfig(containerId)) {
    throw new Error('Container "' + containerId + '" doesn\'t exist!');
  } else {
    _defaultContainerId = containerId;
  }
}

function getLastContainer() {
  return isActiveContainer(_lastContainerId) ? _lastContainerId : '';
}

function setLastContainer(containerId) {
  _lastContainerId = containerId || '';
}
/**
 * Updates the last container based on the current focus and target focus.
 *
 * @param {Node} current Currently focused node
 * @param {Node} target  Target node. May or may not be focusable
 * @memberof spotlight/container
 * @public
 */


function setLastContainerFromTarget(current, target) {
  var currentContainers = getNavigableContainersForNode(current);
  var currentOuterContainerId = currentContainers[0];
  var currentContainerConfig = getContainerConfig(currentOuterContainerId);
  var targetContainers = getContainersForNode(target);
  var targetInnerContainer = (0, _last["default"])(targetContainers);
  var sharedContainer = (0, _last["default"])((0, _intersection["default"])(currentContainers, targetContainers));

  if (sharedContainer || !currentContainerConfig || currentContainerConfig.restrict !== 'self-only') {
    // If the target shares a container with the current container stack or the current
    // element isn't within a self-only container, use the target's nearest container
    setLastContainer(targetInnerContainer);
  } else {
    // Otherwise, the target is not within the current container stack and the current
    // element was within a 'self-only' container, use the current's outer container
    setLastContainer(currentOuterContainerId);
  }
}

function isWithinOverflowContainer(target) {
  var containerIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getContainersForNode(target);
  return containerIds // ignore the root container id which is set to overflow by the root decorator
  .filter(function (id) {
    return id !== rootContainerId;
  }) // get the config for each container
  .map(getContainerConfig) // and check if any are set to overflow
  .some(function (config) {
    return config && config.overflow;
  });
}
/**
 * Notifies any affected containers that focus has left one of their children for another container
 *
 * @param {String} direction up/down/left/right
 * @param {Node} current currently focused element
 * @param {String[]} currentContainerIds Containers for current
 * @param {Node} next To be focused element
 * @param {String[]} nextContainerIds Containers for next
 * @private
 */


function notifyLeaveContainer(direction, current, currentContainerIds, next, nextContainerIds) {
  currentContainerIds.forEach(function (containerId) {
    if (!nextContainerIds.includes(containerId)) {
      var config = getContainerConfig(containerId);

      if (config && config.onLeaveContainer) {
        config.onLeaveContainer({
          type: 'onLeaveContainer',
          direction: direction,
          target: current,
          relatedTarget: next
        });
      }
    }
  });
}
/**
 * Notifies any containers that focus attempted to move but failed to find a target
 *
 * @param {String} direction up/down/left/right
 * @param {Node} current currently focused element
 * @param {String[]} currentContainerIds Containers for current
 * @private
 */


function notifyLeaveContainerFail(direction, current, currentContainerIds) {
  currentContainerIds.forEach(function (containerId) {
    var config = getContainerConfig(containerId);

    if (config && config.onLeaveContainerFail) {
      config.onLeaveContainerFail({
        type: 'onLeaveContainerFail',
        direction: direction,
        target: current
      });
    }
  });
}
/**
 * Notifies any affected containers that one of their children has received focus.
 *
 * @param {String} direction up/down/left/right
 * @param {Node} previous Previously focused element
 * @param {String[]} previousContainerIds Containers for previous
 * @param {Node} current Currently focused element
 * @param {String[]} currentContainerIds Containers for current
 * @private
 */


function notifyEnterContainer(direction, previous, previousContainerIds, current, currentContainerIds) {
  currentContainerIds.forEach(function (containerId) {
    if (!previousContainerIds.includes(containerId)) {
      var config = getContainerConfig(containerId);

      if (config && config.onEnterContainer) {
        config.onEnterContainer({
          type: 'onEnterContainer',
          direction: direction,
          target: current,
          relatedTarget: previous
        });
      }
    }
  });
}

/***/ }),

/***/ "./node_modules/@enact/spotlight/src/navigate.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/spotlight/src/navigate.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.navigate = navigate;
var obliqueMinDistance = 1;
var straightMinDistance = 0;

var calcGroupId = function calcGroupId(_ref) {
  var x = _ref.x,
      y = _ref.y;
  return y * 3 + x;
};

var calcNextGridPosition = function calcNextGridPosition(current, next) {
  var center = current.center;
  var x, y;

  if (center.x < next.left) {
    x = 0;
  } else if (center.x <= next.right) {
    x = 1;
  } else {
    x = 2;
  }

  if (center.y < next.top) {
    y = 0;
  } else if (center.y <= next.bottom) {
    y = 1;
  } else {
    y = 2;
  }

  return {
    x: x,
    y: y
  };
};

var calcNextExtendedGridPosition = function calcNextExtendedGridPosition(current, next) {
  var x, y;

  if (current.right <= next.left) {
    x = 0;
  } else if (current.left < next.right) {
    x = 1;
  } else {
    x = 2;
  }

  if (current.bottom <= next.top) {
    y = 0;
  } else if (current.top < next.bottom) {
    y = 1;
  } else {
    y = 2;
  }

  return {
    x: x,
    y: y
  };
};

function prioritize(priorities, targetEdge) {
  var destGroup = [];

  for (var index = 0; index < priorities.length; index++) {
    var destPriority = priorities[index];

    if (destPriority.group.length) {
      (function () {
        var destDistance = destPriority.distance;
        var destDifference = destPriority.difference;
        var distance = 0;
        var target = void 0;
        destPriority.group.sort(function (a, b) {
          for (var i = 0; i < destDistance.length; i++) {
            var calcDistance = destDistance[i];
            var delta = calcDistance(a) - calcDistance(b);

            if (delta) {
              return delta;
            }
          }

          return 0;
        });
        target = destPriority.group[0];

        for (var i = 0; i < destDifference.length; i++) {
          distance += destDifference[i](target);
        }

        destGroup.push({
          distance: Math.pow(destPriority.multiplier * (distance || destPriority.minDistance) / targetEdge, 2) + targetEdge,
          target: target
        });
      })();
    }
  }

  if (!destGroup.length) {
    return null;
  }

  destGroup.sort(function (a, b) {
    return a.distance - b.distance;
  });
  return destGroup;
}

function partition(rects, targetRect, straightOverlapThreshold, getGroupId) {
  // a matrix of elements where the center of the element in relation to targetRect is:
  var groups = [[
    /* [0] => above/left */
  ], [
    /* [1] => above/within */
  ], [
    /* [2] => above/right */
  ], [
    /* [3] => within/left */
  ], [
    /* [4] => within */
  ], [
    /* [5] => within/right */
  ], [
    /* [6] => below/left */
  ], [
    /* [7] => below and within */
  ], [
    /* [8] => below/right */
  ]];

  for (var i = 0; i < rects.length; i++) {
    var rect = rects[i];
    var groupId = getGroupId(rect, targetRect);
    groups[groupId].push(rect);

    if ([0, 2, 6, 8].indexOf(groupId) !== -1) {
      if (rect.left <= targetRect.right - targetRect.width * straightOverlapThreshold) {
        if (groupId === 2) {
          groups[1].push(rect);
        } else if (groupId === 8) {
          groups[7].push(rect);
        }
      }

      if (rect.right >= targetRect.left + targetRect.width * straightOverlapThreshold) {
        if (groupId === 0) {
          groups[1].push(rect);
        } else if (groupId === 6) {
          groups[7].push(rect);
        }
      }

      if (rect.top <= targetRect.bottom - targetRect.height * straightOverlapThreshold) {
        if (groupId === 6) {
          groups[3].push(rect);
        } else if (groupId === 8) {
          groups[5].push(rect);
        }
      }

      if (rect.bottom >= targetRect.top + targetRect.height * straightOverlapThreshold) {
        if (groupId === 0) {
          groups[3].push(rect);
        } else if (groupId === 2) {
          groups[5].push(rect);
        }
      }
    }
  }

  return groups;
}

function generateDistancefunction(targetRect) {
  return {
    nearPlumbLineIsBetter: function nearPlumbLineIsBetter(rect) {
      var d;

      if (rect.center.x < targetRect.center.x) {
        d = targetRect.center.x - rect.right;
      } else {
        d = rect.left - targetRect.center.x;
      }

      return d < 0 ? 0 : d;
    },
    nearHorizonIsBetter: function nearHorizonIsBetter(rect) {
      var d;

      if (rect.center.y < targetRect.center.y) {
        d = targetRect.center.y - rect.bottom;
      } else {
        d = rect.top - targetRect.center.y;
      }

      return d < 0 ? 0 : d;
    },
    nearTargetBottomIsBetter: function nearTargetBottomIsBetter(rect) {
      var d;

      if (rect.center.y < targetRect.center.y) {
        d = targetRect.bottom - rect.top;
      } else {
        d = rect.top - targetRect.bottom;
      }

      return d < 0 ? 0 : d;
    },
    nearTargetLeftIsBetter: function nearTargetLeftIsBetter(rect) {
      var d;

      if (rect.center.x < targetRect.center.x) {
        d = targetRect.left - rect.right;
      } else {
        d = rect.left - targetRect.left;
      }

      return d < 0 ? 0 : d;
    },
    nearTargetRightIsBetter: function nearTargetRightIsBetter(rect) {
      var d;

      if (rect.center.x < targetRect.center.x) {
        d = targetRect.right - rect.left;
      } else {
        d = rect.left - targetRect.right;
      }

      return d < 0 ? 0 : d;
    },
    nearTargetTopIsBetter: function nearTargetTopIsBetter(rect) {
      var d;

      if (rect.center.y < targetRect.center.y) {
        d = targetRect.top - rect.bottom;
      } else {
        d = rect.top - targetRect.top;
      }

      return d < 0 ? 0 : d;
    },
    topIsBetter: function topIsBetter(rect) {
      return rect.top;
    },
    bottomIsBetter: function bottomIsBetter(rect) {
      return -1 * rect.bottom;
    },
    leftIsBetter: function leftIsBetter(rect) {
      return rect.left;
    },
    rightIsBetter: function rightIsBetter(rect) {
      return -1 * rect.right;
    }
  };
}

function navigate(targetRect, direction, rects, config) {
  var partitionRect = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : targetRect;

  if (!targetRect || !direction || !rects || !rects.length || !config) {
    return null;
  }

  var distanceFunction = generateDistancefunction(targetRect);
  var obliqueMultiplier = config.obliqueMultiplier,
      straightMultiplier = config.straightMultiplier,
      straightOnly = config.straightOnly,
      straightOverlapThreshold = config.straightOverlapThreshold;
  var groups = partition(rects, partitionRect, straightOverlapThreshold, function (rect, destRect) {
    return calcGroupId(direction === 'up' || direction === 'down' ? calcNextExtendedGridPosition(rect, destRect) : calcNextGridPosition(rect, destRect));
  });
  var internalGroups = partition(groups[4], targetRect.center, straightOverlapThreshold, function (rect, destRect) {
    return calcGroupId(calcNextGridPosition(rect, destRect));
  });
  var priorities, targetEdge;

  switch (direction) {
    case 'left':
      targetEdge = direction;
      priorities = [{
        group: internalGroups[0].concat(internalGroups[3]).concat(internalGroups[6]),
        distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.nearHorizonIsBetter, distanceFunction.topIsBetter],
        difference: [distanceFunction.nearTargetLeftIsBetter],
        minDistance: straightMinDistance,
        multiplier: straightMultiplier
      }, {
        group: groups[3],
        distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.nearHorizonIsBetter, distanceFunction.topIsBetter],
        difference: [distanceFunction.nearTargetLeftIsBetter],
        minDistance: straightMinDistance,
        multiplier: straightMultiplier
      }, {
        group: groups[0],
        distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.rightIsBetter, distanceFunction.nearTargetTopIsBetter],
        difference: [distanceFunction.nearTargetLeftIsBetter, distanceFunction.nearTargetTopIsBetter],
        minDistance: obliqueMinDistance,
        multiplier: obliqueMultiplier
      }, {
        group: groups[6],
        distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.rightIsBetter, distanceFunction.nearTargetTopIsBetter],
        difference: [distanceFunction.nearTargetLeftIsBetter, distanceFunction.nearTargetBottomIsBetter],
        minDistance: obliqueMinDistance,
        multiplier: obliqueMultiplier
      }];
      break;

    case 'right':
      targetEdge = direction;
      priorities = [{
        group: internalGroups[2].concat(internalGroups[5]).concat(internalGroups[8]),
        distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.nearHorizonIsBetter, distanceFunction.topIsBetter],
        difference: [distanceFunction.nearTargetRightIsBetter],
        minDistance: straightMinDistance,
        multiplier: straightMultiplier
      }, {
        group: groups[5],
        distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.nearHorizonIsBetter, distanceFunction.topIsBetter],
        difference: [distanceFunction.nearTargetRightIsBetter],
        minDistance: straightMinDistance,
        multiplier: straightMultiplier
      }, {
        group: groups[2],
        distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.leftIsBetter, distanceFunction.nearTargetTopIsBetter],
        difference: [distanceFunction.nearTargetRightIsBetter, distanceFunction.nearTargetTopIsBetter],
        minDistance: obliqueMinDistance,
        multiplier: obliqueMultiplier
      }, {
        group: groups[8],
        distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.leftIsBetter, distanceFunction.nearTargetTopIsBetter],
        difference: [distanceFunction.nearTargetRightIsBetter, distanceFunction.nearTargetBottomIsBetter],
        minDistance: obliqueMinDistance,
        multiplier: obliqueMultiplier
      }];
      break;

    case 'up':
      targetEdge = 'top';
      priorities = [{
        group: internalGroups[0].concat(internalGroups[1]).concat(internalGroups[2]),
        distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.nearPlumbLineIsBetter, distanceFunction.leftIsBetter],
        difference: [distanceFunction.nearTargetTopIsBetter],
        minDistance: straightMinDistance,
        multiplier: straightMultiplier
      }, {
        group: groups[1],
        distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.nearPlumbLineIsBetter, distanceFunction.leftIsBetter],
        difference: [distanceFunction.nearTargetTopIsBetter],
        minDistance: straightMinDistance,
        multiplier: straightMultiplier
      }, {
        group: groups[0],
        distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.bottomIsBetter, distanceFunction.nearTargetLeftIsBetter],
        difference: [distanceFunction.nearTargetTopIsBetter, distanceFunction.nearTargetLeftIsBetter],
        minDistance: obliqueMinDistance,
        multiplier: obliqueMultiplier
      }, {
        group: groups[2],
        distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.bottomIsBetter, distanceFunction.nearTargetLeftIsBetter],
        difference: [distanceFunction.nearTargetTopIsBetter, distanceFunction.nearTargetRightIsBetter],
        minDistance: obliqueMinDistance,
        multiplier: obliqueMultiplier
      }];
      break;

    case 'down':
      targetEdge = 'bottom';
      priorities = [{
        group: internalGroups[6].concat(internalGroups[7]).concat(internalGroups[8]),
        distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.nearPlumbLineIsBetter, distanceFunction.leftIsBetter],
        difference: [distanceFunction.nearTargetBottomIsBetter],
        minDistance: straightMinDistance,
        multiplier: straightMultiplier
      }, {
        group: groups[7],
        distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.nearPlumbLineIsBetter, distanceFunction.leftIsBetter],
        difference: [distanceFunction.nearTargetBottomIsBetter],
        minDistance: straightMinDistance,
        multiplier: straightMultiplier
      }, {
        group: groups[6],
        distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.topIsBetter, distanceFunction.nearTargetLeftIsBetter],
        difference: [distanceFunction.nearTargetBottomIsBetter, distanceFunction.nearTargetLeftIsBetter],
        minDistance: obliqueMinDistance,
        multiplier: obliqueMultiplier
      }, {
        group: groups[8],
        distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.topIsBetter, distanceFunction.nearTargetLeftIsBetter],
        difference: [distanceFunction.nearTargetBottomIsBetter, distanceFunction.nearTargetRightIsBetter],
        minDistance: obliqueMinDistance,
        multiplier: obliqueMultiplier
      }];
      break;

    default:
      return null;
  }

  if (straightOnly) {
    priorities.splice(2, 2);
  }

  var destGroup = prioritize(priorities, targetRect[targetEdge]);

  if (!destGroup) {
    return null;
  }

  return destGroup[0].target.element;
}

var _default = navigate;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/spotlight/src/pointer.js":
/*!******************************************************!*\
  !*** ./node_modules/@enact/spotlight/src/pointer.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.updatePointerPosition = exports.setPointerMode = exports.notifyPointerMove = exports.notifyKeyDown = exports.hasPointerMoved = exports.getPointerMode = exports.getLastPointerPosition = void 0;

var _keymap = __webpack_require__(/*! @enact/core/keymap */ "./node_modules/@enact/core/keymap/index.js");

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");
/**
 * Exports methods and members for working with pointer events in spotlight
 *
 * @module spotlight/pointer
 * @private
 */

/*
 * Whether Spotlight is in pointer mode (as opposed to 5-way mode).
 *
 * @type {Boolean}
 * @default true
 * @private
 */


var _pointerMode = true;
/**
 * Sets the current pointer mode
 *
 * @param   {Boolean} pointerMode `true` to enable pointer mode; `false` to disable pointer mode
 * @memberof spotlight/pointer
 * @private
 */

var setPointerMode = function setPointerMode(pointerMode) {
  _pointerMode = pointerMode;
};
/**
 * Gets the current pointer mode
 *
 * @returns {Boolean} The current state of pointer mode
 * @memberof spotlight/pointer
 * @private
 */


exports.setPointerMode = setPointerMode;

var getPointerMode = function getPointerMode() {
  return _pointerMode;
}; // Cached pointer position


exports.getPointerMode = getPointerMode;
var _pointerX = null;
var _pointerY = null;
/**
 * Returns whether or not the current pointer position matches the provided coordinates
 *
 * @param   {Number} x Pointer position relative to the left side of the viewport
 * @param   {Number} y Pointer position relative to the top side of the viewport
 *
 * @returns {Boolean}   `true` if the position was changed
 * @memberof spotlight/pointer
 * @private
 */

var hasPointerMoved = function hasPointerMoved(x, y) {
  return x !== _pointerX || y !== _pointerY;
};
/**
 * Updates the cached pointer position, updating the current pointer mode when the position has
 * changed.
 *
 * @param   {Number} x Pointer position relative to the left side of the viewport
 * @param   {Number} y Pointer position relative to the top side of the viewport
 *
 * @returns {Boolean}   `true` if the position was updated
 * @memberof spotlight/pointer
 * @private
 */


exports.hasPointerMoved = hasPointerMoved;

var updatePointerPosition = function updatePointerPosition(x, y) {
  // Chrome emits mousemove on scroll, but client coordinates do not change.
  if (hasPointerMoved(x, y)) {
    setPointerMode(true);
    _pointerX = x;
    _pointerY = y;
    return true;
  }

  return false;
};
/**
 * Returns the last known position of the pointer
 *
 * @returns {Object} Contains `x` and `y` coordinates for the pointer
 * @memberof spotlight/pointer
 * @private
 */


exports.updatePointerPosition = updatePointerPosition;

var getLastPointerPosition = function getLastPointerPosition() {
  return {
    x: _pointerX,
    y: _pointerY
  };
}; // 30ms (_pointerHiddenToKeyTimeout) is semi-arbitrary, to account for the time it takes for the
// following directional key event to fire, and to prevent momentary spotting of the last
// focused item - needs to be a value large enough to account for the potentially-trailing
// event, but not too large that another unrelated event can be fired inside the window


exports.getLastPointerPosition = getLastPointerPosition;
var hidePointerJob = new _util.Job(function (callback) {
  setPointerMode(false);

  if (callback) {
    callback();
  }
}, 30);
/**
 * Notifies spotlight of a change in the pointer position
 *
 * @param   {Node}     target   Node under the pointer
 * @param   {Number}   x        Horizontal position relative to the left side of the viewport
 * @param   {Number}   y        Vertical position relative to the top side of the viewport
 *
 * @returns {Boolean}           `true` if the change in position results in a change in focus
 * @memberof spotlight/pointer
 * @private
 */

var notifyPointerMove = function notifyPointerMove(current, target, x, y) {
  var priorPointerMode = getPointerMode();

  if (updatePointerPosition(x, y)) {
    // if we're entering pointer mode and the target element isn't within the currently
    // focused element, there may be a new navigable target
    return !priorPointerMode || !current || !current.contains(target);
  } // the pointer hasn't actually moved (surprise!)


  return false;
};
/**
 * Notifies the pointer module of key events. If the pointer should be hidden, a timer is set and
 * `callback` is invoked after the timer has expired and pointer mode has been disabled. For any
 * other type of key event, pointer mode is disabled and `false` is returned.
 *
 * @param   {Number}    keyCode     Key event key code
 * @param   {Function}  [callback]  Optional callback to invoke upon hiding the pointer.
 *
 * @returns {Boolean}               `true` for pointer hide or show key events
 * @memberof spotlight/pointer
 * @private
 */


exports.notifyPointerMove = notifyPointerMove;

var notifyKeyDown = function notifyKeyDown(keyCode, callback) {
  var palmSystem = window.PalmSystem; // for hide/show pointer events, handle them and return true

  if ((0, _keymap.is)('pointerHide', keyCode)) {
    hidePointerJob.start(callback);
    return true;
  } else if ((0, _keymap.is)('pointerShow', keyCode)) {
    setPointerMode(true);
    return true;
  } else if (!(0, _keymap.is)('nonModal', keyCode) && !(0, _keymap.is)('cancel', keyCode) && !((0, _keymap.is)('enter', keyCode) && palmSystem && palmSystem.cursor && palmSystem.cursor.visibility)) {
    setPointerMode(false);
  }

  return false;
};

exports.notifyKeyDown = notifyKeyDown;

/***/ }),

/***/ "./node_modules/@enact/spotlight/src/spotlight.js":
/*!********************************************************!*\
  !*** ./node_modules/@enact/spotlight/src/spotlight.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getDirection = exports["default"] = exports.Spotlight = void 0;

var _keymap = __webpack_require__(/*! @enact/core/keymap */ "./node_modules/@enact/core/keymap/index.js");

var _snapshot = __webpack_require__(/*! @enact/core/snapshot */ "./node_modules/@enact/core/snapshot/snapshot.js");

var _platform = _interopRequireDefault(__webpack_require__(/*! @enact/core/platform */ "./node_modules/@enact/core/platform/platform.js"));

var _last = _interopRequireDefault(__webpack_require__(/*! ramda/src/last */ "./node_modules/ramda/src/last.js"));

var _Accelerator = _interopRequireDefault(__webpack_require__(/*! ../Accelerator */ "./node_modules/@enact/spotlight/Accelerator/Accelerator.js"));

var _Spottable = __webpack_require__(/*! ../Spottable */ "./node_modules/@enact/spotlight/Spottable/Spottable.js");

var _Pause = __webpack_require__(/*! ../Pause */ "./node_modules/@enact/spotlight/Pause/Pause.js");

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@enact/spotlight/src/utils.js");

var _container = __webpack_require__(/*! ./container */ "./node_modules/@enact/spotlight/src/container.js");

var _pointer = __webpack_require__(/*! ./pointer */ "./node_modules/@enact/spotlight/src/pointer.js");

var _target = __webpack_require__(/*! ./target */ "./node_modules/@enact/spotlight/src/target.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/*
 * A javascript-based implementation of Spatial Navigation.
 *
 * Copyright (c) 2016 Luke Chang.
 * https://github.com/luke-chang/js-spatial-navigation
 *
 * Licensed under the MPL license.
 */

/**
 * Exports the {@link spotlight.Spotlight} object used for controlling spotlight behavior and the
 * {@link spotlight.Spotlight.getDirection} function for mapping a keycode to a spotlight direction.
 *
 * The default export is {@link spotlight.Spotlight}.
 *
 * @module spotlight
 * @exports default Spotlight
 * @exports getDirection
 */


var isDown = (0, _keymap.is)('down');
var isEnter = (0, _keymap.is)('enter');
var isLeft = (0, _keymap.is)('left');
var isRight = (0, _keymap.is)('right');
var isUp = (0, _keymap.is)('up');
/**
 * Translates keyCodes into 5-way direction descriptions (e.g. `'down'`)
 *
 * @function
 * @memberof spotlight
 * @param {Number} keyCode - Key code to analyze
 * @returns {String|false} - One of `'up'`, `'down'`, `'left'`, `'right'` or `false` if not a direction key
 * @public
 */

var getDirection = function getDirection(keyCode) {
  return isDown(keyCode) && 'down' || isLeft(keyCode) && 'left' || isRight(keyCode) && 'right' || isUp(keyCode) && 'up';
};

exports.getDirection = getDirection;
var SpotlightAccelerator = new _Accelerator["default"]();
/**
 * Provides 5-way navigation and focus support
 *
 * ```
 * import Spotlight from '@enact/Spotlight';
 *
 * // get the currently focused component
 * const current = Spotlight.getCurrent();
 *
 * // focus an element by CSS selector
 * Spotlight.focus('.my-custom-class');
 *
 * // is `current` focusable?
 * const isFocused = Spotlight.isSpottable(current);
 * ```
 *
 * @type {Object}
 * @memberof spotlight
 * @public
 */

var Spotlight = function () {
  'use strict';
  /*
  /* private vars
  */

  var _initialized = false;
  var _duringFocusChange = false;
  /*
   * Whether a 5-way directional key is being held.
   *
   * @type {Boolean}
   * @default false
   */

  var _5WayKeyHold = false;
  /*
   * Whether to set focus during the next window focus event
   *
   * @type {Boolean}
   * @default false
   */

  var _spotOnWindowFocus = false;
  /*
   * `true` when a pointer move event occurs during a keypress. Used to short circuit key down
   * handling until the next keyup occurs.
   *
   * @type {Boolean}
   * @default false
   */

  var _pointerMoveDuringKeyPress = false;
  /*
  * protected methods
  */

  function preventDefault(evt) {
    evt.preventDefault();
    evt.stopPropagation();
    return false;
  }

  function shouldPreventNavigation() {
    return (0, _Pause.isPaused)() || (0, _container.getAllContainerIds)().length === 0;
  }

  function _getCurrent() {
    if (!(0, _snapshot.isWindowReady)()) return;
    var activeElement = document.activeElement;

    if (activeElement && activeElement !== document.body) {
      return activeElement;
    }
  } // An extension point for updating pointer mode based on the current platform.
  // Currently only webOS


  function setPlatformPointerMode() {
    var palmSystem = window.PalmSystem;

    if (palmSystem && palmSystem.cursor) {
      (0, _pointer.setPointerMode)(palmSystem.cursor.visibility);
    }
  }

  function focusElement(elem, containerIds, fromPointer) {
    if (!elem) {
      return false;
    }

    if ((0, _pointer.getPointerMode)() && !fromPointer) {
      (0, _container.setContainerLastFocusedElement)(elem, containerIds);
      return false;
    }

    var currentFocusedElement = _getCurrent();

    if (elem === currentFocusedElement) {
      return true;
    }

    var focusOptions = (0, _container.isWithinOverflowContainer)(elem, containerIds) ? {
      preventScroll: true
    } : null;

    var silentFocus = function silentFocus() {
      elem.focus(focusOptions);
      focusChanged(elem, containerIds);
    };

    if (_duringFocusChange) {
      silentFocus();
      return true;
    }

    _duringFocusChange = true;

    if ((0, _Pause.isPaused)()) {
      silentFocus();
      _duringFocusChange = false;
      return true;
    }

    elem.focus(focusOptions);
    _duringFocusChange = false;
    focusChanged(elem, containerIds);
    return true;
  }

  function focusChanged(elem, containerIds) {
    if (!containerIds || !containerIds.length) {
      containerIds = (0, _container.getContainersForNode)(elem);
    }

    var containerId = (0, _last["default"])(containerIds);

    if (containerId) {
      (0, _container.setContainerLastFocusedElement)(elem, containerIds);
      (0, _container.setLastContainer)(containerId);
    }

    if (true) {
      assignFocusPreview(elem);
    }
  }

  function restoreFocus() {
    var lastContainerId = (0, _container.getLastContainer)();
    var next;

    if (lastContainerId) {
      var position = (0, _pointer.getLastPointerPosition)(); // walk up the chain of containers from the last to attempt to find a target

      next = (0, _container.getContainersForNode)((0, _container.getContainerNode)(lastContainerId)).reverse(); // only prepend last focused if it exists so that Spotlight.focus() doesn't receive
      // a falsy target

      var lastFocusedElement = (0, _container.getContainerLastFocusedElement)(lastContainerId);

      while ((0, _container.isContainer)(lastFocusedElement)) {
        var _getContainerConfig = (0, _container.getContainerConfig)(lastFocusedElement);

        lastFocusedElement = _getContainerConfig.lastFocusedElement;
      }

      var lastContainerNode = (0, _container.getContainerNode)(lastContainerId);

      if (!lastFocusedElement || lastContainerNode.getBoundingClientRect && lastFocusedElement.getBoundingClientRect && !(0, _utils.contains)(lastContainerNode.getBoundingClientRect(), lastFocusedElement.getBoundingClientRect())) {
        lastFocusedElement = (0, _container.getContainerConfig)(lastContainerId).overflow && (0, _target.getNearestTargetFromPosition)(position, lastContainerId);
      }

      if (lastFocusedElement) {
        next.unshift(lastFocusedElement);
      }
    } else {
      next = [_container.rootContainerId];
    } // attempt to find a target starting with the last focused element in the last
    // container, followed by the last container, and finally the root container


    return next.reduce(function (focused, target) {
      return focused || Spotlight.focus(target);
    }, false);
  } // The below should be gated on non-production environment only.


  function assignFocusPreview(elem) {
    var directions = ['up', 'right', 'down', 'left'],
        nextClassBase = _Spottable.spottableClass + '-next-'; // Remove all previous targets

    directions.forEach(function (dir) {
      var nextClass = nextClassBase + dir,
          prevElems = (0, _utils.parseSelector)('.' + nextClass);

      if (prevElems && prevElems.length !== 0) {
        prevElems.forEach(function (prevElem) {
          return prevElem.classList.remove(nextClass);
        });
      }
    }); // Find all next targets and identify them

    directions.forEach(function (dir) {
      var nextElem = (0, _target.getTargetByDirectionFromElement)(dir, elem);

      if (nextElem) {
        nextElem.classList.add(nextClassBase + dir);
      }
    });
  }

  function spotNextFromPoint(direction, position) {
    var containerId = Spotlight.getActiveContainer();
    var next = (0, _target.getTargetByDirectionFromPosition)(direction, position, containerId);

    if (next) {
      (0, _container.setContainerPreviousTarget)(containerId, direction, next, (0, _container.getContainerLastFocusedElement)(containerId));
      return focusElement(next, (0, _container.getContainersForNode)(next));
    }

    return false;
  }

  function spotNext(direction, currentFocusedElement, currentContainerIds) {
    var next = (0, _target.getTargetByDirectionFromElement)(direction, currentFocusedElement);

    if (next) {
      var currentContainerId = (0, _last["default"])(currentContainerIds);
      var nextContainerIds = (0, _container.getContainersForNode)(next); // prevent focus if 5-way is being held and the next element isn't wrapped by
      // the current element's immediate container

      if (_5WayKeyHold && nextContainerIds.indexOf(currentContainerId) < 0 && !(0, _container.isContainer5WayHoldable)(currentContainerId)) {
        return false;
      }

      (0, _container.notifyLeaveContainer)(direction, currentFocusedElement, currentContainerIds, next, nextContainerIds);
      (0, _container.setContainerPreviousTarget)(currentContainerId, direction, next, currentFocusedElement);
      var focused = focusElement(next, nextContainerIds);
      (0, _container.notifyEnterContainer)(direction, currentFocusedElement, currentContainerIds, next, nextContainerIds);
      return focused;
    }

    (0, _container.notifyLeaveContainerFail)(direction, currentFocusedElement, currentContainerIds);
    return false;
  }

  function onAcceleratedKeyDown(evt) {
    var direction = getDirection(evt.keyCode);
    if (!direction) return;

    var currentFocusedElement = _getCurrent();

    var currentContainerIds = (0, _container.getContainersForNode)(currentFocusedElement);
    spotNext(direction, currentFocusedElement, currentContainerIds);
  }

  function onBlur() {
    var current = _getCurrent();

    if (current) {
      current.blur();
    }

    Spotlight.setPointerMode(false);
    _spotOnWindowFocus = true;
    _pointerMoveDuringKeyPress = false;
  }

  function handleWebOSMouseEvent(ev) {
    if (!(0, _Pause.isPaused)() && ev && ev.detail && ev.detail.type === 'Leave') {
      onBlur();
    }
  }

  function handleKeyboardStateChangeEvent(_ref) {
    var visibility = _ref.visibility;

    if (!visibility) {
      setPlatformPointerMode();
    }
  }

  function onFocus() {
    // Normally, there isn't focus here unless the window has been blurred above. On webOS, the
    // platform may focus the window after the app has already focused a component so we prevent
    // trying to focus something else (potentially) unless the window was previously blurred
    if (_spotOnWindowFocus) {
      setPlatformPointerMode(); // If the window was previously blurred while in pointer mode, the last active containerId may
      // not have yet set focus to its spottable elements. For this reason we can't rely on setting focus
      // to the last focused element of the last active containerId, so we use rootContainerId instead

      var lastFocusedElement = (0, _container.getContainerLastFocusedElement)(_container.rootContainerId);

      while ((0, _container.isContainer)(lastFocusedElement)) {
        var _getContainerConfig2 = (0, _container.getContainerConfig)(lastFocusedElement);

        lastFocusedElement = _getContainerConfig2.lastFocusedElement;
      }

      if (!Spotlight.focus(lastFocusedElement)) {
        // If the last focused element was previously also disabled (or no longer exists), we
        // need to set focus somewhere
        Spotlight.focus();
      }

      _spotOnWindowFocus = false;
    }
  }

  function onKeyUp(evt) {
    _pointerMoveDuringKeyPress = false;
    var keyCode = evt.keyCode;

    if (getDirection(keyCode) || isEnter(keyCode)) {
      SpotlightAccelerator.reset();
      _5WayKeyHold = false;
    }
  }

  function handlePointerHide() {
    if (!_getCurrent()) {
      restoreFocus();
    }
  }

  function onKeyDown(evt) {
    if (shouldPreventNavigation()) {
      (0, _pointer.notifyKeyDown)(evt.keyCode);
      return;
    }

    var keyCode = evt.keyCode;
    var direction = getDirection(keyCode);
    var pointerHandled = (0, _pointer.notifyKeyDown)(keyCode, handlePointerHide);

    if (pointerHandled || !(direction || isEnter(keyCode))) {
      return;
    }

    if (!(0, _Pause.isPaused)() && !_pointerMoveDuringKeyPress) {
      if (_getCurrent()) {
        SpotlightAccelerator.processKey(evt, onAcceleratedKeyDown);
      } else if (!spotNextFromPoint(direction, (0, _pointer.getLastPointerPosition)())) {
        restoreFocus();
      }

      _5WayKeyHold = true;
    }

    if (direction) {
      preventDefault(evt);
    }
  }

  function onMouseMove(_ref2) {
    var target = _ref2.target,
        clientX = _ref2.clientX,
        clientY = _ref2.clientY;

    if (shouldPreventNavigation()) {
      (0, _pointer.notifyPointerMove)(null, target, clientX, clientY);
      return;
    }

    var current = _getCurrent();

    var update = (0, _pointer.notifyPointerMove)(current, target, clientX, clientY);

    if (update) {
      if (_5WayKeyHold) {
        _pointerMoveDuringKeyPress = true;
      }

      var next = (0, _target.getNavigableTarget)(target); // TODO: Consider encapsulating this work within focusElement

      if (next !== current) {
        if (next) {
          focusElement(next, (0, _container.getContainersForNode)(next), true);
          return true;
        } else if (current) {
          current.blur();
          (0, _container.setLastContainerFromTarget)(current, target);
        }
      }
    }
  }

  function onMouseOver(evt) {
    if (shouldPreventNavigation()) return;
    var target = evt.target;

    if ((0, _pointer.getPointerMode)() && (0, _pointer.hasPointerMoved)(evt.clientX, evt.clientY)) {
      var next = (0, _target.getNavigableTarget)(target); // account for child controls

      if (next && next !== _getCurrent()) {
        focusElement(next, (0, _container.getContainersForNode)(next), true);
        return true;
      }

      preventDefault(evt);
    }
  }

  function onTouchEnd(evt) {
    var current = _getCurrent();

    if (current && !current.contains(evt.target)) {
      current.blur();
    }
  }
  /*
   * public methods
   */


  var exports =
  /** @lends spotlight.Spotlight */
  {
    // eslint-disable-line no-shadow

    /**
     * Initializes Spotlight. This is generally handled by
     * {@link spotlight/SpotlightRootDecorator.SpotlightRootDecorator}.
     *
     * @param {Object} containerDefaults Default configuration for new spotlight containers
     * @returns {undefined}
     * @public
     */
    initialize: function initialize(containerDefaults) {
      if (!_initialized) {
        window.addEventListener('blur', onBlur);
        window.addEventListener('focus', onFocus);
        window.addEventListener('keydown', onKeyDown);
        window.addEventListener('keyup', onKeyUp);
        window.addEventListener('mouseover', onMouseOver);
        window.addEventListener('mousemove', onMouseMove);

        if (_platform["default"].touch) {
          window.addEventListener('touchend', onTouchEnd);
        }

        if (_platform["default"].webos) {
          window.top.document.addEventListener('webOSMouse', handleWebOSMouseEvent);
          window.top.document.addEventListener('keyboardStateChange', handleKeyboardStateChangeEvent);
        }

        (0, _container.setLastContainer)(_container.rootContainerId);
        (0, _container.configureDefaults)(containerDefaults);
        (0, _container.configureContainer)(_container.rootContainerId); // by default, pointer mode is off but the platform's current state will override that

        (0, _pointer.setPointerMode)(false);
        setPlatformPointerMode();
        _initialized = true;
      }
    },

    /**
     * Terminates Spotlight. This is generally handled by {@link spotlight.SpotlightRootDecorator}.
     *
     * @public
     */
    terminate: function terminate() {
      window.removeEventListener('blur', onBlur);
      window.removeEventListener('focus', onFocus);
      window.removeEventListener('keydown', onKeyDown);
      window.removeEventListener('keyup', onKeyUp);
      window.removeEventListener('mouseover', onMouseOver);
      window.removeEventListener('mousemove', onMouseMove);

      if (_platform["default"].touch) {
        window.removeEventListener('touchend', onTouchEnd);
      }

      if (_platform["default"].webos) {
        window.top.document.removeEventListener('webOSMouse', handleWebOSMouseEvent);
        window.top.document.removeEventListener('keyboardStateChange', handleKeyboardStateChangeEvent);
      }

      Spotlight.clear();
      _initialized = false;
    },

    /**
     * Resets spotlight container information
     *
     * @private
     */
    clear: function clear() {
      (0, _container.removeAllContainers)();
      (0, _container.setDefaultContainer)();
      (0, _container.setLastContainer)();
      _duringFocusChange = false;
    },
    // set(<config>);
    // set(<containerId>, <config>);

    /**
     * Sets the config for spotlight or the specified containerID
     *
     * @function
     * @param {String|Object} containerIdOrConfig  Configuration object or container ID
     * @param {Object}        [config]             Configuration object if container ID supplied
     *                                             in `containerIdOrConfig`
     * @returns {undefined}
     * @public
     */
    set: _container.configureContainer,
    // add(<config>);
    // add(<containerId>, <config>);

    /**
     * Adds the config for a new container. The container ID may be passed in the configuration
     * object. If no container ID is supplied, a new container ID will be generated.
     *
     * @function
     * @param {String|Object} containerIdOrConfig  Configuration object or container ID
     * @param {Object}        [config]             Configuration object if container ID supplied
     *                                             in `containerIdOrConfig`
     * @returns {String} The container ID of the container
     * @public
     */
    add: _container.addContainer,
    unmount: function unmount(containerId) {
      if (!containerId || typeof containerId !== 'string') {
        throw new Error('Please assign the "containerId"!');
      }

      (0, _container.unmountContainer)(containerId);
    },

    /**
     * Removes a container from Spotlight
     *
     * @param {String} containerId Container ID to remove
     * @returns {Boolean} `true` if container removed, `false` if container does not exist
     * @public
     */
    remove: function remove(containerId) {
      if (!containerId || typeof containerId !== 'string') {
        throw new Error('Please assign the "containerId"!');
      }

      if ((0, _container.getContainerConfig)(containerId)) {
        (0, _container.removeContainer)(containerId);

        if ((0, _container.getLastContainer)() === containerId) {
          Spotlight.setActiveContainer(null);
        }

        return true;
      }

      return false;
    },

    /**
     * Disables the selector rules of the specified container
     *
     * @param {String} containerId Container ID selector rules to disable
     * @returns {Boolean} `true` if container's selector rules are disabled, `false` if container does not exist
     * @public
     */
    disableSelector: function disableSelector(containerId) {
      if ((0, _container.isContainer)(containerId)) {
        (0, _container.configureContainer)(containerId, {
          selectorDisabled: false
        });
        return true;
      }

      return false;
    },

    /**
     * Enables the selector rules of the specified container
     *
     * @param {String} containerId Container ID selector rules to enable
     * @returns {Boolean} `true` if container's selector rules are enabled, `false` if container does not exist
     * @public
     */
    enableSelector: function enableSelector(containerId) {
      if ((0, _container.isContainer)(containerId)) {
        (0, _container.configureContainer)(containerId, {
          selectorDisabled: false
        });
        return true;
      }

      return false;
    },

    /**
     * Pauses Spotlight
     *
     * @function
     * @returns {undefined}
     * @public
     */
    pause: _Pause.pause,

    /**
     * Resumes Spotlight
     *
     * @function
     * @returns {undefined}
     * @public
     */
    resume: _Pause.resume,
    // focus()
    // focus(<containerId>)
    // focus(<extSelector>)

    /**
     * Focuses the specified component ID, container ID, element selector, or the default
     * container.
     *
     * If Spotlight is in pointer mode, focus is not changed but `elem` will be set as the last
     * focused element of its spotlight containers.
     *
     * @param {String|Node} [elem] The spotlight ID or selector for either a spottable
     *  component or a spotlight container, or spottable node. If not supplied, the default
     *  container will be focused.
     * @param {Object} [containerOption] The object including `enterTo` and `toOuterContainer`.
     *  It works when the first parameter `elem` is either a spotlight container ID or a spotlight container node.
     * @param {('last-focused'|'default-element'|'topmost')} [containerOption.enterTo] Specifies preferred
     *  `enterTo` configuration.
     * @param {Boolean} [containerOption.toOuterContainer] If the proper target is not found, search one
     *  recursively to outer container.
     * @returns {Boolean} `true` if focus successful, `false` if not.
     * @public
     */
    focus: function focus(elem) {
      var containerOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var target = elem;
      var wasContainerId = false;
      var currentContainerNode = null;

      if (!elem) {
        target = (0, _target.getTargetByContainer)();
      } else if (typeof elem === 'string') {
        if ((0, _container.getContainerConfig)(elem)) {
          target = (0, _target.getTargetByContainer)(elem, containerOption.enterTo);
          wasContainerId = true;
          currentContainerNode = (0, _container.getContainerNode)(elem);
        } else if (/^[\w\d-]+$/.test(elem)) {
          // support component IDs consisting of alphanumeric, dash, or underscore
          target = (0, _target.getTargetBySelector)("[data-spotlight-id=".concat(elem, "]"));
        } else {
          target = (0, _target.getTargetBySelector)(elem);
        }
      } else if ((0, _container.isContainer)(elem)) {
        target = (0, _target.getTargetByContainer)((0, _container.getContainerId)(elem), containerOption.enterTo);
        currentContainerNode = elem;
      }

      var nextContainerIds = (0, _container.getContainersForNode)(target);
      var nextContainerId = (0, _last["default"])(nextContainerIds);

      if ((0, _container.isNavigable)(target, nextContainerId, true)) {
        var focused = focusElement(target, nextContainerIds);

        if (!focused && wasContainerId) {
          (0, _container.setLastContainer)(elem);
        }

        return focused;
      } else if (wasContainerId) {
        // if we failed to find a spottable target within the provided container, we'll set
        // it as the active container to allow it to focus itself if its contents change
        (0, _container.setLastContainer)(elem);
      }

      if (containerOption.toOuterContainer && currentContainerNode) {
        var outerContainer = (0, _container.getContainersForNode)(currentContainerNode.parentElement).pop();

        if (outerContainer) {
          return this.focus(outerContainer, containerOption);
        }
      }

      return false;
    },
    // move(<direction>)
    // move(<direction>, <selector>)

    /**
     * Moves focus to the next spottable control in the direction specified. Optionally, a source
     * element selector may be supplied as the starting point.
     *
     * @param {String} direction Direction to move, one of `'left'`, `'right'`, `'up'` or `'down'`
     * @param {String|undefined} selector If supplied, the element to move from. If not supplied,
     *	the currently focused item will be used.
     * @returns {Boolean} `true` if focus successful, `false` if not.
     * @public
     */
    move: function move(direction, selector) {
      direction = direction.toLowerCase();

      if (direction !== 'up' && direction !== 'down' && direction !== 'left' && direction !== 'right') {
        return false;
      }

      var elem = selector ? (0, _utils.parseSelector)(selector)[0] : _getCurrent();

      if (!elem) {
        return false;
      }

      var containerIds = (0, _container.getContainersForNode)(elem);

      if (!containerIds.length) {
        return false;
      }

      return spotNext(direction, elem, containerIds);
    },

    /**
     * Sets or clears the default container that will receive focus.
     *
     * @function
     * @param {String} [containerId] The container ID or a falsy value to clear default
     *                               container
     * @returns {undefined}
     * @public
     */
    setDefaultContainer: _container.setDefaultContainer,

    /**
     * Gets the currently active container.
     *
     * @returns {String} The id of the currently active container
     * @public
     */
    getActiveContainer: function getActiveContainer() {
      return (0, _container.getLastContainer)() || _container.rootContainerId;
    },

    /**
     * Sets the currently active container.
     *
     * Note: If the current container is restricted to 'self-only' and `containerId` is not
     * contained within the current container then the active container will not be updated.
     *
     * @param {String} [containerId] The id of the currently active container. If this is not
     *	provided, the root container is set as the currently active container.
     * @public
     */
    setActiveContainer: function setActiveContainer(containerId) {
      if ((0, _container.mayActivateContainer)(containerId)) {
        (0, _container.setLastContainer)(containerId || _container.rootContainerId);
      }
    },

    /**
     * Gets the current pointer mode
     *
     * @function
     * @returns {Boolean} `true` if spotlight is in pointer mode
     * @public
     */
    getPointerMode: _pointer.getPointerMode,

    /**
     * Sets the current pointer mode
     *
     * @function
     * @param {Boolean} pointerMode The value of the pointer mode. This determines how
     *	spotlight manages focus change behaviors.
     * @public
     */
    setPointerMode: _pointer.setPointerMode,

    /**
     * Gets the muted mode value of a spottable element.
     *
     * @param {Object} elem The dom element used to determine the muted status.
     * @returns {Boolean} `true` if the passed-in control is in muted mode.
     * @public
     */
    isMuted: function isMuted(elem) {
      if (!elem) {
        return false;
      }

      return (0, _utils.matchSelector)('[data-spotlight-container-muted="true"] .' + _Spottable.spottableClass, elem);
    },

    /**
     * Determines whether Spotlight is currently paused.
     *
     * @function
     * @returns {Boolean} `true` if Spotlight is currently paused.
     * @public
     */
    isPaused: _Pause.isPaused,

    /**
     * Determines whether an element is spottable.
     *
     * @param {Object} elem The dom element used to determine the spottable status.
     * @returns {Boolean} `true` if the element being evaluated is currently spottable.
     * @public
     */
    isSpottable: function isSpottable(elem) {
      if (!elem) {
        return false;
      }

      return (0, _target.isFocusable)(elem);
    },

    /**
     * Returns the currently spotted control.
     *
     * @returns {Node} The control that currently has focus, if available
     * @public
     */
    getCurrent: function getCurrent() {
      return _getCurrent();
    },

    /**
     * Returns a list of spottable elements wrapped by the supplied container.
     *
     * @param {String} containerId The id of the container used to determine the list of spottable elements
     * @returns {Node[]} The spottable elements that are wrapped by the supplied container
     * @public
     */
    getSpottableDescendants: function getSpottableDescendants(containerId) {
      if (!containerId || typeof containerId !== 'string') {
        throw new Error('Please assign the "containerId"!');
      }

      return (0, _container.getSpottableDescendants)(containerId);
    },

    /**
     * Focuses the next spottable control from the position specified in the direction specified.
     *
     * @param {String} direction Direction to move, one of `'left'`, `'right'`, `'up'`, or `'down'`
     * @param {Object} position `x` and `y` coordinates for the pointer
     * @private
     */
    focusNextFromPoint: spotNextFromPoint
  };
  return exports;
}();

exports.Spotlight = Spotlight;
var _default = Spotlight;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/spotlight/src/target.js":
/*!*****************************************************!*\
  !*** ./node_modules/@enact/spotlight/src/target.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getNavigableTarget = getNavigableTarget;
exports.getNearestTargetFromPosition = void 0;
exports.getTargetByContainer = getTargetByContainer;
exports.getTargetByDirectionFromElement = getTargetByDirectionFromElement;
exports.getTargetByDirectionFromPosition = getTargetByDirectionFromPosition;
exports.getTargetBySelector = getTargetBySelector;
exports.isFocusable = isFocusable;

var _clamp = _interopRequireDefault(__webpack_require__(/*! ramda/src/clamp */ "./node_modules/ramda/src/clamp.js"));

var _last = _interopRequireDefault(__webpack_require__(/*! ramda/src/last */ "./node_modules/ramda/src/last.js"));

var _container = __webpack_require__(/*! ./container */ "./node_modules/@enact/spotlight/src/container.js");

var _navigate = _interopRequireDefault(__webpack_require__(/*! ./navigate */ "./node_modules/@enact/spotlight/src/navigate.js"));

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@enact/spotlight/src/utils.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function isFocusable(elem) {
  var containers = (0, _container.getContainersForNode)(elem);
  var verifySelector = true;

  for (var i = containers.length - 1; i >= 0; i--) {
    var containerId = containers[i];

    if (!(0, _container.isNavigable)(elem, containerId, verifySelector)) {
      return false;
    } // only verify selector for the first (immediate ancestor) container


    verifySelector = false;
  }

  return true;
}

function getContainersToSearch(containerId) {
  var range = [];

  var addRange = function addRange(id) {
    var config = (0, _container.getContainerConfig)(id);

    if (id && range.indexOf(id) < 0 && config && !config.selectorDisabled) {
      range.push(id);
    }
  };

  if (containerId) {
    addRange(containerId);
  } else {
    addRange((0, _container.getDefaultContainer)());
    addRange((0, _container.getLastContainer)());

    _toConsumableArray((0, _container.getAllContainerIds)()).map(addRange);
  }

  return range;
}

function getTargetByContainer(containerId, enterTo) {
  return getContainersToSearch(containerId).reduce(function (next, id) {
    return next || (0, _container.getContainerFocusTarget)(id, enterTo);
  }, null);
}

function getTargetBySelector(selector) {
  if (!selector) return null;

  if (selector.charAt(0) === '@') {
    var containerId = selector.length === 1 ? null : selector.substr(1);
    return getTargetByContainer(containerId);
  }

  var next = (0, _utils.parseSelector)(selector)[0];

  if (next) {
    if ((0, _container.isContainer)(next)) {
      return getTargetByContainer((0, _container.getContainerId)(next));
    }

    var nextContainerIds = (0, _container.getContainersForNode)(next);

    if ((0, _container.isNavigable)(next, (0, _last["default"])(nextContainerIds), true)) {
      return next;
    }
  }

  return null;
}

function isRestrictedContainer(containerId) {
  var config = (0, _container.getContainerConfig)(containerId);
  return config && (config.enterTo === 'last-focused' || config.enterTo === 'default-element');
}

function filterRects(elementRects, boundingRect) {
  if (!boundingRect) {
    return elementRects;
  } // remove elements that are outside of boundingRect, if specified


  return elementRects.filter(function (rect) {
    if ((0, _container.isContainer)(rect.element)) {
      // For containers, test intersection since they may be larger than the bounding rect
      return (0, _utils.intersects)(boundingRect, rect);
    } else {
      // For elements, use contains with the center to include mostly visible elements
      return (0, _utils.contains)(boundingRect, rect.center);
    }
  }).map(function (rect) {
    var topUpdate = rect.top < boundingRect.top;
    var bottomUpdate = rect.bottom > boundingRect.bottom;
    var leftUpdate = rect.left < boundingRect.left;
    var rightUpdate = rect.right > boundingRect.right; // if the element's rect is larger than the bounding rect, clamp it to the bounding rect and
    // recalculate the center based on the new bounds.

    if (topUpdate || bottomUpdate || leftUpdate || rightUpdate) {
      var updated = _objectSpread(_objectSpread({}, rect), {}, {
        center: _objectSpread({}, rect.center)
      });

      if (topUpdate) updated.top = boundingRect.top;
      if (bottomUpdate) updated.bottom = boundingRect.bottom;
      if (leftUpdate) updated.left = boundingRect.left;
      if (rightUpdate) updated.right = boundingRect.right;

      if (leftUpdate || rightUpdate) {
        var centerX = updated.left + (updated.right - updated.left) / 2;
        updated.center.x = updated.center.left = updated.center.right = centerX;
      }

      if (topUpdate || bottomUpdate) {
        var centerY = updated.top + (updated.bottom - updated.top) / 2;
        updated.center.y = updated.center.top = updated.center.bottom = centerY;
      }

      return updated;
    }

    return rect;
  });
}

function getContainerContainingRect(elementRects, elementRect) {
  // find candidates that are containers and *visually* contain element
  var overlapping = elementRects.filter(function (rect) {
    return (0, _container.isContainer)(rect.element) && (0, _utils.contains)(rect, elementRect);
  }); // if the next element is a container AND the current element is *visually* contained within
  // one of the candidate element, we need to ignore container `enterTo` preferences and
  // retrieve its spottable descendants and try to navigate to them.

  if (overlapping.length) {
    return overlapping[0].element.dataset.spotlightId;
  }

  return false;
}

function getOverflowContainerRect(containerId) {
  // if the target container has overflowing content, update the boundingRect to match its
  // bounds to prevent finding elements within the container's hierarchy but not visible.
  // This filter only applies when waterfalling to prevent filtering out elements that share
  // a container tree with `element`
  var nextConfig = (0, _container.getContainerConfig)(containerId);

  if (nextConfig && nextConfig.overflow) {
    return (0, _utils.getContainerRect)(containerId);
  }
}

function getTargetInContainerByDirectionFromPosition(direction, containerId, positionRect, elementContainerIds, boundingRect) {
  var elements = (0, _container.getDeepSpottableDescendants)(containerId);
  var elementRects = filterRects((0, _utils.getRects)(elements), boundingRect);
  var next = null;

  var _loop = function _loop() {
    var overlappingContainerId = getContainerContainingRect(elementRects, positionRect); // if the pointer is within a container that is a candidate element, we need to ignore container
    // `enterTo` preferences and retrieve its spottable descendants and try to navigate to them.

    if (overlappingContainerId) {
      next = getTargetInContainerByDirectionFromPosition(direction, overlappingContainerId, positionRect, elementContainerIds, boundingRect);

      if (!next) {
        // filter out the container and try again
        elementRects = elementRects.filter(function (rect) {
          return rect.element.dataset.spotlightId !== overlappingContainerId;
        });
        return "continue";
      } // found a target so break out and return


      return "break";
    } // try to navigate from position to one of the candidates in containerId


    next = (0, _navigate["default"])(positionRect, direction, elementRects, (0, _container.getContainerConfig)(containerId)); // if we match a container, recurse into it

    if (next && (0, _container.isContainer)(next)) {
      var nextContainerId = next.dataset.spotlightId; // need to cache this reference so we can filter it out later if necessary

      var lastNavigated = next;
      next = getTargetInContainerByDirectionFromPosition(direction, nextContainerId, positionRect, elementContainerIds, getOverflowContainerRect(nextContainerId) || boundingRect);

      if (!next) {
        // filter out the container and try again
        elementRects = elementRects.filter(function (rect) {
          return rect.element !== lastNavigated;
        });
        return "continue";
      }
    } // If we've met every condition and haven't explicitly retried the search via `continue`,
    // break out and return


    return "break";
  };

  while (elementRects.length > 0) {
    var _ret = _loop();

    if (_ret === "continue") continue;
    if (_ret === "break") break;
  }

  return next;
}

function getTargetInContainerByDirectionFromElement(direction, containerId, element, elementRect, elementContainerIds, boundingRect) {
  var elements = (0, _container.getDeepSpottableDescendants)(containerId); // shortcut for previous target from element if it were saved

  var previous = (0, _container.getContainerPreviousTarget)(containerId, direction, element);

  if (previous && elements.indexOf(previous) !== -1) {
    return previous;
  } // `spotlightOverflow` is a private, and likely temporary, API to allow a component within an
  // spotlight container with `overflow: true` to be treated as if it were outside of the
  // container. The result is that the candidates, `elements` are filtered by the bounds of the
  // overflow container effectively hiding those that have overflowed and are visually hidden.
  //
  // Currently only used by moonstone/Scroller.Scrollbar as a means to allow 5-way navigation to
  // escape the Scrollable from paging controls rather than focusing contents that are out of view


  if (element.dataset.spotlightOverflow === 'ignore') {
    boundingRect = getOverflowContainerRect(containerId) || boundingRect;
  }

  var elementRects = filterRects((0, _utils.getRects)(elements), boundingRect);
  var next = null;

  var _loop2 = function _loop2() {
    var overlappingContainerId = getContainerContainingRect(elementRects, elementRect); // if the next element is a container AND the current element is *visually* contained within
    // one of the candidate elements, we need to ignore container `enterTo` preferences and
    // retrieve its spottable descendants and try to navigate to them.

    if (overlappingContainerId) {
      next = getTargetInContainerByDirectionFromElement(direction, overlappingContainerId, element, elementRect, elementContainerIds, boundingRect);

      if (!next) {
        // filter out the container and try again
        elementRects = elementRects.filter(function (rect) {
          return rect.element.dataset.spotlightId !== overlappingContainerId;
        });
        return "continue";
      } // found a target so break out and return


      return "break";
    } // If one of the downstream containers is configured for partition, we use that
    // container's bounds as the partition rect for navigation.


    var partitionContainer = elementContainerIds.slice(elementContainerIds.indexOf(containerId) + 1).find(function (id) {
      var cfg = (0, _container.getContainerConfig)(id);
      return cfg && cfg.partition;
    });
    var partitionRect = elementRect;

    if (partitionContainer) {
      partitionRect = (0, _utils.getContainerRect)(partitionContainer);
    } // try to navigate from element to one of the candidates in containerId


    next = (0, _navigate["default"])(elementRect, direction, elementRects, (0, _container.getContainerConfig)(containerId), partitionRect); // if we match a container,

    if (next && (0, _container.isContainer)(next)) {
      var nextContainerId = next.dataset.spotlightId; // need to cache this reference so we can filter it out later if necessary

      var lastNavigated = next; // and it is restricted, return its target

      if (isRestrictedContainer(nextContainerId)) {
        next = getTargetByContainer(nextContainerId);
      } else {
        // otherwise, recurse into it
        next = getTargetInContainerByDirectionFromElement(direction, nextContainerId, element, elementRect, elementContainerIds, getOverflowContainerRect(nextContainerId) || boundingRect);
      }

      if (!next) {
        elementRects = elementRects.filter(function (rect) {
          return rect.element !== lastNavigated;
        });
        return "continue";
      }
    } // If we've met every condition and haven't explicitly retried the search via `continue`,
    // break out and return


    return "break";
  };

  while (elementRects.length > 0) {
    var _ret2 = _loop2();

    if (_ret2 === "continue") continue;
    if (_ret2 === "break") break;
  }

  return next;
}

function getTargetByDirectionFromElement(direction, element) {
  var extSelector = element.getAttribute('data-spot-' + direction);

  if (typeof extSelector === 'string') {
    return getTargetBySelector(extSelector);
  }

  var elementRect = (0, _utils.getRect)(element);
  var next = (0, _container.getNavigableContainersForNode)(element).reduceRight(function (result, containerId, index, elementContainerIds) {
    result = result || getTargetInContainerByDirectionFromElement(direction, containerId, element, elementRect, elementContainerIds);

    if (!result) {
      result = getLeaveForTarget(containerId, direction); // To support a `leaveFor` configuration with navigation disallowed in the current
      // `direction`, we return the current element to prevent further searches for a
      // target in this reduction.

      if (result === false) {
        result = element;
      }
    }

    return result;
  }, null); // if the reduce above returns the original element, it means it hit a `leaveFor` config that
  // prevents navigation so we enforce that here by returning null.

  return next !== element ? next : null;
}

function getTargetByDirectionFromPosition(direction, position, containerId) {
  var pointerRect = (0, _utils.getPointRect)(position);
  return (0, _container.getNavigableContainersForNode)((0, _container.getContainerNode)(containerId)).reduceRight(function (result, id, index, elementContainerIds) {
    return result || getTargetInContainerByDirectionFromPosition(direction, id, pointerRect, elementContainerIds);
  }, null);
}
/**
 * Returns the target identified by the selector configured for the container identified by
 * `containerId` for the given `direction`. If the selector is an empty string, the method returns
 * `false` indicating that navigation isn't allowed out of the container in that direction.
 *
 * @param   {String}        containerId  Identifier for a container
 * @param   {String}        direction    Direction to navigate (up, down, left, right)
 *
 * @returns {Node|Boolean}               Target, if found, or `false` if navigation is disallowed
 * @private
 */


function getLeaveForTarget(containerId, direction) {
  var config = (0, _container.getContainerConfig)(containerId);

  if (config) {
    var target = config.restrict !== 'self-only' && config.leaveFor && config.leaveFor[direction];

    if (typeof target === 'string') {
      if (target === '') {
        return false;
      }

      return getTargetBySelector(target);
    }

    var nextContainerIds = (0, _container.getContainersForNode)(target);

    if ((0, _container.isNavigable)(target, (0, _last["default"])(nextContainerIds))) {
      return target;
    }
  }

  return null;
}

function getNavigableTarget(target) {
  if (target === document) return null;
  var parent;

  while (target && ((0, _container.isContainer)(target) || !isFocusable(target))) {
    parent = target.parentNode;
    target = parent === document ? null : parent; // calling isNavigable on document is problematic
  }

  return target;
}

var getOffsetDistanceToTargetFromPosition = function getOffsetDistanceToTargetFromPosition(distance, direction, _ref, _ref2) {
  var x = _ref.x,
      y = _ref.y;
  var left = _ref2.left,
      right = _ref2.right,
      top = _ref2.top,
      bottom = _ref2.bottom;

  if (direction === 'left' || direction === 'right') {
    if (y > bottom) {
      distance += y - bottom;
    } else if (y < top) {
      distance += top - y;
    }
  } else if (x > right) {
    distance += x - right;
  } else if (x < left) {
    distance += left - x;
  }

  return distance;
};

var getDistanceToTargetFromPosition = function getDistanceToTargetFromPosition(direction, position, elementRect) {
  var x = position.x,
      y = position.y;
  var distance;

  if (direction === 'left') {
    distance = x - elementRect.right;
  } else if (direction === 'right') {
    distance = elementRect.left - x;
  } else if (direction === 'up') {
    distance = y - elementRect.bottom;
  } else if (direction === 'down') {
    distance = elementRect.top - y;
  }

  return getOffsetDistanceToTargetFromPosition((0, _clamp["default"])(0, Math.abs(distance), distance), direction, position, elementRect);
};

var getNearestTargetsInContainerFromPosition = function getNearestTargetsInContainerFromPosition(position, containerId) {
  return ['up', 'left', 'right', 'down'].reduce(function (result, direction) {
    var target = getTargetByDirectionFromPosition(direction, position, containerId);

    if (target) {
      result.push({
        direction: direction,
        target: target
      });
    }

    return result;
  }, []);
};

var getNearestTargetInContainerFromPosition = function getNearestTargetInContainerFromPosition(position, containerId) {
  var targets = getNearestTargetsInContainerFromPosition(position, containerId);

  if (!targets.length) {
    return;
  }

  targets.forEach(function (item) {
    var direction = item.direction,
        target = item.target;
    item.distance = getDistanceToTargetFromPosition(direction, position, (0, _utils.getRect)(target));
  });
  targets.sort(function (a, b) {
    return a.distance - b.distance;
  });
  return targets[0].target;
};

var getNearestTargetFromPosition = function getNearestTargetFromPosition(position, containerId) {
  return getNavigableTarget(document.elementFromPoint(position.x, position.y)) || getNearestTargetInContainerFromPosition(position, containerId);
};

exports.getNearestTargetFromPosition = getNearestTargetFromPosition;

/***/ }),

/***/ "./node_modules/@enact/spotlight/src/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/@enact/spotlight/src/utils.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.contains = void 0;
exports.getContainerRect = getContainerRect;
exports.getPointRect = getPointRect;
exports.getRect = getRect;
exports.getRects = getRects;
exports.matchSelector = exports.intersects = void 0;
exports.parseSelector = parseSelector;

var _curry = _interopRequireDefault(__webpack_require__(/*! ramda/src/curry */ "./node_modules/ramda/src/curry.js"));

var _warning = _interopRequireDefault(__webpack_require__(/*! warning */ "./node_modules/warning/warning.js"));

var _container = __webpack_require__(/*! ./container */ "./node_modules/@enact/spotlight/src/container.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var elementMatchesSelector = function elementMatchesSelector(selector) {
  var matchedNodes = (this.parentNode || this.document).querySelectorAll(selector);
  return [].slice.call(matchedNodes).indexOf(this) >= 0;
};

if (typeof window === 'object') {
  elementMatchesSelector = window.Element.prototype.matches || window.Element.prototype.matchesSelector || window.Element.prototype.mozMatchesSelector || window.Element.prototype.webkitMatchesSelector || window.Element.prototype.msMatchesSelector || window.Element.prototype.oMatchesSelector || elementMatchesSelector;
}

var matchSelector = (0, _curry["default"])(function (selector, elem) {
  if (typeof selector === 'string') {
    return elementMatchesSelector.call(elem, selector);
  } else if (typeof selector === 'object' && selector.length) {
    return selector.indexOf(elem) >= 0;
  } else if (typeof selector === 'object' && selector.nodeType === 1) {
    return elem === selector;
  }

  return false;
});
exports.matchSelector = matchSelector;

function parseSelector(selector) {
  var result = [];

  try {
    if (typeof selector === 'string') {
      result = [].slice.call(document.querySelectorAll(selector));
    } else if (typeof selector === 'object' && selector.length) {
      result = [].slice.call(selector);
    } else if (typeof selector === 'object' && selector.nodeType === 1) {
      result = [selector];
    }
  } catch (ex) {
     true ? (0, _warning["default"])(true, "parseSelector failed for selector: ".concat(selector)) : 0;
  }

  return result;
}

var testIntersection = function testIntersection(type, containerRect, elementRect) {
  var L = containerRect.left,
      R = containerRect.right,
      T = containerRect.top,
      B = containerRect.bottom;
  var l = elementRect.left,
      r = elementRect.right,
      t = elementRect.top,
      b = elementRect.bottom;

  if (type === 'intersects') {
    // Test intersection by eliminating the area of the element that is outside of the container
    return !(b < T || t > B || r < L || l > R);
  } else if (type === 'contains') {
    var epsilon = 1; // Test whether all bounds are within the container

    return r > L - epsilon && r < R + epsilon && // right
    l > L - epsilon && l < R + epsilon && // left
    t > T - epsilon && t < B + epsilon && // top
    b > T - epsilon && b < B + epsilon // bottom
    ;
  }

  return true;
};

var intersects = (0, _curry["default"])(function (containerRect, elementRect) {
  return testIntersection('intersects', containerRect, elementRect);
});
exports.intersects = intersects;
var contains = (0, _curry["default"])(function (containerRect, elementRect) {
  return testIntersection('contains', containerRect, elementRect);
});
exports.contains = contains;

function getRect(elem) {
  var cr = elem.getBoundingClientRect();
  var rect = {
    left: cr.left,
    top: cr.top,
    width: cr.width,
    height: cr.height
  };
  rect.element = elem;
  rect.right = rect.left + rect.width;
  rect.bottom = rect.top + rect.height;
  rect.center = {
    x: rect.left + Math.floor(rect.width / 2),
    y: rect.top + Math.floor(rect.height / 2)
  };
  rect.center.left = rect.center.right = rect.center.x;
  rect.center.top = rect.center.bottom = rect.center.y;
  return rect;
}

function getPointRect(position) {
  var x = position.x,
      y = position.y;
  return {
    left: x,
    top: y,
    width: 0,
    height: 0,
    right: x,
    bottom: y,
    center: {
      x: x,
      y: y,
      left: x,
      right: x,
      top: y,
      bottom: y
    }
  };
}

function getRects(candidates) {
  if (candidates && candidates.length > 0) {
    return candidates.map(getRect);
  }

  return [];
}

function getViewportRect() {
  var _window = window,
      width = _window.innerWidth,
      height = _window.innerHeight;
  var x = width / 2;
  var y = height / 2;
  return {
    left: 0,
    top: 0,
    width: width,
    height: height,
    right: width,
    bottom: height,
    center: {
      x: x,
      y: y,
      left: x,
      right: x,
      top: y,
      bottom: y
    }
  };
}

function getContainerRect(containerId) {
  var containerNode = (0, _container.getContainerNode)(containerId);

  if (!containerNode) {
    return null;
  }

  if (containerNode === document) {
    return getViewportRect();
  }

  return getRect(containerNode);
}

/***/ }),

/***/ "./node_modules/@enact/ui/AnnounceDecorator/Announce.js":
/*!**************************************************************!*\
  !*** ./node_modules/@enact/ui/AnnounceDecorator/Announce.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Announce = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _class;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/**
 * An unstyled component with an imperative API to alert the user.
 *
 * The `announce()` method should be used to alert the user of behavior for accessibility.
 *
 * Example:
 * ```
 * import {Announce} from '@enact/ui/AnnounceDecorator';
 * import {Component} from 'react';
 *
 * class Example extends Component {
 *   notify = () => {
 *     if (this.announce) {
 *       this.announce.announce('this text will be alerted to user by TTS');
 *     }
 *   }
 *
 *   setAnnounceRef = (announce) => {
 *     this.announce = announce;
 *   }
 *
 *   render () {
 *     <div>
 *       <button onClick={this.notify}>Notify on Click</button>
 *       <Announce ref={this.setAnnounceRef} />
 *     </div>
 *   }
 * }
 * ```
 *
 * @class Announce
 * @ui
 * @memberof ui/AnnounceDecorator
 * @public
 */


var Announce = (_class = /*#__PURE__*/function (_Component) {
  _inherits(Announce, _Component);

  var _super = _createSuper(Announce);

  function Announce() {
    var _this;

    _classCallCheck(this, Announce);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.resetAlert = function () {
      _this.alertTimeout = null;

      _this.alert.removeAttribute('aria-label');
    };

    _this.announce = function (message) {
      var clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (clear) {
        _this.clearTimeout();

        _this.resetAlert();
      }

      if (_this.alert && !_this.alertTimeout && message) {
        _this.alert.setAttribute('aria-label', message);

        _this.alertTimeout = setTimeout(_this.resetAlert, _this.props.timeout);
      }
    };

    _this.setAlertRef = function (node) {
      _this.alert = node;
    };

    return _this;
  }

  _createClass(Announce, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearTimeout();
    }
  }, {
    key: "clearTimeout",
    value: function (_clearTimeout) {
      function clearTimeout() {
        return _clearTimeout.apply(this, arguments);
      }

      clearTimeout.toString = function () {
        return _clearTimeout.toString();
      };

      return clearTimeout;
    }(function () {
      if (this.alertTimeout) {
        clearTimeout(this.alertTimeout);
      }
    })
  }, {
    key: "render",
    value: function render() {
      var props = Object.assign({}, this.props);
      delete props.timeout;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("span", _objectSpread({
        ref: this.setAlertRef,
        role: "alert"
      }, props));
    }
  }]);

  return Announce;
}(_react.Component), _class.displayName = 'Announce', _class.propTypes =
/** @lends ui/AnnounceDecorator.Announce.prototype */
{
  /**
   * Time, in milliseconds, to wait to remove the alert message.
  	 * Subsequent updates to the
   * message before the timeout are ignored.
   *
   * @type {Number}
   * @default 500
   * @public
   */
  timeout: _propTypes["default"].number
}, _class.defaultProps = {
  // 500ms is somewhat arbitrary. Would like to do some further usability testing to determine
  // how frequently we should allow alerting. Should also consider if this timeout should be
  // "global" such that multiple instances of Announce respect each other.
  timeout: 500
}, _class);
exports.Announce = Announce;
var _default = Announce;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Button/Button.js":
/*!*************************************************!*\
  !*** ./node_modules/@enact/ui/Button/Button.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ButtonDecorator = exports.ButtonBase = exports.Button = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _ComponentOverride = _interopRequireDefault(__webpack_require__(/*! ../ComponentOverride */ "./node_modules/@enact/ui/ComponentOverride/ComponentOverride.js"));

var _ForwardRef = _interopRequireDefault(__webpack_require__(/*! ../ForwardRef */ "./node_modules/@enact/ui/ForwardRef/ForwardRef.js"));

var _Touchable = _interopRequireDefault(__webpack_require__(/*! ../Touchable */ "./node_modules/@enact/ui/Touchable/Touchable.js"));

var _ButtonModule = _interopRequireDefault(__webpack_require__(/*! ./Button.module.css */ "./node_modules/@enact/ui/Button/Button.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["children", "componentRef", "css", "decoration", "disabled", "icon"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * A basic button component structure without any behaviors applied to it.
 *
 * @class ButtonBase
 * @memberof ui/Button
 * @ui
 * @public
 */


var ButtonBase = (0, _kind["default"])({
  name: 'ui:Button',
  propTypes:
  /** @lends ui/Button.ButtonBase.prototype */
  {
    /**
     * Called with a reference to the root component.
     *
     * When using {@link ui/Button.Button}, the `ref` prop is forwarded to this component
     * as `componentRef`.
     *
     * @type {Object|Function}
     * @public
     */
    componentRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `button` - The root component class
     * * `bg` - The background node of the button
     * * `client` - The content node of the button
     * * `hasIcon` - Applied when there is an `icon` present
     * * `icon` - The icon node, when `icon` is set
     * * `large` - Applied when `size` prop is `'large'`
     * * `minWidth` - Applied when `minWidth` prop is `true`
     * * `pressed` - Applied when `pressed` prop is `true`
     * * `selected` - Applied when `selected` prop is `true`
     * * `small` - Applied when `size` prop is `'small'`
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Additional DOM nodes which may be necessary for decorating the Button.
     *
     * @type {Node}
     * @private
     */
    decoration: _propTypes2["default"].node,

    /**
     * Applies the `disabled` class.
     *
     * When `true`, the button is shown as disabled.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes2["default"].bool,

    /**
     * The icon displayed within the Button.
     *
     * The icon will be displayed before the natural reading order of the text, regardless
     * of locale. Any string that is valid for its {@link ui/Button.Button.iconComponent} is
     * valid here. If `icon` is specified as a string and `iconButton` is undefined, the icon is
     * not rendered.
     *
     * This also supports a custom icon, in the form of a DOM node or a Component,
     * with the caveat that if you supply a custom icon, you are responsible for sizing and
     * locale positioning of the custom component.
     *
     * Setting this to `true` means the `iconComponent` will be rendered but with empty content.
     * This may be useful if you've customized the `iconComponent` to render the icon content
     * externally.
     *
     * @type {Node|Boolean}
     * @public
     */
    icon: _propTypes2["default"].oneOfType([_propTypes2["default"].node, _propTypes2["default"].bool]),

    /**
     * The component used to render the [icon]{@link ui/Button.ButtonBase.icon}.
     *
     * This component will receive the `icon` class to customize its styling.
     * If [icon]{@link ui/Button.ButtonBase.icon} is not assigned or is false, this component
     * will not be rendered.
     *
     * If this is a component rather than an HTML element string, this component will also
     * receive the `size` and `iconFlip` (as `flip`) properties and should be configured to
     * handle it.
     *
     * @type {Component|Node}
     * @public
     */
    iconComponent: _propTypes["default"].componentOverride,

    /**
     * Flips the icon.
     *
     * @see {@link ui/Icon.Icon#flip}
     * @type {String}
     * @public
     */
    iconFlip: _propTypes2["default"].string,

    /**
     * Enforces a minimum width for the component.
     *
     * Applies the `minWidth` CSS class which can be customized by
     * [theming]{@link /docs/developer-guide/theming/}.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    minWidth: _propTypes2["default"].bool,

    /**
     * Indicates the component is depressed.
     *
     * Applies the `pressed` CSS class which can be customized by
     * [theming]{@link /docs/developer-guide/theming/}.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    pressed: _propTypes2["default"].bool,

    /**
     * Indicates the component is selected.
     *
     * Applies the `selected` CSS class which can be customized by
     * [theming]{@link /docs/developer-guide/theming/}.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    selected: _propTypes2["default"].bool,

    /**
     * The size of the button.
     *
     * Applies the CSS class which can be customized by
     * [theming]{@link /docs/developer-guide/theming/}.
     *
     * @type {String}
     * @public
     */
    size: _propTypes2["default"].string
  },
  defaultProps: {
    disabled: false,
    minWidth: true,
    pressed: false,
    selected: false
  },
  styles: {
    css: _ButtonModule["default"],
    className: 'button',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref) {
      var icon = _ref.icon,
          minWidth = _ref.minWidth,
          pressed = _ref.pressed,
          selected = _ref.selected,
          size = _ref.size,
          styler = _ref.styler;
      return styler.append({
        hasIcon: !!icon,
        minWidth: minWidth,
        pressed: pressed,
        selected: selected
      }, size);
    },
    icon: function icon(_ref2) {
      var css = _ref2.css,
          _icon = _ref2.icon,
          iconComponent = _ref2.iconComponent,
          iconFlip = _ref2.iconFlip,
          size = _ref2.size;
      if (_icon == null || _icon === false) return; // Establish the base collection of props for the most basic `iconComponent` type, an
      // HTML element string.

      var props = {
        className: css.icon,
        component: iconComponent
      }; // Add in additional props that any Component supplied to `iconComponent` should be
      // configured to handle.

      if (typeof iconComponent !== 'string') {
        props.size = size; // the following inadvertently triggers a linting rule
        // eslint-disable-next-line enact/prop-types

        props.flip = iconFlip;
      }

      if (_icon !== true) {
        props.children = _icon;
      }

      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComponentOverride["default"], _objectSpread({}, props));
    }
  },
  render: function render(_ref3) {
    var children = _ref3.children,
        componentRef = _ref3.componentRef,
        css = _ref3.css,
        decoration = _ref3.decoration,
        disabled = _ref3.disabled,
        icon = _ref3.icon,
        rest = _objectWithoutProperties(_ref3, _excluded);

    delete rest.iconComponent;
    delete rest.iconFlip;
    delete rest.minWidth;
    delete rest.pressed;
    delete rest.selected;
    delete rest.size;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({
      role: "button"
    }, rest), {}, {
      "aria-disabled": disabled,
      disabled: disabled,
      ref: componentRef,
      children: [decoration ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: css.decoration,
        children: decoration
      }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: css.bg
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: css.client,
        children: [icon, children]
      })]
    }));
  }
});
/**
 * A higher-order component that adds touch support to a [ButtonBase]{@link ui/Button.ButtonBase}.
 *
 * @hoc
 * @memberof ui/Button
 * @mixes ui/Touchable.Touchable
 * @public
 */

exports.ButtonBase = ButtonBase;
var ButtonDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'componentRef'
}), (0, _Touchable["default"])({
  activeProp: 'pressed'
}));
/**
 * A minimally-styled button component with touch support.
 *
 * @class Button
 * @memberof ui/Button
 * @extends ui/Button.ButtonBase
 * @mixes ui/Button.ButtonDecorator
 * @omit componentRef
 * @ui
 * @public
 */

exports.ButtonDecorator = ButtonDecorator;
var Button = ButtonDecorator(ButtonBase);
exports.Button = Button;
var _default = Button;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Cancelable/Cancelable.js":
/*!*********************************************************!*\
  !*** ./node_modules/@enact/ui/Cancelable/Cancelable.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Cancelable = void 0;
Object.defineProperty(exports, "addCancelHandler", ({
  enumerable: true,
  get: function get() {
    return _cancelHandler.addCancelHandler;
  }
}));
exports["default"] = void 0;
Object.defineProperty(exports, "removeCancelHandler", ({
  enumerable: true,
  get: function get() {
    return _cancelHandler.removeCancelHandler;
  }
}));

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _keymap = __webpack_require__(/*! @enact/core/keymap */ "./node_modules/@enact/core/keymap/index.js");

var _invariant = _interopRequireDefault(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _cancelHandler = __webpack_require__(/*! ./cancelHandler */ "./node_modules/@enact/ui/Cancelable/cancelHandler.js");

var _modalHandler = __webpack_require__(/*! ./modalHandler */ "./node_modules/@enact/ui/Cancelable/modalHandler.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/**
 * Default config for {@link ui/Cancelable.Cancelable}
 *
 * @memberof ui/Cancelable.Cancelable
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Called when a cancel action is invoked by the user.
   *
   * If it is a string, the cancel handler will attempt to invoke a function passed as a prop of
   * that name. If it is a function, that function will be called with the current props as the
   * only argument.
   *
   * If the function handles the cancel action, it should call `stopPropagation()` on the provided
   * event object prevent container or `modal` Cancelable instances from also handling the action.
   *
   * @type {String|Function}
   * @required
   * @memberof ui/Cancelable.Cancelable.defaultConfig
   */
  onCancel: null,

  /**
   * Subscribes to cancel events globally for this instance.
   *
   * When `true`, the `Cancelable` instance will handle cancel events globally that successfully
   * bubble up to `window` regardless of which component is focused.
   *
   * `modal` cancel handlers are processed in reverse of the order they are created such that the
   * innermost instance (in terms of the component hierarchy) have the first opportunity to handle
   * the event before its container components.
   *
   * @type {String}
   * @default false
   * @memberof ui/Cancelable.Cancelable.defaultConfig
   */
  modal: false,

  /**
   * The component that will contain the wrapped component.
   *
   * When set, the wrapped component will be contained within an instance of `component`. This may
   * be necessary if the props passed to the wrapped component are not placed on the root element.
   *
   * @type {Component}
   * @default null
   * @memberof ui/Cancelable.Cancelable.defaultConfig
   */
  component: null
}; // Add keymap for escape key

(0, _keymap.add)('cancel', 27);
/**
 * A higher-order component that adds support to a component to handle cancel actions.
 *
 * The cancel event may be handled either by a design-time config function or a run-time prop
 * function. If the component handles the event and wants to prevent upstream components from also
 * handling the event, the callback should invoke `stopPropagation()` on the event object.
 *
 * Note: This HoC passes a number of props to the wrapped component that should be passed to the
 * main DOM node.
 *
 * Usage of config function:
 * ```
 * import Cancelable from '@enact/ui/Cancelable';
 *
 * const MyComponent = ({myProp, ...rest}) => (
 *    <div {...rest}>{myProp}</div>
 *  );
 * ...
 * const CancelableComponent = Cancelable(
 *   {cancel: function (ev, props) {
 *     // Can inspect either the `onCancel` event, `ev`, and/or the `props` to determine how
 *     // to handle the event (e.g. invoking an event handler from `props`).
 *
 *     // Stop upstream instances of Cancelable from handling the event
 *     ev.stopPropagaion();
 *   }},
 *   MyComponent
 * );
 * ```
 *
 * Usage of prop function:
 * ```
 * import Cancelable from '@enact/ui/Cancelable';
 *
 * const CancelableComponent = Cancelable(
 *   // When a cancel action is received and a handler function exists for the prop
 *   // `onCancel`, it will be invoked and passed the `onCancel` event object.
 *   {cancel: 'onCancel'},
 *   MyComponent
 * );
 * ```
 *
 * @class Cancelable
 * @memberof ui/Cancelable
 * @hoc
 * @public
 */

var Cancelable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var onCancel = config.onCancel,
      modal = config.modal,
      Component = config.component;
  !onCancel ?  true ? (0, _invariant["default"])(false, 'onCancel must be specified with Cancelable') : 0 : void 0;
  var onCancelIsString = typeof onCancel === 'string';
  var onCancelIsFunction = typeof onCancel === 'function';

  var dispatchCancelToConfig = function dispatchCancelToConfig(ev, props) {
    // by default, we return false which allows event propagation because it will "break" the
    // handler chain and not call `stop` and `stopImmediate` below
    var stopped = false;
    var cancelEvent = {
      type: 'onCancel',
      stopPropagation: function stopPropagation() {
        stopped = true;
      }
    };

    if (onCancelIsString && typeof props[onCancel] === 'function') {
      // use the custom event name from the config
      cancelEvent.type = onCancel;
      props[onCancel](cancelEvent);
    } else if (onCancelIsFunction) {
      onCancel(cancelEvent, props);
    }

    return stopped;
  };

  return _class = /*#__PURE__*/function (_ReactComponent) {
    _inherits(_class, _ReactComponent);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);
      _this.handle = _handle.handle.bind(_assertThisInitialized(_this));
      _this.handleCancel = _this.handle(_cancelHandler.forCancel, (0, _handle.forwardCustom)('onCancel'), dispatchCancelToConfig, _handle.stop, _handle.stopImmediate);
      _this.handleKeyUp = _this.handle((0, _handle.forward)('onKeyUp'), // nesting handlers for DRYness. note that if any conditions return false in
      // this.handleCancel(), this handler chain will stop too
      _this.handleCancel);
      _this.isFirstRender = true;
      return _this;
    }

    _createClass(_class, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (modal) {
          (0, _modalHandler.removeModal)(this);
        }
      }
    }, {
      key: "renderWrapped",
      value: function renderWrapped(props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
          onKeyUp: this.handleKeyUp,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props))
        });
      }
    }, {
      key: "renderUnwrapped",
      value: function renderUnwrapped(props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, props), {}, {
          onKeyUp: this.handleKeyUp
        }));
      }
    }, {
      key: "renderModal",
      value: function renderModal(props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
      }
    }, {
      key: "render",
      value: function render() {
        var props = Object.assign({}, this.props);
        delete props.onCancel;
        delete props[onCancel];

        if (this.isFirstRender && modal) {
          (0, _modalHandler.addModal)(this);
          this.isFirstRender = false;
        }

        return modal && this.renderModal(props) || Component && this.renderWrapped(props) || this.renderUnwrapped(props);
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'Cancelable', _class.propTypes =
  /** @lends ui/Cancelable.Cancelable.prototype */
  {
    /**
     * Called when a cancel action is received.
     *
     * This callback is invoked for every cancel action before the config or prop handler is
     * invoked.
     *
     * @type {Function}
     * @public
     */
    onCancel: _propTypes["default"].func
  }, _class;
});
exports.Cancelable = Cancelable;
var _default = Cancelable;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Cancelable/cancelHandler.js":
/*!************************************************************!*\
  !*** ./node_modules/@enact/ui/Cancelable/cancelHandler.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.removeCancelHandler = exports.forCancel = exports.addCancelHandler = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");
/**
 * Array of cancel handlers. If any of these returns `false`, `forCancel` will return `false`;
 *
 * @type {Function[]}
 * @private
 */


var cancelHandlers = [// always support the Escape key
(0, _handle.forKey)('cancel')];
/**
 * Event handler compatible with {@link core/handle} that allows the handler chain to
 * continue for any cancel event. A cancel event is an Escape key press by default but can be
 * extended adding additional handlers using
 * {@link ui/Cancelable/cancelHandler.addCancelHandler}.
 *
 * @function
 * @memberof ui/Cancelable
 * @param  {Object} ev Event object
 * @returns {Boolean} `true` to stop the handler chain
 * @private
 */

var forCancel = function forCancel(ev) {
  var ok = false;
  cancelHandlers.forEach(function (fn) {
    // if any handler returns true, we don't need to call any more
    ok = ok || fn(ev);
  });
  return ok;
};
/**
 * Adds an event handler to filter cancel events.
 *
 * @function
 * @memberof ui/Cancelable
 * @param {Function} handler	Function that will receive the event and should return `true` if
 *								the event is a cancel event.
 * @returns {undefined}
 * @public
 */


exports.forCancel = forCancel;

var addCancelHandler = function addCancelHandler(handler) {
  if (cancelHandlers.indexOf(handler) < 0) {
    cancelHandlers.push(handler);
  }
};
/**
 * Removes an event handler to filter cancel events
 *
 * @function
 * @memberof ui/Cancelable
 * @param {Function} handler A previously added filter function
 * @returns {undefined}
 * @public
 */


exports.addCancelHandler = addCancelHandler;

var removeCancelHandler = function removeCancelHandler(handler) {
  var index = cancelHandlers.indexOf(handler);

  if (index >= 0) {
    cancelHandlers.splice(index, 1);
  }
};

exports.removeCancelHandler = removeCancelHandler;

/***/ }),

/***/ "./node_modules/@enact/ui/Cancelable/modalHandler.js":
/*!***********************************************************!*\
  !*** ./node_modules/@enact/ui/Cancelable/modalHandler.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.removeModal = exports.addModal = void 0;

var _dispatcher = __webpack_require__(/*! @enact/core/dispatcher */ "./node_modules/@enact/core/dispatcher/dispatcher.js"); // Contains references to modal Cancelable instances in LIFO order to allow multiple modals to be
// displayed with the last having the first priority to handle the cancel.


var modals = [];
/**
 * Dispatches the cancel event to each modal `Cancelable` instance. Consistent with
 * {@link core/handle.handle}, returning a `true` value means the event was handled and anything
 * falsy allows the event to pass to the next handler.
 *
 * @param	{Object}	ev	Event payload
 *
 * @returns	{undefined}
 * @private
 */

var dispatchToModals = function dispatchToModals(ev) {
  for (var i = modals.length - 1, handled = false; !handled && i >= 0; i--) {
    handled = modals[i].handleCancel(ev);
  }
};
/**
 * Adds a modal `Cancelable` instance to the list of modals.
 *
 * @param	{ui/Cancelable.Cancelable}	obj	Cancelable instance
 *
 * @returns	{undefined}
 * @private
 */


var addModal = function addModal(obj) {
  if (modals.push(obj) === 1 && typeof window !== 'undefined') {
    (0, _dispatcher.on)('keyup', dispatchToModals, window);
  }
};
/**
 * Removes a modal `Cancelable` instance from the list of modals.
 *
 * @param	{ui/Cancelable.Cancelable}	obj	Cancelable instance
 *
 * @returns	{undefined}
 * @private
 */


exports.addModal = addModal;

var removeModal = function removeModal(obj) {
  var index = modals.indexOf(obj);

  if (index >= 0) {
    modals.splice(index, 1);
  }

  if (modals.length === 0 && typeof window !== 'undefined') {
    (0, _dispatcher.off)('keyup', dispatchToModals, window);
  }
};

exports.removeModal = removeModal;

/***/ }),

/***/ "./node_modules/@enact/ui/Changeable/Changeable.js":
/*!*********************************************************!*\
  !*** ./node_modules/@enact/ui/Changeable/Changeable.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Changeable = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _warning = _interopRequireDefault(__webpack_require__(/*! warning */ "./node_modules/warning/warning.js"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/**
 * Default config for {@link ui/Changeable.Changeable}.
 *
 * @memberof ui/Changeable.Changeable
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Configures the prop name to pass the callback to change the value
   *
   * @type {String}
   * @default 'onChange'
   * @memberof ui/Changeable.Changeable.defaultConfig
   */
  change: 'onChange',

  /**
   * Configures the prop name to pass the current value
   *
   * @type {String}
   * @default 'value'
   * @memberof ui/Changeable.Changeable.defaultConfig
   */
  prop: 'value'
};
/**
 * A higher-order component that adds state management to a component for a single prop via
 * a single event callback.
 *
 * Applying `Changeable` to a component will pass two additional props: the current value from state
 * and an event callback to invoke when the value changes. By default, the value is passed in the
 * `value` prop and the callback is passed in the `onChange` callback but both are configurable
 * through the HOC config object.
 *
 * If `value` is passed to `Changeable`, the HOC assumes that the value is managed elsewhere and it
 * will not update its internal state. To set an initial value, use `defaultValue` instead.
 *
 * To update the value from the wrapped component, call `onChange` with an object containing a
 * `value` member with the new value. `Changeable` will update its internal state and pass the
 * updated value back down to the wrapped component.
 *
 * *Note:* If the `prop` is overridden, the property names to set the default value and current
 * value change correspondingly.
 *
 * @class Changeable
 * @memberof ui/Changeable
 * @hoc
 * @public
 */

var Changeable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class, _class$propTypes;

  var prop = config.prop,
      change = config.change;
  var defaultPropKey = 'default' + (0, _util.cap)(prop);
  return _class = /*#__PURE__*/function (_PureComponent) {
    _inherits(_class, _PureComponent);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);
      _this.handle = _handle.handle.bind(_assertThisInitialized(_this));
      _this.handleChange = _this.handle((0, _handle.forProp)('disabled', false), (0, _handle.forward)(change), function (_ref) {
        var value = _ref[prop];

        if (!_this.state.controlled) {
          _this.setState(function (_ref2) {
            var oldValue = _ref2.value;
            return value !== oldValue ? {
              value: value
            } : null;
          });
        }
      });
      _this.state = {
        rendered: false,
        value: null,
        controlled: prop in props
      };
       true ? (0, _warning["default"])(!(prop in props && defaultPropKey in props), "Do not specify both '".concat(prop, "' and '").concat(defaultPropKey, "' for Changeable instances. '").concat(defaultPropKey, "' will be ignored.\n\t\t\t\t'").concat(defaultPropKey, "' will be ignored unless '").concat(prop, "' is 'null' or 'undefined'.")) : 0;
      return _this;
    }

    _createClass(_class, [{
      key: "render",
      value: function render() {
        var props = Object.assign({}, this.props);
        if (change) props[change] = this.handleChange;
        if (prop) props[prop] = this.state.value;
        delete props[defaultPropKey];
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        if (state.rendered === false) {
          return {
            rendered: true,
            value: props[prop] != null ? props[prop] : props[defaultPropKey]
          };
        } else if (state.controlled) {
          if (state.value !== props[prop]) {
            return {
              value: props[prop]
            };
          } else {
            return null;
          }
        }

         true ? (0, _warning["default"])(!(typeof props[prop] !== 'undefined'), "'".concat(prop, "' specified for an uncontrolled instance of Changeable and will be\n\t\t\t\tignored. To make this instance of Changeable controlled, '").concat(prop, "' should be\n\t\t\t\tspecified at creation.")) : 0;
        return null;
      }
    }]);

    return _class;
  }(_react.PureComponent), _class.displayName = 'Changeable', _class.propTypes = (_class$propTypes = {}, _defineProperty(_class$propTypes, change, _propTypes["default"].func), _defineProperty(_class$propTypes, defaultPropKey, _propTypes["default"].any), _defineProperty(_class$propTypes, prop, _propTypes["default"].any), _defineProperty(_class$propTypes, "disabled", _propTypes["default"].bool), _class$propTypes), _class.defaultProps = {
    disabled: false
  }, _class;
});
exports.Changeable = Changeable;
var _default = Changeable;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/ComponentOverride/ComponentOverride.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@enact/ui/ComponentOverride/ComponentOverride.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ComponentOverride = void 0;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _reactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["component"];

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Utility to either create or clone a component instance with the given set of props.
 *
 * `ComponentOverride` can be used to support props that either accept a type, (e.g. `Button`) or an
 * element (e.g. `<Button customProp="value" />`) and return a new element which includes the
 * remaining props specified.
 *
 * Example:
 * ```
 * const LabeledIconButton = ({iconComponent, label, ...rest}) => {
 *   return (
 *     <div {...rest}>
 *       <ComponentOverride
 *         component={iconComponent}
 *         icon="house"
 *       />
 *       <span>{label}</span>
 *     </div>
 *   );
 * };
 *
 * // Usage
 *
 * // Only the props defined by LabeledIconButton will be passed to CustomIcon
 * <LabeledIconButton
 *   label="Home"
 *   iconComponent={CustomIcon}
 * />
 *
 * // The color prop along with props defined by LabeledIconButton will be passed to CustomIcon
 * <LabeledIconButton
 *   label="Home"
 *   iconComponent={
 *     <CustomIcon color="green" />
 *   }
 * />
 * ```
 *
 * @class
 * @memberof ui/ComponentOverride
 * @ui
 * @public
 */


var ComponentOverride = function ComponentOverride(_ref) {
  var Component = _ref.component,
      props = _objectWithoutProperties(_ref, _excluded);

  return Component && ((0, _reactIs.isValidElementType)(Component) && /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, _objectSpread({}, props)) || /*#__PURE__*/(0, _react.isValidElement)(Component) && /*#__PURE__*/(0, _react.cloneElement)(Component, props)) || null;
};

exports.ComponentOverride = ComponentOverride;
var _default = ComponentOverride;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/FloatingLayer/FloatingLayer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@enact/ui/FloatingLayer/FloatingLayer.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.FloatingLayerBase = exports.FloatingLayer = void 0;

var _dispatcher = __webpack_require__(/*! @enact/core/dispatcher */ "./node_modules/@enact/core/dispatcher/dispatcher.js");

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "./node_modules/classnames/index.js"));

var _invariant = _interopRequireDefault(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js"));

var _Cancelable = _interopRequireDefault(__webpack_require__(/*! ../Cancelable */ "./node_modules/@enact/ui/Cancelable/Cancelable.js"));

var _FloatingLayerDecorator = __webpack_require__(/*! ./FloatingLayerDecorator */ "./node_modules/@enact/ui/FloatingLayer/FloatingLayerDecorator.js");

var _Scrim = _interopRequireDefault(__webpack_require__(/*! ./Scrim */ "./node_modules/@enact/ui/FloatingLayer/Scrim.js"));

var _FloatingLayerModule = _interopRequireDefault(__webpack_require__(/*! ./FloatingLayer.module.css */ "./node_modules/@enact/ui/FloatingLayer/FloatingLayer.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["children", "className", "floatLayerClassName", "open", "scrimType"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/**
 * A component that creates an entry point to the new render tree.
 *
 * This is used for modal components such as popups.
 *
 * @class FloatingLayerBase
 * @memberof ui/FloatingLayer
 * @ui
 * @public
 */


var FloatingLayerBase = /*#__PURE__*/function (_Component) {
  _inherits(FloatingLayerBase, _Component);

  var _super = _createSuper(FloatingLayerBase);

  function FloatingLayerBase(props) {
    var _this;

    _classCallCheck(this, FloatingLayerBase);

    _this = _super.call(this, props);
    _this.handleNotify = (0, _handle.oneOf)([(0, _handle.forEventProp)('action', 'close'), (0, _handle.call)('handleClose')], [(0, _handle.forEventProp)('action', 'mount'), (0, _handle.call)('setFloatingLayer')]).bind(_assertThisInitialized(_this));
    _this.handleClose = (0, _handle.handle)((0, _handle.forProp)('open', true), (0, _handle.forwardCustom)('onDismiss')).bind(_assertThisInitialized(_this));
    _this.handleClick = (0, _handle.handle)((0, _handle.forProp)('noAutoDismiss', false), (0, _handle.forProp)('open', true), (0, _handle.forwardCustom)('onDismiss', function () {
      return {
        detail: {
          inputType: 'click'
        }
      };
    })).bind(_assertThisInitialized(_this));

    _this.handleScroll = function (ev) {
      var currentTarget = ev.currentTarget;
      currentTarget.scrollTop = 0;
      currentTarget.scrollLeft = 0;
    };

    _this.stopPropagation = function (ev) {
      ev.nativeEvent.stopImmediatePropagation();

      if (_this.props.children.props.onClick) {
        _this.props.children.props.onClick();
      }
    };

    _this.node = null;
    _this.state = {
      readyToRender: false
    };
    return _this;
  }

  _createClass(FloatingLayerBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Must register first in order to obtain the floating layer node reference before tryinging
      // to render into it
      if (this.context && typeof this.context === 'function') {
        this.controller = this.context(this.handleNotify.bind(this));
      }

      if (this.props.scrimType === 'none' && this.props.open) {
        (0, _dispatcher.on)('click', this.handleClick);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this$props = this.props,
          open = _this$props.open,
          scrimType = _this$props.scrimType;

      if (prevProps.open && !open) {
        // when open changes to false, forward close
        (0, _handle.forwardCustom)('onClose')(null, this.props);
      } else if (!prevProps.open && open && !this.state.readyToRender) {
        // when open changes to true and node hasn't rendered, render it
        this.readyToRender();
      } else if (this.state.readyToRender && (!prevState.readyToRender || prevState.readyToRender && open && !prevProps.open)) {
        // when node has been rendered and either it was just rendered in this update cycle or
        // the open prop changed in this cycle, forward open
        (0, _handle.forwardCustom)('onOpen')(null, this.props);
      }

      if (scrimType === 'none') {
        if (!prevProps.open && open) {
          (0, _dispatcher.on)('click', this.handleClick);
        } else if (prevProps.open && !open) {
          (0, _dispatcher.off)('click', this.handleClick);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.floatingLayer) {
        (0, _dispatcher.off)('scroll', this.handleScroll, this.floatingLayer);
        this.floatingLayer = null;
      }

      (0, _dispatcher.off)('click', this.handleClick);

      if (this.controller) {
        this.controller.unregister();
      }
    }
  }, {
    key: "setFloatingLayer",
    value: function setFloatingLayer(_ref) {
      var floatingLayer = _ref.floatingLayer;
      var isNewLayer = !this.floatingLayer && floatingLayer;
      this.floatingLayer = floatingLayer; // the first time we have a valid floating layer container and this instance is set to open,
      // we need to render the layer.

      if (isNewLayer && this.props.open && !this.state.readyToRender) {
        this.readyToRender();
      }
    }
  }, {
    key: "readyToRender",
    value: function readyToRender() {
      if (this.state.readyToRender) return;
      !this.floatingLayer ?  true ? (0, _invariant["default"])(false, 'FloatingLayer cannot be used outside the subtree of a FloatingLayerDecorator') : 0 : void 0;
      (0, _dispatcher.on)('scroll', this.handleScroll, this.floatingLayer);
      this.setState({
        readyToRender: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          className = _this$props2.className,
          floatLayerClassName = _this$props2.floatLayerClassName,
          open = _this$props2.open,
          scrimType = _this$props2.scrimType,
          rest = _objectWithoutProperties(_this$props2, _excluded);

      var mergedClassName = (0, _classnames["default"])(floatLayerClassName, _FloatingLayerModule["default"].floatingLayer, className);
      delete rest.floatLayerId;
      delete rest.noAutoDismiss;
      delete rest.onClose;
      delete rest.onDismiss;
      delete rest.onOpen;

      if (open && this.state.readyToRender) {
        return /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({
          className: mergedClassName
        }, rest), {}, {
          children: [scrimType !== 'none' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Scrim["default"], {
            type: scrimType,
            onClick: this.handleClick
          }) : null, /*#__PURE__*/(0, _react.cloneElement)(children, {
            onClick: this.stopPropagation
          })]
        })), this.floatingLayer);
      }

      return null;
    }
  }]);

  return FloatingLayerBase;
}(_react.Component);

exports.FloatingLayerBase = FloatingLayerBase;
FloatingLayerBase.displayName = 'FloatingLayer';
FloatingLayerBase.propTypes =
/** @lends ui/FloatingLayer.FloatingLayerBase.prototype */
{
  /**
   * CSS classes for FloatingLayer.
   *
   * @type {String}
   * @default 'enact-fit enact-clip enact-untouchable'
   * @public
   */
  floatLayerClassName: _propTypes["default"].string,

  /**
   * Element id for floating layer.
   *
   * @type {String}
   * @default 'floatLayer'
   * @public
   */
  floatLayerId: _propTypes["default"].string,

  /**
   * Prevents FloatingLayer from hiding when the user presses cancel/back (e.g. `ESC`) key or
   * clicks outside the floating layer.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  noAutoDismiss: _propTypes["default"].bool,

  /**
   * Called when floating layer is closed.
   *
   * @type {Function}
   * @public
   */
  onClose: _propTypes["default"].func,

  /**
   * Called when a closing action is invoked.
   *
   * These actions may include pressing cancel/back (e.g. `ESC`) key or programmatically closing
   * by `FloatingLayerDecorator`. When cancel key is pressed, the function will only invoke if
   * `noAutoDismiss` is set to `false`.
   *
   * When pressing `ESC` key, event payload carries `detail` property containing `inputType`
   * value of `'key'`.
   * When clicking outside the boundary of the popup, event payload carries `detail` property
   * containing `inputType` value of `'click'`.
   *
   * @type {Function}
   * @public
   */
  onDismiss: _propTypes["default"].func,

  /**
   * Called when floating layer is opened. It will only be invoked for the first render.
   *
   * @type {Function}
   * @public
   */
  onOpen: _propTypes["default"].func,

  /**
   * Renders the floating layer and its components.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  open: _propTypes["default"].bool,

  /**
   * The scrim type that overlays FloatingLayer.
   *
   * It can be either `'transparent'`, `'translucent'`, or `'none'`.
   *
   * @type {String}
   * @default 'translucent'
   * @public
   */
  scrimType: _propTypes["default"].oneOf(['transparent', 'translucent', 'none'])
};
FloatingLayerBase.contextType = _FloatingLayerDecorator.FloatingLayerContext;
FloatingLayerBase.defaultProps = {
  floatLayerClassName: 'enact-fit enact-clip enact-untouchable',
  floatLayerId: 'floatLayer',
  noAutoDismiss: false,
  open: false,
  scrimType: 'translucent'
};
var handleCancel = (0, _handle.handle)( // can't use forProp safely since either could be undefined ~= false
function (ev, _ref2) {
  var open = _ref2.open,
      noAutoDismiss = _ref2.noAutoDismiss,
      onDismiss = _ref2.onDismiss;
  return open && !noAutoDismiss && onDismiss;
}, (0, _handle.forwardCustom)('onDismiss', function () {
  return {
    detail: {
      inputType: 'key'
    }
  };
}), _handle.stop);
/**
 * FloatingLayer that mixes {@link ui/Cancelable.Cancelable} to handle FloatingLayer dismissal.
 *
 * This is used for modal components such as popups.
 *
 * @class FloatingLayer
 * @memberof ui/FloatingLayer
 * @ui
 * @extends ui/FloatingLayer.FloatingLayerBase
 * @mixes ui/Cancelable.Cancelable
 * @public
 */

var FloatingLayer = (0, _Cancelable["default"])({
  modal: true,
  onCancel: handleCancel
}, FloatingLayerBase);
exports.FloatingLayer = FloatingLayer;
var _default = FloatingLayer;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/FloatingLayer/FloatingLayerContainer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@enact/ui/FloatingLayer/FloatingLayerContainer.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.FloatingLayerContainer = void 0;

var _Registry = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/Registry */ "./node_modules/@enact/core/internal/Registry/Registry.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var FloatingLayerContainer = /*#__PURE__*/function () {
  function FloatingLayerContainer(config) {
    var _this = this;

    _classCallCheck(this, FloatingLayerContainer);

    this.getFloatingLayer = function () {
      // FIXME: if a component that resides in the floating layer is rendered at the same time
      // as the floating layer, this.floatingLayer may not have been initialized yet since
      // componentDidMount runs inside-out. As a fallback, we search by id but this could
      // introduce issues (e.g. for duplicate layer ids).
      return _this.floatingLayer || typeof document !== 'undefined' && document.getElementById(_this.config.floatLayerId) || null;
    };

    this.handleNotify = function (_ref) {
      var action = _ref.action;

      if (action === 'register') {
        _this.notifyMount();
      } else if (action === 'closeAll') {
        _this.handleCloseAll();
      }
    };

    this.setFloatingLayer = function (node) {
      _this.floatingLayer = node;
    };

    var floatLayerId = config.floatLayerId;
    this.registry = _Registry["default"].create(this.handleNotify);
    this.floatingLayer = null;
    this.config = {
      floatLayerId: floatLayerId
    };
  }

  _createClass(FloatingLayerContainer, [{
    key: "load",
    value: function load() {
      this.notifyMount();
    }
  }, {
    key: "handleCloseAll",
    value: function handleCloseAll() {
      this.registry.notify({
        action: 'close'
      });
    }
  }, {
    key: "notifyMount",
    value: function notifyMount() {
      this.registry.notify({
        action: 'mount',
        floatingLayer: this.getFloatingLayer()
      });
    }
  }]);

  return FloatingLayerContainer;
}();

exports.FloatingLayerContainer = FloatingLayerContainer;
var _default = FloatingLayerContainer;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/FloatingLayer/FloatingLayerDecorator.js":
/*!************************************************************************!*\
  !*** ./node_modules/@enact/ui/FloatingLayer/FloatingLayerDecorator.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "FloatingLayerContext", ({
  enumerable: true,
  get: function get() {
    return _useFloatingLayerDecorator.FloatingLayerContext;
  }
}));
exports["default"] = exports.FloatingLayerDecorator = void 0;
Object.defineProperty(exports, "useFloatingLayerDecorator", ({
  enumerable: true,
  get: function get() {
    return _useFloatingLayerDecorator.useFloatingLayerDecorator;
  }
}));

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _useFloatingLayerDecorator = __webpack_require__(/*! ./useFloatingLayerDecorator */ "./node_modules/@enact/ui/FloatingLayer/useFloatingLayerDecorator.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["className"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Default config for {@link ui/FloatingLayer.FloatingLayerDecorator}.
 *
 * @memberof ui/FloatingLayer.FloatingLayerDecorator
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Element Id of the floatLayer
   *
   * @type {String}
   * @default 'floatLayer'
   * @public
   * @memberof ui/FloatingLayer.FloatingLayerDecorator.defaultConfig
   */
  floatLayerId: 'floatLayer',

  /**
   * Class name to be applied to wrapped component.
  	 * It can be used when you want to only apply
   * certain styles to the wrapped component and not to the float layer.
   *
   * @type {String}
   * @default ''
   * @public
   * @memberof ui/FloatingLayer.FloatingLayerDecorator.defaultConfig
   */
  wrappedClassName: ''
};
/**
 * A higher-order component that adds a FloatingLayer adjacent to the wrapped component.
 *
 * Any classes passed to the FloatingLayerDecorator will be applied to a wrapper surrounding the
 * wrapped component and the floating layer. If specified in the config, `wrappedClassName` will be
 * passed as `className` to the wrapped component.
 *
 * @class FloatingLayerDecorator
 * @memberof ui/FloatingLayer
 * @hoc
 * @public
 */

var FloatingLayerDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var floatLayerId = config.floatLayerId,
      wrappedClassName = config.wrappedClassName; // eslint-disable-next-line no-shadow

  function FloatingLayerDecorator(props) {
    var className = props.className,
        rest = _objectWithoutProperties(props, _excluded);

    var hook = (0, _useFloatingLayerDecorator.useFloatingLayerDecorator)({
      className: className,
      floatLayerId: floatLayerId
    });
    return hook.provideFloatingLayer( /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, rest), {}, {
      className: wrappedClassName
    }), "floatWrapped"));
  }

  return FloatingLayerDecorator;
});
exports.FloatingLayerDecorator = FloatingLayerDecorator;
var _default = FloatingLayerDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/FloatingLayer/Scrim.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/ui/FloatingLayer/Scrim.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Scrim = void 0;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _ScrimModule = _interopRequireDefault(__webpack_require__(/*! ./Scrim.module.css */ "./node_modules/@enact/ui/FloatingLayer/Scrim.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["type"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var transparentClassName = _ScrimModule["default"].scrim + ' enact-fit ' + _ScrimModule["default"].transparent;
var translucentClassName = _ScrimModule["default"].scrim + ' enact-fit ' + _ScrimModule["default"].translucent; // Stores references to any Scrim instances whose type is translucent to ensure that only the top-
// most Scrim is visible to avoid stacking scrims.

var scrimStack = [];
/**
 * Pushes a translucent scrim to the top of the stack and hiding the previously top
 *
 * @param {ui/FloatingLayer.Scrim} scrim A scrim instance to add
 * @returns {undefined}
 * @private
 */

function pushTranslucentScrim(scrim) {
  var last = scrimStack.length - 1;

  if (last >= 0) {
    // if there are other translucent scrims, hide the topmost one assuming the others have been
    // hidden correctly by previous calls
    scrimStack[last].hide();
  }

  scrimStack.push(scrim);
}
/**
 * Removes a translucent scrim from the stack. If the scrim was the top-most, removing it will show
 * the next scrim. If not, it will just be removed
 *
 * @param {ui/FloatingLayer.Scrim} scrim A scrim instance to remove
 * @returns {undefined}
 * @private
 */


function removeTranslucentScrim(scrim) {
  var index = scrimStack.indexOf(scrim);
  var last = scrimStack.length - 1;

  if (index === last) {
    // if scrim is the top of the stack (most likely case), show the one below it then pop it
    scrimStack.pop();

    if (scrimStack.length) {
      scrimStack[scrimStack.length - 1].show();
    }
  } else {
    // if it's in the middle of the stack, just remove it
    scrimStack.splice(index, 1);
  }
}
/**
 * {@link ui/FloatingLayer.Scrim} provides an overlay that will prevent taps from propagating
 * to the controls that it covers.
 *
 * @class Scrim
 * @memberof ui/FloatingLayer
 * @ui
 * @private
 */


var Scrim = /*#__PURE__*/function (_Component) {
  _inherits(Scrim, _Component);

  var _super = _createSuper(Scrim);

  function Scrim(props) {
    var _this;

    _classCallCheck(this, Scrim);

    _this = _super.call(this, props);

    _this.show = function () {
      return _this.setState({
        visible: true
      });
    };

    _this.hide = function () {
      return _this.setState({
        visible: false
      });
    };

    _this.state = {
      visible: true
    };

    if (props.type === 'translucent') {
      pushTranslucentScrim(_assertThisInitialized(_this));
    }

    return _this;
  }

  _createClass(Scrim, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.type === 'translucent' && this.props.type !== 'translucent') {
        removeTranslucentScrim(this);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.type === 'translucent') {
        removeTranslucentScrim(this);
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.visible) {
        var _this$props = this.props,
            type = _this$props.type,
            rest = _objectWithoutProperties(_this$props, _excluded);

        var className = type === 'transparent' ? transparentClassName : translucentClassName;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
          className: className
        }));
      }

      return null;
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props) {
      if (props.type !== 'translucent') {
        return {
          visible: true
        };
      }

      return null;
    }
  }]);

  return Scrim;
}(_react.Component);

exports.Scrim = Scrim;
Scrim.propTypes =
/** @lends ui/FloatingLayer.Scrim.prototype */
{
  /**
   * Types of scrim. It can be either `'transparent'` or `'translucent'`.
   *
   * @type {String}
   * @default `translucent`
   * @public
   */
  type: _propTypes["default"].oneOf(['transparent', 'translucent'])
};
Scrim.defaultProps = {
  type: 'translucent'
};
var _default = Scrim;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/FloatingLayer/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/ui/FloatingLayer/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "FloatingLayer", ({
  enumerable: true,
  get: function get() {
    return _FloatingLayer.FloatingLayer;
  }
}));
Object.defineProperty(exports, "FloatingLayerBase", ({
  enumerable: true,
  get: function get() {
    return _FloatingLayer.FloatingLayerBase;
  }
}));
Object.defineProperty(exports, "FloatingLayerDecorator", ({
  enumerable: true,
  get: function get() {
    return _FloatingLayerDecorator.FloatingLayerDecorator;
  }
}));
exports["default"] = void 0;
Object.defineProperty(exports, "useFloatingLayer", ({
  enumerable: true,
  get: function get() {
    return _useFloatingLayer.useFloatingLayer;
  }
}));

var _FloatingLayer = __webpack_require__(/*! ./FloatingLayer */ "./node_modules/@enact/ui/FloatingLayer/FloatingLayer.js");

var _FloatingLayerDecorator = __webpack_require__(/*! ./FloatingLayerDecorator */ "./node_modules/@enact/ui/FloatingLayer/FloatingLayerDecorator.js");

var _useFloatingLayer = __webpack_require__(/*! ./useFloatingLayer */ "./node_modules/@enact/ui/FloatingLayer/useFloatingLayer.js");
/**
 * FloatingLayer provides a way to render a component into a node outside of its parent component.
 *
 * This is used for modal components such as popups.
 *
 * @module ui/FloatingLayer
 * @exports FloatingLayer
 * @exports FloatingLayerBase
 * @exports FloatingLayerDecorator
 */


var _default = _FloatingLayer.FloatingLayer;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/FloatingLayer/useFloatingLayer.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/ui/FloatingLayer/useFloatingLayer.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.useFloatingLayer = useFloatingLayer;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _FloatingLayerDecorator = __webpack_require__(/*! ./FloatingLayerDecorator */ "./node_modules/@enact/ui/FloatingLayer/FloatingLayerDecorator.js");

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function useFloatingLayer() {
  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      floatingLayerId = _useState2[0],
      setId = _useState2[1];

  var handler = (0, _react.useCallback)(function (ev) {
    if (ev.action === 'mount' && ev.floatingLayer) {
      setId(ev.floatingLayer.id);
    }
  }, [setId]);
  var registerFloatingLayer = (0, _react.useContext)(_FloatingLayerDecorator.FloatingLayerContext);
  (0, _react.useEffect)(function () {
    if (registerFloatingLayer) {
      registerFloatingLayer(handler);
    }
  }, [handler, registerFloatingLayer]);
  return {
    floatingLayerId: floatingLayerId
  };
}

var _default = useFloatingLayer;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/FloatingLayer/useFloatingLayerDecorator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@enact/ui/FloatingLayer/useFloatingLayerDecorator.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.FloatingLayerContext = void 0;
exports.useFloatingLayerDecorator = useFloatingLayerDecorator;

var _useClass = _interopRequireDefault(__webpack_require__(/*! @enact/core/useClass */ "./node_modules/@enact/core/useClass/useClass.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _FloatingLayerContainer = _interopRequireDefault(__webpack_require__(/*! ./FloatingLayerContainer */ "./node_modules/@enact/ui/FloatingLayer/FloatingLayerContainer.js"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var FloatingLayerContext = /*#__PURE__*/(0, _react.createContext)();
/**
 * Configuration for `useFloatingLayerDecorator`
 *
 * @typedef {Object} useFloatingLayerDecoratorConfig
 * @memberof ui/FloatingLayerDecorator
 * @property {Function} [floatLayerId] Floating layer id
 * @private
 */

/**
 * Object returned by `useFloatingLayerDecorator`
 *
 * @typedef {Object} useFloatingLayerDecoratorInterface
 * @memberof ui/FloatingLayerDecorator
 * @property {Function} provideFloatingLayer Provide the wrapper DOM elements
 * @private
 */

/**
 * Close all floating layers registered in the same id
 *
 * @param {useFloatingLayerDecoratorConfig} config Configuration options
 * @returns {useFloatingLayerDecoratorInterface}
 * @private
 */

exports.FloatingLayerContext = FloatingLayerContext;

function useFloatingLayerDecorator() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var className = config.className,
      _config$floatLayerId = config.floatLayerId,
      floatLayerId = _config$floatLayerId === void 0 ? 'floatLayer' : _config$floatLayerId;
  var floating = (0, _useClass["default"])(_FloatingLayerContainer["default"], {
    floatLayerId: floatLayerId
  });
  (0, _react.useEffect)(function () {
    floating.load();
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  var provideFloatingLayer = (0, _react.useCallback)(function (children) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerContext.Provider, {
      value: floating.registry.register,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: className,
        children: [children, /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          id: floatLayerId,
          ref: floating.setFloatingLayer
        }, "floatLayer")]
      })
    });
  }, [className, floating, floatLayerId]);
  return {
    provideFloatingLayer: provideFloatingLayer
  };
}

var _default = useFloatingLayerDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/ForwardRef/ForwardRef.js":
/*!*********************************************************!*\
  !*** ./node_modules/@enact/ui/ForwardRef/ForwardRef.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ForwardRef = void 0;

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Default config for {@link ui/ForwardRef.ForwardRef}.
 *
 * @memberof ui/ForwardRef.ForwardRef
 * @hocconfig
 */


var defaultConfig = {
  /**
   * The prop name to pass the ref callback
   *
   * @type {String}
   * @default 'forwardRef'
   * @memberof ui/ForwardRef.ForwardRef.defaultConfig
   */
  prop: 'forwardRef'
};
/**
 * A higher-order component that adapts [`React.forwardRef`](https://reactjs.org/docs/forwarding-refs.html)
 * to be chainable with other HOCs.
 *
 * The following examples are equivalent:
 *
 * ```
 * import ForwardRef from '@enact/ui/ForwardRef';
 * import Component from './Component';
 *
 * React.forwardRef((props, ref) => (
 * 	<Component {...props} setMyRef={ref} />
 * ));
 * ForwardRef({prop: 'setMyRef'}, Component);
 * ```
 *
 * @class ForwardRef
 * @memberof ui/ForwardRef
 * @hoc
 * @public
 */

var ForwardRef = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var prop = config.prop;
  return /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
    var withRef = _objectSpread(_objectSpread({}, props), {}, _defineProperty({}, prop, ref));

    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, withRef));
  });
});
exports.ForwardRef = ForwardRef;
var _default = ForwardRef;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Icon/Icon.js":
/*!*********************************************!*\
  !*** ./node_modules/@enact/ui/Icon/Icon.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.IconDecorator = exports.IconBase = exports.Icon = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _resolution = _interopRequireDefault(__webpack_require__(/*! ../resolution */ "./node_modules/@enact/ui/resolution/index.js"));

var _ForwardRef = _interopRequireDefault(__webpack_require__(/*! ../ForwardRef */ "./node_modules/@enact/ui/ForwardRef/ForwardRef.js"));

var _IconModule = _interopRequireDefault(__webpack_require__(/*! ./Icon.module.css */ "./node_modules/@enact/ui/Icon/Icon.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["componentRef", "iconProps"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Merges consumer styles with the image `src` resolved through the resolution independence module.
 *
 * @function
 * @param	{Object}		style	Style object
 * @param	{String|Object}	src		URI to image or object of URIs
 *
 * @returns	{Object}				Original style object with backgroundImage updated
 * @private
 */


var mergeStyle = function mergeStyle(style, src) {
  var updated = Object.assign({}, style);

  var source = _resolution["default"].selectSrc(src);

  if (src && src !== 'none' && src !== 'inherit' && src !== 'initial') {
    source = "url(".concat(source, ")");
  }

  updated.backgroundImage = source;
  return updated;
};
/**
 * Tests if a string appears to be a URI/URL.
 *
 * @function
 * @param	{String}	c	Character to test
 *
 * @returns	{Boolean}		`true` if c looks like a URL
 * @private
 */


var isUri = function isUri(c) {
  return c.indexOf('/') > -1 || c.indexOf('.') > -1;
};
/**
 * A basic icon component structure without any behaviors applied to it.
 *
 * @class IconBase
 * @memberof ui/Icon
 * @ui
 * @public
 */


var IconBase = (0, _kind["default"])({
  name: 'ui:Icon',
  propTypes:
  /** @lends ui/Icon.IconBase.prototype */
  {
    /**
     * The icon content.
     *
     * May be specified as either:
     *
     * * A string that represents an icon from the [iconList]{@link ui/Icon.IconBase.iconList},
     * * An HTML entity string, Unicode reference or hex value (in the form '0x...'),
     * * A URL specifying path to an icon image, or
     * * An object representing a resolution independent resource (See {@link ui/resolution}).
     *
     * @type {String|Object}
     * @public
     */
    children: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),

    /**
     * Called with a reference to the root component.
     *
     * When using {@link ui/Icon.Icon}, the `ref` prop is forwarded to this component
     * as `componentRef`.
     *
     * @type {Object|Function}
     * @public
     */
    componentRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `icon` - The root component class
     * * `dingbat` - Applied when the value of [`icon`]{@link ui/Icon.IconBase.icon} is not
     *   found in [iconList]{@link ui/Icon.IconBase.iconList}
     * * `large` - Applied when `size` prop is `'large'`
     * * `pressed` - Applied when `pressed` prop is `true`
     * * `small` - Applied when `size` prop is `'small'`
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Flip the icon horizontally, vertically or both.
     *
     * @type {('both'|'horizontal'|'vertical')}
     * @public
     */
    flip: _propTypes2["default"].string,

    /**
     * The full list (hash) of supported icons.
     *
     * The keys of this hash are the unique names of each icon. The values are the unicode
     * characters to insert in the icon. These will typically map to glyphs in your icon-font.
     * The format of the keys can be character, glyph, or entity reference that correctly
     * renders in a React + JSX string.
     *
     * @type {Object}
     * @default {}
     * @public
     */
    iconList: _propTypes2["default"].object,

    /**
     * Applies the `pressed` CSS class.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    pressed: _propTypes2["default"].bool,

    /**
     * The size of the button.
     *
     * Applies the CSS class which can be customized by
     * [theming]{@link /docs/developer-guide/theming/}.
     *
     * @type {String}
     * @public
     */
    size: _propTypes2["default"].string
  },
  defaultProps: {
    iconList: {},
    pressed: false
  },
  styles: {
    css: _IconModule["default"],
    className: 'icon',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref) {
      var icon = _ref.children,
          flip = _ref.flip,
          iconList = _ref.iconList,
          pressed = _ref.pressed,
          size = _ref.size,
          styler = _ref.styler;
      return styler.append({
        // If the icon isn't in our known set, apply our custom font class
        dingbat: !(icon in iconList),
        pressed: pressed
      }, flip ? "flip".concat((0, _util.cap)(flip)) : null, size);
    },
    iconProps: function iconProps(_ref2) {
      var iconProp = _ref2.children,
          iconList = _ref2.iconList,
          style = _ref2.style;
      var icon = iconList[iconProp];

      if (!icon) {
        if (typeof iconProp == 'string') {
          if (iconProp.indexOf('&#x') === 0) {
            // Converts a hex reference in HTML entity form: &#x99999;
            icon = parseInt(iconProp.slice(3, -1), 16);
          } else if (iconProp.indexOf('&#') === 0) {
            // Convert an HTML entity: &#99999;
            icon = parseInt(iconProp.slice(2, -1));
          } else if (iconProp.indexOf("\\u") === 0) {
            // Convert a unicode reference: \u99999;
            icon = parseInt(iconProp.slice(2), 16);
          } else if (iconProp.indexOf('0x') === 0) {
            // Converts a hex reference in string form
            icon = String.fromCodePoint(iconProp);
          } else if (!isUri(iconProp)) {
            // A "simple" string is assumed to be an icon-name string
            icon = iconProp;
          } else {
            // for a path or URI, add it to style
            style = mergeStyle(style, iconProp);
          }
        } else if (typeof iconProp === 'object') {
          style = mergeStyle(style, iconProp);
        }
      }

      if (typeof icon == 'number') {
        // Converts a hex reference in number form
        icon = String.fromCodePoint(icon);
      }

      return {
        children: icon,
        style: style
      };
    }
  },
  render: function render(_ref3) {
    var componentRef = _ref3.componentRef,
        iconProps = _ref3.iconProps,
        rest = _objectWithoutProperties(_ref3, _excluded);

    delete rest.iconList;
    delete rest.pressed;
    delete rest.size;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread(_objectSpread({
      "aria-hidden": true
    }, rest), iconProps), {}, {
      ref: componentRef
    }));
  }
});
/**
 * A higher-order component that adds behavior to [Icon]{@link ui/Icon.IconBase}.
 *
 * @hoc
 * @memberof ui/Icon
 * @mixes ui/ForwardRef.ForwardRef
 * @public
 */

exports.IconBase = IconBase;
var IconDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'componentRef'
}));
/**
 * An Icon component.
 *
 * @class Icon
 * @extends ui/Icon.IconBase
 * @mixes ui/Icon.IconDecorator
 * @omit componentRef
 * @memberof ui/Icon
 * @ui
 * @public
 */

exports.IconDecorator = IconDecorator;
var Icon = IconDecorator(IconBase);
exports.Icon = Icon;
var _default = Icon;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Image/Image.js":
/*!***********************************************!*\
  !*** ./node_modules/@enact/ui/Image/Image.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ImageDecorator = exports.ImageBase = exports.Image = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _warning = _interopRequireDefault(__webpack_require__(/*! warning */ "./node_modules/warning/warning.js"));

var _resolution = __webpack_require__(/*! ../resolution */ "./node_modules/@enact/ui/resolution/index.js");

var _ForwardRef = _interopRequireDefault(__webpack_require__(/*! ../ForwardRef */ "./node_modules/@enact/ui/ForwardRef/ForwardRef.js"));

var _ImageModule = _interopRequireDefault(__webpack_require__(/*! ./Image.module.css */ "./node_modules/@enact/ui/Image/Image.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["alt", "aria-label", "bgImage", "children", "componentRef", "css", "imgSrc", "onError", "onLoad", "style"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * A basic image component designed to display images conditionally based on screen size.
 *
 * This component does not have a default size, therefore the image will not show unless a size is
 * specified using a CSS `className` or inline `style`.
 *
 * Example:
 * ```
 * const src = {
 *   'hd': 'http://lorempixel.com/64/64/city/1/',
 *   'fhd': 'http://lorempixel.com/128/128/city/1/',
 *   'uhd': 'http://lorempixel.com/256/256/city/1/'
 * };
 *
 * <Image className={css.myImage} src={src} sizing="fill" />
 * ```
 *
 * `ui/Image` is based on the `div` element, but it uses `img` to provide `onError` and `onLoad`
 * events. The image that you see on screen is a `background-image` from the `div` element, not the
 * `img` element.
 *
 * > If you need a naturally sized image, you can use the native `<img>` element instead.
 *
 * @class ImageBase
 * @memberof ui/Image
 * @ui
 * @public
 */


var ImageBase = (0, _kind["default"])({
  name: 'ui:Image',
  propTypes:
  /** @lends ui/Image.ImageBase.prototype */
  {
    /**
     * String value for the alt attribute of the image.
     *
     * @type {String}
     * @public
     */
    alt: _propTypes2["default"].string,

    /**
     * The aria-label for the image.
     *
     * If unset, it defaults to the value of `alt`.
     *
     * @type {String}
     * @public
     * @memberof ui/Image.Image.prototype
     */
    'aria-label': _propTypes2["default"].string,

    /**
     * Node for the children of an `Image`. Useful for overlays.
     *
     * @type {Node}
     * @public
     */
    children: _propTypes2["default"].node,

    /**
     * Called with a reference to the root component.
     *
     * When using {@link ui/Image.Image}, the `ref` prop is forwarded to this component
     * as `componentRef`.
     *
     * @type {Object|Function}
     * @public
     */
    componentRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `image` - The root component class
     * * `fit` - Applied when `sizing` prop is `fit`
     * * `fill` - Applied when `sizing` prop is `fill`
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Called if the image has an error.
     *
     * @type {Function}
     * @public
     */
    onError: _propTypes2["default"].func,

    /**
     * Called once the image is loaded.
     *
     * @type {Function}
     * @public
     */
    onLoad: _propTypes2["default"].func,

    /**
     * A placeholder image to be displayed before the image is loaded.
     *
     * For performance purposes, it should be pre-loaded or be a data url. If `src` is
     * unset, this value will be used as the `background-image`.
     *
     * @type {String}
     * @default ''
     * @public
     */
    placeholder: _propTypes2["default"].string,

    /**
     * Used to set the `background-size` of an `Image`.
     *
     * * `'fill'` - sets `background-size: cover`
     * * `'fit'` - sets `background-size: contain`
     * * `'none'` - uses the image's natural size
     *
     * @type {String}
     * @default 'fill'
     * @public
     */
    sizing: _propTypes2["default"].oneOf(['fit', 'fill', 'none']),

    /**
     * String value or Object of values used to determine which image will appear on
     * a specific screenSize.
     *
     * @type {String|Object}
     * @public
     */
    src: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object])
  },
  defaultProps: {
    placeholder: '',
    sizing: 'fill'
  },
  styles: {
    css: _ImageModule["default"],
    className: 'image',
    publicClassNames: true
  },
  computed: {
    bgImage: function bgImage(_ref) {
      var placeholder = _ref.placeholder,
          src = _ref.src;
      var imageSrc = (0, _resolution.selectSrc)(src) || placeholder;
       true ? (0, _warning["default"])(imageSrc, 'Image requires that either the "placeholder" or "src" props be specified.') : 0;
      if (!imageSrc) return null;
      return placeholder && imageSrc !== placeholder ? "url(\"".concat(imageSrc, "\"), url(\"").concat(placeholder, "\")") : "url(\"".concat(imageSrc, "\")");
    },
    className: function className(_ref2) {
      var _className = _ref2.className,
          sizing = _ref2.sizing,
          styler = _ref2.styler;
      return sizing !== 'none' ? styler.append(sizing) : _className;
    },
    imgSrc: function imgSrc(_ref3) {
      var src = _ref3.src;
      return (0, _resolution.selectSrc)(src) || null;
    }
  },
  render: function render(_ref4) {
    var alt = _ref4.alt,
        ariaLabel = _ref4['aria-label'],
        bgImage = _ref4.bgImage,
        children = _ref4.children,
        componentRef = _ref4.componentRef,
        css = _ref4.css,
        imgSrc = _ref4.imgSrc,
        onError = _ref4.onError,
        onLoad = _ref4.onLoad,
        style = _ref4.style,
        rest = _objectWithoutProperties(_ref4, _excluded);

    delete rest.placeholder;
    delete rest.sizing;
    delete rest.src;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({
      role: "img"
    }, rest), {}, {
      "aria-label": ariaLabel || alt,
      ref: componentRef,
      style: _objectSpread(_objectSpread({}, style), {}, {
        backgroundImage: bgImage
      }),
      children: [children, /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
        className: css.img,
        src: imgSrc,
        alt: alt,
        onLoad: onLoad,
        onError: onError
      })]
    }));
  }
});
/**
 * A higher-order component that adds behaviors to an [ImageBase]{@link ui/Image.ImageBase}.
 *
 * @hoc
 * @memberof ui/Image
 * @mixes ui/ForwardRef.ForwardRef
 * @public
 */

exports.ImageBase = ImageBase;
var ImageDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'componentRef'
}));
/**
 * A minimally styled Image ready for customization by a theme.
 *
 * @class Image
 * @memberof ui/Image
 * @extends ui/Image.ImageBase
 * @mixes ui/Image.ImageDecorator
 * @omit componentRef
 * @ui
 * @public
 */

exports.ImageDecorator = ImageDecorator;
var Image = ImageDecorator(ImageBase);
exports.Image = Image;
var _default = Image;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Marquee/MarqueeBase.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/ui/Marquee/MarqueeBase.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.MarqueeBase = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _MarqueeModule = _interopRequireDefault(__webpack_require__(/*! ./Marquee.module.css */ "./node_modules/@enact/ui/Marquee/Marquee.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["applyOffset", "children", "clientClassName", "clientRef", "clientStyle", "css", "duplicate", "onMarqueeComplete", "rtl"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var isEventSource = function isEventSource(ev) {
  return ev.target === ev.currentTarget;
};
/**
 * Marquees the children of the component.
 *
 * For automated marquee calculations use {@link ui/Marquee.Marquee}.
 *
 * @class MarqueeBase
 * @memberof ui/Marquee
 * @ui
 * @public
 */


var MarqueeBase = (0, _kind["default"])({
  name: 'ui:Marquee',
  propTypes:
  /** @lends ui/Marquee.MarqueeBase.prototype */
  {
    /**
     * Text alignment value of the marquee
     *
     * Valid values are:
     *
     * * `'left'`,
     * * `'right'`, and
     * * `'center'`
     *
     * @type {String}
     * @public
     */
    alignment: _propTypes2["default"].oneOf(['left', 'right', 'center']),

    /**
     * Applies animating styles such as removing the ellipsis.
     *
     * @type {Boolean}
     * @public
     */
    animating: _propTypes2["default"].bool,

    /**
     * Sets the value of the `aria-label` attribute for the wrapped component.
     *
     * @memberof ui/Marquee.MarqueeBase.prototype
     * @type {String}
     * @public
     */
    'aria-label': _propTypes2["default"].string,

    /**
     * The text or a set of components that should be marqueed
     *
     * This prop may be empty in some cases, which is OK.
     *
     * @type {Node}
     * @public
     */
    children: _propTypes2["default"].node,

    /**
     * Called when mounting or unmounting with a reference to the client node
     *
     * @type {Object|Function}
     * @public
     */
    clientRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `marquee` - The root component class
     * * `animate` - Applied to the inner content node when the text is animating
     * * `spacing` - The spacing node used between the repeated content
     * * `text` - The inner content node
     * * `willAnimate` - Applied to the inner content node shortly before animation
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Distance to animate the marquee
     *
     * Usually, the `distance` is the width of the text minus the width of the container
     *
     * @type {Number}
     * @public
     */
    distance: _propTypes2["default"].number,

    /**
     * Called when the marquee completes its animation
     *
     * @type {Function}
     * @public
     */
    onMarqueeComplete: _propTypes2["default"].func,

    /**
     * Text overflow setting. Either `'clip'` or `'ellipsis'`
     *
     * @type {('clip'|'ellipsis')}
     * @public
     */
    overflow: _propTypes2["default"].oneOf(['clip', 'ellipsis']),

    /**
     * `true` if the directionality of the content is right-to-left
     *
     * @type {Boolean}
     * @public
     * @default false
     */
    rtl: _propTypes2["default"].bool,

    /**
     * Amount of spacing, in pixels, between the instances of the content
     *
     * @type {Number}
     * @default 0
     * @public
     */
    spacing: _propTypes2["default"].number,

    /**
     * Speed of marquee animation in pixels/second.
     *
     * @type {Number}
     * @public
     */
    speed: _propTypes2["default"].number,

    /**
     * Indicates the marquee will animate soon.
     *
     * Should be used by the component to prepare itself for animation such as promoting
     * composite layers for improved performance.
     *
     * @type {Boolean}
     * @public
     * @default false
     */
    willAnimate: _propTypes2["default"].bool
  },
  defaultProps: {
    spacing: 0,
    rtl: false,
    willAnimate: false
  },
  styles: {
    css: _MarqueeModule["default"],
    className: 'marquee',
    publicClassNames: true
  },
  handlers: {
    applyOffset: function applyOffset(node, _ref) {
      var distance = _ref.distance,
          rtl = _ref.rtl,
          spacing = _ref.spacing;
      if (!node || !__webpack_require__.g.IntersectionObserver) return;
      var root = node.parentNode;
      new __webpack_require__.g.IntersectionObserver(function (entries, observer) {
        var _entries$0$boundingCl = entries[0].boundingClientRect,
            left = _entries$0$boundingCl.left,
            right = _entries$0$boundingCl.right;
        var _entries$0$rootBounds = entries[0].rootBounds,
            rootLeft = _entries$0$rootBounds.left,
            rootRight = _entries$0$rootBounds.right;
        var scale = root.getBoundingClientRect().width / root.offsetWidth || 1;
        var textWidth = (rtl ? rootRight - right : left - rootLeft) / scale;
        var offset = distance - (textWidth + spacing);
        node.style.setProperty('--ui-marquee-offset', offset);
        observer.disconnect();
      }, {
        root: root
      }).observe(node);
    },
    onMarqueeComplete: (0, _handle.handle)((0, _handle.forProp)('animating', true), isEventSource, _handle.stop, (0, _handle.forwardCustom)('onMarqueeComplete'))
  },
  computed: {
    'aria-label': function ariaLabel(_ref2) {
      var aria = _ref2['aria-label'],
          children = _ref2.children,
          distance = _ref2.distance,
          willAnimate = _ref2.willAnimate;

      if (children != null && aria == null && willAnimate && distance > 0) {
        return _react.Children.map(children, function (c) {
          return typeof c === 'string' && c;
        }).filter(Boolean).join(' ') || aria;
      } else {
        return aria;
      }
    },
    clientClassName: function clientClassName(_ref3) {
      var animating = _ref3.animating,
          willAnimate = _ref3.willAnimate,
          styler = _ref3.styler;
      return styler.join({
        animate: animating,
        text: true,
        willAnimate: willAnimate
      });
    },
    clientStyle: function clientStyle(_ref4) {
      var alignment = _ref4.alignment,
          animating = _ref4.animating,
          distance = _ref4.distance,
          overflow = _ref4.overflow,
          rtl = _ref4.rtl,
          spacing = _ref4.spacing,
          speed = _ref4.speed; // If the components content directionality doesn't match the context, we need to set it
      // inline

      var direction = rtl ? 'rtl' : 'ltr';
      var rtlDirectionMultiplier = rtl ? 1 : -1;
      var style = {
        '--ui-marquee-spacing': spacing,
        direction: direction,
        textAlign: alignment,
        textOverflow: overflow
      };

      if (animating) {
        var duration = distance / speed;
        style.transform = "translateX(".concat(distance * rtlDirectionMultiplier, "px)");
        style.transitionDuration = "".concat(duration, "s");
      } else {
        style.transform = 'translateX(0)';
      }

      return style;
    },
    duplicate: function duplicate(_ref5) {
      var distance = _ref5.distance,
          willAnimate = _ref5.willAnimate;
      return willAnimate && distance > 0;
    }
  },
  render: function render(_ref6) {
    var applyOffset = _ref6.applyOffset,
        children = _ref6.children,
        clientClassName = _ref6.clientClassName,
        clientRef = _ref6.clientRef,
        clientStyle = _ref6.clientStyle,
        css = _ref6.css,
        duplicate = _ref6.duplicate,
        onMarqueeComplete = _ref6.onMarqueeComplete,
        rtl = _ref6.rtl,
        rest = _objectWithoutProperties(_ref6, _excluded);

    delete rest.alignment;
    delete rest.animating;
    delete rest.distance;
    delete rest.onMarqueeComplete;
    delete rest.overflow;
    delete rest.spacing;
    delete rest.speed;
    delete rest.willAnimate;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: clientClassName,
        ref: clientRef,
        style: clientStyle,
        onTransitionEnd: onMarqueeComplete,
        children: [children, duplicate ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: css.spacing,
            ref: applyOffset
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            dir: rtl ? "rtl" : "ltr",
            children: children
          })]
        }) : null]
      })
    }));
  }
});
exports.MarqueeBase = MarqueeBase;
var _default = MarqueeBase;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Marquee/MarqueeController.js":
/*!*************************************************************!*\
  !*** ./node_modules/@enact/ui/Marquee/MarqueeController.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.MarqueeControllerContext = exports.MarqueeController = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var STATE = {
  inactive: 0,
  // Marquee is not necessary (render or focus not happened)
  active: 1,
  // Marquee in progress, awaiting complete
  ready: 2 // Marquee completed or not needed, but state is active

};
var MarqueeControllerContext = /*#__PURE__*/(0, _react.createContext)(null);
/**
 * Default configuration parameters for {@link ui/Marquee.MarqueeController}.
 *
 * @type {Object}
 * @memberof ui/Marquee.MarqueeController
 * @hocconfig
 */

exports.MarqueeControllerContext = MarqueeControllerContext;
var defaultConfig = {
  /**
   * When `true`, any `onFocus` events that bubble to the controller will start the contained
   * `Marquee` instances. This is useful when a component contains `Marquee` instances that need to be
   * started when sibling components are focused.
   *
   * @type {Boolean}
   * @default false
   * @memberof ui/Marquee.MarqueeController.defaultConfig
   */
  marqueeOnFocus: false
};
/**
 * A higher-order component that synchronizes contained `Marquee`s.
 *
 * @memberof ui/Marquee
 * @hoc
 * @public
 */

var MarqueeController = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var marqueeOnFocus = config.marqueeOnFocus;
  var forwardBlur = (0, _handle.forward)('onBlur');
  var forwardFocus = (0, _handle.forward)('onFocus');
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);
      _this.cancelJob = new _util.Job(function () {
        return _this.doCancel();
      }, 30);

      _this.handleRegister = function (component, handlers) {
        var needsStart = !_this.allInactive() || _this.isFocused;

        _this.controlled.push(_objectSpread(_objectSpread({}, handlers), {}, {
          state: STATE.inactive,
          component: component
        }));

        if (needsStart) {
          _this.dispatch('start');
        }
      };

      _this.handleUnregister = function (component) {
        var wasRunning = false;

        for (var i = 0; i < _this.controlled.length; i++) {
          if (_this.controlled[i].component === component) {
            wasRunning = _this.controlled[i].state === STATE.active;

            _this.controlled.splice(i, 1);

            break;
          }
        }

        if (wasRunning && !_this.anyRunning()) {
          _this.dispatch('start');
        }
      };

      _this.handleStart = function (component) {
        _this.cancelJob.stop();

        if (!_this.anyRunning()) {
          _this.markAll(STATE.ready);

          _this.dispatch('start', component);
        }
      };

      _this.handleCancel = function () {
        if (_this.anyRunning()) {
          _this.cancelJob.start();
        }
      };

      _this.doCancel = function () {
        if (_this.isHovered || _this.isFocused) {
          return;
        }

        _this.markAll(STATE.inactive);

        _this.dispatch('stop');
      };

      _this.handleComplete = function (component) {
        var complete = _this.markReady(component);

        if (complete) {
          _this.markAll(STATE.ready);

          _this.dispatch('start');
        }
      };

      _this.handleEnter = function () {
        _this.isHovered = true;

        if (!_this.anyRunning()) {
          _this.dispatch('start');
        }

        _this.cancelJob.stop();
      };

      _this.handleLeave = function () {
        _this.isHovered = false;

        _this.cancelJob.start();
      };

      _this.handleFocus = function (ev) {
        _this.isFocused = true;

        if (!_this.anyRunning()) {
          _this.dispatch('start');
        }

        _this.cancelJob.stop();

        forwardFocus(ev, _this.props);
      };

      _this.handleBlur = function (ev) {
        _this.isFocused = false;

        if (_this.anyRunning()) {
          _this.cancelJob.start();
        }

        forwardBlur(ev, _this.props);
      };

      _this.controlled = [];
      _this.isFocused = false;
      _this.childContext = {
        cancel: _this.handleCancel,
        complete: _this.handleComplete,
        enter: _this.handleEnter,
        leave: _this.handleLeave,
        register: _this.handleRegister,
        start: _this.handleStart,
        unregister: _this.handleUnregister
      };
      return _this;
    }

    _createClass(_class, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.cancelJob.stop();
      }
    }, {
      key: "dispatch",
      value:
      /*
       * Invokes the `action` handler for each synchronized component except the invoking
       * `component`.
       *
       * @param	{String}	action		`'start'` or `'stop'`
       * @param	{Object}	component	A previously registered component
       *
       * @returns	{undefined}
       */
      function dispatch(action, component) {
        this.controlled.forEach(function (controlled) {
          var controlledComponent = controlled.component,
              handler = controlled[action];

          if (component !== controlledComponent && typeof handler === 'function') {
            var complete = handler.call(controlledComponent); // Returning `true` from a start request means that the marqueeing is
            // unnecessary and is therefore not awaiting a finish

            if (action === 'start' && complete) {
              controlled.state = STATE.ready;
            } else if (action === 'start') {
              controlled.state = STATE.active;
            }
          } else if (action === 'start' && component === controlledComponent) {
            controlled.state = STATE.active;
          }
        });
      }
      /*
       * Marks all components with the passed-in state
       *
       * @param	{Enum}	state	The state to set
       *
       * @returns	{undefined}
       */

    }, {
      key: "markAll",
      value: function markAll(state) {
        this.controlled.forEach(function (c) {
          c.state = state;
        });
      }
      /*
       * Marks `component` as ready for next marquee action
       *
       * @param	{Object}	component	A previously registered component
       *
       * @returns	{Boolean}				`true` if no components are STATE.active
       */

    }, {
      key: "markReady",
      value: function markReady(component) {
        var complete = true;
        this.controlled.forEach(function (c) {
          if (c.component === component) {
            c.state = STATE.ready;
          }

          complete = complete && c.state !== STATE.active;
        });
        return complete;
      }
      /*
       * Checks that all components are inactive
       *
       * @returns {Boolean} `true` if any components should be running
       */

    }, {
      key: "allInactive",
      value: function allInactive() {
        var activeOrReady = this.controlled.reduce(function (res, component) {
          return res || !(component.state === STATE.inactive);
        }, false);
        return !activeOrReady;
      }
      /*
       * Checks for any components currently marqueeing
       *
       * @returns {Boolean} `true` if any component is marqueeing
       */

    }, {
      key: "anyRunning",
      value: function anyRunning() {
        return this.controlled.reduce(function (res, component) {
          return res || component.state === STATE.active;
        }, false);
      }
    }, {
      key: "render",
      value: function render() {
        var props = this.props;

        if (marqueeOnFocus) {
          props = _objectSpread(_objectSpread({}, this.props), {}, {
            onBlur: this.handleBlur,
            onFocus: this.handleFocus
          });
        }

        return /*#__PURE__*/(0, _jsxRuntime.jsx)(MarqueeControllerContext.Provider, {
          value: this.childContext,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props))
        });
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'MarqueeController', _class;
});
exports.MarqueeController = MarqueeController;
var _default = MarqueeController;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Marquee/MarqueeDecorator.js":
/*!************************************************************!*\
  !*** ./node_modules/@enact/ui/Marquee/MarqueeDecorator.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.MarqueeDecorator = void 0;

var _direction = _interopRequireDefault(__webpack_require__(/*! direction */ "./node_modules/direction/index.js"));

var _dispatcher = __webpack_require__(/*! @enact/core/dispatcher */ "./node_modules/@enact/core/dispatcher/dispatcher.js");

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _deprecate = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/deprecate */ "./node_modules/@enact/core/internal/deprecate/deprecate.js"));

var _keymap = __webpack_require__(/*! @enact/core/keymap */ "./node_modules/@enact/core/keymap/index.js");

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _reactDom = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");

var _warning = _interopRequireDefault(__webpack_require__(/*! warning */ "./node_modules/warning/warning.js"));

var _resolution = __webpack_require__(/*! ../resolution */ "./node_modules/@enact/ui/resolution/index.js");

var _Resizable = __webpack_require__(/*! ../Resizable */ "./node_modules/@enact/ui/Resizable/Resizable.js");

var _MarqueeBase = _interopRequireDefault(__webpack_require__(/*! ./MarqueeBase */ "./node_modules/@enact/ui/Marquee/MarqueeBase.js"));

var _MarqueeController = __webpack_require__(/*! ./MarqueeController */ "./node_modules/@enact/ui/Marquee/MarqueeController.js");

var _MarqueeModule = _interopRequireDefault(__webpack_require__(/*! ./Marquee.module.css */ "./node_modules/@enact/ui/Marquee/Marquee.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["alignment", "children", "disabled", "marqueeOn", "marqueeSpeed"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/**
 * Default configuration parameters for {@link ui/Marquee.MarqueeDecorator}
 *
 * @type {Object}
 * @memberof ui/Marquee.MarqueeDecorator
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Property containing the callback to stop the animation when `marqueeOn` is `'focus'`
   *
   * @type {String}
   * @default 'onBlur'
   * @memberof ui/Marquee.MarqueeDecorator.defaultConfig
   */
  blur: 'onBlur',

  /**
   * Optional CSS class name to customize the marquee `component`
   *
   * @type {String}
   * @default null
   * @memberof ui/Marquee.MarqueeDecorator.defaultConfig
   * @deprecated Will be removed in 5.0.0. Use {@link ui/Marquee.MarqueeDecorator.defaultConfig.css} instead.
   */
  className: null,

  /**
   * The base marquee component wrapping the content.
   *
   * @type {Component}
   * @default ui/Marquee.Marquee
   * @memberof ui/Marquee.MarqueeDecorator.defaultConfig
   */
  component: _MarqueeBase["default"],

  /**
   * Customizes the component by mapping the supplied collection of CSS class names to the
   * corresponding internal elements and states of this component.
   *
   * The following classes are supported:
   *
   * * `marquee` - The root component class
   * * `animate` - Applied to the inner content node when the text is animating
   * * `spacing` - The spacing node used between the repeated content
   * * `text` - The inner content node
   * * `willAnimate` - Applied to the inner content node shortly before animation
   *
   * @type {Object}
   * @default null
   * @memberof ui/Marquee.MarqueeDecorator.defaultConfig
   */
  css: null,

  /**
   * Property containing the callback to start the animation when `marqueeOn` is `'hover'`
   *
   * @type {String}
   * @default 'onMouseEnter'
   * @memberof ui/Marquee.MarqueeDecorator.defaultConfig
   */
  enter: 'onMouseEnter',

  /**
   * Property containing the callback to start the animation when `marqueeOn` is `'focus'`
   *
   * @type {String}
   * @default 'onFocus'
   * @memberof ui/Marquee.MarqueeDecorator.defaultConfig
   */
  focus: 'onFocus',

  /**
  * Invalidate the distance if any property (like 'inline') changes.
  * Expects an array of props which on change trigger invalidateMetrics.
  *
  * @type {String[]}
  * @default ['remeasure']
  * @memberof ui/Marquee.MarqueeDecorator.defaultConfig
  */
  invalidateProps: ['remeasure'],

  /**
   * Property containing the callback to stop the animation when `marqueeOn` is `'hover'`
   *
   * @type {String}
   * @default 'onMouseLeave'
   * @memberof ui/Marquee.MarqueeDecorator.defaultConfig
   */
  leave: 'onMouseLeave',

  /**
   * A function that determines the text directionality of a string.
   *
   * Returns:
   * * `'rtl'` if the text should marquee to the right
   * * `'ltr'` if the text should marquee to the left
   *
   * @type {Function}
   * @kind member
   * @memberof ui/Marquee.MarqueeDecorator.defaultConfig
   */
  marqueeDirection: function marqueeDirection(str) {
    return (0, _direction["default"])(str) === 'rtl' ? 'rtl' : 'ltr';
  }
};
/*
 * Checks whether any of the invalidateProps has changed or not
 *
 * @param {String[]} propList An array of invalidateProps
 * @param {Object} prev Previous props
 * @param {Object} next Next props
 * @returns {Boolean} `true` if any of the props changed
 * @private
 */

var didPropChange = function didPropChange(propList, prev, next) {
  var hasPropsChanged = propList.map(function (i) {
    return prev[i] !== next[i];
  });
  return hasPropsChanged.indexOf(true) !== -1;
};
/*
 * There's only one timer shared for Marquee so we need to keep track of what we may be using it
 * for. We may need to clean up certain things as we move among states.
 */


var TimerState = {
  CLEAR: 0,
  // No timers pending
  START_PENDING: 1,
  // A start request is pending
  RESET_PENDING: 2,
  // Marquee finished, waiting for reset delay
  SYNCSTART_PENDING: 3 // Waiting to alert Controller that we want to start marqueeing

};
/**
 * A higher-order component that provides marquee functionalities.
 *
 * Note: This HoC passes additional properties to the wrapped component and wraps the `children`
 * prop with an additional component necessary for rendering the marquee.
 *
 * @class MarqueeDecorator
 * @memberof ui/Marquee
 * @hoc
 * @public
 */

var MarqueeDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var blur = config.blur,
      MarqueeComponent = config.component,
      enter = config.enter,
      focus = config.focus,
      invalidateProps = config.invalidateProps,
      leave = config.leave,
      marqueeDirection = config.marqueeDirection;

  if (config.className) {
    (0, _deprecate["default"])({
      name: 'ui/MarqueeDecorator.config.className',
      replacedBy: 'ui/MarqueeDecorator.config.css',
      until: '5.0.0'
    });
  }

  var css = typeof config.css === 'object' && config.css || {
    marquee: config.className
  }; // Generate functions to forward events to containers

  var forwardBlur = (0, _handle.forward)(blur);
  var forwardFocus = (0, _handle.forward)(focus);
  var forwardEnter = (0, _handle.forward)(enter);
  var forwardLeave = (0, _handle.forward)(leave);

  var determineTextDirection = function determineTextDirection(node, rtl, forceDirection) {
    // Text directionality is a function of locale direction (rtl), content (node.textContent),
    // and props (forceDirection) in increasing order of significance.
    if (forceDirection) {
      rtl = forceDirection === 'locale' ? rtl : forceDirection === 'rtl';
    } else if (node) {
      rtl = marqueeDirection(node.textContent) === 'rtl';
    }

    return rtl;
  };

  return _class = /*#__PURE__*/function (_PureComponent) {
    _inherits(_class, _PureComponent);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);
      _this.promoteJob = new _util.Job(function () {
        if (_this.contentFits === false) {
          _this.setState(function (state) {
            return state.promoted ? null : {
              promoted: true
            };
          });
        }
      });
      _this.demoteJob = new _util.Job(function () {
        _this.setState(function (state) {
          return !state.animating && state.promoted ? {
            promoted: false
          } : null;
        });
      });

      _this.start = function () {
        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props.marqueeDelay;

        if (_this.props.marqueeDisabled) {
          // if marquee isn't necessary, do not set `animating` but return `true` to mark it
          // complete if it's synchronized so it doesn't block other instances.
          return true;
        } else if (!_this.state.animating) {
          // Don't need to worry about this.timerState because if we're sync, we were just
          // told to start, so our state is correct already. If we're not sync, this will
          // restart us anyhow. If we were waiting to tell sync to start us, someone else in
          // our group already did it.
          _this.setTimeout(function () {
            _this.calculateMetrics();

            if (_this.contentFits === false) {
              _this.setState({
                promoted: true,
                animating: true
              });
            } else if (_this.sync) {
              _this.context.complete(_assertThisInitialized(_this));
            }
          }, delay, TimerState.START_PENDING);
        }
      };

      _this.stop = function () {
        _this.clearTimeout();

        if (_this.state.animating) {
          _this.setState({
            animating: false
          });
        }

        _this.demote();
      };

      _this.tryStartingAnimation = function (delay) {
        if (_this.state.animating || _this.timerState !== TimerState.CLEAR) return;

        _this.startAnimation(delay);
      };

      _this.startAnimation = function (delay) {
        _this.promote(delay);

        if (_this.sync) {
          // If we're running a timer for anything, we should let that finish, unless it's
          // another syncstart request.  We should probably check to see if the start request
          // is further in the future than we are so we can choose the nearer one. But, we're
          // assuming the condition is we're waiting on render delay and someone just hovered
          // us, so we can start with the (hopefully) faster hover delay.
          if (_this.timerState !== TimerState.CLEAR && _this.timerState !== TimerState.SYNCSTART_PENDING) {
            return;
          }

          _this.setTimeout(function () {
            _this.context.start();
          }, delay, TimerState.SYNCSTART_PENDING);
        } else {
          _this.start(delay);
        }
      };

      _this.restartAnimation = function (delay) {
        (0, _reactDom.flushSync)(function () {
          _this.setState({
            animating: false
          });
        }); // synchronized Marquees defer to the controller to restart them

        if (_this.sync) {
          _this.context.complete(_assertThisInitialized(_this));
        } else if (!_this.state.animating) {
          _this.startAnimation(delay);
        }
      };

      _this.resetAnimation = function () {
        var delay = Math.max(40, _this.props.marqueeResetDelay + _this.props.marqueeDelay); // If we're already timing a start action, don't reset.  Start actions will clear us if
        // sync.

        if (_this.timerState === TimerState.CLEAR) {
          // If invoked immediately, the setState call in restartAnimation is batched and will
          // break any non-marquee-on-render instances because the subsequent startAnimation
          // isn't invoked. By setting a brief timeout, we decouple from the `onTransitionEnd`
          // event and setState is synchronous allowing the startAnimation to be called
          // immediately.
          //
          // This would be better moved into componentDidUpdate with more expansive state
          // values to indicate we need to reset an animation vs starting fresh.
          _this.setTimeout(function () {
            _this.restartAnimation(delay);
          }, 0, TimerState.RESET_PENDING);
        }
      };

      _this.cancelAnimation = function () {
        if (_this.sync) {
          _this.context.cancel(_assertThisInitialized(_this));

          return;
        }

        _this.stop();
      };

      _this.handleResize = function () {
        if (_this.node && !_this.props.marqueeDisabled) {
          _this.invalidateMetrics();

          if (_this.state.animating) {
            _this.cancelAnimation();

            _this.resetAnimation();
          }
        }
      };

      _this.handleMarqueeComplete = function () {
        _this.resetAnimation();
      };

      _this.handleFocus = function (ev) {
        _this.isFocused = true;

        if (!_this.sync) {
          if (!_this.state.animating) {
            _this.startAnimation();
          }
        }

        forwardFocus(ev, _this.props);
      };

      _this.handleBlur = function (ev) {
        _this.promoteJob.stop();

        forwardBlur(ev, _this.props);

        if (_this.isFocused) {
          _this.isFocused = false;

          if (!_this.sync && !(_this.isHovered && _this.props.marqueeOn === 'hover')) {
            _this.cancelAnimation();
          }
        }
      };

      _this.handleEnter = function (ev) {
        _this.isHovered = true;

        if (_this.props.marqueeOn === 'hover') {
          if (_this.sync) {
            _this.context.enter(_assertThisInitialized(_this));
          } else if (!_this.state.animating) {
            _this.startAnimation();
          }
        }

        forwardEnter(ev, _this.props);
      };

      _this.handleLeave = function (ev) {
        _this.promoteJob.stop();

        _this.handleUnhover();

        forwardLeave(ev, _this.props);
      };

      _this.handlePointerHide = function (_ref) {
        var keyCode = _ref.keyCode;

        if ((0, _keymap.is)('pointerHide', keyCode)) {
          _this.handleUnhover();
        }
      };

      _this.cacheNode = function (node) {
        _this.node = node;
      };

      _this.state = {
        animating: false,
        overflow: 'ellipsis',
        promoted: false,
        rtl: determineTextDirection(null, props.rtl, props.forceDirection)
      };
      _this.sync = false;
      _this.timerState = TimerState.CLEAR;
      _this.distance = null;
      _this.contentFits = null;
      _this.resizeRegistry = null;
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.context && this.context.register) {
          this.sync = true;
          this.context.register(this, {
            start: this.start,
            stop: this.stop
          });
        }

        this.validateTextDirection();

        if (this.props.marqueeOn === 'render') {
          this.startAnimation(this.props.marqueeOnRenderDelay);
        }

        (0, _dispatcher.on)('keydown', this.handlePointerHide, document);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props = this.props,
            children = _this$props.children,
            disabled = _this$props.disabled,
            forceDirection = _this$props.forceDirection,
            locale = _this$props.locale,
            marqueeOn = _this$props.marqueeOn,
            marqueeDisabled = _this$props.marqueeDisabled,
            marqueeSpacing = _this$props.marqueeSpacing,
            marqueeSpeed = _this$props.marqueeSpeed,
            rtl = _this$props.rtl;
        var forceRestartMarquee = false;

        if (prevProps.locale !== locale || prevProps.rtl !== rtl || prevProps.marqueeSpacing !== marqueeSpacing || !(0, _util.shallowEqual)(prevProps.children, children) || invalidateProps && didPropChange(invalidateProps, prevProps, this.props)) {
          // restart marqueeOn="render" marquees or synced marquees that were animating
          forceRestartMarquee = marqueeOn === 'render' || this.sync && (this.state.animating || this.timerState > TimerState.CLEAR);
          this.invalidateMetrics();
          this.cancelAnimation();

          if (forceRestartMarquee && marqueeOn === 'focus') {
            this.resetAnimation();
          }
        } else if (prevProps.marqueeOn !== marqueeOn || prevProps.marqueeDisabled !== marqueeDisabled || prevProps.marqueeSpeed !== marqueeSpeed || prevProps.forceDirection !== forceDirection) {
          this.cancelAnimation();
        } else if (disabled && this.isHovered && marqueeOn === 'focus' && this.sync) {
          this.context.enter(this);
        }

        this.validateTextDirection();

        if (forceRestartMarquee || this.shouldStartMarquee()) {
          this.tryStartingAnimation(this.props.marqueeOn === 'render' ? this.props.marqueeOnRenderDelay : this.props.marqueeDelay);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.clearTimeout();
        this.promoteJob.stop();
        this.demoteJob.stop();

        if (this.sync) {
          this.context.unregister(this);
        }

        if (this.resizeRegistry) {
          this.resizeRegistry.unregister(this.handleResize);
        }

        (0, _dispatcher.off)('keydown', this.handlePointerHide, document);
      }
    }, {
      key: "demote",
      value: function demote() {
        this.promoteJob.stop();

        if (this.state.promoted) {
          this.demoteJob.idle();
        }
      }
    }, {
      key: "promote",
      value: function promote() {
        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.marqueeDelay;
        this.demoteJob.stop();
        this.promoteJob.startAfter(Math.max(0, delay - 200));
      }
      /*
       * Clears the timer
       *
       * @returns {undefined}
       */

    }, {
      key: "clearTimeout",
      value: function clearTimeout() {
        if (window && this.timer) {
          window.clearTimeout(this.timer);
          this.timer = null;
        }

        this.timerState = TimerState.CLEAR;
      }
      /*
       * Starts a new timer
       *
       * @param {Function} fn   Callback
       * @param {Number}   time Delay in milliseconds
       * @returns {undefined}
       */

    }, {
      key: "setTimeout",
      value: function setTimeout(fn) {
        var _this2 = this;

        var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TimerState.CLEAR;
        this.clearTimeout();

        if (window) {
          this.timerState = state;
          this.timer = window.setTimeout(function () {
            _this2.timerState = TimerState.CLEAR;
            fn();
          }, time);
        }
      }
      /*
       * Checks to see if the children changed during a condition that should cause us to re-check
       * the animation state
       *
       * @returns {Boolean} - `true` if a possible marquee condition exists
       */

    }, {
      key: "shouldStartMarquee",
      value: function shouldStartMarquee() {
        var _this$props2 = this.props,
            disabled = _this$props2.disabled,
            marqueeDisabled = _this$props2.marqueeDisabled,
            marqueeOn = _this$props2.marqueeOn;
        return !marqueeDisabled && (marqueeOn === 'render' || !this.sync && (this.isFocused && marqueeOn === 'focus' && !disabled || this.isHovered && (marqueeOn === 'hover' || marqueeOn === 'focus' && disabled)));
      }
      /*
       * Invalidates marquee metrics requiring them to be recalculated
       *
       * @returns {undefined}
       */

    }, {
      key: "invalidateMetrics",
      value: function invalidateMetrics() {
        this.spacing = 0; // Null distance is the special value to allow recalculation

        this.distance = null; // Assume the marquee does not fit until calculations show otherwise

        this.contentFits = null;
        this.setState(function (state) {
          if (state.overflow === 'ellipsis' && state.promoted === false) return null;
          return {
            overflow: 'ellipsis',
            promoted: false
          };
        });
      }
    }, {
      key: "moveChildren",
      value: function moveChildren(from, to) {
        while (from.childNodes.length) {
          to.appendChild(from.childNodes.item(0));
        }
      }
    }, {
      key: "measureWidths",
      value: function measureWidths() {
        if (this.node.querySelector(".".concat(_MarqueeModule["default"].marquee))) {
           true ? (0, _warning["default"])(false, 'Marquee should not be nested inside another Marquee') : 0;
          return {
            scrollWidth: this.node.scrollWidth,
            width: this.node.getBoundingClientRect().width
          };
        } // move all the children into the wrapper node ...


        var wrapper = document.createElement('span');
        this.moveChildren(this.node, wrapper);
        this.node.appendChild(wrapper); // measure it to find the precise floating point width of the content ...

        var _wrapper$getBoundingC = wrapper.getBoundingClientRect(),
            scrollWidth = _wrapper$getBoundingC.width;

        var _this$node$getBoundin = this.node.getBoundingClientRect(),
            width = _this$node$getBoundin.width; // and move all the children back and remove the wrapper


        this.node.removeChild(wrapper);
        this.moveChildren(wrapper, this.node);
        return {
          scrollWidth: scrollWidth,
          width: width
        };
      }
      /*
      * Determines if the component should marquee and the distance to animate
      *
      * @returns {undefined}
      */

    }, {
      key: "calculateMetrics",
      value: function calculateMetrics() {
        var node = this.node; // TODO: absolute showing check (or assume that it won't be rendered if it isn't showing?)

        if (node && this.distance == null && !this.props.marqueeDisabled) {
          var _this$measureWidths = this.measureWidths(),
              width = _this$measureWidths.width,
              scrollWidth = _this$measureWidths.scrollWidth;

          this.spacing = this.getSpacing(width);
          this.distance = this.calculateDistance(width, scrollWidth, this.spacing);
          this.contentFits = !this.shouldAnimate(this.distance);
          var overflow = this.calculateTextOverflow(this.distance);
          this.setState(function (state) {
            return state.overflow === overflow ? null : {
              overflow: overflow
            };
          });
        }
      }
      /*
       * Calculates the distance the marquee must travel to reveal all of the content
       *
       * @param	{Number}  width        Width of the node
       * @param	{Number}  scrollWidth  Width of the node if it were unbounded
       * @param	{Number}  spacing      Horizontal spacing
       * @returns	{Number}               Distance to travel in pixels
       */

    }, {
      key: "calculateDistance",
      value: function calculateDistance(width, scrollWidth, spacing) {
        var overflow = scrollWidth - width;

        if (this.shouldAnimate(overflow)) {
          return scrollWidth + spacing;
        }

        return 0;
      }
      /*
       * A custom overflow-determining method to reflect real-world truncation/ellipsis
       * calculation. This catches an edge case that the browser typically does not, where the
       * size of the text area is the same size as the container (zero distance difference), but
       * the browser still inserts an ellipsis due to a non-visible part of the last glyph's
       * render box overflowing the parent container size.
       * This scenario should not induce a marquee animation or ellipsis, so we directly set
       * Marquee to not use an ellipsis, and instead just clip the non-visible part of the glyph.
       *
       * @param	{Number}	distance	Amount of overflow in pixels
       * @returns	{String}				text-overflow value
       */

    }, {
      key: "calculateTextOverflow",
      value: function calculateTextOverflow(distance) {
        return distance === 0 ? 'clip' : 'ellipsis';
      }
    }, {
      key: "getSpacing",
      value: function getSpacing(width) {
        var marqueeSpacing = this.props.marqueeSpacing;

        if (typeof marqueeSpacing === 'string') {
          if (/^\d+(\.\d+)?%$/.test(marqueeSpacing)) {
            return width * Number.parseFloat(marqueeSpacing) / 100;
          } // warning for invalid string value;


          return 0;
        }

        return (0, _resolution.scale)(marqueeSpacing);
      }
      /*
       * Calculates if the marquee should animate
       *
       * @param	{Number}	distance	Amount of overflow in pixels
       * @returns	{Boolean}				`true` if it should animated
       */

    }, {
      key: "shouldAnimate",
      value: function shouldAnimate(distance) {
        return distance > 0;
      }
      /*
       * Starts the animation without synchronizing
       *
       * @param	{Number}	[delay]	Milliseconds to wait before animating
       * @returns	{undefined}
       */

    }, {
      key: "handleUnhover",
      value: function handleUnhover() {
        this.isHovered = false;

        if (this.props.marqueeOn === 'hover') {
          if (this.sync) {
            this.context.leave(this);
          } else {
            this.cancelAnimation();
          }
        }
      }
    }, {
      key: "validateTextDirection",
      value: function validateTextDirection() {
        var _this3 = this;

        this.setState(function (state, props) {
          var rtl = determineTextDirection(_this3.node, props.rtl, props.forceDirection);
          return state.rtl === rtl ? null : {
            rtl: rtl
          };
        });
      }
    }, {
      key: "renderMarquee",
      value: function renderMarquee() {
        var _this$props3 = this.props,
            alignment = _this$props3.alignment,
            children = _this$props3.children,
            disabled = _this$props3.disabled,
            marqueeOn = _this$props3.marqueeOn,
            marqueeSpeed = _this$props3.marqueeSpeed,
            rest = _objectWithoutProperties(_this$props3, _excluded);

        var marqueeOnFocus = marqueeOn === 'focus';
        var marqueeOnHover = marqueeOn === 'hover';
        var marqueeOnRender = marqueeOn === 'render';

        if (marqueeOnFocus) {
          rest[focus] = this.handleFocus;
        } // TODO: cancel others on hover


        if (marqueeOnHover || marqueeOnFocus) {
          rest[enter] = this.handleEnter;
          rest[leave] = this.handleLeave;
        }

        if (marqueeOnRender) {
          rest[enter] = this.handleEnter;
        }

        delete rest.forceDirection;
        delete rest.locale;
        delete rest.marqueeCentered;
        delete rest.marqueeDelay;
        delete rest.marqueeDisabled;
        delete rest.marqueeOnRenderDelay;
        delete rest.marqueeSpacing;
        delete rest.marqueeResetDelay;
        delete rest.marqueeSpeed;
        delete rest.remeasure;
        delete rest.rtl;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, rest), {}, {
          onBlur: this.handleBlur,
          disabled: disabled,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(MarqueeComponent, {
            alignment: alignment,
            animating: this.state.animating,
            clientRef: this.cacheNode,
            css: css,
            distance: this.distance,
            onMarqueeComplete: this.handleMarqueeComplete,
            overflow: this.state.overflow,
            spacing: this.spacing,
            rtl: this.state.rtl,
            speed: marqueeSpeed,
            willAnimate: this.state.promoted,
            children: children
          })
        }));
      }
    }, {
      key: "renderWrapped",
      value: function renderWrapped() {
        var props = Object.assign({}, this.props);
        delete props.alignment;
        delete props.forceDirection;
        delete props.locale;
        delete props.marqueeCentered;
        delete props.marqueeDelay;
        delete props.marqueeDisabled;
        delete props.marqueeOn;
        delete props.marqueeOnRenderDelay;
        delete props.marqueeSpacing;
        delete props.marqueeResetDelay;
        delete props.marqueeSpeed;
        delete props.remeasure;
        delete props.rtl;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Resizable.ResizeContext.Consumer, {
          children: function children(register) {
            if (!_this4.resizeRegistry && register) {
              _this4.resizeRegistry = register(_this4.handleResize);
            }

            if (_this4.props.marqueeDisabled) {
              return _this4.renderWrapped();
            } else {
              return _this4.renderMarquee();
            }
          }
        });
      }
    }]);

    return _class;
  }(_react.PureComponent), _class.displayName = 'ui:MarqueeDecorator', _class.propTypes =
  /** @lends ui/Marquee.MarqueeDecorator.prototype */
  {
    /**
     * Text alignment value of the marquee. Valid values are `'left'`, `'right'` and `'center'`.
     *
     * @type {String}
     * @public
     */
    alignment: _propTypes["default"].oneOf(['left', 'right', 'center']),

    /**
     * Children to be marqueed
     *
     * @type {Node}
     * @public
     */
    children: _propTypes["default"].node,

    /**
     * Passed through to the wrapped component.
     *
     * Does not affect Marquee behavior except that components that are `marqueeOn="focus"`
     * will be treated as if they were `marqueeOn="hover"`, to allow disabled (and thus,
     * unfocusable) components to marquee.
     *
     * @type {Boolean}
     * @public
     */
    disabled: _propTypes["default"].bool,

    /**
     * Forces the `direction` of the marquee.
     *
     * Valid values are `'rtl'`, `'ltr'`, and `'locale'`. This includes non-text elements as well.
     * The default behavior, if this prop is unset, is to evaluate the text content for
     * directionality using {@link i18n/util.isRtlText}.
     *
     * If `'locale'`, the `direction` is determined by the locale, same as {@link ui/Marquee.MarqueeDecorator.rtl}.
     * In other words, it will not consider the text content for determining the direction.
     *
     * @type {String}
     * @public
     */
    forceDirection: _propTypes["default"].oneOf(['rtl', 'ltr', 'locale']),

    /**
     * The current locale as a
     * {@link https://tools.ietf.org/html/rfc5646|BCP 47 language tag}.
     *
     * @type {String}
     * @public
     */
    locale: _propTypes["default"].string,

    /**
     * Number of milliseconds to wait before starting marquee when `marqueeOn` is `'hover'` or
     * `'focus'` or before restarting any marquee.
     *
     * @type {Number}
     * @default 1000
     * @public
     */
    marqueeDelay: _propTypes["default"].number,

    /**
     * Disables all marquee behavior and removes supporting markup.
     *
     * @type {Boolean}
     */
    marqueeDisabled: _propTypes["default"].bool,

    /**
     * Determines what triggers the marquee to start its animation.
     *
     * @type {('focus'|'hover'|'render')}
     * @default 'focus'
     * @public
     */
    marqueeOn: _propTypes["default"].oneOf(['focus', 'hover', 'render']),

    /**
     * Number of milliseconds to wait before starting marquee the first time.
     *
     * Has no effect if `marqueeOn` is not `'render'`
     *
     * @type {Number}
     * @default 1000
     * @public
     */
    marqueeOnRenderDelay: _propTypes["default"].number,

    /**
     * Number of milliseconds to wait before resetting the marquee position after it
     * finishes.
     *
     * A minimum of 40 milliseconds is enforced.
     *
     * @type {Number}
     * @default 1000
     * @public
     */
    marqueeResetDelay: _propTypes["default"].number,

    /**
     * Amount of spacing between the instances of the content when animating.
     *
     * May either be a number indicating the number of pixels or a string indicating the
     * percentage relative to the width of the component.
     *
     * *Note:* When using a number, the value should be based on 1920x1080 display and
     * will be scaled automatically for the current resolution using {@link ui/resolution}.
     *
     * @type {String | Number}
     * @default '50%'
     * @public
     */
    marqueeSpacing: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

    /**
     * Rate of marquee measured in pixels/second.
     *
     * @type {Number}
     * @default 60
     * @public
     */
    marqueeSpeed: _propTypes["default"].number,

    /**
     * Used to signal for a remeasurement inside of marquee.
     *
     * The value must change for the remeasurement to take place. The value
     * type is `any` because it does not matter. It is only used to check for changes.
     *
     * @private
     */
    remeasure: _propTypes["default"].any,

    /**
     * Indicates the text directionality of the current locale is right-to-left
     *
     * @type {String}
     * @public
     */
    rtl: _propTypes["default"].bool
  }, _class.defaultProps = {
    marqueeDelay: 1000,
    marqueeOn: 'focus',
    marqueeOnRenderDelay: 1000,
    marqueeResetDelay: 1000,
    marqueeSpacing: '50%',
    marqueeSpeed: 60
  }, _class.contextType = _MarqueeController.MarqueeControllerContext, _class;
});
exports.MarqueeDecorator = MarqueeDecorator;
var _default = MarqueeDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Marquee/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@enact/ui/Marquee/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Marquee = void 0;
Object.defineProperty(exports, "MarqueeBase", ({
  enumerable: true,
  get: function get() {
    return _MarqueeBase["default"];
  }
}));
Object.defineProperty(exports, "MarqueeController", ({
  enumerable: true,
  get: function get() {
    return _MarqueeController.MarqueeController;
  }
}));
Object.defineProperty(exports, "MarqueeDecorator", ({
  enumerable: true,
  get: function get() {
    return _MarqueeDecorator["default"];
  }
}));
exports["default"] = void 0;

var _MarqueeBase = _interopRequireDefault(__webpack_require__(/*! ./MarqueeBase */ "./node_modules/@enact/ui/Marquee/MarqueeBase.js"));

var _MarqueeController = __webpack_require__(/*! ./MarqueeController */ "./node_modules/@enact/ui/Marquee/MarqueeController.js");

var _MarqueeDecorator = _interopRequireDefault(__webpack_require__(/*! ./MarqueeDecorator */ "./node_modules/@enact/ui/Marquee/MarqueeDecorator.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * A component that will marquee its overflowing contents.
 *
 * @module ui/Marquee
 * @exports Marquee
 * @exports MarqueeBase
 * @exports MarqueeController
 * @exports MarqueeDecorator
 */
// Marquee is unique in the framework in that its base component, Marquee, is used by its behavioral
// HOC, MarqueeDecorator. In other cases, the behavioral HOC would receive the base component as
// Wrapped but in this case is designed to receive a third-party component instead.
//
// This file avoids circular dependencies between Marquee.js (which would normally import its
// decorator) and MarqueeDecorator (which needs to import Marquee.js).

/**
 * A minimally-styled marquee component.
 *
 * @class Marquee
 * @extends ui/Marquee.MarqueeBase
 * @memberof ui/Marquee
 * @mixes ui/Marquee.MarqueeDecorator
 * @ui
 * @public
 */


var Marquee = (0, _MarqueeDecorator["default"])({
  component: _MarqueeBase["default"]
}, 'div');
exports.Marquee = Marquee;
var _default = Marquee;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Media/Media.js":
/*!***********************************************!*\
  !*** ./node_modules/@enact/ui/Media/Media.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.handledMediaEventsMap = exports.getKeyFromSource = exports["default"] = exports.Media = void 0;

var _dispatcher = __webpack_require__(/*! @enact/core/dispatcher */ "./node_modules/@enact/core/dispatcher/dispatcher.js");

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["customMediaEventsMap", "mediaComponent", "source"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/**
 * Generates a key representing the source node or nodes provided
 *
 * Example:
 * ```
 * getKeyFromSource('path/file.mp4'); // 'path/file.mp4'
 * getKeyFromSource(
 * 	<source src="path/file.mp4" type="video/mp4" />
 * ); // 'path/file.mp4'
 * getKeyFromSource([
 * 	<source src="path/file.mp4" type="video/mp4" />,
 * 	<source src="path/file.ogg" type="video/ogg" />,
 * ]); // 'path/file.mp4+path/file.ogg'
 * ```
 *
 * @function
 * @param   {String|Element|Element[]} source URI for a source, `<source>` node, or array of
 *                                     `<source>` nodes
 * @returns {String}                   Key representing sources
 * @memberof ui/Media
 * @public
 */


var getKeyFromSource = function getKeyFromSource() {
  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  if ( /*#__PURE__*/(0, _react.isValidElement)(source)) {
    return _react.Children.toArray(source).filter(function (s) {
      return !!s;
    }).map(function (s) {
      return s.props.src;
    }).join('+');
  }

  return String(source);
};
/**
 * Maps standard media event `type` values to React-style callback prop names
 *
 * See https://reactjs.org/docs/events.html#media-events
 *
 * ```
 * {
 *   abort           : 'onAbort',
 *   canplay         : 'onCanPlay',
 *   canplaythrough  : 'onCanPlayThrough',
 *   durationchange  : 'onDurationChange',
 *   emptied         : 'onEmptied',
 *   encrypted       : 'onEncrypted',
 *   ended           : 'onEnded',
 *   error           : 'onError',
 *   loadeddata      : 'onLoadedData',
 *   loadedmetadata  : 'onLoadedMetadata',
 *   loadstart       : 'onLoadStart',
 *   pause           : 'onPause',
 *   play            : 'onPlay',
 *   playing         : 'onPlaying',
 *   progress        : 'onProgress',
 *   ratechange      : 'onRateChange',
 *   seeked          : 'onSeeked',
 *   seeking         : 'onSeeking',
 *   stalled         : 'onStalled',
 *   suspend         : 'onSuspend',
 *   timeupdate      : 'onTimeUpdate',
 *   volumechange    : 'onVolumeChange',
 *   waiting         : 'onWaiting'
 * }
 * ```
 *
 * @typedef {Object} handledMediaEventsMap
 * @memberof ui/Media
 * @public
 */


exports.getKeyFromSource = getKeyFromSource;
var handledMediaEventsMap = {
  abort: 'onAbort',
  canplay: 'onCanPlay',
  canplaythrough: 'onCanPlayThrough',
  durationchange: 'onDurationChange',
  emptied: 'onEmptied',
  encrypted: 'onEncrypted',
  ended: 'onEnded',
  error: 'onError',
  loadeddata: 'onLoadedData',
  loadedmetadata: 'onLoadedMetadata',
  loadstart: 'onLoadStart',
  pause: 'onPause',
  play: 'onPlay',
  playing: 'onPlaying',
  progress: 'onProgress',
  ratechange: 'onRateChange',
  seeked: 'onSeeked',
  seeking: 'onSeeking',
  stalled: 'onStalled',
  suspend: 'onSuspend',
  timeupdate: 'onTimeUpdate',
  volumechange: 'onVolumeChange',
  waiting: 'onWaiting'
};
/**
 * A component representation of HTMLMediaElement.
 *
 * @class Media
 * @memberof ui/Media
 * @ui
 * @public
 */

exports.handledMediaEventsMap = handledMediaEventsMap;

var Media = /*#__PURE__*/function (_ReactComponent) {
  _inherits(Media, _ReactComponent);

  var _super = _createSuper(Media);

  function Media(props) {
    var _this;

    _classCallCheck(this, Media);

    _this = _super.call(this, props);

    _this.attachCustomMediaEvents = function () {
      for (var eventName in _this.handledCustomMediaForwards) {
        (0, _dispatcher.on)(eventName, _this.handledCustomMediaForwards[eventName], _this.media);
      }
    };

    _this.detachCustomMediaEvents = function () {
      for (var eventName in _this.handledCustomMediaForwards) {
        (0, _dispatcher.off)(eventName, _this.handledCustomMediaForwards[eventName], _this.media);
      }
    };

    _this.handleEvent = function (ev) {
      (0, _handle.forwardCustom)('onUpdate')(null, _this.props); // fetch the forward() we generated earlier, using the event type as a key to find the real event name.

      var fwd = _this.handledMediaForwards[handledMediaEventsMap[ev.type]];

      if (fwd) {
        fwd(ev, _this.props);
      }
    };

    _this.mediaRef = function (node) {
      _this.media = node;
    };

    _this.media = null;
    _this.handledMediaForwards = {};
    _this.handledMediaEvents = {};
    _this.handledCustomMediaForwards = {}; // Generate event handling forwarders and a smooth block to pass to <Video>

    for (var key in props.mediaEventsMap) {
      var eventName = props.mediaEventsMap[key];
      _this.handledMediaForwards[eventName] = (0, _handle.forward)(eventName);
      _this.handledMediaEvents[eventName] = _this.handleEvent;
    } // Generate event handling forwarders for the custom events too


    var _loop = function _loop(_eventName) {
      var propName = props.customMediaEventsMap[_eventName];
      var forwardEvent = (0, _handle.forward)(propName);

      _this.handledCustomMediaForwards[_eventName] = function (ev) {
        return forwardEvent(ev, _this.props);
      };
    };

    for (var _eventName in props.customMediaEventsMap) {
      _loop(_eventName);
    }

    return _this;
  }

  _createClass(Media, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.attachCustomMediaEvents();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_ref) {
      var prevSource = _ref.source;
      var source = this.props.source;

      if (getKeyFromSource(source) !== getKeyFromSource(prevSource)) {
        this.load();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.detachCustomMediaEvents();
    }
  }, {
    key: "play",
    value: function play() {
      return this.media.play();
    }
  }, {
    key: "pause",
    value: function pause() {
      this.media.pause();
    }
  }, {
    key: "load",
    value: function load() {
      this.media.load();
    }
  }, {
    key: "currentTime",
    get: function get() {
      return this.media.currentTime;
    },
    set: function set(currentTime) {
      this.media.currentTime = currentTime;
    }
  }, {
    key: "duration",
    get: function get() {
      return this.media.duration;
    }
  }, {
    key: "error",
    get: function get() {
      return this.media.networkState === this.media.NETWORK_NO_SOURCE;
    }
  }, {
    key: "loading",
    get: function get() {
      return this.media.readyState < this.media.HAVE_ENOUGH_DATA;
    }
  }, {
    key: "paused",
    get: function get() {
      return this.media.paused;
    }
  }, {
    key: "playbackRate",
    get: function get() {
      return this.media.playbackRate;
    },
    set: function set(playbackRate) {
      this.media.playbackRate = playbackRate;
    }
  }, {
    key: "proportionLoaded",
    get: function get() {
      return this.media.buffered.length && this.media.buffered.end(this.media.buffered.length - 1) / this.media.duration;
    }
  }, {
    key: "proportionPlayed",
    get: function get() {
      return this.media.currentTime / this.media.duration;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          customMediaEventsMap = _this$props.customMediaEventsMap,
          Component = _this$props.mediaComponent,
          source = _this$props.source,
          rest = _objectWithoutProperties(_this$props, _excluded);

      delete rest.mediaEventsMap;
      delete rest.onUpdate; // Remove the events we manually added so they aren't added twice or fail.

      for (var eventName in customMediaEventsMap) {
        delete rest[customMediaEventsMap[eventName]];
      }

      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, _objectSpread(_objectSpread(_objectSpread({}, rest), this.handledMediaEvents), {}, {
        ref: this.mediaRef,
        children: source
      }));
    }
  }]);

  return Media;
}(_react.Component);

exports.Media = Media;
Media.propTypes =
/** @lends ui/Media.Media.prototype */
{
  /**
   * A type of media component.
   *
   * @type {String|Component}
   * @required
   * @public
   */
  mediaComponent: _propTypes["default"].renderable.isRequired,

  /**
   * An event map object for custom media events.
   *
   * List custom events that aren't standard to React. These will be directly added to the media
   * element and props matching their name will be executed as callback functions when the event fires.
   *
   * Example:
   * ```
   * {'umsmediainfo': 'onUMSMediaInfo'} // `onUMSMediaInfo` prop function will execute when the `umsmediainfo` event happens
   * ```
   *
   * @type {Object}
   * @public
   */
  customMediaEventsMap: _propTypes2["default"].object,

  /**
   * A event map object for media events.
   *
   * @type {Object}
   * @default {@link ui/Media.handledMediaEventsMap}
   * @public
   */
  mediaEventsMap: _propTypes2["default"].object,

  /**
   * A function to be run when media updates.
   *
   * @type {Function}
   * @public
   */
  onUpdate: _propTypes2["default"].func,

  /**
   * Media sources passed as children to `mediaComponent`
   *
   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source
   *
   * @type {*}
   * @public
   */
  source: _propTypes2["default"].any
};
Media.defaultProps = {
  mediaEventsMap: handledMediaEventsMap
};
var _default = Media;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/ProgressBar/ProgressBar.js":
/*!***********************************************************!*\
  !*** ./node_modules/@enact/ui/ProgressBar/ProgressBar.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ProgressBarDecorator = exports.ProgressBarBase = exports.ProgressBar = void 0;

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _clamp = _interopRequireDefault(__webpack_require__(/*! ramda/src/clamp */ "./node_modules/ramda/src/clamp.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _validators = __webpack_require__(/*! ../internal/validators */ "./node_modules/@enact/ui/internal/validators/validators.js");

var _ForwardRef = _interopRequireDefault(__webpack_require__(/*! ../ForwardRef */ "./node_modules/@enact/ui/ForwardRef/ForwardRef.js"));

var _ProgressBarModule = _interopRequireDefault(__webpack_require__(/*! ./ProgressBar.module.css */ "./node_modules/@enact/ui/ProgressBar/ProgressBar.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["children", "componentRef", "css"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var progressToProportion = function progressToProportion(value) {
  return (0, _clamp["default"])(0, 1, value);
};

var calcBarStyle = function calcBarStyle(prop, anchor) {
  var _ref;

  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : anchor;
  var startProp = arguments.length > 3 ? arguments[3] : undefined;
  var endProp = arguments.length > 4 ? arguments[4] : undefined;
  var start = Math.min(anchor, value);
  var end = Math.max(anchor, value) - start;

  if (true) {
    (0, _validators.validateRange)(start, 0, 1, 'ProgressBar', prop, 'min', 'max');
    (0, _validators.validateRange)(end, 0, 1, 'ProgressBar', prop, 'min', 'max');
  }

  return _ref = {}, _defineProperty(_ref, startProp, progressToProportion(start)), _defineProperty(_ref, endProp, progressToProportion(end)), _ref;
};
/**
 * An unstyled progress bar component that can be customized by a theme or application.
 *
 * @class ProgressBarBase
 * @memberof ui/ProgressBar
 * @ui
 * @public
 */


var ProgressBarBase = (0, _kind["default"])({
  name: 'ui:ProgressBar',
  propTypes:
  /** @lends ui/ProgressBar.ProgressBarBase.prototype */
  {
    /**
     * The proportion of the loaded portion of the progress bar.
     *
     * * Valid values are between `0` and `1`.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    backgroundProgress: _propTypes2["default"].number,

    /**
     * The contents to be displayed with progress bar.
     *
     * @type {Node}
     * @public
     */
    children: _propTypes2["default"].node,

    /**
     * Called with a reference to the root component.
     *
     * When using {@link ui/ProgressBar.ProgressBar}, the `ref` prop is forwarded to this
     * component as `componentRef`.
     *
     * @type {Object|Function}
     * @public
     */
    componentRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `progressBar` - The root component class
     * * `bar`         - The background node (the empty part of the progressBar)
     * * `fill`        - The foreground of the progress bar (`progress`)
     * * `load`        - The `backgroundProgress` node
     * * `horizontal`  - Applied when `orientation` is `'horizontal'`
     * * `vertical`    - Applied when `orientation` is `'vertical'`
     * * `radial`      - Applied when `orientation` is `'radial'`
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Sets the orientation of the slider.
     *
     * Allowed values include:
     *
     * * `'horizontal'` - A left and right orientation
     * * `'vertical'` - An up and down orientation
     * * `'radial'` - A circular orientation
     *
     * @type {String}
     * @default 'horizontal'
     * @public
     */
    orientation: _propTypes2["default"].string,

    /**
     * The proportion of the filled portion of the progress bar.
     *
     * * Valid values are between `0` and `1`.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    progress: _propTypes2["default"].number,

    /**
     * Sets the point, as a proportion between 0 and 1, from which the progress bar is filled.
     *
     * Applies to both the progress bar's `value` and `backgroundProgress`. In both cases,
     * setting the value of `progressAnchor` will cause the progress bar to fill from that point
     * down, when `value` or `backgroundProgress` is proportionally less than the anchor, or up,
     * when `value` or `backgroundProgress` is proportionally greater than the anchor, rather
     * than always from the start of the progress bar.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    progressAnchor: _propTypes2["default"].number
  },
  defaultProps: {
    backgroundProgress: 0,
    orientation: 'horizontal',
    progress: 0,
    progressAnchor: 0
  },
  styles: {
    css: _ProgressBarModule["default"],
    className: 'progressBar',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref2) {
      var backgroundProgress = _ref2.backgroundProgress,
          orientation = _ref2.orientation,
          progress = _ref2.progress,
          styler = _ref2.styler;
      return styler.append(orientation, {
        fillOverHalf: progress > 0.5,
        loadOverHalf: backgroundProgress > 0.5
      });
    },
    style: function style(_ref3) {
      var backgroundProgress = _ref3.backgroundProgress,
          progress = _ref3.progress,
          progressAnchor = _ref3.progressAnchor,
          _style = _ref3.style;
      return _objectSpread(_objectSpread(_objectSpread({}, _style), {}, {
        '--ui-progressbar-proportion-anchor': progressAnchor
      }, calcBarStyle('backgroundProgress', progressAnchor, backgroundProgress, '--ui-progressbar-proportion-start-background', '--ui-progressbar-proportion-end-background')), calcBarStyle('progress', progressAnchor, progress, '--ui-progressbar-proportion-start', '--ui-progressbar-proportion-end'));
    }
  },
  render: function render(_ref4) {
    var children = _ref4.children,
        componentRef = _ref4.componentRef,
        css = _ref4.css,
        rest = _objectWithoutProperties(_ref4, _excluded);

    delete rest.backgroundProgress;
    delete rest.orientation;
    delete rest.progress;
    delete rest.progressAnchor;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({
      role: "progressbar"
    }, rest), {}, {
      ref: componentRef,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: css.bar,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: css.load
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: css.fill
        })]
      }), children]
    }));
  }
});
/**
 * A higher-order component that adds behavior to
 * [ProgressBar]{@link ui/ProgressBar.ProgressBarBase}.
 *
 * @hoc
 * @memberof ui/ProgressBar
 * @mixes ui/ForwardRef.ForwardRef
 * @public
 */

exports.ProgressBarBase = ProgressBarBase;
var ProgressBarDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'componentRef'
}));
/**
 * An unstyled progress bar component that can be customized by a theme or application.
 *
 * @class ProgressBar
 * @memberof ui/ProgressBar
 * @extends ui/ProgressBar.ProgressBarBase
 * @mixes ui/ProgressBar.ProgressBarDecorator
 * @omit componentRef
 * @ui
 * @public
 */

exports.ProgressBarDecorator = ProgressBarDecorator;
var ProgressBar = ProgressBarDecorator(ProgressBarBase);
exports.ProgressBar = ProgressBar;
var _default = ProgressBar;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Resizable/Resizable.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/ui/Resizable/Resizable.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ResizeContext = exports.Resizable = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _invariant = _interopRequireDefault(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/**
 * Used internally for things to notify children that they need to resize because of a parent
 * update.
 *
 * @type Object
 * @private
 */


var ResizeContext = /*#__PURE__*/(0, _react.createContext)();
/**
 * Default config for `Resizable`.
 *
 * @memberof ui/Resizable.Resizable
 * @hocconfig
 */

exports.ResizeContext = ResizeContext;
var defaultConfig = {
  /**
   * A handler to process the `resize` event.
   *
   * It should return a truthy value if the event should trigger a resize.
   *
   * @type {Function}
   * @default null
   * @see {@link core/handle}
   * @memberof ui/Resizable.Resizable.defaultConfig
   */
  filter: null,

  /**
   * The name of the event on the wrapped component to listen to for size changes.
   *
   * This event name will be passed to the wrapped component and will also be forwarded (if
   * needed) to the parent component.
   *
   * @type {String}
   * @required
   * @memberof ui/Resizable.Resizable.defaultConfig
   */
  resize: null
};
/**
 * A higher-order component that notifies a container that the wrapped component has been resized.
 *
 * It may be useful in cases where a component may need to update itself as a result of its children
 * changing in size, such as a [Scroller]{@link ui/Scroller}.
 *
 * Containers must provide an `invalidateBounds` method via React's context in order for `Resizable`
 * instances to notify it of resize.
 *
 * The wrapped component must respond to the configured
 * [resize]{@link ui/Resizable.Resizable.defaultConfig.resize} event.
 *
 * @class Resizable
 * @memberof ui/Resizable
 * @hoc
 * @public
 */

var Resizable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var filter = config.filter,
      resize = config.resize;
  !resize ?  true ? (0, _invariant["default"])(false, "resize is required by Resizable but was omitted when applied to ".concat(Wrapped.displayName)) : 0 : void 0;
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class() {
      var _this;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.handleResize = (0, _handle.handle)((0, _handle.forward)(resize), // optionally filter the event before notifying the container
      filter, (0, _handle.call)('invalidateBounds')).bind(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.context && typeof this.context === 'function') {
          // Registry requires a callback but (for now at least) Resizable doesn't respond to
          // upstream events so we're initializing a no-op function to "handle" callbacks
          this.resizeRegistry = this.context(function () {});
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.resizeRegistry) {
          this.resizeRegistry.unregister();
        }
      }
      /*
       * Notifies a container that a resize is necessary
       *
       * @returns {undefined}
       * @private
       */

    }, {
      key: "invalidateBounds",
      value: function invalidateBounds() {
        if (this.resizeRegistry) {
          this.resizeRegistry.notify({
            action: 'invalidateBounds'
          });
        }
      }
      /*
       * Handles the event that indicates a resize is necessary
       *
       * @param   {Object}    ev  Event payload
       *
       * @returns {undefined}
       * @private
       */

    }, {
      key: "render",
      value: function render() {
        var props = Object.assign({}, this.props);
        props[resize] = this.handleResize;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'Resizable', _class.contextType = ResizeContext, _class;
});
exports.Resizable = Resizable;
var _default = Resizable;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Skinnable/Skinnable.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/ui/Skinnable/Skinnable.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Skinnable = void 0;
Object.defineProperty(exports, "useSkins", ({
  enumerable: true,
  get: function get() {
    return _useSkins["default"];
  }
}));

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "./node_modules/classnames/index.js"));

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _useSkins = _interopRequireDefault(__webpack_require__(/*! ./useSkins */ "./node_modules/@enact/ui/Skinnable/useSkins.js"));

var _util = __webpack_require__(/*! ./util */ "./node_modules/@enact/ui/Skinnable/util.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["className", "skin", "skinVariants"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * Default config for `Skinnable`.
 *
 * @memberof ui/Skinnable.Skinnable
 * @hocconfig
 * @public
 */


var defaultConfig = {
  /**
   * The prop in which to pass the skinVariants value to the wrapped component. The recommended
   * value is "skinVariants".
   *
   * If left unset, the skinVariant will not be passed to the wrapped component.
   *
   * @type {String}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  variantsProp: null,

  /**
   * The prop in which to pass the effective skin to the wrapped component.
   *
   * If left unset, the current skin will not be passed to the wrapped component.
   *
   * @type {String}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  prop: null,

  /**
   * A hash mapping the available skin names to their CSS class name.
   *
   * The keys are accepted as the only valid values for the `skin` prop on the wrapped component.
   *
   * @type {Object}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  skins: null,

  /**
   * Assign a default skin from the `skins` list.
   *
   * This will be used if the instantiator of the wrapped component provides no value to the
   * `skin` prop.
   *
   * @type {String}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  defaultSkin: null,

  /**
   * Initial collection of applied variants
   *
   * This will be used if the instantiator of the wrapped component provides no value to the
   * `skinVariants` prop.
   *
   * @type {String|String[]}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  defaultVariants: null,

  /**
   * A complete list of all supported variants.
   *
   * These will translate to CSS class names so should not conflict with any skin names.
   * CamelCase is recommended for the values.
   *
   * @type {String[]}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  allowedVariants: null
};
/**
 * A higher-order component that assigns skinning classes for the purposes of styling children components.
 *
 * Use the config options to specify the skins your theme has. Set this up in your theme's decorator
 * component to establish your supported skins.
 *
 * Note: This HoC passes `className` to the wrapped component. It must be passed to the main DOM
 * node. Additionally, it can be configured to pass the skin and skin variant as props.
 *
 * Example:
 * ```
 * const MyApp = ({skinName, ...rest) => (<div {...props}>{skinName}</div>);
 * ...
 * App = Skinnable({
 * 	prop: 'skinName',
 * 	skins: {
 * 		dark: 'moonstone',
 * 		light: 'moonstone-light'
 * 	},
 * 	defaultTheme: 'dark'
 * 	defaultVariants: ['highContrast'],
 * 	allowedVariants: ['highContrast', 'largeText', 'grayscale']
 * }, MyApp);
 * ```
 *
 * @class Skinnable
 * @memberof ui/Skinnable
 * @hoc
 * @public
 */

var Skinnable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var prop = config.prop,
      skins = config.skins,
      defaultSkin = config.defaultSkin,
      variants = config.allowedVariants,
      variantsProp = config.variantsProp;
  var defaultVariants = (0, _util.objectify)(config.defaultVariants); // eslint-disable-next-line no-shadow

  function Skinnable(_ref) {
    var className = _ref.className,
        skin = _ref.skin,
        skinVariants = _ref.skinVariants,
        rest = _objectWithoutProperties(_ref, _excluded);

    var hook = (0, _useSkins["default"])({
      defaultSkin: defaultSkin,
      defaultVariants: defaultVariants,
      skin: skin,
      skins: skins,
      skinVariants: skinVariants,
      variants: variants
    });
    var allClassNames = (0, _classnames["default"])(hook.className, className);

    if (allClassNames) {
      rest.className = allClassNames;
    }

    if (prop) {
      rest[prop] = hook.skin;
    }

    if (variantsProp) {
      rest[variantsProp] = hook.variants;
    }

    return hook.provideSkins( /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, rest)));
  }

  Skinnable.propTypes =
  /** @lends ui/Skinnable.Skinnable.prototype */
  {
    /**
     * The name of the skin a component should use to render itself. Available skins are
     * defined in the "defaultConfig" for this HOC.
     *
     * @type {String}
     * @public
     */
    skin: _propTypes["default"].string,

    /**
     * The variant(s) on a skin that a component should use when rendering. These will
     * typically alter the appearance of a skin's existing definition in a way that does not
     * override that skin's general styling.
     *
     * Multiple data types are supported by this prop, which afford different conveniences
     * and abilities. String and Array are effectively the same, supporting just additions
     * to the variants being applied to a component, and are much more convenient. Objects
     * may also be used, and have the ability to disable variants being passed by their
     * ancestors. Objects take the format of a basic hash, with variants as key names and
     * true/false Booleans as values, depicting their state. If a variant is excluded from
     * any version of data type used to set this prop, that variant will ignored, falling
     * back to the defaultVariant or parent variant, in that order.
     *
     * skinVariants examples:
     * ```
     *  // String
     *  skinVariants="highContrast"
     *
     *  // Array
     *  skinVariants={['highContrast']}
     *
     *  // Object
     *  skinVariants={{
     *  	highContrast: true,
     *  	grayscale: false
     *  }}
     * ```
     *
     * @type {String|String[]|Object}
     * @public
     */
    skinVariants: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array, _propTypes["default"].object])
  };
  return Skinnable;
});
exports.Skinnable = Skinnable;
var _default = Skinnable;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Skinnable/useSkins.js":
/*!******************************************************!*\
  !*** ./node_modules/@enact/ui/Skinnable/useSkins.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.useSkins = useSkins;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _util = __webpack_require__(/*! ./util */ "./node_modules/@enact/ui/Skinnable/util.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/**
 * Allows a component to respond to skin changes via the Context API
 *
 * Example:
 * ```
 * <App skin="dark">
 * 	<Section>
 * 		<Button>Gray Button</Button>
 * 	<Section>
 * 	<Popup skin="light">
 * 		<Button>White Button</Button>
 * 	</Popup>
 * </App>
 * ```
 *
 * @class SkinContext
 * @memberof ui/Skinnable
 * @private
 */


var SkinContext = /*#__PURE__*/(0, _react.createContext)(null);
/**
 * Configuration for `useSkins`
 *
 * @typedef {Object} useSkinsConfig
 * @memberof ui/Skinnable
 * @property {String}   defaultSkin       Default skin name when none has been specified or inherited.
 * @property {String[]} [defaultVariants] Default variants when none have been specified or inherited.
 * @property {String}   [skin]            Specific skin to apply to this instance which will take precedence over the default or the inherited value.
 * @property {String[]} skins             List of allowed skins
 * @property {String[]} [skinVariants]    Specific variants to apply to this instance which will take precedence over the default or the inherited value.
 * @property {String[]} [variants]        List of allowed variants
 * @private
 */

/**
 * Object returned by `useSkins`
 *
 * @typedef {Object} useSkinsInterface
 * @memberof ui/Skinnable
 * @property {String}   className    CSS classes for the effective skin and variants.
 * @property {String}   skin         Effective skin based on the allowed skins, the configured.
 *                                   `skin`, the default skin, and the inherited `skin` from up the
 *                                   component tree.
 * @property {String[]} variants     Effective skins variant based on the allowed variants, the
 *                                   configured variants, the default variants, and the inherited
 *                                   variants from up the component tree.
 * @property {Function} provideSkins Wraps a component tree with a skin provider to allow that tree
 *                                   to inherit the effective skin configured at this level.
 * @private
 */

/**
 * Determines the effective skin and skin variants for a component and provides a method to provide
 * those values to other contained components in this subtree.
 *
 * ```
 * function ComponentDecorator (props) {
 *   const skins = useSkins({
 *     defaultSkin: 'neutral',
 *     defaultVariants: [],
 *     skins: ['neutral', 'bold'],
 *     variants: ['highContrast'],
 *     skin: props.skin,
 *     skinVariants: props.skinVariants
 *   });
 *
 *   return skins.provideSkins(
 *     <Component className={classnames(props.className, skins.className)} />
 *   );
 * }
 * ```
 *
 * @param {useSkinsConfig} config Configuration options
 * @returns {useSkinsInterface}
 * @private
 */

function useSkins(config) {
  var defaultSkin = config.defaultSkin,
      defaultVariants = config.defaultVariants,
      skin = config.skin,
      skins = config.skins,
      skinVariants = config.skinVariants,
      variants = config.variants;

  var _ref = (0, _react.useContext)(SkinContext) || {},
      parentSkin = _ref.parentSkin,
      parentVariants = _ref.parentVariants;

  var effectiveSkin = (0, _util.determineSkin)(defaultSkin, skin, parentSkin);
  var effectiveVariants = (0, _react.useMemo)(function () {
    return (0, _util.determineVariants)(defaultVariants, variants, skinVariants, parentVariants);
  }, [defaultVariants, variants, skinVariants, parentVariants]);
  var className = (0, _util.getClassName)(skins, effectiveSkin, effectiveVariants);
  var value = (0, _react.useMemo)(function () {
    return {
      parentSkin: effectiveSkin,
      parentVariants: effectiveVariants
    };
  }, [effectiveSkin, effectiveVariants]);
  var provideSkins = (0, _react.useCallback)(function (children) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinContext.Provider, {
      value: value,
      children: children
    });
  }, [value]);
  return {
    className: className,
    skin: effectiveSkin,
    variants: effectiveVariants,
    provideSkins: provideSkins
  };
}

var _default = useSkins;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Skinnable/util.js":
/*!**************************************************!*\
  !*** ./node_modules/@enact/ui/Skinnable/util.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.determineSkin = determineSkin;
exports.determineVariants = determineVariants;
exports.getClassName = getClassName;
exports.preferDefined = exports.objectify = void 0;

var _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ "./node_modules/classnames/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var objectify = function objectify(arg) {
  // undefined, null, empty string case
  // bail early
  if (!arg) return {};

  if (typeof arg === 'string') {
    // String case, convert to array for processing
    arg = arg.split(' ');
  }

  if (arg instanceof Array) {
    // Convert array values into object properties
    return arg.reduce(function (obj, a) {
      obj[a] = true;
      return obj;
    }, {});
  } else if (typeof arg === 'object') {
    // Can just return objects as-is
    return arg;
  } else {
    // Invalid, return an empty object
    return {};
  }
};

exports.objectify = objectify;

var preferDefined = function preferDefined(a, b) {
  return a != null ? a : b;
};
/**
 * Determines the effective skin
 *
 * @param {String} defaultSkin The local default for this instance of useSkins
 * @param {String} authorSkin  The author-provided skin value
 * @param {String} parentSkin  The inherited skin value from an upstream useSkins
 * @private
 */


exports.preferDefined = preferDefined;

function determineSkin(defaultSkin, authorSkin, parentSkin) {
  return authorSkin || defaultSkin || parentSkin;
}
/**
 * Determines the effective skin variant
 *
 * @param {String|String[]} defaultVariants The local default variants for this instance
 * @param {String|String[]} allowedVariants The allowed variants for this instance
 * @param {String|String[]} authorVariants  The author-provided variants
 * @param {String|String[]} parentVariants  The inherited variants from an upstream useSkins
 * @private
 */


function determineVariants(defaultVariants, allowedVariants, authorVariants, parentVariants) {
  if (!allowedVariants || !(allowedVariants instanceof Array)) {
    // There are no allowed variants, so just return an empty object, indicating that there are no viable determined variants.
    return {};
  }

  defaultVariants = objectify(defaultVariants);
  authorVariants = objectify(authorVariants);
  parentVariants = objectify(parentVariants); // Merge all of the variants objects, preferring values in objects from left to right.

  var mergedObj = [defaultVariants, parentVariants, authorVariants].reduce(function (obj, a) {
    if (a) {
      Object.keys(a).forEach(function (key) {
        obj[key] = preferDefined(a[key], obj[key]);
      });
    }

    return obj;
  }, {}); // Clean up the merged object

  for (var key in mergedObj) {
    // Delete keys that are null or undefined and delete keys that aren't allowed
    if (mergedObj[key] == null || !allowedVariants.includes(key)) {
      delete mergedObj[key];
    }
  }

  return mergedObj;
}

function getClassName(skins, effectiveSkin, variants) {
  var skin = skins && skins[effectiveSkin]; // only apply the skin class if it's set and different from the "current" skin as
  // defined by the value in context

  return (0, _classnames["default"])(skin, variants);
}

/***/ }),

/***/ "./node_modules/@enact/ui/Slider/Knob.js":
/*!***********************************************!*\
  !*** ./node_modules/@enact/ui/Slider/Knob.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Knob = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _ComponentOverride = _interopRequireDefault(__webpack_require__(/*! ../ComponentOverride */ "./node_modules/@enact/ui/ComponentOverride/ComponentOverride.js"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["orientation", "proportion", "tooltipComponent", "value"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * An unstyled, knob component to be used with a `Slider`.
 *
 * @class Knob
 * @memberof ui/Slider
 * @ui
 * @public
 */


var Knob = (0, _kind["default"])({
  name: 'Knob',
  propTypes:
  /** @lends ui/Slider.Knob.prototype */
  {
    /**
     * The orientation of the slider, either `"horizontal"` or `"vertical"`.
     *
     * @type {String}
     * @default "horizontal"
     * @public
     */
    orientation: _propTypes2["default"].oneOf(['horizontal', 'vertical']),

    /**
     * A number between 0 and 1 representing the proportion of the `value` in terms of `min`
     * and `max` props of the slider.
     *
     * @type {Boolean}
     * @public
     */
    proportion: _propTypes2["default"].number,

    /**
     * Adds a tooltip to the knob using the provided component.
     *
     * The following props are forwarded to the tooltip:
     *
     * * `children` - The `value` prop from the slider
     * * `orientation` - The value of the `orientation` prop from the slider
     * * `proportion` - The value of the `proportion` prop from the knob
     *
     * This prop accepts either a Component (e.g. `MyTooltip`} which will be instantiated with
     * the above props or a component instance (e.g. `<MyTooltip customProp="value" />`) which
     * will have its props merged with the above props.
     *
     * @see {@link ui/ComponentOverride}
     *
     * @type {Function|Element}
     * @public
     */
    tooltipComponent: _propTypes["default"].componentOverride,

    /**
     * The value of the slider.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    value: _propTypes2["default"].number
  },
  render: function render(_ref) {
    var orientation = _ref.orientation,
        proportion = _ref.proportion,
        tooltipComponent = _ref.tooltipComponent,
        value = _ref.value,
        rest = _objectWithoutProperties(_ref, _excluded);

    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComponentOverride["default"], {
        component: tooltipComponent,
        orientation: orientation,
        proportion: proportion,
        children: value
      })
    }));
  }
});
exports.Knob = Knob;
var _default = Knob;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Slider/PositionDecorator.js":
/*!************************************************************!*\
  !*** ./node_modules/@enact/ui/Slider/PositionDecorator.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.PositionDecorator = void 0;

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _validators = __webpack_require__(/*! ../internal/validators */ "./node_modules/@enact/ui/internal/validators/validators.js");

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@enact/ui/Slider/utils.js");

var _SliderModule = _interopRequireDefault(__webpack_require__(/*! ./Slider.module.css */ "./node_modules/@enact/ui/Slider/Slider.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var validateRange = (0, _validators.validateRangeOnce)(function (props) {
  return props;
}, {
  'component': 'PositionDecorator'
});
var validateStepValue = (0, _validators.validateSteppedOnce)(function (props) {
  return props;
}, {
  'component': 'PositionDecorator'
});
var validateStepMax = (0, _validators.validateSteppedOnce)(function (props) {
  return props;
}, {
  'component': 'PositionDecorator',
  valueName: 'max'
});
var PositionDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class;

  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);
      _this.handleDown = _this.handleDown.bind(_assertThisInitialized(_this));
      _this.handleDrag = _this.handleDrag.bind(_assertThisInitialized(_this));
      _this.handleDragStart = _this.handleDragStart.bind(_assertThisInitialized(_this));
      _this.bounds = {};
      _this.dragConfig = {
        global: true
      };
      return _this;
    }

    _createClass(_class, [{
      key: "emitChangeForPosition",
      value: function emitChangeForPosition(x, y) {
        var _this$props = this.props,
            max = _this$props.max,
            min = _this$props.min,
            orientation = _this$props.orientation,
            step = _this$props.step;
        var position = x;
        var offset = this.bounds.offsetX;

        if (orientation === 'vertical') {
          position = y;
          offset = this.bounds.offsetY;
        }

        var proportion = (0, _utils.calcProportion)(this.bounds.min, this.bounds.max, position - offset);

        if (orientation === 'vertical') {
          proportion = 1 - proportion;
        }

        var value = (max - min) * proportion + min; // adjust value for stepping

        if (step) {
          var delta = (value - min) % step;

          if (delta < step / 2) {
            value -= delta;
          } else {
            value += step - delta;
          } // recalculate the proportion based on the stepped value


          proportion = (0, _utils.calcProportion)(min, max, value);
        }

        if (value !== this.props.value) {
          (0, _handle.forward)('onChange', {
            type: 'onChange',
            value: value,
            proportion: proportion
          }, this.props);
        }
      }
    }, {
      key: "updateBounds",
      value: function updateBounds(node) {
        var orientation = this.props.orientation;
        var bounds = node.getBoundingClientRect();
        var computedStyle = window.getComputedStyle(node);

        if (orientation === 'horizontal') {
          this.bounds.min = bounds.left + parseInt(computedStyle.paddingLeft);
          this.bounds.max = bounds.right - parseInt(computedStyle.paddingRight);
        } else {
          this.bounds.min = bounds.top + parseInt(computedStyle.paddingTop);
          this.bounds.max = bounds.bottom - parseInt(computedStyle.paddingBottom);
        }
      }
    }, {
      key: "updateOffset",
      value: function updateOffset(clientX, clientY, target) {
        this.bounds.offsetX = 0;
        this.bounds.offsetY = 0;
        var knob = target.closest(".".concat(_SliderModule["default"].knob));

        if (knob) {
          var rect = knob.getBoundingClientRect();
          var centerX = rect.left + rect.width / 2;
          var centerY = rect.top + rect.height / 2;
          this.bounds.offsetX = clientX - centerX;
          this.bounds.offsetY = clientY - centerY;
        }
      }
    }, {
      key: "handleDown",
      value: function handleDown(_ref) {
        var clientX = _ref.clientX,
            clientY = _ref.clientY,
            currentTarget = _ref.currentTarget,
            target = _ref.target; // bail early for emulated mousedown events from key presses

        if (typeof clientX === 'undefined' || typeof clientY === 'undefined') return;
        this.updateBounds(currentTarget);
        this.updateOffset(clientX, clientY, target);
        this.emitChangeForPosition(clientX, clientY);
      }
    }, {
      key: "handleDragStart",
      value: function handleDragStart(ev) {
        (0, _handle.forward)('onDragStart', ev, this.props);
        this.emitChangeForPosition(ev.x, ev.y);
      }
    }, {
      key: "handleDrag",
      value: function handleDrag(ev) {
        (0, _handle.forward)('onDrag', ev, this.props);
        this.emitChangeForPosition(ev.x, ev.y);
      }
    }, {
      key: "render",
      value: function render() {
        if (true) {
          var _this$props2 = this.props,
              min = _this$props2.min,
              _this$props2$value = _this$props2.value,
              value = _this$props2$value === void 0 ? min : _this$props2$value,
              max = _this$props2.max,
              step = _this$props2.step;
          var props = {
            min: min,
            value: value || min,
            max: max,
            step: step
          };
          validateRange(props);
          validateStepValue(props);
          validateStepMax(props);
        }

        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, this.props), {}, {
          dragConfig: this.dragConfig,
          onDown: this.handleDown,
          onDragStart: this.handleDragStart,
          onDrag: this.handleDrag
        }));
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'PositionDecorator', _class.propTypes = {
    disabled: _propTypes["default"].bool,
    max: _propTypes["default"].number,
    min: _propTypes["default"].number,
    onChange: _propTypes["default"].func,
    orientation: _propTypes["default"].string,
    step: _propTypes["default"].number,
    value: _propTypes["default"].number
  }, _class.defaultProps = {
    disabled: false,
    max: 100,
    min: 0,
    orientation: 'horizontal',
    step: 1
  }, _class;
});
exports.PositionDecorator = PositionDecorator;
var _default = PositionDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Slider/Slider.js":
/*!*************************************************!*\
  !*** ./node_modules/@enact/ui/Slider/Slider.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "Knob", ({
  enumerable: true,
  get: function get() {
    return _Knob["default"];
  }
}));
exports["default"] = exports.SliderDecorator = exports.SliderBase = exports.Slider = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _compose = _interopRequireDefault(__webpack_require__(/*! ramda/src/compose */ "./node_modules/ramda/src/compose.js"));

var _Changeable = _interopRequireDefault(__webpack_require__(/*! ../Changeable */ "./node_modules/@enact/ui/Changeable/Changeable.js"));

var _ComponentOverride = _interopRequireDefault(__webpack_require__(/*! ../ComponentOverride */ "./node_modules/@enact/ui/ComponentOverride/ComponentOverride.js"));

var _ForwardRef = _interopRequireDefault(__webpack_require__(/*! ../ForwardRef */ "./node_modules/@enact/ui/ForwardRef/ForwardRef.js"));

var _Touchable = _interopRequireDefault(__webpack_require__(/*! ../Touchable */ "./node_modules/@enact/ui/Touchable/Touchable.js"));

var _Knob = _interopRequireDefault(__webpack_require__(/*! ./Knob */ "./node_modules/@enact/ui/Slider/Knob.js"));

var _PositionDecorator = _interopRequireDefault(__webpack_require__(/*! ./PositionDecorator */ "./node_modules/@enact/ui/Slider/PositionDecorator.js"));

var _SliderModule = _interopRequireDefault(__webpack_require__(/*! ./Slider.module.css */ "./node_modules/@enact/ui/Slider/Slider.module.css"));

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@enact/ui/Slider/utils.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["backgroundProgress", "componentRef", "css", "disabled", "knobComponent", "min", "orientation", "percent", "progressBarComponent", "progressAnchor", "tooltipComponent", "value"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * An unstyled, sliding range-selection component.
 *
 * @class SliderBase
 * @memberof ui/Slider
 * @ui
 * @public
 */


var SliderBase = (0, _kind["default"])({
  name: 'ui:Slider',
  propTypes:
  /** @lends ui/Slider.SliderBase.prototype */
  {
    /**
     * The component used to render the progress bar within the slider.
     *
     * The provided component will receive the following props from `Slider`
     *
     * * backgroundProgress - The value of `backgroundProgress`
     * * orientation        - The value of `orientation`
     * * progress           - The `value` as a proportion between `min` and `max`
     * * progressAnchor     - The value of `progressAnchor`
     *
     * This prop accepts either a Component (e.g. `MyProgress`} which will be instantiated with
     * the above props or a component instance (e.g. `<MyProgress customProp="value" />`) which
     * will have its props merged with the above props.
     *
     * @type {Component|Element}
     * @required
     * @public
     */
    progressBarComponent: _propTypes["default"].componentOverride.isRequired,

    /**
     * Background progress, as a proportion between `0` and `1`.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    backgroundProgress: _propTypes2["default"].number,

    /**
     * Called with a reference to the root component.
     *
     * When using {@link ui/Slider.Slider}, the `ref` prop is forwarded to this component
     * as `componentRef`.
     *
     * @type {Object|Function}
     * @public
     */
    componentRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `slider`     - The root component class
     * * `knob`       - The knob node
     * * `horizontal` - Applied when `orientation` prop is `"horizontal"``
     * * `pressed`    - Applied when `pressed` prop is `true`
     * * `noFill`     - Applied when `noFill` prop is `true`
     * * `vertical`   - Applied when `orientation` prop is `"vertical"`
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Disables component and does not generate events.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes2["default"].bool,

    /**
     * Defines a custom knob component for the slider.
     *
     * By default, Slider will use its own implementation, {@link ui/Slider.Knob}.
     *
     * The following props are forwarded to the knob:
     *
     * * `className`        - A `knob` class applied by the slider
     * * `disabled`         - The value of `disabled`
     * * `orientation`      - The value of `orientation`
     * * `proportion`       - The `value` as a proportion between `min` and `max`
     * * `tooltipComponent` - The value of `tooltipComponent`
     * * `value`            - The value of `value`
     *
     * This prop accepts either a Component (e.g. `MyKnob`} which will be instantiated with
     * the above props or a component instance (e.g. `<MyKnob customProp="value" />`) which
     * will have its props merged with the above props.
     *
     * @see {@link ui/ComponentOverride}
     *
     * @type {Component|Element}
     * @default {@link ui/Slider.Knob}
     * @public
     */
    knobComponent: _propTypes["default"].componentOverride,

    /**
     * The maximum value of the slider.
     *
     * The range between `min` and `max` should be evenly divisible by
     * [step]{@link ui/Slider.SliderBase.step}.
     *
     * @type {Number}
     * @default 100
     * @public
     */
    max: _propTypes2["default"].number,

    /**
     * The minimum value of the slider.
     *
     * The range between `min` and `max` should be evenly divisible by
     * [step]{@link ui/Slider.SliderBase.step}.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    min: _propTypes2["default"].number,

    /**
     * Applies the style where the slider bar does not display filled.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    noFill: _propTypes2["default"].bool,

    /**
     * The orientation of the slider.
     *
     * Allowed values include:
     * * `'horizontal'` - A left and right orientation
     * * `'vertical'` - An up and down orientation
     *
     * @type {String}
     * @default "horizontal"
     * @public
     */
    orientation: _propTypes2["default"].string,

    /**
     * Applies a pressed visual effect.
     *
     * @type {Boolean}
     * @public
     */
    pressed: _propTypes2["default"].bool,

    /**
     * Sets the point, as a proportion between 0 and 1, from which the slider is filled.
     *
     * Applies to both the slider's `value` and `backgroundProgress`. In both cases,
     * setting the value of `progressAnchor` will cause the slider to fill from that point
     * down, when `value` or `backgroundProgress` is proportionally less than the anchor, or up,
     * when `value` or `backgroundProgress` is proportionally greater than the anchor, rather
     * than always from the start of the slider.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    progressAnchor: _propTypes2["default"].number,

    /**
     * The amount to increment or decrement the value.
     *
     * It must evenly divide into the range designated by `min` and `max`.
     *
     * @type {Number}
     * @default 1
     * @public
     */
    step: _propTypes2["default"].number,

    /**
     * Adds a tooltip to the slider using the provided component.
     *
     * The following props are forwarded to the tooltip:
     *
     * * `children`    - The `value` prop from the slider
     * * `orientation` - The value of the `orientation` prop from the slider
     * * `proportion`  - The `value` as a proportion between `min` and `max`
     *
     * This prop accepts either a Component (e.g. `MyTooltip`} which will be instantiated with
     * the above props or a component instance (e.g. `<MyTooltip customProp="value" />`) which
     * will have its props merged with the above props.
     *
     * @see {@link ui/ComponentOverride}
     *
     * @type {Component|Element}
     * @public
     */
    tooltipComponent: _propTypes["default"].componentOverride,

    /**
     * The value of the slider.
     *
     * Defaults to the value of `min`.
     *
     * @type {Number}
     * @public
     */
    value: _propTypes2["default"].number
  },
  defaultProps: {
    disabled: false,
    knobComponent: _Knob["default"],
    min: 0,
    max: 100,
    noFill: false,
    orientation: 'horizontal',
    progressAnchor: 0,
    step: 1
  },
  styles: {
    css: _SliderModule["default"],
    className: 'slider',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref) {
      var noFill = _ref.noFill,
          orientation = _ref.orientation,
          pressed = _ref.pressed,
          styler = _ref.styler;
      return styler.append(orientation, {
        noFill: noFill,
        pressed: pressed
      });
    },
    percent: function percent(_ref2) {
      var max = _ref2.max,
          min = _ref2.min,
          _ref2$value = _ref2.value,
          value = _ref2$value === void 0 ? min : _ref2$value;
      return (0, _utils.calcProportion)(min, max, value);
    },
    style: function style(_ref3) {
      var max = _ref3.max,
          min = _ref3.min,
          _style = _ref3.style,
          _ref3$value = _ref3.value,
          value = _ref3$value === void 0 ? min : _ref3$value;
      var proportion = (0, _utils.calcProportion)(min, max, value);
      return _objectSpread(_objectSpread({}, _style), {}, {
        '--ui-slider-proportion-end-knob': proportion
      });
    }
  },
  render: function render(_ref4) {
    var backgroundProgress = _ref4.backgroundProgress,
        componentRef = _ref4.componentRef,
        css = _ref4.css,
        disabled = _ref4.disabled,
        knobComponent = _ref4.knobComponent,
        min = _ref4.min,
        orientation = _ref4.orientation,
        percent = _ref4.percent,
        progressBarComponent = _ref4.progressBarComponent,
        progressAnchor = _ref4.progressAnchor,
        tooltipComponent = _ref4.tooltipComponent,
        _ref4$value = _ref4.value,
        value = _ref4$value === void 0 ? min : _ref4$value,
        rest = _objectWithoutProperties(_ref4, _excluded);

    delete rest.max;
    delete rest.noFill;
    delete rest.pressed;
    delete rest.step;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
      disabled: disabled,
      ref: componentRef,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComponentOverride["default"], {
        backgroundProgress: backgroundProgress,
        component: progressBarComponent,
        orientation: orientation,
        progress: percent,
        progressAnchor: progressAnchor,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComponentOverride["default"], {
          className: css.knob,
          component: knobComponent,
          disabled: disabled,
          orientation: orientation,
          proportion: percent,
          tooltipComponent: tooltipComponent,
          value: value
        })
      })
    }));
  }
});
/**
 * Adds touch and drag support to a [SliderBase]{@link ui/Slider.SliderBase}.
 *
 * @hoc
 * @memberof ui/Slider
 * @mixes ui/Changeable.Changeable
 * @mixes ui/Touchable.Touchable
 * @public
 */

exports.SliderBase = SliderBase;
var SliderDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'componentRef'
}), _Changeable["default"], _PositionDecorator["default"], (0, _Touchable["default"])({
  activeProp: 'pressed'
}));
/**
 * A minimally-styled slider component with touch and drag support.
 *
 * @class Slider
 * @extends ui/Slider.SliderBase
 * @memberof ui/Slider
 * @mixes ui/Slider.SliderDecorator
 * @omit componentRef
 * @ui
 * @public
 */

/**
 * Called when the value is changed.
 *
 * @name onChange
 * @memberof ui/Slider.Slider.prototype
 * @type {Function}
 * @param {Object} event
 * @param {Number} event.value      Value of the slider
 * @param {Number} event.proportion Proportion of the value in terms of the min and max
 *                                  values
 * @public
 */

exports.SliderDecorator = SliderDecorator;
var Slider = SliderDecorator(SliderBase);
exports.Slider = Slider;
var _default = Slider;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Slider/utils.js":
/*!************************************************!*\
  !*** ./node_modules/@enact/ui/Slider/utils.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.calcProportion = void 0;

var calcProportion = function calcProportion(min, max, value) {
  if (value <= min) {
    return 0;
  } else if (value >= max) {
    return 1;
  } else {
    return (value - min) / (max - min);
  }
};

exports.calcProportion = calcProportion;

/***/ }),

/***/ "./node_modules/@enact/ui/Slottable/Slottable.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/ui/Slottable/Slottable.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Slottable = void 0;
Object.defineProperty(exports, "useSlots", ({
  enumerable: true,
  get: function get() {
    return _useSlots["default"];
  }
}));

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _useSlots = _interopRequireDefault(__webpack_require__(/*! ./useSlots */ "./node_modules/@enact/ui/Slottable/useSlots.js"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Default config for `Slottable`.
 *
 * @memberof ui/Slottable.Slottable
 * @hocconfig
 * @public
 */


var defaultConfig = {
  /**
   * Array of slot names which will be extracted from `children` and distributed to props.
   *
   * @type {String[]}
   * @memberof ui/Slottable.Slottable.defaultConfig
   */
  slots: null
};
/**
 * A higher-order component that allows wrapped components to separate children into pre-designated 'slots'.
 *
 * To use `Slottable`, you must configure it by passing in a config object with the `slots` member set to an
 * array of slot names.  Any children whose `slot` or `defaultSlot` property matches a named slot or whose
 * type matches a named slot will be placed into a property of the same name on the wrapped component.
 *
 * @class Slottable
 * @memberof ui/Slottable
 * @hoc
 * @public
 */

var Slottable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var slots = config.slots; // eslint-disable-next-line no-shadow

  return function Slottable(props) {
    // extract the slots into a new object but populating the default value to be undefined so
    // the key exists in order to allow the current "harmful" behavior below. Must be undefined
    // in order to trigger defaultProps on downstream components.
    var slotProps = {
      children: props.children
    };
    slots.forEach(function (k) {
      return slotProps[k] = undefined;
    }); // eslint-disable-line no-undefined
    // Slottable allows there to be other values in the destination slot and merges them.
    // However, consumers can't avoid key warnings when merging the two lists so we should
    // "consider this harmful" and not continue to support this with the hook and instead
    // encourage using the slot as the default with the prop as a fallback as implemented by the
    // hook.

    var distributed = (0, _useSlots["default"])(slotProps);
    slots.forEach(function (slot) {
      var dist = distributed[slot];
      var prop = props[slot];

      if (prop != null && dist != null) {
        distributed[slot] = [].concat(prop, dist);
      } else if (prop != null) {
        distributed[slot] = prop;
      }
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, props), distributed));
  };
});
exports.Slottable = Slottable;
var _default = Slottable;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Slottable/useSlots.js":
/*!******************************************************!*\
  !*** ./node_modules/@enact/ui/Slottable/useSlots.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.useSlots = useSlots;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _warning = _interopRequireDefault(__webpack_require__(/*! warning */ "./node_modules/warning/warning.js"));

var _excluded = ["children"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
} // ** WARNING ** This is an intentional but likely dangerous hack necessary to clone a child while
// omitting the `slot` property. It relies on the black box structure of a React element which could
// change breaking this code. Without it, the slot property will cascade to a DOM node causing a
// React warning.


function cloneElement(child, index) {
  var newProps = Object.assign({}, child.props);
  delete newProps.slot;
  newProps.key = "slot-".concat(index);
  return /*#__PURE__*/(0, _react.createElement)(child.type, newProps);
}

function distributeChild(child, index, slots, props) {
  var c, slot;

  var hasSlot = function hasSlot(name) {
    return slots.indexOf(name) !== -1;
  };

  if (! /*#__PURE__*/(0, _react.isValidElement)(child)) {
    return false;
  } else if (child.props.slot) {
    var hasUserSlot = hasSlot(slot = child.props.slot);
     true ? (0, _warning["default"])(hasUserSlot, 'The slot "%s" specified on %s does not exist', child.props.slot, typeof child.type === 'string' ? child.type : child.type.name || child.type.displayName || 'component') : 0;

    if (hasUserSlot) {
      c = cloneElement(child, index);
    }
  } else if (hasSlot(slot = child.type.defaultSlot)) {
    c = child;
  } else if (hasSlot(slot = child.type)) {
    var propNames = Object.keys(child.props);

    if (propNames.length === 1 && propNames[0] === 'children') {
      c = child.props.children;
    } else {
      c = child;
    }
  }

  if (c) {
    var prop = props[slot];

    if (prop) {
      if (Array.isArray(prop)) {
        prop.push(c);
      } else {
        prop = [prop, c];
      }
    } else {
      prop = c;
    }

    props[slot] = prop;
    return true;
  }

  return false;
}

function distribute(_ref) {
  var children = _ref.children,
      slots = _objectWithoutProperties(_ref, _excluded);

  var slotNames = Object.keys(slots);
  var props = {
    children: children
  };

  if (slotNames.length > 0) {
    var remaining = [];

    _react.Children.forEach(children, function (child, index) {
      if (!distributeChild(child, index, slotNames, props)) {
        remaining.push(child);
      }
    }); // we need to retain the children prop so that it can overwrite the value from props if the
    // author spreads the return of useSlots over props


    props.children = remaining.length === 0 ? null : remaining;
  }

  slotNames.forEach(function (slot) {
    if (slots[slot] === undefined) {
      // eslint-disable-line no-undefined
      delete slots[slot];
    }
  }); // We handle fallback here (rather than at the props initialization) because distributeChild
  // will append to existing props and we want the distributed value to override the fallback
  // value.

  return _objectSpread(_objectSpread({}, slots), props);
}
/**
 * Configuration for `useSlots`
 *
 * @typedef {Object} useSlotsConfig
 * @memberof ui/Slottable
 * @property {Object} [slots] An object mapping slot names to default values. It must contain a
 *                            `children` key with an array of elements to be distributed into slots.
 * @private
 */

/**
 * Distributes `children` into the configured `slots`.
 *
 * `useSlots` iterates over all of the `children` in `props` and distributes any children based on
 * the followig rules:
 *
 * * If the child has a `slot` property matching a valid slot, or
 * * If the component for the child has the `defaultSlot` static member matching a valid slot, or
 * * If the child component's type is a string matching a valid slot.
 *
 * When a child matches one of the above rules, it is removed from children and inserted into a prop
 * matching the name of the slot.
 *
 * *Special Conditions*
 *
 * * If multiple children match the same slot, the destination prop will be an array of children.
 * * If a value exists on `props` but not as a slot within `children`, the prop value is used as a
 *   fallback.
 * * If a value exists both on `props` and as a slot within `children`, the slot value(s) replaces
 *   the prop value.
 *
 * ```
 * function Component ({after, before, children, label, ...rest}) {
 *   const slots = useSlots({after, before, children, label});
 *
 *   return (
 *     <div {...rest} aria-label={label}>
 *       <span class="before">{slots.before}</span>
 *       {slots.children}
 *       <span class="after">{slots.after}</span>
 *     </div>
 *   );
 * }
 *
 * <Component label="descriptive label">
 *   <Icon slot="before">star</Icon>
 *   Some other content
 *   <Icon slot="after">flag</Icon>
 * </Component>
 * ```
 *
 * @param {useSlotsConfig} config Configuration options
 * @returns {Object} A object whose keys are the slot names and values are the nodes from
 *                   `children`. If any nodes were not assigned to a slot, they will be returned in
 *                   the `children` prop. If no nodes remain, the `children` prop will be omitted.
 * @memberof ui/Slottable
 * @private
 */


function useSlots(slots) {
  return distribute(slots);
}

var _default = useSlots;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Spinner/Spinner.js":
/*!***************************************************!*\
  !*** ./node_modules/@enact/ui/Spinner/Spinner.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.SpinnerDecorator = exports.SpinnerBase = exports.Spinner = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! @enact/core/internal/prop-types */ "./node_modules/@enact/core/internal/prop-types/prop-types.js"));

var _kind = _interopRequireDefault(__webpack_require__(/*! @enact/core/kind */ "./node_modules/@enact/core/kind/kind.js"));

var _propTypes2 = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _FloatingLayer = _interopRequireDefault(__webpack_require__(/*! ../FloatingLayer */ "./node_modules/@enact/ui/FloatingLayer/index.js"));

var _ForwardRef = _interopRequireDefault(__webpack_require__(/*! ../ForwardRef */ "./node_modules/@enact/ui/ForwardRef/ForwardRef.js"));

var _SpinnerModule = _interopRequireDefault(__webpack_require__(/*! ./Spinner.module.css */ "./node_modules/@enact/ui/Spinner/Spinner.module.css"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["blockClickOn", "component", "componentRef", "scrimClassName", "scrimType", "spinnerContainerClassName"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/**
 * A minimally styled component that controls `Spinner` positioning and interaction states, without
 * [SpinnerDecorator](ui/Spinner.SpinnerDecorator) applied.
 *
 * @class SpinnerBase
 * @memberof ui/Spinner
 * @ui
 * @public
 */


var SpinnerBase = (0, _kind["default"])({
  name: 'ui:Spinner',
  propTypes:
  /** @lends ui/Spinner.SpinnerBase.prototype */
  {
    /**
     * A theme-supplied component that performs the animation.
     *
     * Theme authors can use the `css.running` class to attach the animation CSS.
     * This element should accept a `children` prop which takes the form of an optional message
     * for the user.
     *
     * Unlike most other components, this does *not* represent the root rendered element, and
     * instead refers to the "spinner" part of this component. The presence of `blockClickOn`
     * changes the rendering tree and where this is used.
     *
     * @type {String|Component}
     * @required
     * @public
     */
    component: _propTypes["default"].renderable.isRequired,

    /**
     * Determines how far the click-blocking should extend.
     *
     * * `null` does not block clicking
     * * 'screen' blocks entire screen
     * * 'container' blocks up to the nearest ancestor with absolute or relative positioning
     *
     * When `blockClickOn` is either `'screen'` or `'container'`, a translucent scrim can be added
     * by setting [scrim]{@link ui/Spinner.Spinner#scrim} prop to `true`.
     *
     * @type {String|null}
     * @public
     */
    blockClickOn: _propTypes2["default"].oneOf(['screen', 'container', null]),

    /**
     * Centers the spinner horizontally and vertically relative to its containing component.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    centered: _propTypes2["default"].bool,

    /**
     * Called with a reference to the root component.
     *
     * When using {@link ui/Spinner.Spinner}, the `ref` prop is forwarded to this component
     * as `componentRef`.
     *
     * @type {Object|Function}
     * @public
     */
    componentRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `spinner` - The root `component` class
     * * `spinnerContainer` - Added as a parent in the case of `blockOnClick="container"
     * * `blockClickOn` - Applied if interaction should be blocked
     * * `centered` - Applied if the `centered` prop is present
     * * `running` - Always applied to `component`. Attach animation name property to this class.
     * * `scrim` - The blocking layer behind the Spinner
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Halts the animation of the spinner
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    paused: _propTypes2["default"].bool,

    /**
     * Sets a scrim behind the spinner with the `css.scrim` class applied.
     *
     * Only has an effect when `blockClickOn` is `'screen'` or `'container'` and has no effect
     * by default or when blockClickOn is `null`.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    scrim: _propTypes2["default"].bool
  },
  defaultProps: {
    centered: false,
    paused: false,
    scrim: false
  },
  styles: {
    css: _SpinnerModule["default"],
    className: 'spinner',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref) {
      var centered = _ref.centered,
          paused = _ref.paused,
          styler = _ref.styler;
      return styler.append({
        centered: centered,
        running: !paused
      });
    },
    scrimClassName: function scrimClassName(_ref2) {
      var blockClickOn = _ref2.blockClickOn,
          scrim = _ref2.scrim,
          styler = _ref2.styler;
      return styler.join({
        blockClickOn: blockClickOn,
        scrim: scrim
      });
    },
    scrimType: function scrimType(_ref3) {
      var scrim = _ref3.scrim;
      return scrim ? 'translucent' : 'transparent';
    },
    spinnerContainerClassName: function spinnerContainerClassName(_ref4) {
      var blockClickOn = _ref4.blockClickOn,
          centered = _ref4.centered,
          styler = _ref4.styler;
      return styler.join({
        centered: centered,
        spinnerContainer: blockClickOn
      });
    }
  },
  render: function render(_ref5) {
    var blockClickOn = _ref5.blockClickOn,
        Component = _ref5.component,
        componentRef = _ref5.componentRef,
        scrimClassName = _ref5.scrimClassName,
        scrimType = _ref5.scrimType,
        spinnerContainerClassName = _ref5.spinnerContainerClassName,
        rest = _objectWithoutProperties(_ref5, _excluded);

    delete rest.centered;
    delete rest.paused;
    delete rest.scrim;

    switch (blockClickOn) {
      case 'screen':
        {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingLayer["default"], {
            noAutoDismiss: true,
            open: true,
            scrimType: scrimType,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, _objectSpread({
              ref: componentRef
            }, rest))
          });
        }

      case 'container':
        {
          return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: spinnerContainerClassName,
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: scrimClassName
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, _objectSpread({
              ref: componentRef
            }, rest))]
          });
        }

      default:
        {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, _objectSpread({
            ref: componentRef
          }, rest));
        }
    }
  }
});
/**
 * Applies Spinner behaviors
 *
 * @class SpinnerDecorator
 * @memberof ui/Spinner
 * @mixes ui/ForwardRef.ForwardRef
 * @hoc
 * @public
 */

exports.SpinnerBase = SpinnerBase;
var SpinnerDecorator = (0, _ForwardRef["default"])({
  prop: 'componentRef'
});
/**
 * A minimally styled component that controls `Spinner` positioning and interaction states.
 *
 * @class Spinner
 * @memberof ui/Spinner
 * @extends ui/Spinner.SpinnerBase
 * @mixes ui/Spinner.SpinnerDecorator
 * @omit componentRef
 * @ui
 * @public
 */

exports.SpinnerDecorator = SpinnerDecorator;
var Spinner = SpinnerDecorator(SpinnerBase);
exports.Spinner = Spinner;
var _default = Spinner;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Touchable/ClickAllow.js":
/*!********************************************************!*\
  !*** ./node_modules/@enact/ui/Touchable/ClickAllow.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ClickAllow = void 0;

var _platform = __webpack_require__(/*! @enact/core/platform */ "./node_modules/@enact/core/platform/platform.js");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
} // It's possible that emitting `onTap` will cause a DOM change before the mousedown fires resulting
// in multiple tap/click events for the same user action. To avoid this, we store the last touchend
// target and timestamp to compare against the next mouse down. If the timestamp is different (e.g
// we're on a hybrid device that emitted a touch event but the next was a mouse event) or the target
// is the same (or no previous target was set if no touch events have been emitted), we allow the
// mousedown *across Touchable instances*.


var _lastTouchEnd = {
  target: null,
  timeStamp: 0
};

var shouldAllowMouseDown = function shouldAllowMouseDown(ev) {
  return ev.timeStamp !== _lastTouchEnd.timeStamp || ev.target === _lastTouchEnd.target || _lastTouchEnd.target === null;
};

var ClickAllow = /*#__PURE__*/function () {
  function ClickAllow() {
    _classCallCheck(this, ClickAllow);

    this.lastTouchEndTime = 0;
    this.lastMouseUpTime = 0;
  }

  _createClass(ClickAllow, [{
    key: "setLastTouchEnd",
    value: function setLastTouchEnd(ev) {
      if (ev && ev.type === 'touchend') {
        this.lastTouchEndTime = ev.timeStamp;
        _lastTouchEnd.timeStamp = ev.timeStamp;
        _lastTouchEnd.target = ev.target;
      }
    }
  }, {
    key: "setLastMouseUp",
    value: function setLastMouseUp(ev) {
      if (ev && ev.type === 'mouseup') {
        this.lastMouseUpTime = ev.timeStamp;
      }
    }
  }, {
    key: "shouldAllowMouseEvent",
    value: function shouldAllowMouseEvent(ev) {
      var timeStamp = ev.timeStamp; // iOS Safari sends both touch and mouse events (with differing timestamps)

      return !_platform.platform.ios && this.lastTouchEndTime !== timeStamp && shouldAllowMouseDown(ev);
    }
  }, {
    key: "shouldAllowTap",
    value: function shouldAllowTap(ev) {
      var type = ev.type,
          timeStamp = ev.timeStamp; // Allow the custom tap event for a “click” when it’s actually a click and it’s not from the
      // last mouseup event which would have fired the click for us

      return type === 'click' && this.lastMouseUpTime !== timeStamp;
    }
  }]);

  return ClickAllow;
}();

exports.ClickAllow = ClickAllow;
var _default = ClickAllow;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Touchable/Drag.js":
/*!**************************************************!*\
  !*** ./node_modules/@enact/ui/Touchable/Drag.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dragConfigPropType = exports.defaultDragConfig = exports["default"] = exports.Drag = void 0;

var _clamp = _interopRequireDefault(__webpack_require__(/*! ramda/src/clamp */ "./node_modules/ramda/src/clamp.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Tracking = {
  Untracked: 0,
  Active: 1,
  Paused: 2
};

var Drag = /*#__PURE__*/_createClass(function Drag() {
  var _this = this;

  _classCallCheck(this, Drag);

  this.dragConfig = null;

  this.isDragging = function () {
    return _this.dragConfig != null;
  };

  this.setContainerBounds = function (node) {
    var _this$dragConfig = _this.dragConfig,
        isGlobal = _this$dragConfig.global,
        boxSizing = _this$dragConfig.boxSizing;
    var bounds = null;
    if (!node) return;

    if (isGlobal) {
      bounds = {
        minX: 0,
        minY: 0,
        maxX: window.innerWidth,
        maxY: window.innerHeight
      };
    } else {
      bounds = node.getBoundingClientRect(); // adjust for padding when using content-box

      if (boxSizing === 'content-box') {
        var computedStyle = window.getComputedStyle(node);
        bounds = {
          minX: bounds.left + parseInt(computedStyle.paddingLeft),
          minY: bounds.top + parseInt(computedStyle.paddingTop),
          maxX: bounds.right - parseInt(computedStyle.paddingRight),
          maxY: bounds.bottom - parseInt(computedStyle.paddingBottom)
        };
      }
    }

    _this.bounds = bounds;
  };

  this.updatePosition = function (clientX, clientY) {
    var _this$bounds = _this.bounds,
        maxX = _this$bounds.maxX,
        maxY = _this$bounds.maxY,
        minX = _this$bounds.minX,
        minY = _this$bounds.minY;
    var x = (0, _clamp["default"])(minX, maxX, clientX) - minX;
    var y = (0, _clamp["default"])(minY, maxY, clientY) - minY;

    if (x !== _this.x || y !== _this.y) {
      _this.x = x;
      _this.y = y;
      return true;
    }

    return false;
  };

  this.begin = function (config, _ref, coords, node) {
    var noResume = _ref.noResume,
        onDrag = _ref.onDrag,
        onDragEnd = _ref.onDragEnd,
        onDragStart = _ref.onDragStart;
    if (!onDrag && !onDragStart && !onDragEnd) return;
    var x = coords.x,
        y = coords.y;
    _this.tracking = Tracking.Untracked;
    _this.startX = x;
    _this.startY = y;
    _this.dragConfig = _objectSpread(_objectSpread({}, config), {}, {
      node: node,
      resume: !noResume
    });
    _this.onDrag = onDrag;
    _this.onDragStart = onDragStart;
    _this.onDragEnd = onDragEnd;

    _this.setContainerBounds(node);

    _this.move(coords);
  };

  this.updateProps = function (_ref2) {
    var onDrag = _ref2.onDrag,
        onDragEnd = _ref2.onDragEnd,
        onDragStart = _ref2.onDragStart; // Check `isDragging` gesture is not in progress. Check if gesture exists before updating the references to the `dragConfig`

    if (!_this.isDragging()) return; // This will update the `dragConfig` with the new value

    _this.onDrag = onDrag;
    _this.onDragStart = onDragStart;
    _this.onDragEnd = onDragEnd;
  };

  this.move = function (coords) {
    if (!_this.isDragging()) return;
    var moveTolerance = _this.dragConfig.moveTolerance;

    if (_this.tracking === Tracking.Untracked) {
      var dx = coords.x - _this.startX;
      var dy = coords.y - _this.startY;

      if (Math.sqrt(dx * dx + dy * dy) >= moveTolerance) {
        _this.tracking = Tracking.Active;

        if (_this.onDragStart) {
          _this.onDragStart(_objectSpread({
            type: 'onDragStart'
          }, coords));
        }
      }
    } else if (_this.onDrag && _this.tracking === Tracking.Active && _this.updatePosition(coords)) {
      _this.onDrag(_objectSpread({
        type: 'onDrag'
      }, coords));
    }
  };

  this.blur = function () {
    if (!_this.isDragging()) return;

    if (!_this.dragConfig.global) {
      _this.end();
    }
  };

  this.end = function () {
    if (!_this.isDragging()) return;

    if (_this.onDragEnd && _this.tracking !== Tracking.Untracked) {
      _this.onDragEnd({
        type: 'onDragEnd'
      });
    }

    _this.tracking = Tracking.Untracked;
    _this.dragConfig = null;
  };

  this.enter = function () {
    if (!_this.isDragging()) return;

    if (_this.dragConfig.resume && _this.tracking === Tracking.Paused) {
      _this.tracking = Tracking.Active;
    }
  };

  this.leave = function () {
    if (!_this.isDragging()) return;

    if (!_this.dragConfig.global && _this.tracking === Tracking.Active) {
      _this.tracking = Tracking.Paused;
    }
  };
});

exports.Drag = Drag;
var defaultDragConfig = {
  boxSizing: 'border-box',
  global: false,
  moveTolerance: 16
};
exports.defaultDragConfig = defaultDragConfig;

var dragConfigPropType = _propTypes["default"].shape({
  boxSizing: _propTypes["default"].string,
  global: _propTypes["default"].bool,
  moveTolerance: _propTypes["default"].number
});

exports.dragConfigPropType = dragConfigPropType;
var _default = Drag;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Touchable/Flick.js":
/*!***************************************************!*\
  !*** ./node_modules/@enact/ui/Touchable/Flick.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.flickConfigPropType = exports.defaultFlickConfig = exports["default"] = exports.Flick = void 0;

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var Flick = /*#__PURE__*/function () {
  function Flick() {
    var _this = this;

    _classCallCheck(this, Flick);

    this.begin = function (config, _ref, coords) {
      var onFlick = _ref.onFlick;
      _this.flickConfig = _objectSpread({}, config);

      if (_this.flickConfig.maxDuration !== null) {
        _this.cancelJob.startAfter(_this.flickConfig.maxDuration);
      }

      _this.tracking = !!onFlick;
      _this.moves.length = 0;
      _this.onFlick = onFlick;

      _this.move(coords);
    };

    this.updateProps = function (_ref2) {
      var onFlick = _ref2.onFlick; // Check `tracking` gesture is not in progress. Check if gesture exists before updating the references to the `onFlick`

      if (!_this.tracking) return; // This will update the `onFlick` with the new value

      _this.onFlick = onFlick;
    };

    this.move = function (_ref3) {
      var x = _ref3.x,
          y = _ref3.y;
      if (!_this.tracking) return;
      var maxMoves = _this.flickConfig.maxMoves;

      _this.moves.push({
        x: x,
        y: y,
        t: window.performance.now()
      }); // track specified # of points


      if (_this.moves.length > maxMoves) {
        _this.moves.shift();
      }
    };

    this.blur = function () {
      _this.end();
    };

    this.cancel = function () {
      _this.tracking = false;
    };

    this.cancelJob = new _util.Job(this.cancel);

    this.end = function () {
      if (!_this.tracking) return;
      var minVelocity = _this.flickConfig.minVelocity;

      _this.cancelJob.stop();

      var moves = _this.moves;

      if (moves.length > 1) {
        // note: important to use up time to reduce flick
        // velocity based on time between move and up.
        var last = moves[moves.length - 1];
        var t = window.performance.now();
        var x = 0,
            y = 0; // take the greatest of flick between each tracked move and last move

        for (var i = moves.length - 2, m; m = moves[i]; i--) {
          // this flick (this move - last move) / (this time - last time)
          var dt = t - m.t;
          var vx = (last.x - m.x) / dt;
          var vy = (last.y - m.y) / dt; // if either axis is a greater flick than previously recorded use this one

          if (Math.abs(vx) > Math.abs(x) || Math.abs(vy) > Math.abs(y)) {
            x = vx;
            y = vy;
          }
        }

        var v = Math.sqrt(x * x + y * y);

        if (v > minVelocity) {
          var vertical = Math.abs(y) > Math.abs(x); // generate the flick using the start event so it has those coordinates
          // this.sendFlick(ti.startEvent, x, y, v);

          _this.onFlick({
            type: 'onFlick',
            direction: vertical ? 'vertical' : 'horizontal',
            velocityX: x,
            velocityY: y,
            velocity: v
          });
        }
      }

      _this.tracking = false;
    };

    this.tracking = false;
    this.moves = [];
  }

  _createClass(Flick, [{
    key: "isTracking",
    value: function isTracking() {
      return this.tracking;
    }
  }]);

  return Flick;
}();

exports.Flick = Flick;
var defaultFlickConfig = {
  maxDuration: 250,
  maxMoves: 5,
  minVelocity: 0.1
};
exports.defaultFlickConfig = defaultFlickConfig;

var flickConfigPropType = _propTypes["default"].shape({
  maxDuration: _propTypes["default"].number,
  maxMoves: _propTypes["default"].number,
  maxVelocity: _propTypes["default"].number
});

exports.flickConfigPropType = flickConfigPropType;
var _default = Flick;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Touchable/Hold.js":
/*!**************************************************!*\
  !*** ./node_modules/@enact/ui/Touchable/Hold.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.holdConfigPropType = exports.defaultHoldConfig = exports["default"] = exports.Hold = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var Hold = /*#__PURE__*/function () {
  function Hold() {
    var _this = this;

    _classCallCheck(this, Hold);

    this.isHolding = function () {
      return _this.holdConfig != null;
    };

    this.isWithinTolerance = function (_ref) {
      var x = _ref.x,
          y = _ref.y;
      var moveTolerance = _this.holdConfig.moveTolerance;
      var dx = _this.startX - x;
      var dy = _this.startY - y;
      return Math.sqrt(dx * dx + dy * dy) < moveTolerance;
    };

    this.begin = function (defaultConfig, _ref2, _ref3) {
      var holdConfig = _ref2.holdConfig,
          noResume = _ref2.noResume,
          onHoldStart = _ref2.onHoldStart,
          onHoldEnd = _ref2.onHoldEnd,
          onHold = _ref2.onHold;
      var x = _ref3.x,
          y = _ref3.y;
      if (!onHoldStart && !onHold) return;
      _this.startX = x;
      _this.startY = y;
      _this.holdConfig = _objectSpread(_objectSpread(_objectSpread({}, defaultConfig), holdConfig), {}, {
        resume: !noResume
      });
      _this.onHold = onHold;
      _this.onHoldStart = onHoldStart;
      _this.onHoldEnd = onHoldEnd; // copy the events array since it is mutated for each hold

      _this.holdConfig.events = _this.holdConfig.events.slice();

      _this.holdConfig.events.sort(function (a, b) {
        if (a.time < b.time) return -1;
        if (a.time > b.time) return 1;
        return 0;
      });

      _this.pulsing = false;
      _this.next = _this.holdConfig.events.shift();

      if (_this.next) {
        _this.holdStart = window.performance.now();

        _this.startJob();
      }
    };

    this.updateProps = function (_ref4) {
      var onHoldStart = _ref4.onHoldStart,
          onHoldEnd = _ref4.onHoldEnd,
          onHold = _ref4.onHold; // check `isHolding` gesture is not in progress. Check if gesture exists before updating the references to the `holdConfig`

      if (!_this.isHolding()) return; // Update the original values with new values of the gestures

      _this.onHold = onHold;
      _this.onHoldStart = onHoldStart;
      _this.onHoldEnd = onHoldEnd;
    };

    this.move = function (coords) {
      if (!_this.isHolding()) return;
      var _this$holdConfig = _this.holdConfig,
          cancelOnMove = _this$holdConfig.cancelOnMove,
          resume = _this$holdConfig.resume;

      if (cancelOnMove) {
        var shouldEnd = !_this.isWithinTolerance(coords);

        if (shouldEnd) {
          if (resume) {
            _this.suspend();
          } else {
            _this.end();
          }
        } else if (resume && !shouldEnd) {
          _this.resume();
        }
      }
    };

    this.blur = function () {
      if (!_this.isHolding()) return;

      if (!_this.holdConfig.global) {
        _this.end();
      }
    };

    this.end = function () {
      if (!_this.isHolding()) return;

      if (_this.pulsing && _this.onHoldEnd) {
        var time = window.performance.now() - _this.holdStart;

        _this.onHoldEnd({
          type: 'onHoldEnd',
          time: time
        });
      }

      _this.suspend();

      _this.pulsing = false;
      _this.holdConfig = null;
    };

    this.enter = function () {
      if (!_this.isHolding()) return;
      var _this$holdConfig2 = _this.holdConfig,
          cancelOnMove = _this$holdConfig2.cancelOnMove,
          resume = _this$holdConfig2.resume;

      if (resume && !cancelOnMove) {
        _this.resume();
      }
    };

    this.leave = function () {
      if (!_this.isHolding()) return;
      var _this$holdConfig3 = _this.holdConfig,
          isGlobal = _this$holdConfig3.global,
          resume = _this$holdConfig3.resume;
      if (isGlobal) return;

      if (resume) {
        _this.suspend();
      } else {
        _this.end();
      }
    };

    this.suspend = function () {
      clearInterval(_this.holdJob);
      _this.holdJob = null;
    };

    this.resume = function () {
      if (_this.holdJob !== null) return;

      _this.handlePulse();

      _this.startJob();
    };

    this.handlePulse = function () {
      var holdTime = window.performance.now() - _this.holdStart;

      var n = _this.next;

      while (n && n.time <= holdTime) {
        var events = _this.holdConfig.events;
        _this.pulsing = true;

        if (_this.onHoldStart) {
          _this.onHoldStart(_objectSpread({
            type: 'onHoldStart'
          }, n));
        } // if the hold is canceled from the onHoldStart handler, we should bail early and prevent
        // additional hold/pulse events


        if (!_this.isHolding()) {
          _this.pulsing = false;
          break;
        }

        n = _this.next = events && events.shift();
      }

      if (_this.pulsing) {
        if (_this.onHold) {
          _this.onHold({
            type: 'onHold',
            time: holdTime
          });
        }
      }
    };

    this.holdJob = null;
    this.holdStart = null;
    this.pulsing = false;
    this.next = null;
  }

  _createClass(Hold, [{
    key: "startJob",
    value: function startJob() {
      var frequency = this.holdConfig.frequency;

      if (!this.holdJob) {
        this.holdJob = setInterval(this.handlePulse, frequency);
      }
    }
  }]);

  return Hold;
}();

exports.Hold = Hold;
var defaultHoldConfig = {
  cancelOnMove: false,
  events: [{
    name: 'hold',
    time: 200
  }],
  frequency: 200,
  global: false,
  moveTolerance: 16
};
exports.defaultHoldConfig = defaultHoldConfig;

var holdConfigPropType = _propTypes["default"].shape({
  cancelOnMove: _propTypes["default"].bool,
  events: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    name: _propTypes["default"].string,
    time: _propTypes["default"].number
  })),
  frequency: _propTypes["default"].number,
  global: _propTypes["default"].bool,
  moveTolerance: _propTypes["default"].number
});

exports.holdConfigPropType = holdConfigPropType;
var _default = Hold;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Touchable/Touch.js":
/*!***************************************************!*\
  !*** ./node_modules/@enact/ui/Touchable/Touch.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Touch = void 0;

var _handle = __webpack_require__(/*! @enact/core/handle */ "./node_modules/@enact/core/handle/handle.js");

var _dispatcher = __webpack_require__(/*! @enact/core/dispatcher */ "./node_modules/@enact/core/dispatcher/dispatcher.js");

var _complement = _interopRequireDefault(__webpack_require__(/*! ramda/src/complement */ "./node_modules/ramda/src/complement.js"));

var _platform = _interopRequireDefault(__webpack_require__(/*! @enact/core/platform */ "./node_modules/@enact/core/platform/platform.js"));

var _config = __webpack_require__(/*! ./config */ "./node_modules/@enact/ui/Touchable/config.js");

var _state = __webpack_require__(/*! ./state */ "./node_modules/@enact/ui/Touchable/state.js");

var _ClickAllow = _interopRequireDefault(__webpack_require__(/*! ./ClickAllow */ "./node_modules/@enact/ui/Touchable/ClickAllow.js"));

var _Drag = __webpack_require__(/*! ./Drag */ "./node_modules/@enact/ui/Touchable/Drag.js");

var _Flick = __webpack_require__(/*! ./Flick */ "./node_modules/@enact/ui/Touchable/Flick.js");

var _Hold = __webpack_require__(/*! ./Hold */ "./node_modules/@enact/ui/Touchable/Hold.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var getEventCoordinates = function getEventCoordinates(ev) {
  var x = ev.clientX,
      y = ev.clientY,
      type = ev.type;

  if (type.indexOf('touch') === 0) {
    x = ev.targetTouches[0].clientX;
    y = ev.targetTouches[0].clientY;
  }

  return {
    x: x,
    y: y
  };
}; // Establish a standard payload for onDown/onUp/onTap events and pass it along to a handler


var makeTouchableEvent = function makeTouchableEvent(type) {
  return function (ev) {
    var target = ev.target,
        currentTarget = ev.currentTarget;
    var clientX = ev.clientX,
        clientY = ev.clientY,
        pageX = ev.pageX,
        pageY = ev.pageY;

    if (ev.changedTouches) {
      clientX = ev.changedTouches[0].clientX;
      clientY = ev.changedTouches[0].clientY;
      pageX = ev.changedTouches[0].pageX;
      pageY = ev.changedTouches[0].pageY;
    }

    return {
      type: type,
      target: target,
      currentTarget: currentTarget,
      clientX: clientX,
      clientY: clientY,
      pageX: pageX,
      pageY: pageY
    };
  };
};

var isEnabled = (0, _handle.forProp)('disabled', false);
var handleDown = (0, _handle.handle)(isEnabled, (0, _handle.adaptEvent)(makeTouchableEvent('onDown'), (0, _handle.forwardWithPrevent)('onDown')), (0, _handle.call)('activate'), (0, _handle.call)('startGesture')).named('handleDown');
var handleUp = (0, _handle.handle)(isEnabled, (0, _handle.call)('endGesture'), (0, _handle.call)('isTracking'), (0, _handle.adaptEvent)(makeTouchableEvent('onUp'), (0, _handle.forwardWithPrevent)('onUp')), (0, _handle.adaptEvent)(makeTouchableEvent('onTap'), (0, _handle.forward)('onTap')))["finally"]((0, _handle.call)('deactivate')).named('handleUp');
var handleEnter = (0, _handle.handle)(isEnabled, (0, _handle.forProp)('noResume', false), (0, _handle.call)('enterGesture'), (0, _handle.call)('isPaused'), (0, _handle.call)('activate')).named('handleEnter');
var handleLeave = (0, _handle.handle)(isEnabled, (0, _handle.call)('leaveGesture'), (0, _handle.oneOf)([(0, _handle.forProp)('noResume', false), (0, _handle.call)('pause')], [_handle.returnsTrue, (0, _handle.call)('deactivate')])).named('handleLeave'); // Mouse event handlers

var handleMouseDown = (0, _handle.handle)((0, _handle.forward)('onMouseDown'), (0, _handle.call)('shouldAllowMouseEvent'), handleDown);
var handleMouseEnter = (0, _handle.handle)((0, _handle.forward)('onMouseEnter'), handleEnter);
var handleMouseMove = (0, _handle.handle)((0, _handle.forward)('onMouseMove'), (0, _handle.call)('moveGesture'));
var handleMouseLeave = (0, _handle.handle)((0, _handle.forward)('onMouseLeave'), handleLeave);
var handleMouseUp = (0, _handle.handle)((0, _handle.returnsTrue)((0, _handle.call)('setLastMouseUp')), (0, _handle.forward)('onMouseUp'), handleUp);
var handleClick = (0, _handle.handle)(isEnabled, // wrapping another handler to always forward onClick but, if onTap should occur, it should
// occur first to keep in sync with the up handler which emits onTap first
(0, _handle.handle)((0, _handle.call)('shouldAllowTap'), (0, _handle.call)('activate'), handleUp)["finally"]((0, _handle.forward)('onClick'))); // Touch event handlers

var handleTouchStart = (0, _handle.handle)((0, _handle.forward)('onTouchStart'), (0, _handle.call)('startTouch'), handleDown);
var handleTouchMove = (0, _handle.handle)((0, _handle.forward)('onTouchMove'), (0, _handle.call)('isTracking'), // we don't receive enter/leave events during a touch so we have to simulate them by
// detecting when the touch leaves the boundary. oneOf returns the value of whichever
// branch it follows so we append moveHold to either to handle moves that aren't
// entering or leaving
(0, _handle.adaptEvent)(makeTouchableEvent('onMove'), (0, _handle.forward)('onMove')), (0, _handle.oneOf)([(0, _handle.call)('hasTouchLeftTarget'), handleLeave], [_handle.returnsTrue, handleEnter])["finally"]((0, _handle.call)('moveGesture')));
var handleTouchEnd = (0, _handle.handle)((0, _handle.forward)('onTouchEnd'), // block the next mousedown to prevent duplicate touchable events
(0, _handle.returnsTrue)((0, _handle.call)('setLastTouchEnd')), (0, _handle.call)('isTracking'), (0, _complement["default"])((0, _handle.call)('hasTouchLeftTarget')), (0, _handle.returnsTrue)((0, _handle.call)('endTouch')), handleUp); // Global touchend/mouseup event handler to deactivate the component

var handleGlobalUp = (0, _handle.handle)((0, _handle.call)('isTracking'), (0, _handle.call)('deactivate'))["finally"]((0, _handle.call)('endGesture'));
var handleGlobalMove = (0, _handle.handle)((0, _handle.call)('isTracking'), (0, _handle.call)('containsCurrentTarget'), (0, _handle.call)('moveGesture'));
var handleBlur = (0, _handle.handle)((0, _handle.forward)('onBlur'), (0, _handle.call)('hasFocus'), (0, _handle.call)('blurGesture'));

var Touch = /*#__PURE__*/function () {
  function Touch() {
    var _this = this;

    _classCallCheck(this, Touch);

    this.getHandlers = function () {
      return _this.handlers;
    };

    this.context = {};
    this.target = null;
    this.targetHadFocus = false;
    this.handle = _handle.handle.bind(this);
    this.drag = new _Drag.Drag();
    this.flick = new _Flick.Flick();
    this.hold = new _Hold.Hold();
    this.clickAllow = new _ClickAllow["default"]();
    this.handlers = {
      onClick: handleClick.bindAs(this, 'handleClick'),
      onBlur: handleBlur.bindAs(this, 'handleBlur'),
      onMouseDown: handleMouseDown.bindAs(this, 'handleMouseDown'),
      onMouseEnter: handleMouseEnter.bindAs(this, 'handleMouseEnter'),
      onMouseMove: handleMouseMove.bindAs(this, 'handleMouseMove'),
      onMouseLeave: handleMouseLeave.bindAs(this, 'handleMouseLeave'),
      onMouseUp: handleMouseUp.bindAs(this, 'handleMouseUp')
    };

    if (_platform["default"].touch) {
      Object.assign(this.handlers, {
        onTouchStart: handleTouchStart.bindAs(this, 'handleTouchStart'),
        onTouchMove: handleTouchMove.bindAs(this, 'handleTouchMove'),
        onTouchEnd: handleTouchEnd.bindAs(this, 'handleTouchEnd')
      });
    }

    handleGlobalUp.bindAs(this, 'handleGlobalUp');
    handleGlobalMove.bindAs(this, 'handleGlobalMove');
  }

  _createClass(Touch, [{
    key: "setPropsAndContext",
    value: function setPropsAndContext(config, state, setState) {
      // remapping to props for better compatibility with core/handle and binding
      this.props = config;
      this.context.state = state;
      this.context.setState = setState;
    }
  }, {
    key: "updateGestureConfig",
    value: function updateGestureConfig(dragConfig, flickConfig, holdConfig) {
      this.config = (0, _config.mergeConfig)({
        drag: dragConfig,
        flick: flickConfig,
        hold: holdConfig
      });
    }
  }, {
    key: "addGlobalHandlers",
    value: function addGlobalHandlers() {
      // ensure we clean up our internal state
      if (_platform["default"].touch) {
        (0, _dispatcher.on)('touchend', this.handleGlobalUp, document);
      }

      (0, _dispatcher.on)('mouseup', this.handleGlobalUp, document);
      (0, _dispatcher.on)('mousemove', this.handleGlobalMove, document);
    }
  }, {
    key: "removeGlobalHandlers",
    value: function removeGlobalHandlers() {
      if (_platform["default"].touch) {
        (0, _dispatcher.off)('touchend', this.handleGlobalUp, document);
      }

      (0, _dispatcher.off)('mouseup', this.handleGlobalUp, document);
      (0, _dispatcher.off)('mousemove', this.handleGlobalMove, document);
    } // State Management

  }, {
    key: "setTarget",
    value: function setTarget(target) {
      this.target = target;
    }
  }, {
    key: "clearTarget",
    value: function clearTarget() {
      this.target = null;
    }
  }, {
    key: "activate",
    value: function activate(ev) {
      this.setTarget(ev.currentTarget);

      if (this.props.getActive) {
        this.context.setState(_state.States.Active);
      }

      return true;
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      this.clearTarget();

      if (this.props.getActive) {
        this.context.setState(_state.States.Inactive);
      }

      return true;
    }
  }, {
    key: "pause",
    value: function pause() {
      if (this.props.getActive && this.context.state === _state.States.Active) {
        this.context.setState(_state.States.Paused);
      }

      return true;
    }
  }, {
    key: "disable",
    value: function disable() {
      this.clearTarget();
      this.hold.end();
    }
  }, {
    key: "updateProps",
    value: function updateProps(props) {
      // Update the props onHoldStart, onHold, and onHoldEnd on any gesture (hold, flick, drag).
      this.hold.updateProps(props);
      this.flick.updateProps(props);
      this.drag.updateProps(props);
    } // Gesture Support

  }, {
    key: "startTouch",
    value: function startTouch(_ref) {
      var target = _ref.target,
          currentTarget = _ref.currentTarget;

      if (currentTarget.contains(target)) {
        (0, _dispatcher.on)('contextmenu', _handle.preventDefault);
        this.targetBounds = currentTarget.getBoundingClientRect();
        return true;
      }

      return false;
    }
  }, {
    key: "endTouch",
    value: function endTouch() {
      (0, _dispatcher.off)('contextmenu', _handle.preventDefault);
      this.targetBounds = null;
    }
  }, {
    key: "startGesture",
    value: function startGesture(ev, props) {
      var coords = getEventCoordinates(ev);
      var _this$config = this.config,
          hold = _this$config.hold,
          flick = _this$config.flick,
          drag = _this$config.drag;
      this.hold.begin(hold, props, coords);
      this.flick.begin(flick, props, coords);
      this.drag.begin(drag, props, coords, this.target);
      this.targetHadFocus = this.target === document.activeElement;
      return true;
    }
  }, {
    key: "moveGesture",
    value: function moveGesture(ev) {
      var coords = getEventCoordinates(ev);
      this.hold.move(coords);
      this.flick.move(coords);
      this.drag.move(coords);
      return true;
    }
  }, {
    key: "enterGesture",
    value: function enterGesture() {
      this.drag.enter();
      this.hold.enter();
      return true;
    }
  }, {
    key: "leaveGesture",
    value: function leaveGesture() {
      this.drag.leave();
      this.hold.leave();
      return true;
    }
  }, {
    key: "blurGesture",
    value: function blurGesture() {
      this.targetHadFocus = false;
      this.hold.blur();
      this.flick.blur();
      this.drag.blur();
      return true;
    }
  }, {
    key: "endGesture",
    value: function endGesture() {
      this.targetHadFocus = false;
      this.hold.end();
      this.flick.end();
      this.drag.end();
      return true;
    } // Event handler utilities

  }, {
    key: "isTracking",
    value: function isTracking() {
      // verify we had a target and the up target is still within the current node
      return this.target;
    }
  }, {
    key: "isPaused",
    value: function isPaused() {
      return this.context.state === _state.States.Paused;
    }
  }, {
    key: "hasFocus",
    value: function hasFocus() {
      return this.targetHadFocus;
    }
  }, {
    key: "hasTouchLeftTarget",
    value: function hasTouchLeftTarget(ev) {
      var _this2 = this;

      return Array.from(ev.changedTouches).reduce(function (hasLeft, _ref2) {
        var pageX = _ref2.pageX,
            pageY = _ref2.pageY;
        var _this2$targetBounds = _this2.targetBounds,
            left = _this2$targetBounds.left,
            right = _this2$targetBounds.right,
            top = _this2$targetBounds.top,
            bottom = _this2$targetBounds.bottom;
        return hasLeft && left > pageX || right < pageX || top > pageY || bottom < pageY;
      }, true);
    }
  }, {
    key: "containsCurrentTarget",
    value: function containsCurrentTarget(_ref3) {
      var target = _ref3.target;
      return !this.target.contains(target);
    }
  }, {
    key: "shouldAllowMouseEvent",
    value: function shouldAllowMouseEvent(ev) {
      return this.clickAllow.shouldAllowMouseEvent(ev);
    }
  }, {
    key: "shouldAllowTap",
    value: function shouldAllowTap(ev) {
      return this.clickAllow.shouldAllowTap(ev);
    }
  }, {
    key: "setLastMouseUp",
    value: function setLastMouseUp(ev) {
      this.clickAllow.setLastMouseUp(ev);
    }
  }, {
    key: "setLastTouchEnd",
    value: function setLastTouchEnd(ev) {
      this.clickAllow.setLastTouchEnd(ev);
    }
  }]);

  return Touch;
}();

exports.Touch = Touch;
var _default = Touch;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Touchable/Touchable.js":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/ui/Touchable/Touchable.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Touchable = void 0;
Object.defineProperty(exports, "configure", ({
  enumerable: true,
  get: function get() {
    return _config.configure;
  }
}));
exports["default"] = void 0;
Object.defineProperty(exports, "useTouch", ({
  enumerable: true,
  get: function get() {
    return _useTouch["default"];
  }
}));

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _config = __webpack_require__(/*! ./config */ "./node_modules/@enact/ui/Touchable/config.js");

var _Drag = __webpack_require__(/*! ./Drag */ "./node_modules/@enact/ui/Touchable/Drag.js");

var _Flick = __webpack_require__(/*! ./Flick */ "./node_modules/@enact/ui/Touchable/Flick.js");

var _Hold = __webpack_require__(/*! ./Hold */ "./node_modules/@enact/ui/Touchable/Hold.js");

var _useTouch = _interopRequireDefault(__webpack_require__(/*! ./useTouch */ "./node_modules/@enact/ui/Touchable/useTouch.js"));

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

var _excluded = ["dragConfig", "flickConfig", "holdConfig", "disabled", "noResume", "onBlur", "onClick", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDown", "onDrag", "onDragEnd", "onDragStart", "onFlick", "onHold", "onHoldEnd", "onHoldStart", "onMove", "onTap", "onUp"];

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var selectProps = function selectProps(props) {
  var dragConfig = props.dragConfig,
      flickConfig = props.flickConfig,
      holdConfig = props.holdConfig,
      disabled = props.disabled,
      noResume = props.noResume,
      onBlur = props.onBlur,
      onClick = props.onClick,
      onMouseDown = props.onMouseDown,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      onMouseMove = props.onMouseMove,
      onMouseUp = props.onMouseUp,
      onTouchEnd = props.onTouchEnd,
      onTouchMove = props.onTouchMove,
      onTouchStart = props.onTouchStart,
      onDown = props.onDown,
      onDrag = props.onDrag,
      onDragEnd = props.onDragEnd,
      onDragStart = props.onDragStart,
      onFlick = props.onFlick,
      onHold = props.onHold,
      onHoldEnd = props.onHoldEnd,
      onHoldStart = props.onHoldStart,
      onMove = props.onMove,
      onTap = props.onTap,
      onUp = props.onUp,
      rest = _objectWithoutProperties(props, _excluded);

  return {
    configForHook: {
      /* configs */
      dragConfig: dragConfig,
      flickConfig: flickConfig,
      holdConfig: holdConfig,

      /* general props */
      disabled: disabled,
      noResume: noResume,

      /* events to be captured and forwarded by useTouch hook */
      onBlur: onBlur,
      onClick: onClick,
      onMouseDown: onMouseDown,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onMouseMove: onMouseMove,
      onMouseUp: onMouseUp,
      onTouchEnd: onTouchEnd,
      onTouchMove: onTouchMove,
      onTouchStart: onTouchStart,

      /* custom events to be forwarded by useTouch hook */
      onDown: onDown,
      onDrag: onDrag,
      onDragEnd: onDragEnd,
      onDragStart: onDragStart,
      onFlick: onFlick,
      onHold: onHold,
      onHoldEnd: onHoldEnd,
      onHoldStart: onHoldStart,
      onMove: onMove,
      onTap: onTap,
      onUp: onUp
    },
    propsForWrapped: _objectSpread({
      disabled: disabled
    }, rest)
  };
};
/**
 * Default config for `Touchable`.
 *
 * @memberof ui/Touchable.Touchable
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Configures the prop name to pass the active state to the wrapped component
   *
   * @type {String}
   * @default null
   * @memberof ui/Touchable.Touchable.defaultConfig
   */
  activeProp: null
};
/**
 * A higher-order component that provides a consistent set of pointer events -- `onDown`, `onUp`,
 * and `onTap` -- across mouse and touch interfaces along with support for common gestures including
 * `onFlick`, `onDrag`, `onHoldStart`, `onHold`, and `onHoldEnd`.
 *
 * Note: This HoC passes a number of props to the wrapped component that should be passed to the
 * main DOM node or consumed by the wrapped component.
 *
 * @class Touchable
 * @memberof ui/Touchable
 * @hoc
 * @public
 */

var Touchable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var activeProp = config.activeProp; // eslint-disable-next-line no-shadow

  var Touchable = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
    var _selectProps = selectProps(props),
        configForHook = _selectProps.configForHook,
        propsForWrapped = _selectProps.propsForWrapped;

    var hook = (0, _useTouch["default"])(_objectSpread({
      getActive: !!activeProp
    }, configForHook));
    Object.assign(propsForWrapped, hook.handlers);

    if (activeProp) {
      propsForWrapped[activeProp] = hook.active;
    }

    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, propsForWrapped), {}, {
      ref: ref
    }));
  });
  Touchable.propTypes = {
    /**
     * Disables the component.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes["default"].bool,

    /**
     * Instance-specific overrides of the drag configuration.
     *
     * @see {@link ui/Touchable.configure}
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Object}
     * @public
     */
    dragConfig: _Drag.dragConfigPropType,

    /**
     * Instance-specific overrides of the flick configuration.
     *
     * @see {@link ui/Touchable.configure}
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Object}
     * @public
     */
    flickConfig: _Flick.flickConfigPropType,

    /**
     * Instance-specific overrides of the hold configuration.
     *
     * @see {@link ui/Touchable.configure}
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Object}
     * @public
     */
    holdConfig: _Hold.holdConfigPropType,

    /**
     * Prevents resuming the touch events and gestures when re-entering the component.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Boolean}
     * @default false
     * @public
     */
    noResume: _propTypes["default"].bool,

    /**
     * Event handler for 'down' pointer events.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onDown: _propTypes["default"].func,

    /**
     * Event handler for a drag gesture.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onDrag'`
     * * `x` - Horizontal position of the drag, relative to the viewport
     * * `y` - Vertical position of the drag, relative to the viewport
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onDrag: _propTypes["default"].func,

    /**
     * Event handler for the end of a drag gesture.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onDragEnd'`
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onDragEnd: _propTypes["default"].func,

    /**
     * Event handler for the start of a drag gesture.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onDragStart'`
     * * `x` - Horizontal position of the drag, relative to the viewport
     * * `y` - Vertical position of the drag, relative to the viewport
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onDragStart: _propTypes["default"].func,

    /**
     * Event handler for a flick gesture.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onFlick'`
     * * `direction` - Primary direction of the flick, either `'horizontal'` or `'vertical'`
     * * `velocity` - Velocity of flick
     * * `velocityX` - Velocity of flick along te horizontal axis
     * * `velocityY` - Velocity of flick along te vertical axis
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onFlick: _propTypes["default"].func,

    /**
     * Event handler for hold pulse events.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onHold'`
     * * `time` - Time, in milliseconds, since the hold began
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onHold: _propTypes["default"].func,

    /**
     * Event handler for the end of hold events.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onHoldEnd'`
     * * `time` - Time, in milliseconds, since the hold began
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onHoldEnd: _propTypes["default"].func,

    /**
     * Event handler for hold events.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onHoldStart'`
     * * `name` - The name of the hold as configured in the events list
     * * `time` - Time, in milliseconds, configured for this hold which may vary slightly
     *            from time since the hold began
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onHoldStart: _propTypes["default"].func,

    /**
     * Event handler for 'move' pointer events.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onMove: _propTypes["default"].func,

    /**
     * Event handler for 'tap' pointer events.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onTap: _propTypes["default"].func,

    /**
     * Event handler for 'up' pointer events.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onUp: _propTypes["default"].func
  };
  Touchable.defaultProps = {
    disabled: false,
    noResume: false
  };
  Touchable.displayName = 'Touchable';
  return Touchable;
});
exports.Touchable = Touchable;
var _default = Touchable;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Touchable/config.js":
/*!****************************************************!*\
  !*** ./node_modules/@enact/ui/Touchable/config.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.resetDefaultConfig = exports.mergeConfig = exports.getConfig = exports["default"] = exports.configure = void 0;

var _Drag = __webpack_require__(/*! ./Drag.js */ "./node_modules/@enact/ui/Touchable/Drag.js");

var _Flick = __webpack_require__(/*! ./Flick.js */ "./node_modules/@enact/ui/Touchable/Flick.js");

var _Hold = __webpack_require__(/*! ./Hold.js */ "./node_modules/@enact/ui/Touchable/Hold.js");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var allowedDragKeys = Object.keys(_Drag.defaultDragConfig);
var allowedFlickKeys = Object.keys(_Flick.defaultFlickConfig);
var allowedHoldKeys = Object.keys(_Hold.defaultHoldConfig);
/**
 * The Global Gesture Configuration Object
 *
 * @private
 * @memberof ui/Touchable
 */

var config = {}; // map-friendly clone method

var clone = function clone(o) {
  return Object.assign({}, o);
}; // Merges two configuation objects while retaining only the allowed keys


var mergeGestureConfig = function mergeGestureConfig(current, update, allowed) {
  var cfg = _objectSpread(_objectSpread({}, current), update);

  Object.keys(cfg).forEach(function (key) {
    if (allowed.indexOf(key) === -1) {
      delete cfg[key];
    }
  });
  return cfg;
}; // Merges the current global config with the provided `cfg` and returns the result


var mergeConfig = function mergeConfig(cfg) {
  var merged = {
    drag: mergeGestureConfig(config.drag, cfg.drag, allowedDragKeys),
    flick: mergeGestureConfig(config.flick, cfg.flick, allowedFlickKeys),
    hold: mergeGestureConfig(config.hold, cfg.hold, allowedHoldKeys)
  };
  merged.hold.events = merged.hold.events.map(clone);
  return merged;
};
/**
 * Configures the global gesture configuration for the application.
 *
 * Example:
 * ```
 * // Updates the `maxMoves`, `moveTolerance`, and `frequency` configurations while retaining the
 * // current value of all other configurations
 * configure({
 *     flick: {
 *         maxMoves: 10
 *     },
 *     hold: {
 *         moveTolerance: 32,
 *         frequency: 400
 *     }
 * });
 * ```
 *
 * Each type of gesture has its own set of configuration properties grouped within a separate object
 * keyed by the name of the gesture. Partial configurations may be passed and will be merged with
 * the current configuration.
 *
 * `drag`
 *
 *   * `boxSizing` - The part of the component's box model is used as the bounds of the constraint.
 *     Only applies when `global` is `false`.
 *     * `'border-box'` - the default, includes the padding and border but excludes the margin.
 *     * `'content-box'` - excludes the padding, border, and margin.
 *   * `global` - When `true`, drag gestures will continue when leaving the bounds of the component
 *      or blurring the component.
 *   * `moveTolerance` - The number of pixels from the start position of the drag that the pointer
 *     may move before cancelling the drag. Defaults to `16`.
 *
 * `flick`
 *
 *   * `maxDuration` - The amount of time, in milliseconds, to complete a flick gesture before it
 *     is cancelled. Defaults to 250.
 *   * `maxMoves` - The number of moves tracked to determine if a flick occurred. Defaults to `5`.
 *   * `minVelocity` - The minimum threshold, measured as the change in pixels over the change in
 *     time per move, that must be exceeded to generate a `onFlick` event.
 *
 * `hold`
 *
 *   * `cancelOnMove` - When `true`, the hold is cancelled when moving beyond the `moveTolerance`.
 *     Defaults to `false`
 *   * `global` - When `true`, hold gestures will continue when leaving the bounds of the component
 *      or blurring the component.
 *   * `moveTolerance` - The number of pixels from the start position of the hold that the pointer
 *     may move before cancelling the hold. Ignored when `cancelOnMove` is `false`. Defaults to
 *     `16`.
 *   * `frequency` - The time, in milliseconds, to poll for hold events. Defaults to `200`.
 *   * `events` - An array of `onHoldStart` events which each contain a `name` and `time`. The `time`
 *     controls the amount of time that must pass before this `onHoldStart` event is fired and should
 *     be a multiple of `frequency`.
 *
 * @function
 * @param   {Object}     cfg  A partial or complete configuration object
 *
 * @returns {undefined}
 * @public
 * @memberof ui/Touchable
 */


exports.mergeConfig = mergeConfig;

var configure = function configure(cfg) {
  config = mergeConfig(cfg);
};

exports.configure = configure;

var getConfig = function getConfig() {
  return config;
};

exports.getConfig = getConfig;

var resetDefaultConfig = function resetDefaultConfig() {
  return configure({
    drag: _Drag.defaultDragConfig,
    hold: _Hold.defaultHoldConfig,
    flick: _Flick.defaultFlickConfig
  });
};

exports.resetDefaultConfig = resetDefaultConfig;
resetDefaultConfig();
var _default = configure;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/Touchable/state.js":
/*!***************************************************!*\
  !*** ./node_modules/@enact/ui/Touchable/state.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.States = void 0;
var States = {
  Inactive: 0,
  Paused: 1,
  Active: 2
};
exports.States = States;

/***/ }),

/***/ "./node_modules/@enact/ui/Touchable/useTouch.js":
/*!******************************************************!*\
  !*** ./node_modules/@enact/ui/Touchable/useTouch.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.useTouch = useTouch;

var _useClass = _interopRequireDefault(__webpack_require__(/*! @enact/core/useClass */ "./node_modules/@enact/core/useClass/useClass.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _state = __webpack_require__(/*! ./state */ "./node_modules/@enact/ui/Touchable/state.js");

var _Touch = _interopRequireDefault(__webpack_require__(/*! ./Touch */ "./node_modules/@enact/ui/Touchable/Touch.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
/**
 * Configuration for `useTouch`
 *
 * @typedef {Object} useTouchConfig
 * @memberof ui/Touchable
 * @property {Object}    dragConfig      Instance-specific overrides of the drag configuration
 * @property {Object}    flickConfig     Instance-specific overrides of the flick configuration
 * @property {Object}    holdConfig      Instance-specific overrides of the hold configuration
 * @property {Boolean}   getActive       Enables active state management
 * @property {Boolean}   disabled        Disables a hook
 * @property {Boolean}   noResume        Prevents resuming the touch events and gestures when re-entering the component
 * @property {Function}  onBlur          Event handler for a blur event
 * @property {Function}  onClick         Event handler for a click event
 * @property {Function}  onMouseDown     Event handler for a mousedown event
 * @property {Function}  onMouseEnter    Event handler for a mouseenter event
 * @property {Function}  onMouseLeave    Event handler for a mouseleave event
 * @property {Function}  onMouseMove     Event handler for a mousemove event
 * @property {Function}  onMouseUp       Event handler for a mouseup event
 * @property {Function}  onTouchEnd      Event handler for a touchend event
 * @property {Function}  onTouchMove     Event handler for a touchmove event
 * @property {Function}  onTouchStart    Event handler for a touchstart event
 * @property {Function}  onDown          Event handler for 'down' pointer events
 * @property {Function}  onDrag          Event handler for a drag gesture
 * @property {Function}  onDragEnd       Event handler for the end of a drag gesture
 * @property {Function}  onDragStart     Event handler for the start of a drag gesture
 * @property {Function}  onFlick         Event handler for a flick gesture
 * @property {Function}  onHold          Event handler for hold pulse events
 * @property {Function}  onHoldEnd       Event handler for the end of hold events
 * @property {Function}  onHoldStart     Event handler for hold events
 * @property {Function}  onMove          Event handler for a pointer moving
 * @property {Function}  onTap           Event handler for 'tap' pointer events
 * @property {Function}  onUp            Event handler for 'up' pointer events
 * @see {@link ui/Touchable.configure}
 * @private
 */

/**
 * Object returned by `useTouch`
 *
 * @typedef {Object} useTouchInterface
 * @memberof ui/Touchable
 * @property {Boolean} active   The active state
 * @property {Object}  handlers Event handlers that need to be passed to DOM node
 * @private
 */

/**
 * Provides a consistent set of pointer events -- `onDown`, `onUp`, and `onTap` --
 * across mouse and touch interfaces along with support for common gestures including
 * `onFlick`, `onDrag`, `onHoldStart`, `onHold`, and `onHoldEnd`.
 * @param {useTouchConfig} config Configuration options
 * @returns {useTouchInterface}
 * @private
 */


function useTouch() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _config$getActive = config.getActive,
      getActive = _config$getActive === void 0 ? false : _config$getActive,
      disabled = config.disabled,
      dragConfig = config.dragConfig,
      flickConfig = config.flickConfig,
      holdConfig = config.holdConfig,
      onDrag = config.onDrag,
      onDragEnd = config.onDragEnd,
      onDragStart = config.onDragStart,
      onHold = config.onHold,
      onHoldEnd = config.onHoldEnd,
      onHoldStart = config.onHoldStart,
      onFlick = config.onFlick;
  var touch = (0, _useClass["default"])(_Touch["default"]);

  var _useState = (0, _react.useState)(_state.States.Inactive),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  touch.setPropsAndContext(_objectSpread(_objectSpread({}, config), {}, {
    disabled: !!disabled
  }), state, setState); // componentDidMount and componentWillUnmount

  (0, _react.useEffect)(function () {
    touch.addGlobalHandlers();
    return function () {
      touch.disable();
      touch.removeGlobalHandlers();
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useEffect)(function () {
    touch.updateGestureConfig(dragConfig, flickConfig, holdConfig);
  }, [dragConfig, flickConfig, holdConfig]); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useEffect)(function () {
    touch.updateProps(config);
  }, [onDrag, onDragEnd, onDragStart, onHold, onHoldEnd, onHoldStart, onFlick]); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useEffect)(function () {
    if (disabled) {
      touch.disable();
    }
  }, [disabled]); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useEffect)(function () {
    setState(function (prevState) {
      return !getActive || disabled ? _state.States.Inactive : prevState;
    });
  }, [getActive, disabled]);
  return {
    active: state !== _state.States.Inactive,
    handlers: touch.getHandlers()
  };
}

var _default = useTouch;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/internal/Pure/Pure.js":
/*!******************************************************!*\
  !*** ./node_modules/@enact/ui/internal/Pure/Pure.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.Pure = void 0;

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/**
 * Default config for {@link ui/internal/Pure.Pure}.
 *
 * @memberof ui/internal/Pure.Pure
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Configures the comparators used to test for prop changes
   *
   * @type {Object}
   * @memberof ui/internal/Pure.Pure.defaultConfig
   */
  propComparators: {
    '*': function _(a, b) {
      return a === b;
    }
  }
};
/**
 * Implements `shouldComponentUpdate` based on property change determination. By default, props are
 * shallowly compared for strict equality
 *
 * Custom comparators can be provided via the `propComparators` config property which accepts an
 * object mapping property names to comparator functions. To override the default comparator, use
 * the key, `'*'`.
 *
 * ```
 * const PureComponent = Pure(
 *     // Overrides the comparator for `count`. All other props will use the default comparators
 *     propComparators: {
 *         // For example, count is compared using loose equality allowing '5' to equal 5
 *         count: (a, b) => a == b
 *     },
 *     Component
 * )
 * ```
 *
 * @class Pure
 * @memberof ui/internal/Pure
 * @hoc
 * @private
 */

var Pure = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var propComparators = config.propComparators;
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class() {
      _classCallCheck(this, _class);

      return _super.apply(this, arguments);
    }

    _createClass(_class, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return this.hasChanged(this.props, nextProps, propComparators);
      }
    }, {
      key: "hasChanged",
      value: function hasChanged(current, next, comparators) {
        var propKeys = Object.keys(current);
        var nextKeys = Object.keys(next); // early bail out if the objects have a different number of keys

        if (propKeys.length !== nextKeys.length) {
          return true;
        }

        var hasOwn = Object.prototype.hasOwnProperty.bind(current);

        for (var i = 0; i < nextKeys.length; i++) {
          var prop = nextKeys[i];
          var comp = comparators[prop] || comparators['*'];

          if (!hasOwn(prop) || !comp(current[prop], next[prop])) {
            return true;
          }
        }

        return false;
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, this.props));
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'Pure', _class.propTypes = {}, _class.defaultProps = {}, _class;
});
exports.Pure = Pure;
var _default = Pure;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/internal/localized-fonts/localized-fonts.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@enact/ui/internal/localized-fonts/localized-fonts.js ***!
  \****************************************************************************/
/***/ (function(module) {

"use strict";


function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

var fontMap = {};
var currentLocale = null; // Generate a single font-face rule

var buildFont = function buildFont(config) {
  if (!config && !config.name) {
    return '';
  }

  var strOut = '@font-face { \n' + "  font-family: \"".concat(config.name, "\";\n");

  if (config.weight) {
    strOut += "  font-weight: ".concat(config.weight, ";\n");
  }

  if (config.localName) {
    // Accept a string or an array. If it's a string convert it into an array
    if (typeof config.localName === 'string') {
      config.localName = [config.localName];
    } // Take our array and update each of its elements to be CSS "local()" strings


    config.localName = config.localName.map(function (f) {
      return "local(\"".concat(f, "\")");
    }); // Join all our strings together with a comma, so it's a valid CSS `src` rule

    strOut += "  src: ".concat(config.localName.join(', '), ";\n");
  }

  if (config.unicodeRange) {
    strOut += "  unicode-range: ".concat(config.unicodeRange, ";\n");
  }

  strOut += '} \n';
  return strOut;
}; // Generate a collection of font-face rules, in multiple font-variants


var buildFontSet = function buildFontSet(fontName, fonts, strLang, bitDefault) {
  var strOut = '',
      name = bitDefault ? fontName : fontName + ' ' + strLang;

  if (fonts[strLang].regular) {
    // Build Regular
    strOut += buildFont({
      name: name,
      localName: fonts[strLang].regular,
      unicodeRange: fonts[strLang].unicodeRange
    }); // Build Light

    strOut += buildFont({
      name: name,
      localName: fonts[strLang].light || fonts[strLang].regular,
      weight: 300,
      unicodeRange: fonts[strLang].unicodeRange
    }); // Build SemiBold

    strOut += buildFont({
      name: name,
      localName: fonts[strLang].semibold || fonts[strLang].bold || fonts[strLang].regular,
      weight: 600,
      unicodeRange: fonts[strLang].unicodeRange
    }); // Build Bold

    strOut += buildFont({
      name: name,
      localName: fonts[strLang].bold || fonts[strLang].regular,
      weight: 700,
      unicodeRange: fonts[strLang].unicodeRange
    });
  }

  return strOut;
};

var buildFontDefinitionCss = function buildFontDefinitionCss(locale, buildOverrides) {
  var matchLang = locale.match(/\b([a-z]{2})\b/),
      language = matchLang && matchLang[1],
      matchScript = locale.match(/\b([a-z]{4})\b/i),
      script = matchScript && matchScript[1],
      matchReg = locale.match(/\b([A-Z]{2}|[0-9]{3})\b/),
      region = matchReg && matchReg[1];
  var fontDefinitionCss = ''; // Build all the fonts so they could be explicitly called

  for (var fontName in fontMap) {
    var fonts = fontMap[fontName];

    for (var lang in fonts) {
      if (!buildOverrides) {
        fontDefinitionCss += buildFontSet(fontName, fonts, lang);
      } else {
        // Set up the override for locale-specific font.
        // la = language, sc = script, re = region; `la-RE` or `zh-Hans-HK`
        var _lang$split = lang.split('-'),
            _lang$split2 = _slicedToArray(_lang$split, 3),
            la = _lang$split2[0],
            sc = _lang$split2[1],
            re = _lang$split2[2]; // if script is not specified, fall back to second part representing region


        if (!re && sc && sc.length === 2) {
          re = sc;
          sc = null;
        }

        var matchesRegion = re ? re === region : true;
        var matchesScript = sc ? sc === script : true;

        if (la === language && matchesRegion && matchesScript) {
          fontDefinitionCss += buildFontSet(fontName, fonts, lang, true);
        }
      }
    }
  }

  return fontDefinitionCss;
};

var insertFontDefinitionCss = function insertFontDefinitionCss(styleId, fontDefinitionCss) {
  if (typeof document !== 'undefined') {
    // Normal execution in a browser window
    var styleElem = document.getElementById(styleId);

    if (!styleElem) {
      styleElem = document.createElement('style');
      styleElem.setAttribute('id', styleId);
      styleElem.setAttribute('type', 'text/css');
      document.head.appendChild(styleElem);
    }

    styleElem.innerHTML = fontDefinitionCss;
  } else {
    var tag = "<style type=\"text/css\" id=\"".concat(styleId, "\">").concat(fontDefinitionCss, "</style>"); // We're rendering without the DOM; return the font definition stylesheet element string.

    return tag;
  }
};

function fontGenerator(locale) {
  var styleId = 'localized-fonts';

  if (typeof document !== 'undefined' && document.getElementById(styleId)) {
    return;
  }

  return insertFontDefinitionCss(styleId, buildFontDefinitionCss(locale));
}

function fontOverrideGenerator(locale) {
  return insertFontDefinitionCss('localized-fonts-override', buildFontDefinitionCss(locale, true));
}
/**
 * Generates locale-specific font rules allowing any locale to have its own custom font. Each
 * locale-font from the configuration block (defined in this file) is generated at run-time. If the
 * locale you're currently in is in the locale-font list an additional `@font-face` rule will be
 * generated that will override the standard font.
 *
 * In addition to the standard override-font being generated, named region-specific fonts are also
 * generated. This lets you incorporate language specific fonts when you're outside of one of those
 * regions; useful in a language list context where you want the name of each language to be
 * represented by that language's designated font.
 *
 * Below is example genarated-output of the Urdu ("ur") locale-font.
 *
 * ```css
 * &#64;font-face {
 * 	font-family: 'Custom Font ur';
 * 	font-weight: 500;
 * 	src: local('CustomFont_Urdu');
 * 	unicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;
 * }
 * &#64;font-face {
 * 	font-family: 'Custom Font ur Bold';
 * 	font-weight: 700;
 * 	src: local('CustomFont_Urdu');
 * 	unicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;
 * }
 * &#64;font-face {
 * 	font-family: 'Custom Font ur Light';
 * 	font-weight: 300;
 * 	src: local('CustomFont_Urdu');
 * 	unicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;
 * }
 * ```
 *
 * @param {String} locale Locale string in the format
 * @returns {String} An HTML fragment of the `<style>` when prerendering
 *
 * @public
 */


function generateFontRules(locale) {
  if (!locale || locale === currentLocale) {
    return;
  }

  currentLocale = locale;
  return fontGenerator(locale);
}

function generateFontOverrideRules(locale) {
  if (!locale) {
    return;
  }

  return fontOverrideGenerator(locale);
}
/**
 * Adds a localed font to the font map
 *
 * ```
 * addLocalizedFont('My Theme Font', {
 *   'ur': {
 *      regular: 'My Theme Urdu',
 *      unicodeRange:
 *        'U+600-6FF,' +
 *        'U+FE70-FEFE,' +
 *        'U+FB50-FDFF'
 *    }
 * })
 * ```
 *
 * @param {String} name  Name of the font
 * @param {Object} fonts Object mapping font names and unicode ranges to locales
 *
 * @public
 */


function addLocalizedFont(name, fonts) {
  fontMap[name] = fonts;

  if (currentLocale) {
    fontGenerator(currentLocale);
  }
}
/**
 * Removes a localized font from the font map
 *
 * @param   {String} name Name of the font
 *
 * @public
 */


function removeLocalizedFont(name) {
  delete fontMap[name];

  if (currentLocale) {
    fontGenerator(currentLocale);
  }
}

module.exports = generateFontRules;
module.exports.generateFontRules = generateFontRules;
module.exports.generateFontOverrideRules = generateFontOverrideRules;
module.exports.addLocalizedFont = addLocalizedFont;
module.exports.removeLocalizedFont = removeLocalizedFont;

/***/ }),

/***/ "./node_modules/@enact/ui/internal/validators/validators.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/ui/internal/validators/validators.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.warn = exports.validateSteppedOnce = exports.validateStepped = exports.validateRangeOnce = exports.validateRange = void 0;
/**
 * Exports various utilities for performing dev-time validations
 *
 * @module ui/internal/validators
 * @private
 */

/**
 * Issues a warning to the console
 *
 * @function
 * @param {String} msg				Event name
 * @param	{Function}	fn					Event handler
 * @param	{Node}		[target=`document`]	Event listener target
 *
 * @returns {undefined}
 * @memberof ui/internal/validators
 * @private
 */

var warn = function warn(msg) {
  if (typeof console !== 'undefined') {
    console.warn(msg); // eslint-disable-line no-console
  }
};
/**
 * Issues a warning to the console if `value` is not within the range
 * `min` to `max` or if `min` is less than `max`. In production mode,
 * no action is taken.
 *
 * @function
 * @param {Number} value The value to validate
 * @param {Number} min   The minimum acceptable value to validate
 * @param {Number} max   The maximum acceptable value to validate
 * @param {String} component The name of the invoker, used to decorate warning message
 * @param {String} [valueName='value'] The name of the value property
 * @param {String} [minName='min'] The name of the min property
 * @param {String} [maxName='max'] The name of the max property
 *
 * @returns {undefined}
 * @memberof ui/internal/validators
 * @private
 */


exports.warn = warn;

var validateRange = function validateRange(value, min, max, component) {
  var valueName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'value';
  var minName = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'min';
  var maxName = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'max';

  if (true) {
    var warned = false;

    if (value < min) {
      warn("Warning: ".concat(component, " ").concat(valueName, " (").concat(value, ") less than ").concat(minName, " (").concat(min, ")"));
      warned = true;
    } else if (value > max) {
      warn("Warning: ".concat(component, " ").concat(valueName, " (").concat(value, ") greater than ").concat(maxName, " (").concat(max, ")"));
      warned = true;
    }

    if (min > max) {
      warn("Warning: ".concat(component, " ").concat(minName, " (").concat(min, ") greater than ").concat(maxName, " (").concat(max, ")"));
      warned = true;
    }

    return warned;
  }
};

exports.validateRange = validateRange;

var validateRangeOnce = function validateRangeOnce(thing, _ref) {
  var component = _ref.component,
      _ref$valueName = _ref.valueName,
      valueName = _ref$valueName === void 0 ? 'value' : _ref$valueName,
      _ref$minName = _ref.minName,
      minName = _ref$minName === void 0 ? 'min' : _ref$minName,
      _ref$maxName = _ref.maxName,
      maxName = _ref$maxName === void 0 ? 'max' : _ref$maxName;

  if (true) {
    var displayed;
    return function (props) {
      if (!displayed) {
        displayed = validateRange(props[valueName], props[minName], props[maxName], component, valueName, minName, maxName);
      }

      return thing(props);
    };
  } else {}
};
/**
 * Issues a warning to the console if `value`, adjusted for `min` is not evenly
 * divisible by `step`. In production mode, no action is taken.
 *
 * @function
 * @param {Number} value The value to validate
 * @param {Number} min   The minimum acceptable value to validate
 * @param {Number} step  The step
 * @param {String} component The name of the invoker, used to decorate warning message
 * @param {String} [valueName='value'] The name of the value property
 * @param {String} [stepName='step'] The name of the step property
 *
 * @returns {Boolean} `true` if warned
 * @memberof ui/internal/validators
 * @private
 */


exports.validateRangeOnce = validateRangeOnce;

var validateStepped = function validateStepped(value, min, step, component) {
  var valueName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'value';
  var stepName = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'step';

  if (true) {
    // Ignore fractional steps as floating point math can give inconsistent results (1 % 0.1 != 0)
    if (step && step === Math.floor(step) && (value - min) % step !== 0) {
      warn("Warning: ".concat(component, " ").concat(valueName, " (").concat(value, ") must be evenly divisible by ").concat(stepName, " (").concat(step, ")"));
      return true;
    }
  }

  return false;
};

exports.validateStepped = validateStepped;

var validateSteppedOnce = function validateSteppedOnce(thing, _ref2) {
  var component = _ref2.component,
      _ref2$minName = _ref2.minName,
      minName = _ref2$minName === void 0 ? 'min' : _ref2$minName,
      _ref2$stepName = _ref2.stepName,
      stepName = _ref2$stepName === void 0 ? 'step' : _ref2$stepName,
      _ref2$valueName = _ref2.valueName,
      valueName = _ref2$valueName === void 0 ? 'value' : _ref2$valueName;

  if (true) {
    var displayed;
    return function (args) {
      if (!displayed) {
        displayed = validateStepped(args[valueName], args[minName], args[stepName], component, valueName, stepName);
      }

      return thing(args);
    };
  } else {}
};

exports.validateSteppedOnce = validateSteppedOnce;

/***/ }),

/***/ "./node_modules/@enact/ui/resolution/ResolutionDecorator.js":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/ui/resolution/ResolutionDecorator.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = exports.ResolutionDecorator = void 0;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

var _hoc = _interopRequireDefault(__webpack_require__(/*! @enact/core/hoc */ "./node_modules/@enact/core/hoc/hoc.js"));

var _resolution = __webpack_require__(/*! ./resolution */ "./node_modules/@enact/ui/resolution/resolution.js");

var _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/**
 * Default config for `ResolutionDecorator`.
 *
 * @memberof ui/resolution.ResolutionDecorator
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Attaches an event listener to the window to listen for resize events.
   *
   * @type {Boolean}
   * @default true
   * @public
   * @memberof ui/resolution.ResolutionDecorator.defaultConfig
   */
  dynamic: true,

  /**
   * An array of objects containing declarations for screen types to add to the list of known
   * screen types.
   *
   * @type {Object[]}
   * @default null
   * @public
   * @memberof ui/resolution.ResolutionDecorator.defaultConfig
   */
  screenTypes: null
};
/**
 * A higher-order component that configures resolution support for its wrapped component tree.
 *
 * Configuration options:
 *	* `dynamic: true` - when `true`, updates the resolution classes when the window resizes
 *	* `screenTypes: null` - defines a set of screen types to support
 *
 * Example:
 * ```
 *	// Will have the resolution classes and will be updated when the window resizes
 *	const AppWithResolution = ResolutionDecorator(App);
 *	// Will have the resolution classes for the screen at the time of render only
 *	const AppWithStaticResolution = ResolutionDecorator({dynamic: false}, App);
 *	const AppWithScreenTypes = ResolutionDecorator({screenTypes: [
 *		{name: 'hd', pxPerRem: 16, width: 1280, height: 720, aspectRatioName: 'hdtv', base: true}
 *	]}, App);
 * ```
 * @class ResolutionDecorator
 * @memberof ui/resolution
 * @hoc
 * @public
 */

var ResolutionDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  if (config.screenTypes) {
    (0, _resolution.defineScreenTypes)(config.screenTypes);
  }

  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);

      _this.handleResize = function () {
        var classNames = _this.didClassesChange();

        if (classNames) {
          _this.setState({
            resolutionClasses: classNames
          });
        }
      };

      (0, _resolution.init)({
        measurementNode: typeof window !== 'undefined' && window
      });
      _this.state = {
        resolutionClasses: ''
      };
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (config.dynamic) window.addEventListener('resize', this.handleResize); // eslint-disable-next-line react/no-find-dom-node

        this.rootNode = _reactDom["default"].findDOMNode(this);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (config.dynamic) window.removeEventListener('resize', this.handleResize);
      }
    }, {
      key: "didClassesChange",
      value:
      /*
       * Compare our current version of the resolved resolution class names with a fresh
       * initialization of RI.
       *
       * @returns {String|undefined} A string of new class names or undefined when there is no change.
       * @private
       */
      function didClassesChange() {
        var prevClassNames = (0, _resolution.getResolutionClasses)();
        (0, _resolution.init)({
          measurementNode: this.rootNode
        });
        var classNames = (0, _resolution.getResolutionClasses)();

        if (prevClassNames !== classNames) {
          return classNames;
        }
      }
    }, {
      key: "render",
      value: function render() {
        // Check if the classes are different from our previous classes
        var classes = (0, _resolution.getResolutionClasses)();
        if (this.props.className) classes += (classes ? ' ' : '') + this.props.className;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, this.props), {}, {
          className: classes
        }));
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'ResolutionDecorator', _class.propTypes =
  /** @lends ui/resolution.ResolutionDecorator.prototype */
  {
    className: _propTypes["default"].string
  }, _class;
});
exports.ResolutionDecorator = ResolutionDecorator;
var _default = ResolutionDecorator;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/resolution/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@enact/ui/resolution/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var _exportNames = {
  ResolutionDecorator: true
};
Object.defineProperty(exports, "ResolutionDecorator", ({
  enumerable: true,
  get: function get() {
    return _ResolutionDecorator["default"];
  }
}));
exports["default"] = void 0;

var ri = _interopRequireWildcard(__webpack_require__(/*! ./resolution */ "./node_modules/@enact/ui/resolution/resolution.js"));

Object.keys(ri).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === ri[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return ri[key];
    }
  });
});

var _ResolutionDecorator = _interopRequireDefault(__webpack_require__(/*! ./ResolutionDecorator */ "./node_modules/@enact/ui/resolution/ResolutionDecorator.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Exports a number of useful methods for resolution independence.
 *
 * The default export is an object containing the resolution independence methods.
 *
 * @module ui/resolution
 * @exports ResolutionDecorator
 */


var _default = ri;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@enact/ui/resolution/resolution.js":
/*!*********************************************************!*\
  !*** ./node_modules/@enact/ui/resolution/resolution.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.calculateFontSize = calculateFontSize;
exports.config = void 0;
exports.defineScreenTypes = defineScreenTypes;
exports.getAspectRatio = getAspectRatio;
exports.getAspectRatioName = getAspectRatioName;
exports.getResolutionClasses = getResolutionClasses;
exports.getScreenType = getScreenType;
exports.getScreenTypeObject = getScreenTypeObject;
exports.init = init;
exports.scale = scale;
exports.scaleToRem = void 0;
exports.selectSrc = selectSrc;
exports.unit = unit;
exports.unitToPixelFactors = void 0;
var baseScreen,
    orientation,
    riRatio,
    screenType,
    workspaceBounds = {
  width: typeof window === 'object' ? window.innerWidth : 1920,
  height: typeof window === 'object' ? window.innerHeight : 1080
},
    screenTypes = [{
  name: 'standard',
  pxPerRem: 16,
  width: workspaceBounds.width,
  height: workspaceBounds.height,
  aspectRatioName: 'standard',
  base: true
}],
    // Assign one sane type in case defineScreenTypes is never run.
screenTypeObject,
    config;
/**
 * Object that stores all of the pixel conversion factors to each keyed unit.
 *
 * @type {Object}
 * @memberof ui/resolution
 * @public
 */

exports.config = config;
var unitToPixelFactors = {
  'rem': 12,
  'in': 96
};
exports.unitToPixelFactors = unitToPixelFactors;
var configDefaults = {
  orientationHandling: 'normal'
};
/**
 * Update the common measured boundary object.
 *
 * This object is used as "what size screen are we looking at". Providing no arguments has no
 * effect and updates nothing.
 *
 * @function
 * @memberOf ui/resolution
 * @param {Node}    measurementNode    A standard DOM node or the `window` node.
 *
 * @returns {undefined}
 * @private
 */

var updateWorkspaceBounds = function updateWorkspaceBounds(measurementNode) {
  if (measurementNode && (measurementNode.clientHeight || measurementNode.clientWidth)) {
    workspaceBounds = {
      height: measurementNode.clientHeight,
      width: measurementNode.clientWidth
    };
  } else if (measurementNode && (measurementNode.innerHeight || measurementNode.innerWidth)) {
    // A backup for if measurementNode is actually `window` and not a normal node
    workspaceBounds = {
      height: measurementNode.innerHeight,
      width: measurementNode.innerWidth
    };
  }
};
/**
 * Fetch the screenType object
 *
 * @function
 * @memberof ui/resolution
 * @param  {String}    type    The key string for the screen type object. If falsy, the current
 *                             screenType is used
 *
 * @returns {Object}           screenTypeObject
 * @private
 */


function getScreenTypeObject(type) {
  type = type || screenType;

  if (screenTypeObject && screenTypeObject.name === type) {
    return screenTypeObject;
  }

  return screenTypes.filter(function (elem) {
    return type === elem.name;
  })[0];
}
/**
 * Sets up screen resolution scaling capabilities by defining an array of all the screens
 * being used.
 *
 * These should be listed in order from smallest to largest, according to
 * width.
 *
 * The `name`, `pxPerRem`, `width`, and `aspectRatioName` properties are required for
 * each screen type in the array. Setting `base: true` on a screen type marks it as the
 * default resolution, upon which everything else will be based.
 *
 * Executing this method also initializes the rest of the resolution-independence code.
 *
 * Example:
 * ```
 * import ri from 'enact/ui/resolution';
 *
 * ri.defineScreenTypes([
 * 	{name: 'vga',     pxPerRem: 8,  width: 640,  height: 480,  aspectRatioName: 'standard'},
 * 	{name: 'xga',     pxPerRem: 16, width: 1024, height: 768,  aspectRatioName: 'standard'},
 * 	{name: 'hd',      pxPerRem: 16, width: 1280, height: 720,  aspectRatioName: 'hdtv'},
 * 	{name: 'fhd',     pxPerRem: 24, width: 1920, height: 1080, aspectRatioName: 'hdtv', base: true},
 * 	{name: 'uw-uxga', pxPerRem: 24, width: 2560, height: 1080, aspectRatioName: 'cinema'},
 * 	{name: 'uhd',     pxPerRem: 48, width: 3840, height: 2160, aspectRatioName: 'hdtv'}
 * ]);
 * ```
 *
 * @function
 * @memberof ui/resolution
 * @param {Object[]}    types    An array of objects containing screen configuration data, as in the
 *                            preceding example.
 * @returns {undefined}
 * @public
 */


function defineScreenTypes(types) {
  if (types) screenTypes = types;

  for (var i = 0; i < screenTypes.length; i++) {
    if (screenTypes[i]['base']) baseScreen = screenTypes[i];
  }

  init();
}
/**
 * Fetches the name of the screen type that best matches the current screen size.
 *
 * The best match is defined as the screen type that is the closest to the screen resolution without
 * going over. ("The Price is Right" style.)
 *
 * @function
 * @memberof ui/resolution
 * @param {Object}    rez    Optional measurement scheme. Must include `height` and `width` properties.
 * @returns {String}         Screen type (e.g., `'fhd'`, `'uhd'`, etc.)
 * @public
 */


function getScreenType(rez) {
  rez = rez || workspaceBounds;
  var types = screenTypes;
  var bestMatch = types[types.length - 1].name; // Blindly set the first screen type, in case no matches are found later.

  orientation = 'landscape';

  if (rez.height > rez.width) {
    orientation = 'portrait';
    var swap = rez.width;
    rez.width = rez.height;
    rez.height = swap;
  } // Loop through resolutions, last->first, largest->smallest


  for (var i = types.length - 1; i >= 0; i--) {
    // Does the current resolution fit inside this screenType definition? If so, save it as the current best match.
    if (rez.height <= types[i].height && rez.width <= types[i].width) {
      bestMatch = types[i].name;
    }
  } // Return the name of the closest fitting set of dimensions.


  return bestMatch;
}
/**
 * Calculate the base rem font size.
 *
 * This is how the magic happens. This accepts an optional `screenType` name. If one isn't provided,
 * the currently detected screen type is used. This uses the config option `orientationHandling`,
 * which when set to "scale" and the screen is in portrait orientation, will dynamically calculate
 * what the base font size should be, if the width were proportionally scaled down to fit in the portrait space.
 *
 * To use, put the following in your application code:
 * ```
 * import ri from '@enact/ui/resolution';
 *
 * ri.config.orientationHandling = 'scale';
 * ri.init();
 * ```
 *
 * This has no effect if the screen is in landscape, or if `orientationHandling` is unset.
 *
 * @function
 * @memberof ui/resolution
 * @param {String}    type    Screen type to base size the calculation on. If no
 *                            screen type is provided, the current screen type will be used.
 * @returns {String}          The calculated pixel size (with unit suffix. Ex: "24px").
 * @public
 */


function calculateFontSize(type) {
  var scrObj = getScreenTypeObject(type);
  var size;

  if (orientation === 'portrait' && config.orientationHandling === 'scale') {
    size = scrObj.height / scrObj.width * scrObj.pxPerRem;
  } else {
    size = scrObj.pxPerRem;
  }

  return size + 'px';
}
/**
 * @function
 * @memberof ui/resolution
 * @param {String}    size     A valid CSS measurement to be applied as the base document font size.
 * @private
 * @returns {undefined}
 */


function updateBaseFontSize(size) {
  if (typeof window === 'object') {
    document.documentElement.style.fontSize = size;
  }
}
/**
 * Returns the CSS classes for the given `type`.
 *
 * @function
 * @memberof ui/resolution
 * @param {String}    type    Screen type
 * @returns {String}          CSS class names
 * @public
 */


function getResolutionClasses() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : screenType;
  var classes = [];

  if (orientation) {
    classes.push('enact-orientation-' + orientation);
  }

  if (type) {
    classes.push('enact-res-' + type.toLowerCase());
    var scrObj = getScreenTypeObject(type);

    if (scrObj.aspectRatioName) {
      classes.push('enact-aspect-ratio-' + scrObj.aspectRatioName.toLowerCase());
    }
  }

  return classes.join(' ');
}
/**
 * Returns the ratio of pixels per rem for the given `type` to the pixels per rem for the base type.
 *
 * @function
 * @memberof ui/resolution
 * @param  {String}    type    Screen type
 *
 * @returns {Number}           ratio
 */


function getRiRatio() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : screenType;

  if (type && baseScreen) {
    var ratio = getUnitToPixelFactors(type) / getUnitToPixelFactors(baseScreen.name);

    if (type === screenType) {
      // cache this if it's for our current screen type.
      riRatio = ratio;
    }

    return ratio;
  }

  return 1;
}
/**
 * Returns the pixels per rem for the given `type`.
 *
 * @memberof ui/resolution
 * @param {String}    type    Screen type
 *
 * @returns {Number}          pixels per rem
 */


function getUnitToPixelFactors() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : screenType;

  if (type) {
    return getScreenTypeObject(type).pxPerRem;
  }

  return 1;
}
/**
 * Calculates the aspect ratio of the specified screen type.
 *
 * If no screen type is provided, the current screen type is used.
 *
 * @function
 * @memberof ui/resolution
 * @param {String}    type    Screen type whose aspect ratio will be calculated. If no screen
 *                            type is provided, the current screen type is used.
 * @returns {Number}          The calculated screen ratio (e.g., `1.333`, `1.777`, `2.333`, etc.)
 * @public
 */


function getAspectRatio(type) {
  var scrObj = getScreenTypeObject(type);

  if (scrObj.width && scrObj.height) {
    return scrObj.width / scrObj.height;
  }

  return 1;
}
/**
 * Returns the name of the aspect ratio for a specified screen type, or for the default
 * screen type if none is provided.
 *
 * @function
 * @memberof ui/resolution
 * @param {String}    type    Screen type whose aspect ratio name will be returned. If no
 *                            screen type is provided, the current screen type will be used.
 * @returns {String}          The name of the screen type's aspect ratio
 * @public
 */


function getAspectRatioName(type) {
  var scrObj = getScreenTypeObject(type);
  return scrObj.aspectRatioName || 'standard';
}
/**
 * Takes a provided pixel value and performs a scaling operation based on the current
 * screen type.
 *
 * @function
 * @memberof ui/resolution
 * @param {Number}    px    The quantity of standard-resolution pixels to scale to the
 *                          current screen resolution.
 * @returns {Number}        The scaled value based on the current screen scaling factor
 * @public
 */


function scale(px) {
  return (riRatio || getRiRatio()) * px;
}
/**
 * Convert to various unit formats.
 *
 * Useful for converting pixels to a resolution-independent
 * measurement method, like "rem". Other units are available if defined in the
 * {@link ui/resolution.unitToPixelFactors} object.
 *
 * Example:
 * ```
 * import ri from '@enact/ui/resolution';
 *
 * // Do calculations and get back the desired CSS unit.
 * var frameWidth = 250,
 *     frameWithMarginInches = ri.unit( 10 + frameWidth + 10, 'in' ), // '2.8125in' == frameWithMarginInches
 *     frameWithMarginRems = ri.unit( 10 + frameWidth + 10, 'rem' ); // '22.5rem' == frameWithMarginRems
 * ```
 *
 * @function
 * @memberof ui/resolution
 * @param {String|Number}     pixels    The pixels or math to convert to the unit ("px" suffix in String
 *                                       format is permitted. ex: `'20px'`)
 * @param {String}            toUnit    The name of the unit to convert to.
 *
 * @returns {String|undefined}          Resulting conversion in CSS safe format, in case of malformed input, `undefined`
 * @public
 */


function unit(pixels, toUnit) {
  if (!toUnit || !unitToPixelFactors[toUnit]) return;
  if (typeof pixels === 'string' && pixels.substr(-2) === 'px') pixels = parseInt(pixels.substr(0, pixels.length - 2));
  if (typeof pixels !== 'number') return;
  return pixels / unitToPixelFactors[toUnit] + '' + toUnit;
}
/**
 * Shorthand for when you know you need to scale some pixel value and have it converted to "rem" for
 * proper scaling.
 *
 * This runs {@link ui/resolution.scale} and {@link ui/resolution.unit} together.
 *
 * @function
 * @memberof ui/resolution
 * @param {Number}    pixels    The quantity of standard-resolution pixels to scale to rems
 *
 * @returns {String|undefined}  Resulting conversion or, in case of malformed input, `undefined`
 * @public
 */


var scaleToRem = function scaleToRem(pixels) {
  return unit(scale(pixels), 'rem');
};
/**
 * The default configurable options for {@link ui/resolution.selectSrc}. Additional resolutions
 * may be added.
 *
 * @typedef {Object} selectSrcOptions
 * @memberof ui/resolution
 * @property {String}    [hd]    HD / 720p Resolution image asset source URI/URL
 * @property {String}    [fhd]   FHD / 1080p Resolution image asset source URI/URL
 * @property {String}    [uhd]   UHD / 4K Resolution image asset source URI/URL
 */

/**
 * Selects the ideal image asset from a set of assets, based on various screen
 * resolutions: HD (720p), FHD (1080p), UHD (4k).
 *
 * When a `src` argument is provided, `selectSrc()` will choose the best image with
 * respect to the current screen resolution. `src` may be either the traditional
 * string, which will pass straight through, or a hash/object of screen types and
 * their asset sources (keys:screen and values:src). The image sources will be used
 * when the screen resolution is less than or equal to the provided screen types.
 *
 * Example:
 * ```
 * // Take advantage of the multi-res mode
 * import {Image} from '@enact/ui/Image';
 *
 * const src = {
 *     'hd': 'http://lorempixel.com/64/64/city/1/',
 *     'fhd': 'http://lorempixel.com/128/128/city/1/',
 *     'uhd': 'http://lorempixel.com/256/256/city/1/'
 * };
 * ...
 * <Image src={src} ... />
 * ...
 * ```
 *
 * @function
 * @memberof ui/resolution
 * @param {String|ui/resolution.selectSrcSrcOptions} src       A string containing a single image
 *                                                             source or a key/value hash/object
 *                                                             containing keys representing screen
 *                                                             types (`'hd'`, `'fhd'`, `'uhd'`,
 *                                                             etc.) and values containing the asset
 *                                                             source for that target screen
 *                                                             resolution.
 *
 * @returns {String}                                           The chosen source, given the string
 *                                                             or hash provided
 * @public
 */


exports.scaleToRem = scaleToRem;

function selectSrc(src) {
  if (typeof src != 'string' && src) {
    var newSrc = src.fhd || src.uhd || src.hd;
    var types = screenTypes; // loop through resolutions

    for (var i = types.length - 1; i >= 0; i--) {
      var t = types[i].name;
      if (screenType === t && src[t]) newSrc = src[t];
    }

    src = newSrc;
  }

  return src;
}
/**
 * This will need to be re-run any time the screen size changes, so all the values can be re-cached.
 *
 * @function
 * @memberof ui/resolution
 * @param {Object}    args    A hash of options. The key `measurementNode` is used to as the node,
 *                            typically the root element, to measure and use as the dimensions for
 *                            the `screenType`.
 *
 * @returns {undefined}
 * @public
 */


function init() {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var measurementNode = args.measurementNode;
  updateWorkspaceBounds(measurementNode);
  screenType = getScreenType();
  screenTypeObject = getScreenTypeObject();
  unitToPixelFactors.rem = getUnitToPixelFactors();
  riRatio = getRiRatio();
  updateBaseFontSize(calculateFontSize());
}
/**
 * The current configuration
 *
 * @type {Object}
 * @memberof ui/resolution
 * @private
 */


exports.config = config = Object.assign({}, configDefaults);

/***/ }),

/***/ "./node_modules/@enact/webos/LS2Request/LS2Request.js":
/*!************************************************************!*\
  !*** ./node_modules/@enact/webos/LS2Request/LS2Request.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _util = __webpack_require__(/*! @enact/core/util */ "./node_modules/@enact/core/util/util.js");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var refs = {};

var adjustPath = function adjustPath(path) {
  if (!/^(luna|palm):\/\//.test(path)) path = 'luna://' + path;
  if (path.slice(-1) !== '/') path += '/';
  return path;
}; // default handlers


var failureHandler = function failureHandler(_ref) {
  var errorText = _ref.errorText;
  return console.error("LS2Request: ".concat(errorText));
};

var timeoutHandler = function timeoutHandler(_ref2) {
  var errorText = _ref2.errorText;
  return console.warn("LS2Request: ".concat(errorText));
};
/**
 * A class for managing LS2 Requests.
 *
 * @memberof webos/LS2Request
 * @class
 */


var LS2Request = /*#__PURE__*/function () {
  /**
   * Create a new LS2 request
   *
   * @memberof webos/LS2Request.LS2Request
   * @constructor
   */
  function LS2Request() {
    var _this = this;

    _classCallCheck(this, LS2Request);

    this.timeoutJob = new _util.Job(function (_ref3) {
      var onTimeout = _ref3.onTimeout,
          timeout = _ref3.timeout;
      onTimeout({
        errorCode: -2,
        errorText: "Request timed out after ".concat(timeout, " ms."),
        returnValue: false
      }); // cancel the request

      _this.cancel();
    });
    this.bridge = null;
    this.subscribe = false;
  }
  /**
   * Send a request to an LS2 service method.
   *
   * @method
   * @memberof webos/LS2Request.LS2Request.prototype
   * @param {Object} options Options for the LS2 Request call
   * @param {String} options.service The name of the LS2 service.
   * @param {String} options.method The name of the method.
   * @param {Object} options.parameters Any parameters required by the service method.
   * @param {Function} options.onSuccess The success handler for the request.
   * @param {Function} options.onFailure The failure handler for the request.
   * @param {Function} options.onComplete The handler to run when the request
   *	is completed, regardless of return status.
   * @param {Function} options.onTimeout The handler to run when the request
   *	times out.  Used in conjunction with `timeout`.
   * @param {Boolean} options.subscribe Subscribe to service methods that support subscription.
   * @param {Number} options.timeout The delay in milliseconds to wait for the request to return.
   * @returns {webos/LS2Request}
   * @public
   */


  _createClass(LS2Request, [{
    key: "send",
    value: function send(_ref4) {
      var _ref4$service = _ref4.service,
          service = _ref4$service === void 0 ? '' : _ref4$service,
          _ref4$method = _ref4.method,
          method = _ref4$method === void 0 ? '' : _ref4$method,
          _ref4$parameters = _ref4.parameters,
          parameters = _ref4$parameters === void 0 ? {} : _ref4$parameters,
          _ref4$onSuccess = _ref4.onSuccess,
          onSuccess = _ref4$onSuccess === void 0 ? null : _ref4$onSuccess,
          _ref4$onFailure = _ref4.onFailure,
          onFailure = _ref4$onFailure === void 0 ? null : _ref4$onFailure,
          _ref4$onComplete = _ref4.onComplete,
          onComplete = _ref4$onComplete === void 0 ? null : _ref4$onComplete,
          _ref4$onTimeout = _ref4.onTimeout,
          onTimeout = _ref4$onTimeout === void 0 ? timeoutHandler : _ref4$onTimeout,
          _ref4$subscribe = _ref4.subscribe,
          subscribe = _ref4$subscribe === void 0 ? false : _ref4$subscribe,
          _ref4$timeout = _ref4.timeout,
          timeout = _ref4$timeout === void 0 ? 0 : _ref4$timeout;
      this.cancelled = false;

      if (!onFailure && !onComplete) {
        onFailure = failureHandler;
      }

      if (typeof window !== 'object' || !window.PalmServiceBridge) {
        /* eslint no-unused-expressions: ["error", { "allowShortCircuit": true }]*/
        if (onFailure) onFailure({
          errorCode: -1,
          errorText: 'PalmServiceBridge not found.',
          returnValue: false
        });
        if (onComplete) onComplete({
          errorCode: -1,
          errorText: 'PalmServiceBridge not found.',
          returnValue: false
        });
        console.error('PalmServiceBridge not found.');
        return;
      }

      if (this.ts && refs[this.ts]) {
        delete refs[this.ts];
      }

      this.subscribe = subscribe;

      if (this.subscribe) {
        parameters.subscribe = this.subscribe;
      }

      if (parameters.subscribe) {
        this.subscribe = parameters.subscribe;
      }

      this.ts = performance.now();
      refs[this.ts] = this; // eslint-disable-next-line no-undef

      this.bridge = new PalmServiceBridge();
      this.bridge.onservicecallback = this.callback.bind(this, onSuccess, onFailure, onComplete);

      if (timeout) {
        this.timeoutJob.startAfter(timeout, {
          onTimeout: onTimeout,
          timeout: timeout
        });
      }

      this.bridge.call(adjustPath(service) + method, JSON.stringify(parameters));
      return this;
    }
  }, {
    key: "callback",
    value: function callback(onSuccess, onFailure, onComplete, msg) {
      if (this.cancelled) {
        return;
      } // remove timeout job


      this.timeoutJob.stop();
      var parsedMsg;

      if (msg == null) {
        parsedMsg = {
          errorCode: -1,
          errorText: "Invalid response: ".concat(msg),
          returnValue: false
        };
      } else {
        try {
          parsedMsg = JSON.parse(msg);
        } catch (e) {
          parsedMsg = {
            errorCode: -1,
            errorText: msg,
            returnValue: false
          };
        }
      }

      if (parsedMsg.errorCode || parsedMsg.returnValue === false) {
        if (onFailure) {
          onFailure(parsedMsg);
        }
      } else if (onSuccess) {
        onSuccess(parsedMsg);
      }

      if (onComplete) {
        onComplete(parsedMsg);
      }

      if (!this.subscribe) {
        this.cancel();
      }
    }
    /**
     * Cancel the current LS2 request.
     *
     * @method
     * @memberof webos/LS2Request.LS2Request.prototype
     * @returns {undefined}
     * @public
     */

  }, {
    key: "cancel",
    value: function cancel() {
      // remove timeout job
      this.timeoutJob.stop();
      this.cancelled = true;

      if (this.bridge) {
        this.bridge.cancel();
        this.bridge = null;
      }

      if (this.ts && refs[this.ts]) {
        delete refs[this.ts];
      }
    }
  }]);

  return LS2Request;
}();

exports["default"] = LS2Request;

/***/ }),

/***/ "./src/App/App.js":
/*!************************!*\
  !*** ./src/App/App.js ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/esm/react-router-dom.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _views_First__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/First */ "./src/views/First.js");
/* harmony import */ var _views_Loading__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/Loading */ "./src/views/Loading.js");
/* harmony import */ var _views_Main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../views/Main */ "./src/views/Main.js");
/* harmony import */ var _views_Video__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../views/Video */ "./src/views/Video.js");
/* harmony import */ var _views_Final__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../views/Final */ "./src/views/Final.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
var _jsxFileName = "C:\\Users\\jjunh\\esw\\2022ESWContest_webOS_3013\\main-HomeTraining\\wallpad\\exercise\\exercise_app\\src\\App\\App.js";









const App = () => {
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(react_router_dom__WEBPACK_IMPORTED_MODULE_7__.HashRouter, {
    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(react_router_dom__WEBPACK_IMPORTED_MODULE_8__.Switch, {
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(react_router_dom__WEBPACK_IMPORTED_MODULE_8__.Route, {
        path: "/",
        exact: true,
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(_views_First__WEBPACK_IMPORTED_MODULE_1__["default"], {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 15,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 14,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(react_router_dom__WEBPACK_IMPORTED_MODULE_8__.Route, {
        path: "/load",
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(_views_Loading__WEBPACK_IMPORTED_MODULE_2__["default"], {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 18,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 17,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(react_router_dom__WEBPACK_IMPORTED_MODULE_8__.Route, {
        path: "/main",
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(_views_Main__WEBPACK_IMPORTED_MODULE_3__["default"], {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 21,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 20,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(react_router_dom__WEBPACK_IMPORTED_MODULE_8__.Route, {
        path: "/video",
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(_views_Video__WEBPACK_IMPORTED_MODULE_4__["default"], {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 24,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 23,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(react_router_dom__WEBPACK_IMPORTED_MODULE_8__.Route, {
        path: "/final",
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(_views_Final__WEBPACK_IMPORTED_MODULE_5__["default"], {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 27,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 26,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 13,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 12,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ __webpack_exports__["default"] = (App);

/***/ }),

/***/ "./src/reportWebVitals.js":
/*!********************************!*\
  !*** ./src/reportWebVitals.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    __webpack_require__.e(/*! import() */ "node_modules_web-vitals_dist_web-vitals_js").then(__webpack_require__.bind(__webpack_require__, /*! web-vitals */ "./node_modules/web-vitals/dist/web-vitals.js")).then(_ref => {
      let {
        getCLS,
        getFID,
        getFCP,
        getLCP,
        getTTFB
      } = _ref;
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

/* harmony default export */ __webpack_exports__["default"] = (reportWebVitals);

/***/ }),

/***/ "./src/views/Final.js":
/*!****************************!*\
  !*** ./src/views/Final.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Final_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Final.css */ "./src/views/Final.css");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
var _jsxFileName = "C:\\Users\\jjunh\\esw\\2022ESWContest_webOS_3013\\main-HomeTraining\\wallpad\\exercise\\exercise_app\\src\\views\\Final.js";





const Final = () => {
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
    className: "final"
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 7,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ __webpack_exports__["default"] = (Final);

/***/ }),

/***/ "./src/views/First.js":
/*!****************************!*\
  !*** ./src/views/First.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! styled-components */ "./node_modules/styled-components/dist/styled-components.browser.esm.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _enact_webos_LS2Request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @enact/webos/LS2Request */ "./node_modules/@enact/webos/LS2Request/LS2Request.js");
/* harmony import */ var _First_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./First.css */ "./src/views/First.css");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
var _jsxFileName = "C:\\Users\\jjunh\\esw\\2022ESWContest_webOS_3013\\main-HomeTraining\\wallpad\\exercise\\exercise_app\\src\\views\\First.js";






const StyledButton = styled_components__WEBPACK_IMPORTED_MODULE_4__["default"].button`  
  font-size: 40px;
  font-weight: 700;
  padding: 20px 40px;
  border: none;
  border-radius: 25px;
  color: white;
  background-color: rgb(100,131,149,0.5);
  border: white;
  &:hover{
    color: rgb(157,211,243);
    background-color: white;
    box-shadow: 0 0 10px 0 rgb(157,211,243) inset, 0 0 10px 4px rgb(157,211,243);
  }
}
`;

const First = () => {
  const [ch, setch] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_5__.useHistory)();
  const bridge = new _enact_webos_LS2Request__WEBPACK_IMPORTED_MODULE_1__["default"]();
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    console.log("cam on");
    let params = {};
    let lsRequest = {
      service: "luna://com.exercisedemo.app.service",
      method: "serviceStart",
      parameters: params,
      onSuccess: msg => {
        console.log(msg);
      },
      onFailure: err => {
        console.log(err);
      }
    };
    bridge.send(lsRequest);
  }, []);

  const changeBut = () => {
    const butText = document.getElementById('but');
    butText.innerText = "녹화 종료";
    console.log("녹화 종료");
    setch(prevch => !prevch);
    let params = {};
    let lsRequest = {
      service: "luna://com.exercisedemo.app.service",
      method: "record",
      parameters: params,
      onSuccess: msg => {
        console.log(msg);
      },
      onFailure: err => {
        console.log(err);
      }
    };
    bridge.send(lsRequest);
  };

  const ifbut = () => {
    console.log("페이지 이동");
    history.push('/load');
  };

  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("div", {
    className: "first",
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("div", {
      className: "app-title",
      children: "\uC6B4\uB3D9 \uBCF4\uC870"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 73,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("div", {
      className: "tem",
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("div", {
        className: "but",
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(StyledButton, {
          id: "but",
          onClick: ch ? ifbut : changeBut,
          children: "\uB179\uD654 \uC2DC\uC791"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 76,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 75,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("div", {
        className: "content",
        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("p", {
          children: "step1 : \uD5C8\uB9AC \uD3B4\uAE30"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 79,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("p", {
          children: "step2 : \uD314 \uAD7D\uD788\uAE30"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 80,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("p", {
          children: "step3 : \uD314 \uD3B4\uAE30"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 81,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 78,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 74,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 72,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ __webpack_exports__["default"] = (First);

/***/ }),

/***/ "./src/views/Loading.js":
/*!******************************!*\
  !*** ./src/views/Loading.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gif_spinner_gif__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gif/spinner.gif */ "./src/gif/spinner.gif");
/* harmony import */ var _Loading_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Loading.css */ "./src/views/Loading.css");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _enact_webos_LS2Request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @enact/webos/LS2Request */ "./node_modules/@enact/webos/LS2Request/LS2Request.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
var _jsxFileName = "C:\\Users\\jjunh\\esw\\2022ESWContest_webOS_3013\\main-HomeTraining\\wallpad\\exercise\\exercise_app\\src\\views\\Loading.js";







const Loading = props => {
  //const [loading, setLoading] = useState(true);
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_5__.useHistory)();
  const bridge = new _enact_webos_LS2Request__WEBPACK_IMPORTED_MODULE_3__["default"]();
  var res, obj;
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    console.log("effect");
    let params = {};
    let lsRequest = {
      service: "luna://com.exercisedemo.app.service",
      method: "child",
      parameters: params,
      onSuccess: msg => {
        res = msg.reply;
        console.log(res);
        console.log(typeof res);
        obj = JSON.parse(res);
        console.log(typeof obj);
        console.log(obj.img); //console.log(res.count)

        nextPage(); //setTimeout(() => nextPage(), 5000);
      },
      onFailure: err => {
        console.log(err);
      }
    };
    bridge.send(lsRequest);
  }, []);

  const nextPage = () => {
    history.push({
      pathname: '/main',
      state: obj
    }); //history.push('/main');
  };

  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)("div", {
    className: "load",
    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)("img", {
      src: _gif_spinner_gif__WEBPACK_IMPORTED_MODULE_1__,
      style: {
        "width": "200px",
        "display": "flex"
      }
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 44,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 43,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ __webpack_exports__["default"] = (Loading);

/***/ }),

/***/ "./src/views/Main.js":
/*!***************************!*\
  !*** ./src/views/Main.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! styled-components */ "./node_modules/styled-components/dist/styled-components.browser.esm.js");
/* harmony import */ var _Main_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Main.css */ "./src/views/Main.css");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
var _jsxFileName = "C:\\Users\\jjunh\\esw\\2022ESWContest_webOS_3013\\main-HomeTraining\\wallpad\\exercise\\exercise_app\\src\\views\\Main.js";






const StyledButton = styled_components__WEBPACK_IMPORTED_MODULE_3__["default"].button`
  font-size: 40px;
  font-weight: 700;
  padding: 20px 40px;
  border: none;
  border-radius: 25px;
  color: white;
  background-color: rgb(100,131,149,0.5);
  border: white;
  &:hover{
    color: rgb(157,211,243);
    background-color: white;
    box-shadow: 0 0 10px 0 rgb(157,211,243) inset, 0 0 10px 4px rgb(157,211,243);
  }
`;

const Main = () => {
  const location = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_4__.useLocation)();
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_4__.useHistory)();
  console.log(location.state.count);

  const mainPage = () => {
    history.push({
      pathname: '/video'
    });
  };

  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
    className: "main",
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
      className: "app-title",
      children: "\uC6B4\uB3D9 \uBD84\uC11D"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
      className: "tem",
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        className: "analysis",
        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("p", {
          children: ["\uCD1D \uD69F\uC218: ", location.state.count]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 37,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("p", {
          children: ["\uC2DC\uAC04 : ", location.state.time]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 38,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("p", {
          children: ["5\uCD08\uB2F9 \uCD5C\uB300 \uD69F\uC218 : ", location.state.max]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 39,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("p", {
          children: ["5\uCD08\uB2F9 \uCD5C\uC18C \uD69F\uC218 : ", location.state.min]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 40,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 36,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        className: "png",
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("img", {
          src: `data:image/png;base64,${location.state.img.slice(2, -1)}`
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 43,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 42,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        className: "but",
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(StyledButton, {
          onClick: mainPage,
          children: "\uB179\uD654\uC601\uC0C1\uBCF4\uAE30"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 46,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 45,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 35,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 33,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ __webpack_exports__["default"] = (Main);

/***/ }),

/***/ "./src/views/Video.js":
/*!****************************!*\
  !*** ./src/views/Video.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _enact_sandstone_VideoPlayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @enact/sandstone/VideoPlayer */ "./node_modules/@enact/sandstone/VideoPlayer/VideoPlayer.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _enact_sandstone_ThemeDecorator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @enact/sandstone/ThemeDecorator */ "./node_modules/@enact/sandstone/ThemeDecorator/ThemeDecorator.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
var _jsxFileName = "C:\\Users\\jjunh\\esw\\2022ESWContest_webOS_3013\\main-HomeTraining\\wallpad\\exercise\\exercise_app\\src\\views\\Video.js";






const Video = () => {
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_3__.useHistory)();

  const backBtn = () => {
    history.push('/final');
  };

  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(_enact_sandstone_VideoPlayer__WEBPACK_IMPORTED_MODULE_0__["default"], {
      onBack: backBtn,
      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("source", {
        src: "http://3.34.50.139:8000/exercise/output.mp4",
        type: "video/mp4"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 16,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 15,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 14,
    columnNumber: 5
  }, undefined);
};

Video.propTypes = {
  backBtn: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().func)
};
/* harmony default export */ __webpack_exports__["default"] = ((0,_enact_sandstone_ThemeDecorator__WEBPACK_IMPORTED_MODULE_1__["default"])(Video));

/***/ }),

/***/ "./node_modules/@enact/sandstone/ActionGuide/ActionGuide.module.css":
/*!**************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ActionGuide/ActionGuide.module.css ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"actionGuide":"enact_sandstone_ActionGuide_ActionGuide_actionGuide","label":"enact_sandstone_ActionGuide_ActionGuide_label","icon":"enact_sandstone_ActionGuide_ActionGuide_icon"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/Button/Button.module.css":
/*!****************************************************************!*\
  !*** ./node_modules/@enact/sandstone/Button/Button.module.css ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"button":"enact_sandstone_Button_Button_button","focusStatic":"enact_sandstone_Button_Button_focusStatic","focusExpand":"enact_sandstone_Button_Button_focusExpand","client":"enact_sandstone_Button_Button_client","icon":"enact_sandstone_Button_Button_icon","hasIcon":"enact_sandstone_Button_Button_hasIcon","iconAfter":"enact_sandstone_Button_Button_iconAfter","red":"enact_sandstone_Button_Button_red","green":"enact_sandstone_Button_Button_green","yellow":"enact_sandstone_Button_Button_yellow","blue":"enact_sandstone_Button_Button_blue","minWidth":"enact_sandstone_Button_Button_minWidth","marquee":"enact_sandstone_Button_Button_marquee","hasColor":"enact_sandstone_Button_Button_hasColor","small":"enact_sandstone_Button_Button_small","iconOnly":"enact_sandstone_Button_Button_iconOnly","iconBefore":"enact_sandstone_Button_Button_iconBefore","large":"enact_sandstone_Button_Button_large","collapsable":"enact_sandstone_Button_Button_collapsable","collapsed":"enact_sandstone_Button_Button_collapsed","bg":"enact_sandstone_Button_Button_bg","opaque":"enact_sandstone_Button_Button_opaque","transparent":"enact_sandstone_Button_Button_transparent","selected":"enact_sandstone_Button_Button_selected","pressed":"enact_sandstone_Button_Button_pressed"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/Icon/Icon.module.css":
/*!************************************************************!*\
  !*** ./node_modules/@enact/sandstone/Icon/Icon.module.css ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"icon":"enact_sandstone_Icon_Icon_icon","large":"enact_sandstone_Icon_Icon_large","medium":"enact_sandstone_Icon_Icon_medium","small":"enact_sandstone_Icon_Icon_small","tiny":"enact_sandstone_Icon_Icon_tiny","dingbat":"enact_sandstone_Icon_Icon_dingbat"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/Image/Image.module.css":
/*!**************************************************************!*\
  !*** ./node_modules/@enact/sandstone/Image/Image.module.css ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"image":"enact_sandstone_Image_Image_image"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/MediaPlayer/MediaControls.module.css":
/*!****************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/MediaPlayer/MediaControls.module.css ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"controlsFrame":"enact_sandstone_MediaPlayer_MediaControls_controlsFrame","hidden":"enact_sandstone_MediaPlayer_MediaControls_hidden","mediaControls":"enact_sandstone_MediaPlayer_MediaControls_mediaControls","actionGuide":"enact_sandstone_MediaPlayer_MediaControls_actionGuide","moreComponents":"enact_sandstone_MediaPlayer_MediaControls_moreComponents","moreButtonsComponents":"enact_sandstone_MediaPlayer_MediaControls_moreButtonsComponents","button":"enact_sandstone_MediaPlayer_MediaControls_button","client":"enact_sandstone_MediaPlayer_MediaControls_client","bg":"enact_sandstone_MediaPlayer_MediaControls_bg"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/MediaPlayer/MediaSlider.module.css":
/*!**************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/MediaPlayer/MediaSlider.module.css ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"sliderFrame":"enact_sandstone_MediaPlayer_MediaSlider_sliderFrame","hidden":"enact_sandstone_MediaPlayer_MediaSlider_hidden","mediaSlider":"enact_sandstone_MediaPlayer_MediaSlider_mediaSlider","knob":"enact_sandstone_MediaPlayer_MediaSlider_knob","active":"enact_sandstone_MediaPlayer_MediaSlider_active","pressed":"enact_sandstone_MediaPlayer_MediaSlider_pressed","scrubbing":"enact_sandstone_MediaPlayer_MediaSlider_scrubbing","slider":"enact_sandstone_MediaPlayer_MediaSlider_slider","bar":"enact_sandstone_MediaPlayer_MediaSlider_bar","fill":"enact_sandstone_MediaPlayer_MediaSlider_fill"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/MediaPlayer/Times.module.css":
/*!********************************************************************!*\
  !*** ./node_modules/@enact/sandstone/MediaPlayer/Times.module.css ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"times":"enact_sandstone_MediaPlayer_Times_times","separator":"enact_sandstone_MediaPlayer_Times_separator"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/ProgressBar/ProgressBar.module.css":
/*!**************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ProgressBar/ProgressBar.module.css ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"progressBar":"enact_sandstone_ProgressBar_ProgressBar_progressBar","showAnchor":"enact_sandstone_ProgressBar_ProgressBar_showAnchor","bar":"enact_sandstone_ProgressBar_ProgressBar_bar","horizontal":"enact_sandstone_ProgressBar_ProgressBar_horizontal","vertical":"enact_sandstone_ProgressBar_ProgressBar_vertical","radial":"enact_sandstone_ProgressBar_ProgressBar_radial","fill":"enact_sandstone_ProgressBar_ProgressBar_fill","load":"enact_sandstone_ProgressBar_ProgressBar_load","highlighted":"enact_sandstone_ProgressBar_ProgressBar_highlighted"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/ProgressBar/ProgressBarTooltip.module.css":
/*!*********************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ProgressBar/ProgressBarTooltip.module.css ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"tooltip":"enact_sandstone_ProgressBar_ProgressBarTooltip_tooltip","tooltipLabel":"enact_sandstone_ProgressBar_ProgressBarTooltip_tooltipLabel","horizontal":"enact_sandstone_ProgressBar_ProgressBarTooltip_horizontal","above":"enact_sandstone_ProgressBar_ProgressBarTooltip_above","below":"enact_sandstone_ProgressBar_ProgressBarTooltip_below","vertical":"enact_sandstone_ProgressBar_ProgressBarTooltip_vertical","left":"enact_sandstone_ProgressBar_ProgressBarTooltip_left","before":"enact_sandstone_ProgressBar_ProgressBarTooltip_before","after":"enact_sandstone_ProgressBar_ProgressBarTooltip_after","right":"enact_sandstone_ProgressBar_ProgressBarTooltip_right","radial":"enact_sandstone_ProgressBar_ProgressBarTooltip_radial","center":"enact_sandstone_ProgressBar_ProgressBarTooltip_center"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/Slider/Slider.module.css":
/*!****************************************************************!*\
  !*** ./node_modules/@enact/sandstone/Slider/Slider.module.css ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"slider":"enact_sandstone_Slider_Slider_slider","progressBar":"enact_sandstone_Slider_Slider_progressBar","bar":"enact_sandstone_Slider_Slider_bar","knob":"enact_sandstone_Slider_Slider_knob","showAnchor":"enact_sandstone_Slider_Slider_showAnchor","horizontal":"enact_sandstone_Slider_Slider_horizontal","vertical":"enact_sandstone_Slider_Slider_vertical","fill":"enact_sandstone_Slider_Slider_fill","load":"enact_sandstone_Slider_Slider_load","active":"enact_sandstone_Slider_Slider_active","pressed":"enact_sandstone_Slider_Slider_pressed","noFill":"enact_sandstone_Slider_Slider_noFill","tooltip":"enact_sandstone_Slider_Slider_tooltip","above":"enact_sandstone_Slider_Slider_above","below":"enact_sandstone_Slider_Slider_below","left":"enact_sandstone_Slider_Slider_left","before":"enact_sandstone_Slider_Slider_before","after":"enact_sandstone_Slider_Slider_after","right":"enact_sandstone_Slider_Slider_right"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/Spinner/Spinner.module.css":
/*!******************************************************************!*\
  !*** ./node_modules/@enact/sandstone/Spinner/Spinner.module.css ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"spinner":"enact_sandstone_Spinner_Spinner_spinner","bg":"enact_sandstone_Spinner_Spinner_bg","decorator":"enact_sandstone_Spinner_Spinner_decorator","spin":"enact_sandstone_Spinner_Spinner_spin","fan1":"enact_sandstone_Spinner_Spinner_fan1","fan2":"enact_sandstone_Spinner_Spinner_fan2","fan3":"enact_sandstone_Spinner_Spinner_fan3","fan4":"enact_sandstone_Spinner_Spinner_fan4","cap":"enact_sandstone_Spinner_Spinner_cap","rotate1":"enact_sandstone_Spinner_Spinner_rotate1","rotate2":"enact_sandstone_Spinner_Spinner_rotate2","rotate3":"enact_sandstone_Spinner_Spinner_rotate3","rotate4":"enact_sandstone_Spinner_Spinner_rotate4","client":"enact_sandstone_Spinner_Spinner_client","medium":"enact_sandstone_Spinner_Spinner_medium","small":"enact_sandstone_Spinner_Spinner_small","content":"enact_sandstone_Spinner_Spinner_content","running":"enact_sandstone_Spinner_Spinner_running","transparent":"enact_sandstone_Spinner_Spinner_transparent","spinnerContainer":"enact_sandstone_Spinner_Spinner_spinnerContainer","blockClickOn":"enact_sandstone_Spinner_Spinner_blockClickOn","scrim":"enact_sandstone_Spinner_Spinner_scrim"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/ThemeDecorator/ThemeDecorator.module.css":
/*!********************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ThemeDecorator/ThemeDecorator.module.css ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"root":"enact_sandstone_ThemeDecorator_ThemeDecorator_root","bg":"enact_sandstone_ThemeDecorator_ThemeDecorator_bg"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/TooltipDecorator/Tooltip.module.css":
/*!***************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/TooltipDecorator/Tooltip.module.css ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"tooltip":"enact_sandstone_TooltipDecorator_Tooltip_tooltip","tooltipArrow":"enact_sandstone_TooltipDecorator_Tooltip_tooltipArrow","rightArrow":"enact_sandstone_TooltipDecorator_Tooltip_rightArrow","leftArrow":"enact_sandstone_TooltipDecorator_Tooltip_leftArrow","centerArrow":"enact_sandstone_TooltipDecorator_Tooltip_centerArrow","middleArrow":"enact_sandstone_TooltipDecorator_Tooltip_middleArrow","tooltipLabel":"enact_sandstone_TooltipDecorator_Tooltip_tooltipLabel","marquee":"enact_sandstone_TooltipDecorator_Tooltip_marquee","multi":"enact_sandstone_TooltipDecorator_Tooltip_multi","balloon":"enact_sandstone_TooltipDecorator_Tooltip_balloon","transparent":"enact_sandstone_TooltipDecorator_Tooltip_transparent","below":"enact_sandstone_TooltipDecorator_Tooltip_below","above":"enact_sandstone_TooltipDecorator_Tooltip_above","left":"enact_sandstone_TooltipDecorator_Tooltip_left","right":"enact_sandstone_TooltipDecorator_Tooltip_right","topArrow":"enact_sandstone_TooltipDecorator_Tooltip_topArrow","bottomArrow":"enact_sandstone_TooltipDecorator_Tooltip_bottomArrow","absolute":"enact_sandstone_TooltipDecorator_Tooltip_absolute","tooltipAnchor":"enact_sandstone_TooltipDecorator_Tooltip_tooltipAnchor","relative":"enact_sandstone_TooltipDecorator_Tooltip_relative"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/Feedback.module.css":
/*!***********************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/Feedback.module.css ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"feedback":"enact_sandstone_VideoPlayer_Feedback_feedback","hidden":"enact_sandstone_VideoPlayer_Feedback_hidden","message":"enact_sandstone_VideoPlayer_Feedback_message","icon":"enact_sandstone_VideoPlayer_Feedback_icon"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/FeedbackTooltip.module.css":
/*!******************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/FeedbackTooltip.module.css ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"feedbackTooltip":"enact_sandstone_VideoPlayer_FeedbackTooltip_feedbackTooltip","shift":"enact_sandstone_VideoPlayer_FeedbackTooltip_shift","content":"enact_sandstone_VideoPlayer_FeedbackTooltip_content","hidden":"enact_sandstone_VideoPlayer_FeedbackTooltip_hidden","thumbnail":"enact_sandstone_VideoPlayer_FeedbackTooltip_thumbnail","image":"enact_sandstone_VideoPlayer_FeedbackTooltip_image","thumbnailDeactivated":"enact_sandstone_VideoPlayer_FeedbackTooltip_thumbnailDeactivated","alignmentContainer":"enact_sandstone_VideoPlayer_FeedbackTooltip_alignmentContainer","arrowContainer":"enact_sandstone_VideoPlayer_FeedbackTooltip_arrowContainer","arrow":"enact_sandstone_VideoPlayer_FeedbackTooltip_arrow"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/MediaTitle.module.css":
/*!*************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/MediaTitle.module.css ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"titleFrame":"enact_sandstone_VideoPlayer_MediaTitle_titleFrame","hidden":"enact_sandstone_VideoPlayer_MediaTitle_hidden","title":"enact_sandstone_VideoPlayer_MediaTitle_title","infoVisible":"enact_sandstone_VideoPlayer_MediaTitle_infoVisible","infoComponents":"enact_sandstone_VideoPlayer_MediaTitle_infoComponents","visible":"enact_sandstone_VideoPlayer_MediaTitle_visible","badgeTextIcon":"enact_sandstone_VideoPlayer_MediaTitle_badgeTextIcon","fontLgIcons":"enact_sandstone_VideoPlayer_MediaTitle_fontLgIcons"});

/***/ }),

/***/ "./node_modules/@enact/sandstone/VideoPlayer/VideoPlayer.module.css":
/*!**************************************************************************!*\
  !*** ./node_modules/@enact/sandstone/VideoPlayer/VideoPlayer.module.css ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"videoPlayer":"enact_sandstone_VideoPlayer_VideoPlayer_videoPlayer","video":"enact_sandstone_VideoPlayer_VideoPlayer_video","preloadVideo":"enact_sandstone_VideoPlayer_VideoPlayer_preloadVideo","overlay":"enact_sandstone_VideoPlayer_VideoPlayer_overlay","fullscreen":"enact_sandstone_VideoPlayer_VideoPlayer_fullscreen","miniFeedback":"enact_sandstone_VideoPlayer_VideoPlayer_miniFeedback","back":"enact_sandstone_VideoPlayer_VideoPlayer_back","bottom":"enact_sandstone_VideoPlayer_VideoPlayer_bottom","lift":"enact_sandstone_VideoPlayer_VideoPlayer_lift","hidden":"enact_sandstone_VideoPlayer_VideoPlayer_hidden","sliderContainer":"enact_sandstone_VideoPlayer_VideoPlayer_sliderContainer","infoFrame":"enact_sandstone_VideoPlayer_VideoPlayer_infoFrame","controlsHandleAbove":"enact_sandstone_VideoPlayer_VideoPlayer_controlsHandleAbove","scrim":"enact_sandstone_VideoPlayer_VideoPlayer_scrim"});

/***/ }),

/***/ "./node_modules/@enact/ui/Button/Button.module.css":
/*!*********************************************************!*\
  !*** ./node_modules/@enact/ui/Button/Button.module.css ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"button":"enact_ui_Button_Button_button","bg":"enact_ui_Button_Button_bg","client":"enact_ui_Button_Button_client","icon":"enact_ui_Button_Button_icon","hasIcon":"enact_ui_Button_Button_hasIcon","large":"enact_ui_Button_Button_large","minWidth":"enact_ui_Button_Button_minWidth","small":"enact_ui_Button_Button_small","decoration":"enact_ui_Button_Button_decoration","selected":"enact_ui_Button_Button_selected","pressed":"enact_ui_Button_Button_pressed"});

/***/ }),

/***/ "./node_modules/@enact/ui/FloatingLayer/FloatingLayer.module.css":
/*!***********************************************************************!*\
  !*** ./node_modules/@enact/ui/FloatingLayer/FloatingLayer.module.css ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"floatingLayer":"enact_ui_FloatingLayer_FloatingLayer_floatingLayer"});

/***/ }),

/***/ "./node_modules/@enact/ui/FloatingLayer/Scrim.module.css":
/*!***************************************************************!*\
  !*** ./node_modules/@enact/ui/FloatingLayer/Scrim.module.css ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"scrim":"enact_ui_FloatingLayer_Scrim_scrim","transparent":"enact_ui_FloatingLayer_Scrim_transparent","translucent":"enact_ui_FloatingLayer_Scrim_translucent"});

/***/ }),

/***/ "./node_modules/@enact/ui/Icon/Icon.module.css":
/*!*****************************************************!*\
  !*** ./node_modules/@enact/ui/Icon/Icon.module.css ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"icon":"enact_ui_Icon_Icon_icon","flipBoth":"enact_ui_Icon_Icon_flipBoth","flipHorizontal":"enact_ui_Icon_Icon_flipHorizontal","flipVertical":"enact_ui_Icon_Icon_flipVertical","dingbat":"enact_ui_Icon_Icon_dingbat","large":"enact_ui_Icon_Icon_large","pressed":"enact_ui_Icon_Icon_pressed","small":"enact_ui_Icon_Icon_small"});

/***/ }),

/***/ "./node_modules/@enact/ui/Image/Image.module.css":
/*!*******************************************************!*\
  !*** ./node_modules/@enact/ui/Image/Image.module.css ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"image":"enact_ui_Image_Image_image","fit":"enact_ui_Image_Image_fit","fill":"enact_ui_Image_Image_fill","img":"enact_ui_Image_Image_img"});

/***/ }),

/***/ "./node_modules/@enact/ui/Marquee/Marquee.module.css":
/*!***********************************************************!*\
  !*** ./node_modules/@enact/ui/Marquee/Marquee.module.css ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"marquee":"enact_ui_Marquee_Marquee_marquee","text":"enact_ui_Marquee_Marquee_text","willAnimate":"enact_ui_Marquee_Marquee_willAnimate","animate":"enact_ui_Marquee_Marquee_animate","spacing":"enact_ui_Marquee_Marquee_spacing"});

/***/ }),

/***/ "./node_modules/@enact/ui/ProgressBar/ProgressBar.module.css":
/*!*******************************************************************!*\
  !*** ./node_modules/@enact/ui/ProgressBar/ProgressBar.module.css ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"progressBar":"enact_ui_ProgressBar_ProgressBar_progressBar","bar":"enact_ui_ProgressBar_ProgressBar_bar","fill":"enact_ui_ProgressBar_ProgressBar_fill","load":"enact_ui_ProgressBar_ProgressBar_load","vertical":"enact_ui_ProgressBar_ProgressBar_vertical","horizontal":"enact_ui_ProgressBar_ProgressBar_horizontal","radial":"enact_ui_ProgressBar_ProgressBar_radial","fillOverHalf":"enact_ui_ProgressBar_ProgressBar_fillOverHalf","loadOverHalf":"enact_ui_ProgressBar_ProgressBar_loadOverHalf"});

/***/ }),

/***/ "./node_modules/@enact/ui/Slider/Slider.module.css":
/*!*********************************************************!*\
  !*** ./node_modules/@enact/ui/Slider/Slider.module.css ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"slider":"enact_ui_Slider_Slider_slider","knob":"enact_ui_Slider_Slider_knob","horizontal":"enact_ui_Slider_Slider_horizontal","pressed":"enact_ui_Slider_Slider_pressed","noFill":"enact_ui_Slider_Slider_noFill","vertical":"enact_ui_Slider_Slider_vertical"});

/***/ }),

/***/ "./node_modules/@enact/ui/Spinner/Spinner.module.css":
/*!***********************************************************!*\
  !*** ./node_modules/@enact/ui/Spinner/Spinner.module.css ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({"spinner":"enact_ui_Spinner_Spinner_spinner","centered":"enact_ui_Spinner_Spinner_centered","running":"enact_ui_Spinner_Spinner_running","spinnerContainer":"enact_ui_Spinner_Spinner_spinnerContainer","scrim":"enact_ui_Spinner_Spinner_scrim","blockClickOn":"enact_ui_Spinner_Spinner_blockClickOn"});

/***/ }),

/***/ "./src/views/Final.css":
/*!*****************************!*\
  !*** ./src/views/Final.css ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({});

/***/ }),

/***/ "./src/views/First.css":
/*!*****************************!*\
  !*** ./src/views/First.css ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({});

/***/ }),

/***/ "./src/views/Loading.css":
/*!*******************************!*\
  !*** ./src/views/Loading.css ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({});

/***/ }),

/***/ "./src/views/Main.css":
/*!****************************!*\
  !*** ./src/views/Main.css ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({});

/***/ }),

/***/ "./node_modules/@enact/spotlight/styles/debug.less":
/*!*********************************************************!*\
  !*** ./node_modules/@enact/spotlight/styles/debug.less ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin
/* harmony default export */ __webpack_exports__["default"] = ({});

/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/assert.js":
/*!*********************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/assert.js ***!
  \*********************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(/*! ./internal/errors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/internal/errors.js"),
    _require$codes = _require.codes,
    ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
    ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;

var AssertionError = __webpack_require__(/*! ./internal/assert/assertion_error */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/internal/assert/assertion_error.js");

var _require2 = __webpack_require__(/*! util/ */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/util.js"),
    inspect = _require2.inspect;

var _require$types = (__webpack_require__(/*! util/ */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/util.js").types),
    isPromise = _require$types.isPromise,
    isRegExp = _require$types.isRegExp;

var objectAssign = Object.assign ? Object.assign : (__webpack_require__(/*! es6-object-assign */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/es6-object-assign/index.js").assign);
var objectIs = Object.is ? Object.is : __webpack_require__(/*! object-is */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/index.js");
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;

function lazyLoadComparison() {
  var comparison = __webpack_require__(/*! ./internal/util/comparisons */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/internal/util/comparisons.js");

  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex


var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = ["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '', '', "\\u000b", '\\f', '', "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f"];

var escapeFn = function escapeFn(str) {
  return meta[str.charCodeAt(0)];
};

var warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new AssertionError(obj);
}

function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;

  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }

    if (argsLen === 2) operator = '!=';
  }

  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };

  if (message !== undefined) {
    errArgs.message = message;
  }

  var err = new AssertionError(errArgs);

  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }

  throw err;
}

assert.fail = fail; // The AssertionError is defined in internal/error.

assert.AssertionError = AssertionError;

function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;

    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }

    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.


function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  innerOk.apply(void 0, [ok, args.length].concat(args));
}

assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.

/* eslint-disable no-restricted-properties */

assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.


assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
}; // The equivalence assertion tests a deep equality relation.


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
}; // The non-equivalence assertion tests for any deep inequality.


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */


assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (!objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};

var Comparison = function Comparison(obj, keys, actual) {
  var _this = this;

  _classCallCheck(this, Comparison);

  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
};

function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }

    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}

function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.

    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    } // Handle primitives properly.


    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }

    var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
    // as well.

    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }

    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
        return;
      }

      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  } // Guard instanceof against arrow functions as they don't have a prototype.


  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }

  try {
    fn();
  } catch (e) {
    return e;
  }

  return NO_EXCEPTION_SENTINEL;
}

function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.
  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.
  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}

function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;

    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn(); // Fail in case no promise is returned.

      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }

    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    }).catch(function (e) {
      return e;
    });
  });
}

function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }

    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }

    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }

  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';

    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }

    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }

  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}

function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;

  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }

  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }

  throw actual;
}

assert.throws = function throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
};

assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};

assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};

assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};

assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';

    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }

    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    }); // Make sure we actually have a stack trace!

    var origStack = err.stack;

    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift(); // Filter all frames existing in err.stack.

      var tmp1 = newErr.stack.split('\n');

      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);

        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }

      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }

    throw newErr;
  }
}; // Expose a strict only variant of assert


function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  innerOk.apply(void 0, [strict, args.length].concat(args));
}

assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/internal/assert/assertion_error.js":
/*!**********************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/internal/assert/assertion_error.js ***!
  \**********************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js");
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c


function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = __webpack_require__(/*! util/ */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/util.js"),
    inspect = _require.inspect;

var _require2 = __webpack_require__(/*! ../errors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/internal/errors.js"),
    ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));

  while (count) {
    str += str;
    count--;
  }

  str += str.substring(0, maxCount - str.length);
  return str;
}

var blue = '';
var green = '';
var red = '';
var white = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
}; // Comparing short primitives should just show === / !== instead of using the
// diff.

var kMaxShortLength = 10;

function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}

function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}

function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.

  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  } // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.


  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.

    if (inputLength <= kMaxShortLength) {
      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;

      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        } // Ignore the first characters.


        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  } // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).


  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];

  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }

    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }

  var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.


    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white);

      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }

    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }

  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white).concat(end);
    skipped = true;
  }

  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }

  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");

  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;

    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the expected line to the cache.

      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
      printedLines++; // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the actual line to the result.

      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
      printedLines++; // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.

      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //

      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }

      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }

          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        } // Mark the current line as the last diverging one.


        lastPos = i; // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.

        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
        printedLines += 2; // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = ''; // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.

        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    } // Inspected object to big (Show ~20 rows max)


    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
  }

  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}

var AssertionError =
/*#__PURE__*/
function (_Error) {
  _inherits(AssertionError, _Error);

  function AssertionError(options) {
    var _this;

    _classCallCheck(this, AssertionError);

    if (_typeof(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }

    var message = options.message,
        operator = options.operator,
        stackStartFn = options.stackStartFn;
    var actual = options.actual,
        expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;

    if (message != null) {
      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white = '';
          red = '';
        }
      } // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.


      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }

      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.

        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        } // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.


        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white);

          while (res.length > 27) {
            res.pop();
          }
        } // Only print a single input.


        if (res.length === 1) {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
        } else {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
        }
      } else {
        var _res = inspectValue(actual);

        var other = '';
        var knownOperators = kReadableOperator[operator];

        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);

          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));

          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }

          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }

          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }

        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
      }
    }

    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;

    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
    } // Create error message including the error code in the name.


    _this.stack; // Reset the name.

    _this.name = 'AssertionError';
    return _possibleConstructorReturn(_this);
  }

  _createClass(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: inspect.custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread({}, ctx, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);

  return AssertionError;
}(_wrapNativeSuper(Error));

module.exports = AssertionError;

/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/internal/errors.js":
/*!******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/internal/errors.js ***!
  \******************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

/* eslint node-core/documented-errors: "error" */

/* eslint node-core/alphabetize-errors: "error" */

/* eslint node-core/prefer-util-format-errors: "error" */
 // The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var codes = {}; // Lazy loaded

var assert;
var util;

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inherits(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      var _this;

      _classCallCheck(this, NodeError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
      _this.code = code;
      return _this;
    }

    return NodeError;
  }(Base);

  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/assert.js");
  assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'

  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } // TODO(BridgeAR): Improve the output by showing `null` and similar.


  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util === undefined) util = __webpack_require__(/*! util/ */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/util.js");
  var inspected = util.inspect(value);

  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }

  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;

  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof(value));
  }

  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/assert.js");
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });

  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;

    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;

    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }

  return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/internal/util/comparisons.js":
/*!****************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/internal/util/comparisons.js ***!
  \****************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var regexFlagsSupported = /a/g.flags !== undefined;

var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};

var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};

var objectIs = Object.is ? Object.is : __webpack_require__(/*! object-is */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/index.js");
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(/*! is-nan */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/index.js");

function uncurryThis(f) {
  return f.call.bind(f);
}

var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);

var _require$types = (__webpack_require__(/*! util/ */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/util.js").types),
    isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
    isArrayBufferView = _require$types.isArrayBufferView,
    isDate = _require$types.isDate,
    isMap = _require$types.isMap,
    isRegExp = _require$types.isRegExp,
    isSet = _require$types.isSet,
    isNativeError = _require$types.isNativeError,
    isBoxedPrimitive = _require$types.isBoxedPrimitive,
    isNumberObject = _require$types.isNumberObject,
    isStringObject = _require$types.isStringObject,
    isBooleanObject = _require$types.isBooleanObject,
    isBigIntObject = _require$types.isBigIntObject,
    isSymbolObject = _require$types.isSymbolObject,
    isFloat32Array = _require$types.isFloat32Array,
    isFloat64Array = _require$types.isFloat64Array;

function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;

  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  } // The maximum size for an array is 2 ** 32 -1.


  return key.length === 10 && key >= Math.pow(2, 32);
}

function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */


function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3; // Check if they have the same source and flags

function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}

function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }

  return true;
}

function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}

function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}

function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }

  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }

  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }

  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }

  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.


function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs(val1, val2) : true;
  } // Check more closely if val1 and val2 are equal.


  if (strict) {
    if (_typeof(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
    }

    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }

    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof(val1) !== 'object') {
      if (val2 === null || _typeof(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }

      return false;
    }

    if (val2 === null || _typeof(val2) !== 'object') {
      return false;
    }
  }

  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);

  if (val1Tag !== val2Tag) {
    return false;
  }

  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }

    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (keys1.length !== keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.


  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }

  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    } // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.


    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);

    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (_keys.length !== _keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }

  return keyCheck(val1, val2, strict, memos, kNoIterator);
}

function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}

function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.

    if (aKeys.length !== bKeys.length) {
      return false;
    }
  } // Cheap key test


  var i = 0;

  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }

  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);

    if (symbolKeysA.length !== 0) {
      var count = 0;

      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];

        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }

          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }

      var symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }

  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  } // Use memos to handle cycles.


  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);

    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);

      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }

    memos.position++;
  }

  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1.delete(val1);
  memos.val2.delete(val2);
  return areEq;
}

function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];

    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set.delete(val2);
      return true;
    }
  }

  return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').


function findLooseMatchingPrimitives(prim) {
  switch (_typeof(prim)) {
    case 'undefined':
      return null;

    case 'object':
      // Only pass in null as object!
      return undefined;

    case 'symbol':
      return false;

    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through

    case 'number':
      if (numberIsNaN(prim)) {
        return false;
      }

  }

  return true;
}

function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}

function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);

  if (altValue != null) {
    return altValue;
  }

  var curB = b.get(altValue);

  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }

  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}

function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);

  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.

    if (_typeof(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      } // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.


      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.

      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }

      if (set === null) {
        set = new Set();
      }

      set.add(val);
    }
  }

  if (set !== null) {
    var bValues = arrayFromSet(b);

    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i]; // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.

      if (_typeof(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];

    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }

  return false;
}

function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);

  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray(aEntries[i], 2),
        key = _aEntries$i[0],
        item1 = _aEntries$i[1];

    if (_typeof(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }

      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);

      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
        // keys.

        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;

        if (set === null) {
          set = new Set();
        }

        set.add(key);
      }
    }
  }

  if (set !== null) {
    var bEntries = arrayFromMap(b);

    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
          key = _bEntries$_i[0],
          item = _bEntries$_i[1];

      if (_typeof(key) === 'object' && key !== null) {
        if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;

  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);

        for (; i < keysA.length; i++) {
          var key = keysA[i];

          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }

        if (keysA.length !== Object.keys(b).length) {
          return false;
        }

        return true;
      }
    }
  } // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:


  for (i = 0; i < keys.length; i++) {
    var _key = keys[i];

    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
      return false;
    }
  }

  return true;
}

function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}

function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}

module.exports = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/call-bind/callBound.js":
/*!*********************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/call-bind/callBound.js ***!
  \*********************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/get-intrinsic/index.js");

var callBind = __webpack_require__(/*! ./ */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/call-bind/index.js");

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/call-bind/index.js":
/*!*****************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/call-bind/index.js ***!
  \*****************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/get-intrinsic/index.js");

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js":
/*!**************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js ***!
  \**************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*global window, global*/
var util = __webpack_require__(/*! util */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/util.js")
var assert = __webpack_require__(/*! assert */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/assert/build/assert.js")
function now() { return new Date().getTime() }

var slice = Array.prototype.slice
var console
var times = {}

if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.console) {
    console = __webpack_require__.g.console
} else if (typeof window !== "undefined" && window.console) {
    console = window.console
} else {
    console = {}
}

var functions = [
    [log, "log"],
    [info, "info"],
    [warn, "warn"],
    [error, "error"],
    [time, "time"],
    [timeEnd, "timeEnd"],
    [trace, "trace"],
    [dir, "dir"],
    [consoleAssert, "assert"]
]

for (var i = 0; i < functions.length; i++) {
    var tuple = functions[i]
    var f = tuple[0]
    var name = tuple[1]

    if (!console[name]) {
        console[name] = f
    }
}

module.exports = console

function log() {}

function info() {
    console.log.apply(console, arguments)
}

function warn() {
    console.log.apply(console, arguments)
}

function error() {
    console.warn.apply(console, arguments)
}

function time(label) {
    times[label] = now()
}

function timeEnd(label) {
    var time = times[label]
    if (!time) {
        throw new Error("No such label: " + label)
    }

    delete times[label]
    var duration = now() - time
    console.log(label + ": " + duration + "ms")
}

function trace() {
    var err = new Error()
    err.name = "Trace"
    err.message = util.format.apply(null, arguments)
    console.error(err.stack)
}

function dir(object) {
    console.log(util.inspect(object) + "\n")
}

function consoleAssert(expression) {
    if (!expression) {
        var arr = slice.call(arguments, 1)
        assert.ok(false, util.format.apply(null, arr))
    }
}


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/a-callable.js":
/*!******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/a-callable.js ***!
  \******************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/try-to-string.js");

var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/add-to-unscopables.js":
/*!**************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/add-to-unscopables.js ***!
  \**************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/well-known-symbol.js");
var create = __webpack_require__(/*! ../internals/object-create */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-create.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-define-property.js").f);

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  defineProperty(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/an-object.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/an-object.js ***!
  \*****************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-object.js");

var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw $TypeError($String(argument) + ' is not an object');
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/array-includes.js":
/*!**********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/array-includes.js ***!
  \**********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-indexed-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-absolute-index.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/length-of-array-like.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/classof-raw.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/classof-raw.js ***!
  \*******************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-uncurry-this.js");

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/copy-constructor-properties.js":
/*!***********************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***********************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/has-own-property.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/own-keys.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/create-non-enumerable-property.js":
/*!**************************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/create-non-enumerable-property.js ***!
  \**************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/create-property-descriptor.js");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/create-property-descriptor.js":
/*!**********************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/create-property-descriptor.js ***!
  \**********************************************************************************************************************************/
/***/ (function(module) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/define-built-in-accessor.js":
/*!********************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/define-built-in-accessor.js ***!
  \********************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var makeBuiltIn = __webpack_require__(/*! ../internals/make-built-in */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/make-built-in.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, name, descriptor) {
  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });
  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });
  return defineProperty.f(target, name, descriptor);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/define-built-in.js":
/*!***********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/define-built-in.js ***!
  \***********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/create-non-enumerable-property.js");
var makeBuiltIn = __webpack_require__(/*! ../internals/make-built-in */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/make-built-in.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/define-global-property.js");

module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty(key, value);
  } else {
    if (!options.unsafe) delete O[key];
    else if (O[key]) simple = true;
    if (simple) O[key] = value;
    else createNonEnumerableProperty(O, key, value);
  } return O;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/define-global-property.js":
/*!******************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/define-global-property.js ***!
  \******************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/global.js");

// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/descriptors.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/descriptors.js ***!
  \*******************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js");

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/document-create-element.js":
/*!*******************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/document-create-element.js ***!
  \*******************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-object.js");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/engine-user-agent.js":
/*!*************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/engine-user-agent.js ***!
  \*************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/engine-v8-version.js":
/*!*************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/engine-v8-version.js ***!
  \*************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/global.js");
var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/engine-user-agent.js");

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/enum-bug-keys.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/enum-bug-keys.js ***!
  \*********************************************************************************************************************/
/***/ (function(module) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/export.js":
/*!**************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/export.js ***!
  \**************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/global.js");
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-get-own-property-descriptor.js").f);
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/create-non-enumerable-property.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/define-built-in.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/define-global-property.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/copy-constructor-properties.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-forced.js");

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js":
/*!*************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js ***!
  \*************************************************************************************************************/
/***/ (function(module) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-bind-native.js":
/*!****************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-bind-native.js ***!
  \****************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-call.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-call.js ***!
  \*********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-bind-native.js");

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-name.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-name.js ***!
  \*********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/descriptors.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/has-own-property.js");

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-uncurry-this.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-uncurry-this.js ***!
  \*****************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-bind-native.js");

var FunctionPrototype = Function.prototype;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;
var uncurryThis = NATIVE_BIND && bind.bind(call, call);

module.exports = NATIVE_BIND ? function (fn) {
  return fn && uncurryThis(fn);
} : function (fn) {
  return fn && function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/get-built-in.js":
/*!********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/get-built-in.js ***!
  \********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js");

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/get-method.js":
/*!******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/get-method.js ***!
  \******************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/a-callable.js");

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/global.js":
/*!**************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/global.js ***!
  \**************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es-x/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/has-own-property.js":
/*!************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/has-own-property.js ***!
  \************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-uncurry-this.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-object.js");

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es-x/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/hidden-keys.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/hidden-keys.js ***!
  \*******************************************************************************************************************/
/***/ (function(module) {

module.exports = {};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/html.js":
/*!************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/html.js ***!
  \************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/ie8-dom-define.js":
/*!**********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/ie8-dom-define.js ***!
  \**********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/document-create-element.js");

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/indexed-object.js":
/*!**********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/indexed-object.js ***!
  \**********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/classof-raw.js");

var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : $Object(it);
} : $Object;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/inspect-source.js":
/*!**********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/inspect-source.js ***!
  \**********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-uncurry-this.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared-store.js");

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/internal-state.js":
/*!**********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/internal-state.js ***!
  \**********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/native-weak-map.js");
var global = __webpack_require__(/*! ../internals/global */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-uncurry-this.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-object.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/create-non-enumerable-property.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/has-own-property.js");
var shared = __webpack_require__(/*! ../internals/shared-store */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared-store.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/hidden-keys.js");

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = uncurryThis(store.get);
  var wmhas = uncurryThis(store.has);
  var wmset = uncurryThis(store.set);
  set = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget(store, it) || {};
  };
  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js ***!
  \*******************************************************************************************************************/
/***/ (function(module) {

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-forced.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-forced.js ***!
  \*****************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-object.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-object.js ***!
  \*****************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js");

module.exports = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-pure.js":
/*!***************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-pure.js ***!
  \***************************************************************************************************************/
/***/ (function(module) {

module.exports = false;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-symbol.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-symbol.js ***!
  \*****************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-is-prototype-of.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/use-symbol-as-uid.js");

var $Object = Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/length-of-array-like.js":
/*!****************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/length-of-array-like.js ***!
  \****************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toLength = __webpack_require__(/*! ../internals/to-length */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-length.js");

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/make-built-in.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/make-built-in.js ***!
  \*********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/has-own-property.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/descriptors.js");
var CONFIGURABLE_FUNCTION_NAME = (__webpack_require__(/*! ../internals/function-name */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-name.js").CONFIGURABLE);
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/inspect-source.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/internal-state.js");

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn = module.exports = function (value, name, options) {
  if (String(name).slice(0, 7) === 'Symbol(') {
    name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
    defineProperty(value, 'name', { value: name, configurable: true });
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/math-trunc.js":
/*!******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/math-trunc.js ***!
  \******************************************************************************************************************/
/***/ (function(module) {

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es-x/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/native-symbol.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/native-symbol.js ***!
  \*********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable es-x/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/engine-v8-version.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js");

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/native-weak-map.js":
/*!***********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/native-weak-map.js ***!
  \***********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/inspect-source.js");

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-create.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-create.js ***!
  \*********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* global ActiveXObject -- old IE, WSH */
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/an-object.js");
var definePropertiesModule = __webpack_require__(/*! ../internals/object-define-properties */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-define-properties.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/enum-bug-keys.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/hidden-keys.js");
var html = __webpack_require__(/*! ../internals/html */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/html.js");
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/document-create-element.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared-key.js");

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es-x/no-object-create -- safe
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-define-properties.js":
/*!********************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-define-properties.js ***!
  \********************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/descriptors.js");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(/*! ../internals/v8-prototype-define-bug */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/v8-prototype-define-bug.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-define-property.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/an-object.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-indexed-object.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-keys.js");

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es-x/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
  return O;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-define-property.js":
/*!******************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-define-property.js ***!
  \******************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/descriptors.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/ie8-dom-define.js");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(/*! ../internals/v8-prototype-define-bug */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/v8-prototype-define-bug.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/an-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-property-key.js");

var $TypeError = TypeError;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!******************************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \******************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/descriptors.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-call.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-property-is-enumerable.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/create-property-descriptor.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-indexed-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-property-key.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/has-own-property.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/ie8-dom-define.js");

// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-get-own-property-names.js":
/*!*************************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/enum-bug-keys.js");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!***************************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \***************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-is-prototype-of.js":
/*!******************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-is-prototype-of.js ***!
  \******************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-uncurry-this.js");

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-keys-internal.js":
/*!****************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-keys-internal.js ***!
  \****************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-uncurry-this.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/has-own-property.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-indexed-object.js");
var indexOf = (__webpack_require__(/*! ../internals/array-includes */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/array-includes.js").indexOf);
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/hidden-keys.js");

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-keys.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-keys.js ***!
  \*******************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/enum-bug-keys.js");

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es-x/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-property-is-enumerable.js":
/*!*************************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/ordinary-to-primitive.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/ordinary-to-primitive.js ***!
  \*****************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var call = __webpack_require__(/*! ../internals/function-call */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-call.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-object.js");

var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw $TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/own-keys.js":
/*!****************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/own-keys.js ***!
  \****************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/get-built-in.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-uncurry-this.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/object-get-own-property-symbols.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/an-object.js");

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/regexp-flags.js":
/*!********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/regexp-flags.js ***!
  \********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(/*! ../internals/an-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/an-object.js");

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.hasIndices) result += 'd';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/require-object-coercible.js":
/*!********************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/require-object-coercible.js ***!
  \********************************************************************************************************************************/
/***/ (function(module) {

var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw $TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared-key.js":
/*!******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared-key.js ***!
  \******************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var shared = __webpack_require__(/*! ../internals/shared */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/uid.js");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared-store.js":
/*!********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared-store.js ***!
  \********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/global.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/define-global-property.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});

module.exports = store;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared.js":
/*!**************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared.js ***!
  \**************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-pure.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared-store.js");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.22.8',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.22.8/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-absolute-index.js":
/*!*************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-absolute-index.js ***!
  \*************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-integer-or-infinity.js");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-indexed-object.js":
/*!*************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-indexed-object.js ***!
  \*************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/indexed-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-integer-or-infinity.js":
/*!******************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-integer-or-infinity.js ***!
  \******************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var trunc = __webpack_require__(/*! ../internals/math-trunc */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/math-trunc.js");

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-length.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-length.js ***!
  \*****************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-integer-or-infinity.js");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-object.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-object.js ***!
  \*****************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/require-object-coercible.js");

var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-primitive.js":
/*!********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-primitive.js ***!
  \********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var call = __webpack_require__(/*! ../internals/function-call */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-call.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-object.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-symbol.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/get-method.js");
var ordinaryToPrimitive = __webpack_require__(/*! ../internals/ordinary-to-primitive */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/ordinary-to-primitive.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/well-known-symbol.js");

var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-property-key.js":
/*!***********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-property-key.js ***!
  \***********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/to-primitive.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/is-symbol.js");

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/try-to-string.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/try-to-string.js ***!
  \*********************************************************************************************************************/
/***/ (function(module) {

var $String = String;

module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/uid.js":
/*!***********************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/uid.js ***!
  \***********************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/function-uncurry-this.js");

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/use-symbol-as-uid.js":
/*!*************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/use-symbol-as-uid.js ***!
  \*************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable es-x/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/native-symbol.js");

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/v8-prototype-define-bug.js":
/*!*******************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/v8-prototype-define-bug.js ***!
  \*******************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js");

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/well-known-symbol.js":
/*!*************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/well-known-symbol.js ***!
  \*************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/shared.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/has-own-property.js");
var uid = __webpack_require__(/*! ../internals/uid */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/uid.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/native-symbol.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/use-symbol-as-uid.js");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var symbolFor = Symbol && Symbol['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/modules/es.array.includes.js":
/*!***********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/modules/es.array.includes.js ***!
  \***********************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/export.js");
var $includes = (__webpack_require__(/*! ../internals/array-includes */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/array-includes.js").includes);
var fails = __webpack_require__(/*! ../internals/fails */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js");
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/add-to-unscopables.js");

// FF99+ bug
var BROKEN_ON_SPARSE = fails(function () {
  return !Array(1).includes();
});

// `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes
$({ target: 'Array', proto: true, forced: BROKEN_ON_SPARSE }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/modules/es.regexp.flags.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/modules/es.regexp.flags.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/descriptors.js");
var defineBuiltInAccessor = __webpack_require__(/*! ../internals/define-built-in-accessor */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/define-built-in-accessor.js");
var regExpFlags = __webpack_require__(/*! ../internals/regexp-flags */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/regexp-flags.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/core-js/internals/fails.js");

var RegExpPrototype = RegExp.prototype;

var FORCED = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
  return Object.getOwnPropertyDescriptor(RegExpPrototype, 'flags').get.call({ dotAll: true, sticky: true }) !== 'sy';
});

// `RegExp.prototype.flags` getter
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
if (FORCED) defineBuiltInAccessor(RegExpPrototype, 'flags', {
  configurable: true,
  get: regExpFlags
});


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/define-properties/index.js":
/*!*************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/define-properties/index.js ***!
  \*************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var keys = __webpack_require__(/*! object-keys */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-keys/index.js");
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var hasPropertyDescriptors = __webpack_require__(/*! has-property-descriptors */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-property-descriptors/index.js")();

var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value; // eslint-disable-line no-param-reassign
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/es6-object-assign/index.js":
/*!*************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/es6-object-assign/index.js ***!
  \*************************************************************************************************************/
/***/ (function(module) {

"use strict";
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */



function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/for-each/index.js":
/*!****************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/for-each/index.js ***!
  \****************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var isCallable = __webpack_require__(/*! is-callable */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-callable/index.js");

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (toStr.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

module.exports = forEach;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/get-intrinsic/index.js":
/*!*********************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/get-intrinsic/index.js ***!
  \*********************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(/*! has-symbols */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-symbols/index.js")();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var hasOwn = __webpack_require__(/*! has */ "./node_modules/has/src/index.js");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-property-descriptors/index.js":
/*!********************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-property-descriptors/index.js ***!
  \********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/get-intrinsic/index.js");

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
			return true;
		} catch (e) {
			// IE 8 has a broken defineProperty
			return false;
		}
	}
	return false;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!hasPropertyDescriptors()) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-symbols/index.js":
/*!*******************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-symbols/index.js ***!
  \*******************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(/*! ./shams */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-symbols/shams.js");

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-symbols/shams.js":
/*!*******************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-symbols/shams.js ***!
  \*******************************************************************************************************/
/***/ (function(module) {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-tostringtag/shams.js":
/*!***********************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-tostringtag/shams.js ***!
  \***********************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var hasSymbols = __webpack_require__(/*! has-symbols/shams */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-symbols/shams.js");

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-arguments/index.js":
/*!********************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-arguments/index.js ***!
  \********************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-tostringtag/shams.js")();
var callBound = __webpack_require__(/*! call-bind/callBound */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/call-bind/callBound.js");

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-callable/index.js":
/*!*******************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-callable/index.js ***!
  \*******************************************************************************************************/
/***/ (function(module) {

"use strict";


var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]';
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalized DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					// IE 6-8 uses `objectClass`
					return (str === ddaClass || str === objectClass) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		return strClass === fnClass || strClass === genClass || tryFunctionObject(value);
	};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-generator-function/index.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-generator-function/index.js ***!
  \*****************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-tostringtag/shams.js")();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/implementation.js":
/*!***********************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/implementation.js ***!
  \***********************************************************************************************************/
/***/ (function(module) {

"use strict";


/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
	return value !== value;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/index.js":
/*!**************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/index.js ***!
  \**************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var callBind = __webpack_require__(/*! call-bind */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/call-bind/index.js");
var define = __webpack_require__(/*! define-properties */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/define-properties/index.js");

var implementation = __webpack_require__(/*! ./implementation */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/implementation.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/polyfill.js");
var shim = __webpack_require__(/*! ./shim */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/shim.js");

var polyfill = callBind(getPolyfill(), Number);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/polyfill.js":
/*!*****************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/polyfill.js ***!
  \*****************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/implementation.js");

module.exports = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/shim.js":
/*!*************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/shim.js ***!
  \*************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var define = __webpack_require__(/*! define-properties */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/define-properties/index.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-nan/polyfill.js");

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function shimNumberIsNaN() {
	var polyfill = getPolyfill();
	define(Number, { isNaN: polyfill }, {
		isNaN: function testIsNaN() {
			return Number.isNaN !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-typed-array/index.js":
/*!**********************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-typed-array/index.js ***!
  \**********************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var forEach = __webpack_require__(/*! for-each */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/for-each/index.js");
var availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/available-typed-arrays/index.js");
var callBound = __webpack_require__(/*! call-bind/callBound */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/call-bind/callBound.js");

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-tostringtag/shams.js")();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = __webpack_require__(/*! es-abstract/helpers/getOwnPropertyDescriptor */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js");
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			toStrTags[typedArray] = descriptor.get;
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var anyTrue = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

module.exports = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) {
		var tag = $slice($toString(value), 8, -1);
		return $indexOf(typedArrays, tag) > -1;
	}
	if (!gOPD) { return false; }
	return tryTypedArrays(value);
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/implementation.js":
/*!**************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/implementation.js ***!
  \**************************************************************************************************************/
/***/ (function(module) {

"use strict";


var numberIsNaN = function (value) {
	return value !== value;
};

module.exports = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};



/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/index.js":
/*!*****************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/index.js ***!
  \*****************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var define = __webpack_require__(/*! define-properties */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/define-properties/index.js");
var callBind = __webpack_require__(/*! call-bind */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/call-bind/index.js");

var implementation = __webpack_require__(/*! ./implementation */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/implementation.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/polyfill.js");
var shim = __webpack_require__(/*! ./shim */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/shim.js");

var polyfill = callBind(getPolyfill(), Object);

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/polyfill.js":
/*!********************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/polyfill.js ***!
  \********************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/implementation.js");

module.exports = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/shim.js":
/*!****************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/shim.js ***!
  \****************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var getPolyfill = __webpack_require__(/*! ./polyfill */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-is/polyfill.js");
var define = __webpack_require__(/*! define-properties */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/define-properties/index.js");

module.exports = function shimObjectIs() {
	var polyfill = getPolyfill();
	define(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-keys/implementation.js":
/*!****************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-keys/implementation.js ***!
  \****************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(/*! ./isArguments */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-keys/isArguments.js"); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-keys/index.js":
/*!*******************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-keys/index.js ***!
  \*******************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(/*! ./isArguments */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-keys/isArguments.js");

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(/*! ./implementation */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-keys/implementation.js");

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-keys/isArguments.js":
/*!*************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/object-keys/isArguments.js ***!
  \*************************************************************************************************************/
/***/ (function(module) {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js":
/*!*****************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js ***!
  \*****************************************************************************************************/
/***/ (function(module) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/support/isBufferBrowser.js":
/*!******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************************************************************************/
/***/ (function(module) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/support/types.js":
/*!********************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/support/types.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



var isArgumentsObject = __webpack_require__(/*! is-arguments */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-arguments/index.js");
var isGeneratorFunction = __webpack_require__(/*! is-generator-function */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-generator-function/index.js");
var whichTypedArray = __webpack_require__(/*! which-typed-array */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/which-typed-array/index.js");
var isTypedArray = __webpack_require__(/*! is-typed-array */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-typed-array/index.js");

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/util.js":
/*!***********************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/util.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

/* provided dependency */ var process = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = __webpack_require__(/*! ./support/types */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/support/types.js");

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/which-typed-array/index.js":
/*!*************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/which-typed-array/index.js ***!
  \*************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var forEach = __webpack_require__(/*! for-each */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/for-each/index.js");
var availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/available-typed-arrays/index.js");
var callBound = __webpack_require__(/*! call-bind/callBound */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/call-bind/callBound.js");

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/has-tostringtag/shams.js")();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = __webpack_require__(/*! es-abstract/helpers/getOwnPropertyDescriptor */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js");
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		if (typeof g[typedArray] === 'function') {
			var arr = new g[typedArray]();
			if (Symbol.toStringTag in arr) {
				var proto = getPrototypeOf(arr);
				var descriptor = gOPD(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf(proto);
					descriptor = gOPD(superProto, Symbol.toStringTag);
				}
				toStrTags[typedArray] = descriptor.get;
			}
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var foundName = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};

var isTypedArray = __webpack_require__(/*! is-typed-array */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/is-typed-array/index.js");

module.exports = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
	return tryTypedArrays(value);
};


/***/ }),

/***/ "./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/memoize */ "./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js");


var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var isPropValid = /* #__PURE__ */(0,_emotion_memoize__WEBPACK_IMPORTED_MODULE_0__["default"])(function (prop) {
  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
  /* o */
  && prop.charCodeAt(1) === 110
  /* n */
  && prop.charCodeAt(2) < 91;
}
/* Z+1 */
);

/* harmony default export */ __webpack_exports__["default"] = (isPropValid);


/***/ }),

/***/ "./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function memoize(fn) {
  var cache = Object.create(null);
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

/* harmony default export */ __webpack_exports__["default"] = (memoize);


/***/ }),

/***/ "./node_modules/@emotion/stylis/dist/stylis.browser.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@emotion/stylis/dist/stylis.browser.esm.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function stylis_min (W) {
  function M(d, c, e, h, a) {
    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
      g = e.charCodeAt(l);
      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

      if (0 === b + n + v + m) {
        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
          switch (g) {
            case 32:
            case 9:
            case 59:
            case 13:
            case 10:
              break;

            default:
              f += e.charAt(l);
          }

          g = 59;
        }

        switch (g) {
          case 123:
            f = f.trim();
            q = f.charCodeAt(0);
            k = 1;

            for (t = ++l; l < B;) {
              switch (g = e.charCodeAt(l)) {
                case 123:
                  k++;
                  break;

                case 125:
                  k--;
                  break;

                case 47:
                  switch (g = e.charCodeAt(l + 1)) {
                    case 42:
                    case 47:
                      a: {
                        for (u = l + 1; u < J; ++u) {
                          switch (e.charCodeAt(u)) {
                            case 47:
                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
                                l = u + 1;
                                break a;
                              }

                              break;

                            case 10:
                              if (47 === g) {
                                l = u + 1;
                                break a;
                              }

                          }
                        }

                        l = u;
                      }

                  }

                  break;

                case 91:
                  g++;

                case 40:
                  g++;

                case 34:
                case 39:
                  for (; l++ < J && e.charCodeAt(l) !== g;) {
                  }

              }

              if (0 === k) break;
              l++;
            }

            k = e.substring(t, l);
            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

            switch (q) {
              case 64:
                0 < r && (f = f.replace(N, ''));
                g = f.charCodeAt(1);

                switch (g) {
                  case 100:
                  case 109:
                  case 115:
                  case 45:
                    r = c;
                    break;

                  default:
                    r = O;
                }

                k = M(c, r, k, g, a + 1);
                t = k.length;
                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
                if (0 < t) switch (g) {
                  case 115:
                    f = f.replace(da, ea);

                  case 100:
                  case 109:
                  case 45:
                    k = f + '{' + k + '}';
                    break;

                  case 107:
                    f = f.replace(fa, '$1 $2');
                    k = f + '{' + k + '}';
                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
                    break;

                  default:
                    k = f + k, 112 === h && (k = (p += k, ''));
                } else k = '';
                break;

              default:
                k = M(c, X(c, f, I), k, h, a + 1);
            }

            F += k;
            k = I = r = u = q = 0;
            f = '';
            g = e.charCodeAt(++l);
            break;

          case 125:
          case 59:
            f = (0 < r ? f.replace(N, '') : f).trim();
            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
              case 0:
                break;

              case 64:
                if (105 === g || 99 === g) {
                  G += f + e.charAt(l);
                  break;
                }

              default:
                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
            }
            I = r = u = q = 0;
            f = '';
            g = e.charCodeAt(++l);
        }
      }

      switch (g) {
        case 13:
        case 10:
          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
          z = 1;
          D++;
          break;

        case 59:
        case 125:
          if (0 === b + n + v + m) {
            z++;
            break;
          }

        default:
          z++;
          y = e.charAt(l);

          switch (g) {
            case 9:
            case 32:
              if (0 === n + m + b) switch (x) {
                case 44:
                case 58:
                case 9:
                case 32:
                  y = '';
                  break;

                default:
                  32 !== g && (y = ' ');
              }
              break;

            case 0:
              y = '\\0';
              break;

            case 12:
              y = '\\f';
              break;

            case 11:
              y = '\\v';
              break;

            case 38:
              0 === n + b + m && (r = I = 1, y = '\f' + y);
              break;

            case 108:
              if (0 === n + b + m + E && 0 < u) switch (l - u) {
                case 2:
                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

                case 8:
                  111 === K && (E = K);
              }
              break;

            case 58:
              0 === n + b + m && (u = l);
              break;

            case 44:
              0 === b + v + n + m && (r = 1, y += '\r');
              break;

            case 34:
            case 39:
              0 === b && (n = n === g ? 0 : 0 === n ? g : n);
              break;

            case 91:
              0 === n + b + v && m++;
              break;

            case 93:
              0 === n + b + v && m--;
              break;

            case 41:
              0 === n + b + m && v--;
              break;

            case 40:
              if (0 === n + b + m) {
                if (0 === q) switch (2 * x + 3 * K) {
                  case 533:
                    break;

                  default:
                    q = 1;
                }
                v++;
              }

              break;

            case 64:
              0 === b + v + n + m + u + k && (k = 1);
              break;

            case 42:
            case 47:
              if (!(0 < n + m + v)) switch (b) {
                case 0:
                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {
                    case 235:
                      b = 47;
                      break;

                    case 220:
                      t = l, b = 42;
                  }

                  break;

                case 42:
                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
              }
          }

          0 === b && (f += y);
      }

      K = x;
      x = g;
      l++;
    }

    t = p.length;

    if (0 < t) {
      r = c;
      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
      p = r.join(',') + '{' + p + '}';

      if (0 !== w * E) {
        2 !== w || L(p, 2) || (E = 0);

        switch (E) {
          case 111:
            p = p.replace(ha, ':-moz-$1') + p;
            break;

          case 112:
            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
        }

        E = 0;
      }
    }

    return G + p + F;
  }

  function X(d, c, e) {
    var h = c.trim().split(ia);
    c = h;
    var a = h.length,
        m = d.length;

    switch (m) {
      case 0:
      case 1:
        var b = 0;

        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
          c[b] = Z(d, c[b], e).trim();
        }

        break;

      default:
        var v = b = 0;

        for (c = []; b < a; ++b) {
          for (var n = 0; n < m; ++n) {
            c[v++] = Z(d[n] + ' ', h[b], e).trim();
          }
        }

    }

    return c;
  }

  function Z(d, c, e) {
    var h = c.charCodeAt(0);
    33 > h && (h = (c = c.trim()).charCodeAt(0));

    switch (h) {
      case 38:
        return c.replace(F, '$1' + d.trim());

      case 58:
        return d.trim() + c.replace(F, '$1' + d.trim());

      default:
        if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
    }

    return d + c;
  }

  function P(d, c, e, h) {
    var a = d + ';',
        m = 2 * c + 3 * e + 4 * h;

    if (944 === m) {
      d = a.indexOf(':', 9) + 1;
      var b = a.substring(d, a.length - 1).trim();
      b = a.substring(0, d).trim() + b + ';';
      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
    }

    if (0 === w || 2 === w && !L(a, 1)) return a;

    switch (m) {
      case 1015:
        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

      case 951:
        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

      case 963:
        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

      case 1009:
        if (100 !== a.charCodeAt(4)) break;

      case 969:
      case 942:
        return '-webkit-' + a + a;

      case 978:
        return '-webkit-' + a + '-moz-' + a + a;

      case 1019:
      case 983:
        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

      case 883:
        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
        break;

      case 932:
        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
          case 103:
            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

          case 115:
            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

          case 98:
            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
        }
        return '-webkit-' + a + '-ms-' + a + a;

      case 964:
        return '-webkit-' + a + '-ms-flex-' + a + a;

      case 1023:
        if (99 !== a.charCodeAt(8)) break;
        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

      case 1005:
        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

      case 1e3:
        b = a.substring(13).trim();
        c = b.indexOf('-') + 1;

        switch (b.charCodeAt(0) + b.charCodeAt(c)) {
          case 226:
            b = a.replace(G, 'tb');
            break;

          case 232:
            b = a.replace(G, 'tb-rl');
            break;

          case 220:
            b = a.replace(G, 'lr');
            break;

          default:
            return a;
        }

        return '-webkit-' + a + '-ms-' + b + a;

      case 1017:
        if (-1 === a.indexOf('sticky', 9)) break;

      case 975:
        c = (a = d).length - 10;
        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
          case 203:
            if (111 > b.charCodeAt(8)) break;

          case 115:
            a = a.replace(b, '-webkit-' + b) + ';' + a;
            break;

          case 207:
          case 102:
            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
        }

        return a + ';';

      case 938:
        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
          case 105:
            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

          case 115:
            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

          default:
            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
        }
        break;

      case 973:
      case 989:
        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

      case 931:
      case 953:
        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
        break;

      case 962:
        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
    }

    return a;
  }

  function L(d, c) {
    var e = d.indexOf(1 === c ? ':' : '{'),
        h = d.substring(0, 3 !== c ? e : 10);
    e = d.substring(e + 1, d.length - 1);
    return R(2 !== c ? h : h.replace(na, '$1'), e, c);
  }

  function ea(d, c) {
    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
  }

  function H(d, c, e, h, a, m, b, v, n, q) {
    for (var g = 0, x = c, w; g < A; ++g) {
      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
        case void 0:
        case !1:
        case !0:
        case null:
          break;

        default:
          x = w;
      }
    }

    if (x !== c) return x;
  }

  function T(d) {
    switch (d) {
      case void 0:
      case null:
        A = S.length = 0;
        break;

      default:
        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
          T(d[c]);
        } else Y = !!d | 0;
    }

    return T;
  }

  function U(d) {
    d = d.prefix;
    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
    return U;
  }

  function B(d, c) {
    var e = d;
    33 > e.charCodeAt(0) && (e = e.trim());
    V = e;
    e = [V];

    if (0 < A) {
      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
      void 0 !== h && 'string' === typeof h && (c = h);
    }

    var a = M(O, e, c, 0, 0);
    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
    V = '';
    E = 0;
    z = D = 1;
    return a;
  }

  var ca = /^\0+/g,
      N = /[\0\r\f]/g,
      aa = /: */g,
      ka = /zoo|gra/,
      ma = /([,: ])(transform)/g,
      ia = /,\r+?/g,
      F = /([\t\r\n ])*\f?&/g,
      fa = /@(k\w+)\s*(\S*)\s*/,
      Q = /::(place)/g,
      ha = /:(read-only)/g,
      G = /[svh]\w+-[tblr]{2}/,
      da = /\(\s*(.*)\s*\)/g,
      oa = /([\s\S]*?);/g,
      ba = /-self|flex-/g,
      na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
      la = /stretch|:\s*\w+\-(?:conte|avail)/,
      ja = /([^-])(image-set\()/,
      z = 1,
      D = 1,
      E = 0,
      w = 1,
      O = [],
      S = [],
      A = 0,
      R = null,
      Y = 0,
      V = '';
  B.use = T;
  B.set = U;
  void 0 !== W && U(W);
  return B;
}

/* harmony default export */ __webpack_exports__["default"] = (stylis_min);


/***/ }),

/***/ "./node_modules/@emotion/unitless/dist/unitless.browser.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@emotion/unitless/dist/unitless.browser.esm.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

/* harmony default export */ __webpack_exports__["default"] = (unitlessKeys);


/***/ }),

/***/ "./node_modules/classnames/bind.js":
/*!*****************************************!*\
  !*** ./node_modules/classnames/bind.js ***!
  \*****************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(this && this[arg] || arg);
			} else if (Array.isArray(arg)) {
				classes.push(classNames.apply(this, arg));
			} else if (argType === 'object') {
				if (arg.toString === Object.prototype.toString) {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(this && this[key] || key);
						}
					}
				} else {
					classes.push(arg.toString());
				}
			}
		}

		return classes.join(' ');
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ "./node_modules/classnames/index.js":
/*!******************************************!*\
  !*** ./node_modules/classnames/index.js ***!
  \******************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString === Object.prototype.toString) {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				} else {
					classes.push(arg.toString());
				}
			}
		}

		return classes.join(' ');
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ "./node_modules/direction/index.js":
/*!*****************************************!*\
  !*** ./node_modules/direction/index.js ***!
  \*****************************************/
/***/ (function(module) {

"use strict";


module.exports = direction

var RTL = '\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC'
var LTR =
  'A-Za-z\u00C0-\u00D6\u00D8-\u00F6' +
  '\u00F8-\u02B8\u0300-\u0590\u0800-\u1FFF\u200E\u2C00-\uFB1C' +
  '\uFE00-\uFE6F\uFEFD-\uFFFF'

var rtl = new RegExp('^[^' + LTR + ']*[' + RTL + ']')
var ltr = new RegExp('^[^' + RTL + ']*[' + LTR + ']')

function direction(value) {
  value = String(value || '')

  if (rtl.test(value)) {
    return 'rtl'
  }

  if (ltr.test(value)) {
    return 'ltr'
  }

  return 'neutral'
}


/***/ }),

/***/ "./node_modules/function-bind/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/function-bind/implementation.js ***!
  \******************************************************/
/***/ (function(module) {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ "./node_modules/function-bind/index.js":
/*!*********************************************!*\
  !*** ./node_modules/function-bind/index.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/function-bind/implementation.js");

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ "./node_modules/global/window.js":
/*!***************************************!*\
  !*** ./node_modules/global/window.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof __webpack_require__.g !== "undefined") {
    win = __webpack_require__.g;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

module.exports = win;


/***/ }),

/***/ "./node_modules/has/src/index.js":
/*!***************************************!*\
  !*** ./node_modules/has/src/index.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),

/***/ "./node_modules/history/esm/history.js":
/*!*********************************************!*\
  !*** ./node_modules/history/esm/history.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBrowserHistory": function() { return /* binding */ createBrowserHistory; },
/* harmony export */   "createHashHistory": function() { return /* binding */ createHashHistory; },
/* harmony export */   "createLocation": function() { return /* binding */ createLocation; },
/* harmony export */   "createMemoryHistory": function() { return /* binding */ createMemoryHistory; },
/* harmony export */   "createPath": function() { return /* binding */ createPath; },
/* harmony export */   "locationsAreEqual": function() { return /* binding */ locationsAreEqual; },
/* harmony export */   "parsePath": function() { return /* binding */ parsePath; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var resolve_pathname__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! resolve-pathname */ "./node_modules/resolve-pathname/esm/resolve-pathname.js");
/* harmony import */ var value_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! value-equal */ "./node_modules/value-equal/esm/value-equal.js");
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/esm/tiny-invariant.js");






function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
}
function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
}
function hasBasename(path, prefix) {
  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
}
function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
}
function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
}
function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';
  var hashIndex = pathname.indexOf('#');

  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');

  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
}
function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;
  var path = pathname || '/';
  if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
  return path;
}

function createLocation(path, state, key, currentLocation) {
  var location;

  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = parsePath(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, path);
    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = (0,resolve_pathname__WEBPACK_IMPORTED_MODULE_1__["default"])(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
}
function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0,value_equal__WEBPACK_IMPORTED_MODULE_2__["default"])(a.state, b.state);
}

function createTransitionManager() {
  var prompt = null;

  function setPrompt(nextPrompt) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(prompt == null, 'A history supports only one prompt at a time') : 0;
    prompt = nextPrompt;
    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  }

  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
           true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : 0;
          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  }

  var listeners = [];

  function appendListener(fn) {
    var isActive = true;

    function listener() {
      if (isActive) fn.apply(void 0, arguments);
    }

    listeners.push(listener);
    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  }

  function notifyListeners() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(void 0, args);
    });
  }

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
function getConfirmation(message, callback) {
  callback(window.confirm(message)); // eslint-disable-line no-alert
}
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

function supportsHistory() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
  return window.history && 'pushState' in window.history;
}
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */

function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
}
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */

function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
}
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
}

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
}
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */


function createBrowserHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, 'Browser history needs a DOM') : 0 : void 0;
  var globalHistory = window.history;
  var canUseHistory = supportsHistory();
  var needsHashChangeListener = !supportsPopStateOnHashChange();
  var _props = props,
      _props$forceRefresh = _props.forceRefresh,
      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

  function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;
    var path = pathname + search + hash;
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : 0;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path, state, key);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if (isExtraneousPopstateEvent(event)) return;
    handlePop(getDOMLocation(event.state));
  }

  function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  }

  var forceNextPop = false;

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allKeys.indexOf(fromLocation.key);
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  }

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key]; // Public interface

  function createHref(location) {
    return basename + createPath(location);
  }

  function push(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : 0;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.pushState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex + 1);
          nextKeys.push(location.key);
          allKeys = nextKeys;
          setState({
            action: action,
            location: location
          });
        }
      } else {
         true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : 0;
        window.location.href = href;
      }
    });
  }

  function replace(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : 0;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.replaceState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
          setState({
            action: action,
            location: location
          });
        }
      } else {
         true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : 0;
        window.location.replace(href);
      }
    });
  }

  function go(n) {
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

var HashChangeEvent$1 = 'hashchange';
var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: stripLeadingSlash,
    decodePath: addLeadingSlash
  },
  slash: {
    encodePath: addLeadingSlash,
    decodePath: addLeadingSlash
  }
};

function stripHash(url) {
  var hashIndex = url.indexOf('#');
  return hashIndex === -1 ? url : url.slice(0, hashIndex);
}

function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
}

function pushHashPath(path) {
  window.location.hash = path;
}

function replaceHashPath(path) {
  window.location.replace(stripHash(window.location.href) + '#' + path);
}

function createHashHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, 'Hash history needs a DOM') : 0 : void 0;
  var globalHistory = window.history;
  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
  var _props = props,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$hashType = _props.hashType,
      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;

  function getDOMLocation() {
    var path = decodePath(getHashPath());
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : 0;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  var forceNextPop = false;
  var ignorePath = null;

  function locationsAreEqual$$1(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
  }

  function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;
      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;
      handlePop(location);
    }
  }

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  } // Ensure the hash is encoded properly before doing anything else.


  var path = getHashPath();
  var encodedPath = encodePath(path);
  if (path !== encodedPath) replaceHashPath(encodedPath);
  var initialLocation = getDOMLocation();
  var allPaths = [createPath(initialLocation)]; // Public interface

  function createHref(location) {
    var baseTag = document.querySelector('base');
    var href = '';

    if (baseTag && baseTag.getAttribute('href')) {
      href = stripHash(window.location.href);
    }

    return href + '#' + encodePath(basename + createPath(location));
  }

  function push(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(state === undefined, 'Hash history cannot push state; it is ignored') : 0;
    var action = 'PUSH';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);
        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
        var nextPaths = allPaths.slice(0, prevIndex + 1);
        nextPaths.push(path);
        allPaths = nextPaths;
        setState({
          action: action,
          location: location
        });
      } else {
         true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : 0;
        setState();
      }
    });
  }

  function replace(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(state === undefined, 'Hash history cannot replace state; it is ignored') : 0;
    var action = 'REPLACE';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf(createPath(history.location));
      if (prevIndex !== -1) allPaths[prevIndex] = path;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : 0;
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(HashChangeEvent$1, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
}
/**
 * Creates a history object that stores locations in memory.
 */


function createMemoryHistory(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      getUserConfirmation = _props.getUserConfirmation,
      _props$initialEntries = _props.initialEntries,
      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
      _props$initialIndex = _props.initialIndex,
      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])(history, nextState);

    history.length = history.entries.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
  }); // Public interface

  var createHref = createPath;

  function push(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : 0;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;
      var nextEntries = history.entries.slice(0);

      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  }

  function replace(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : 0;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      history.entries[history.index] = location;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
    var action = 'POP';
    var location = history.entries[nextIndex];
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  }

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    return transitionManager.setPrompt(prompt);
  }

  function listen(listener) {
    return transitionManager.appendListener(listener);
  }

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };
  return history;
}




/***/ }),

/***/ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \**********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var reactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

function getStatics(component) {
  // React v16.11 and below
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  } // React v16.12 and above


  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;


/***/ }),

/***/ "./node_modules/ilib/index.js":
/*!************************************!*\
  !*** ./node_modules/ilib/index.js ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ./lib/ilib.js */ "./node_modules/ilib/lib/ilib.js");if(!ilib._platform||"boolean"!=typeof ilib._dyndata&&"boolean"!=typeof ilib._dyncode)if(true)__webpack_require__(/*! ./lib/ilib-webpack.js */ "./node_modules/ilib/lib/ilib-webpack.js");else {}module.exports=ilib;

/***/ }),

/***/ "./node_modules/ilib/lib/Astro.js":
/*!****************************************!*\
  !*** ./node_modules/ilib/lib/Astro.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// !data astro
var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),Utils=__webpack_require__(/*! ./Utils.js */ "./node_modules/ilib/lib/Utils.js"),SearchUtils=__webpack_require__(/*! ./SearchUtils.js */ "./node_modules/ilib/lib/SearchUtils.js"),GregorianDate=__webpack_require__(/*! ./GregorianDate.js */ "./node_modules/ilib/lib/GregorianDate.js"),RataDie=__webpack_require__(/*! ./RataDie.js */ "./node_modules/ilib/lib/RataDie.js"),GregRataDie=__webpack_require__(/*! ./GregRataDie.js */ "./node_modules/ilib/lib/GregRataDie.js"),Astro={initAstro:function(sync,loadParams,callback){ilib.data.astro?callback&&"function"==typeof callback&&callback(ilib.data.astro):Utils.loadData({object:"Astro",name:"astro.json",locale:"-",nonLocale:!0,sync:sync,loadParams:loadParams,callback:ilib.bind(this,function(astroData){ilib.data.astro=astroData,callback&&"function"==typeof callback&&callback(astroData)})})},_dtr:function(d){return d*Math.PI/180},_rtd:function(r){return 180*r/Math.PI},_dcos:function(d){return Math.cos(Astro._dtr(d))},_dsin:function(d){return Math.sin(Astro._dtr(d))},_dtan:function(d){return Math.tan(Astro._dtr(d))},_fixangle:function(a){return a-360*Math.floor(a/360)},_fixangr:function(a){return a-2*Math.PI*Math.floor(a/(2*Math.PI))},_equinox:function(year,which){var deltaL,i,j,JDE0,JDE0tab,S,T,W,Y;for(year<1e3?(JDE0tab=ilib.data.astro._JDE0tab1000,Y=year/1e3):(JDE0tab=ilib.data.astro._JDE0tab2000,Y=(year-2e3)/1e3),W=35999.373*(T=((JDE0=JDE0tab[which][0]+JDE0tab[which][1]*Y+JDE0tab[which][2]*Y*Y+JDE0tab[which][3]*Y*Y*Y+JDE0tab[which][4]*Y*Y*Y*Y)-2451545)/36525)-2.47,deltaL=1+.0334*Astro._dcos(W)+7e-4*Astro._dcos(2*W),i=j=S=0;i<24;i++)S+=ilib.data.astro._EquinoxpTerms[j]*Astro._dcos(ilib.data.astro._EquinoxpTerms[j+1]+ilib.data.astro._EquinoxpTerms[j+2]*T),j+=3;return JDE0+1e-5*S/deltaL},_deltat:function(year){var dt,f,i,t;return 1620<=year&&year<=2014?(f=year-1620-(i=Math.floor(year-1620)),dt=ilib.data.astro._deltaTtab[i]+(ilib.data.astro._deltaTtab[i+1]-ilib.data.astro._deltaTtab[i])*f):(t=(year-2e3)/100,year<948?dt=2177+497*t+44.1*t*t:(dt=102+102*t+25.3*t*t,2e3<year&&year<2100&&(dt+=.37*(year-2100)))),dt},_obliqeq:function(jd){var eps,u,v,i;if(v=u=(jd-2451545)/3652500,eps=23.43929111111111,Math.abs(u)<1)for(i=0;i<10;i++)eps+=ilib.data.astro._oterms[i]/3600*v,v*=u;return eps},_sunpos:function(jd){var T,T2,T3,Omega,epsilon,ret={};return T3=(T=(jd-2451545)/36525)*(T2=T*T),ret.meanLongitude=Astro._fixangle(280.46646+36000.76983*T+3032e-7*T2),ret.meanAnomaly=Astro._fixangle(357.52911+35999.05029*T-1537e-7*T2-48e-8*T3),ret.eccentricity=.016708634-42037e-9*T-1.267e-7*T2,ret.equationOfCenter=(1.914602-.004817*T-14e-6*T2)*Astro._dsin(ret.meanAnomaly)+(.019993-101e-6*T)*Astro._dsin(2*ret.meanAnomaly)+289e-6*Astro._dsin(3*ret.meanAnomaly),ret.sunLongitude=ret.meanLongitude+ret.equationOfCenter,Omega=125.04-1934.136*T,ret.apparentLong=ret.sunLongitude+-.00569+-.00478*Astro._dsin(Omega),epsilon=Astro._obliqeq(jd)+.00256*Astro._dcos(Omega),ret.inclination=Astro._fixangle(23.4392911-.013004167*T-1.6389e-7*T2+5.036e-7*T3),ret.apparentRightAscension=Astro._fixangle(Astro._rtd(Math.atan2(Astro._dcos(epsilon)*Astro._dsin(ret.apparentLong),Astro._dcos(ret.apparentLong)))),ret},_nutation:function(jd){var i,j,t2,t3,to10,ang,t=(jd-2451545)/36525,ta=[],dp=0,de=0,ret={};for(t3=t*(t2=t*t),ta[0]=Astro._dtr(297.850363+445267.11148*t-.0019142*t2+t3/189474),ta[1]=Astro._dtr(357.52772+35999.05034*t-1603e-7*t2-t3/3e5),ta[2]=Astro._dtr(134.96298+477198.867398*t+.0086972*t2+t3/56250),ta[3]=Astro._dtr(93.27191+483202.017538*t-.0036825*t2+t3/327270),ta[4]=Astro._dtr(125.04452-1934.136261*t+.0020708*t2+t3/45e4),i=0;i<5;i++)ta[i]=Astro._fixangr(ta[i]);for(to10=t/10,i=0;i<63;i++){for(j=ang=0;j<5;j++)0!=ilib.data.astro._nutArgMult[5*i+j]&&(ang+=ilib.data.astro._nutArgMult[5*i+j]*ta[j]);dp+=(ilib.data.astro._nutArgCoeff[4*i+0]+ilib.data.astro._nutArgCoeff[4*i+1]*to10)*Math.sin(ang),de+=(ilib.data.astro._nutArgCoeff[4*i+2]+ilib.data.astro._nutArgCoeff[4*i+3]*to10)*Math.cos(ang)}return ret.deltaPsi=dp/36e6,ret.deltaEpsilon=de/36e6,ret},_equationOfTime:function(jd){var alpha,deltaPsi,E,epsilon,L0,tau;L0=280.4664567+360007.6982779*(tau=(jd-2451545)/365250)+.03032028*tau*tau+tau*tau*tau/49931+-tau*tau*tau*tau/15300+-tau*tau*tau*tau*tau/2e6,L0=Astro._fixangle(L0),alpha=Astro._sunpos(jd).apparentRightAscension;var nut=Astro._nutation(jd);return deltaPsi=nut.deltaPsi,epsilon=Astro._obliqeq(jd)+nut.deltaEpsilon,180<(E=L0-.0057183-alpha+deltaPsi*Astro._dcos(epsilon))&&(E-=360),E*=4,E/=1440},_poly:function(x,coefficients){for(var result=coefficients[0],xpow=x,i=1;i<coefficients.length;i++)result+=coefficients[i]*xpow,xpow*=x;return result},_universalFromLocal:function(local,zone){return local-zone/1440},_localFromUniversal:function(local,zone){return local+zone/1440},_aberration:function(c){return 974e-7*Astro._dcos(177.63+35999.01847999999*c)-.005575},_nutation2:function(c){var a=Astro._poly(c,ilib.data.astro._nutCoeffA),b=Astro._poly(c,ilib.data.astro._nutCoeffB);return-.004778*Astro._dsin(a)-3667e-7*Astro._dsin(b)},_ephemerisCorrection:function(jd){var year=GregorianDate._calcYear(jd-1721424.5);if(1988<=year&&year<=2019)return(year-1933)/86400;if(1800<=year&&year<=1987){var theta=(new GregRataDie({year:year,month:7,day:1,hour:0,minute:0,second:0}).getRataDie()-693596)/36525;return Astro._poly(theta,1900<=year?ilib.data.astro._coeff19th:ilib.data.astro._coeff18th)}if(1620<=year&&year<=1799)return(196.58333-4.0675*(year-=1600)+.0219167*year*year)/86400;var x=new GregRataDie({year:year,month:1,day:1,hour:0,minute:0,second:0}).getRataDie()-660724+.5;return(x*x/41048480-15)/86400},_ephemerisFromUniversal:function(jd){return jd+Astro._ephemerisCorrection(jd)},_universalFromEphemeris:function(jd){return jd-Astro._ephemerisCorrection(jd)},_julianCenturies:function(jd){return(Astro._ephemerisFromUniversal(jd)-2451545)/36525},_solarLongitude:function(jd){for(var c=Astro._julianCenturies(jd),longitude=0,len=ilib.data.astro._solarLongCoeff.length,i=0;i<len;i++)longitude+=ilib.data.astro._solarLongCoeff[i]*Astro._dsin(ilib.data.astro._solarLongAddends[i]+ilib.data.astro._solarLongMultipliers[i]*c);return longitude*=5729577951308232e-21,longitude+=282.7771834+36000.76953744*c,longitude+=Astro._aberration(c)+Astro._nutation2(c),Astro._fixangle(longitude)},_lunarLongitude:function(jd){for(var c=Astro._julianCenturies(jd),meanMoon=Astro._fixangle(Astro._poly(c,ilib.data.astro._meanMoonCoeff)),elongation=Astro._fixangle(Astro._poly(c,ilib.data.astro._elongationCoeff)),solarAnomaly=Astro._fixangle(Astro._poly(c,ilib.data.astro._solarAnomalyCoeff)),lunarAnomaly=Astro._fixangle(Astro._poly(c,ilib.data.astro._lunarAnomalyCoeff)),moonNode=Astro._fixangle(Astro._poly(c,ilib.data.astro._moonFromNodeCoeff)),e=Astro._poly(c,ilib.data.astro._eCoeff),sum=0,i=0;i<ilib.data.astro._lunarElongationLongCoeff.length;i++){var x=ilib.data.astro._solarAnomalyLongCoeff[i];sum+=ilib.data.astro._sineCoeff[i]*Math.pow(e,Math.abs(x))*Astro._dsin(ilib.data.astro._lunarElongationLongCoeff[i]*elongation+x*solarAnomaly+ilib.data.astro._lunarAnomalyLongCoeff[i]*lunarAnomaly+ilib.data.astro._moonFromNodeLongCoeff[i]*moonNode)}var longitude=sum/1e6,venus=.003958*Astro._dsin(119.75+131.849*c),jupiter=318e-6*Astro._dsin(53.09+479264.29*c),flatEarth=.001962*Astro._dsin(meanMoon-moonNode);return Astro._fixangle(meanMoon+longitude+venus+jupiter+flatEarth+Astro._nutation2(c))},_newMoonTime:function(n){for(var k=n-24724,c=k/1236.85,approx=Astro._poly(c,ilib.data.astro._nmApproxCoeff),capE=Astro._poly(c,ilib.data.astro._nmCapECoeff),solarAnomaly=Astro._poly(c,ilib.data.astro._nmSolarAnomalyCoeff),lunarAnomaly=Astro._poly(c,ilib.data.astro._nmLunarAnomalyCoeff),moonArgument=Astro._poly(c,ilib.data.astro._nmMoonArgumentCoeff),capOmega=Astro._poly(c,ilib.data.astro._nmCapOmegaCoeff),correction=-17e-5*Astro._dsin(capOmega),i=0;i<ilib.data.astro._nmSineCoeff.length;i++)correction+=ilib.data.astro._nmSineCoeff[i]*Math.pow(capE,ilib.data.astro._nmEFactor[i])*Astro._dsin(ilib.data.astro._nmSolarCoeff[i]*solarAnomaly+ilib.data.astro._nmLunarCoeff[i]*lunarAnomaly+ilib.data.astro._nmMoonCoeff[i]*moonArgument);var additional=0;for(i=0;i<ilib.data.astro._nmAddConst.length;i++)additional+=ilib.data.astro._nmAddFactor[i]*Astro._dsin(ilib.data.astro._nmAddConst[i]+ilib.data.astro._nmAddCoeff[i]*k);var extra=325e-6*Astro._dsin(Astro._poly(c,ilib.data.astro._nmExtra));return Astro._universalFromEphemeris(approx+correction+extra+additional+RataDie.gregorianEpoch)},_lunarSolarAngle:function(jd){var lunar=Astro._lunarLongitude(jd),solar=Astro._solarLongitude(jd);return Astro._fixangle(lunar-solar)},_newMoonBefore:function(jd){var current,last,phase=Astro._lunarSolarAngle(jd),guess=Math.round((jd-11.450086114414322-RataDie.gregorianEpoch)/29.530588853-phase/360)-1;for(current=last=Astro._newMoonTime(guess);current<jd;)guess++,last=current,current=Astro._newMoonTime(guess);return last},_newMoonAtOrAfter:function(jd){for(var current,phase=Astro._lunarSolarAngle(jd),guess=Math.round((jd-11.450086114414322-RataDie.gregorianEpoch)/29.530588853-phase/360);(current=Astro._newMoonTime(guess))<jd;)guess++;return current},_nextSolarLongitude:function(jd,longitude){var tau=jd+365.242189/360*Astro._fixangle(longitude-Astro._solarLongitude(jd)),start=Math.max(jd,tau-5),end=tau+5;return SearchUtils.bisectionSearch(0,start,end,1e-6,function(l){return 180-Astro._fixangle(Astro._solarLongitude(l)-longitude)})},_floorToJD:function(jd){return Math.floor(jd-.5)+.5},_ceilToJD:function(jd){return Math.ceil(jd+.5)-.5}};module.exports=Astro;

/***/ }),

/***/ "./node_modules/ilib/lib/Calendar.js":
/*!*******************************************!*\
  !*** ./node_modules/ilib/lib/Calendar.js ***!
  \*******************************************/
/***/ (function(module) {

var Calendar=function(){};Calendar._constructors={},Calendar.prototype={getType:function(){throw"Cannot call methods of abstract class Calendar"},getNumMonths:function(year){throw"Cannot call methods of abstract class Calendar"},getMonLength:function(month,year){throw"Cannot call methods of abstract class Calendar"},isLeapYear:function(year){throw"Cannot call methods of abstract class Calendar"}},module.exports=Calendar;

/***/ }),

/***/ "./node_modules/ilib/lib/CalendarFactory.js":
/*!**************************************************!*\
  !*** ./node_modules/ilib/lib/CalendarFactory.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),Calendar=__webpack_require__(/*! ./Calendar.js */ "./node_modules/ilib/lib/Calendar.js"),CalendarFactory=function(options){var locale,type,instance,sync=!0;return options&&(options.locale&&(locale="string"==typeof options.locale?new Locale(options.locale):options.locale),type=options.type||options.calendar,"boolean"==typeof options.sync&&(sync=options.sync)),locale||(locale=new Locale),type?instance=CalendarFactory._init(type,options):new LocaleInfo(locale,{sync:sync,loadParams:options&&options.loadParams,onLoad:function(info){type=info.getCalendar(),instance=CalendarFactory._init(type,options)}}),instance};function circumventWebPack(x){return"./"+x+"Cal.js"}CalendarFactory._dynMap={coptic:"Coptic",ethiopic:"Ethiopic",gregorian:"Gregorian",han:"Han",hebrew:"Hebrew",islamic:"Islamic",julian:"Julian",persian:"Persian","persian-algo":"PersianAlgo",thaisolar:"ThaiSolar"},CalendarFactory._dynLoadCalendar=function(name,fnc){if(!Calendar._constructors[name]){var entry=CalendarFactory._dynMap[name];entry&&(
// eslint-disable-next-line
Calendar._constructors[name]=__webpack_require__("./node_modules/ilib/lib sync recursive ^$")(fnc(entry)))}return Calendar._constructors[name]},CalendarFactory._init=function(type,options){var cons;return ilib.isDynCode()&&CalendarFactory._dynLoadCalendar(type,circumventWebPack),(cons=Calendar._constructors[type])||"function"!=typeof options.onLoad||options.onLoad(void 0),cons&&new cons(options)},CalendarFactory.getCalendars=function(){var c,arr=[];if(ilib.isDynCode())for(c in CalendarFactory._dynMap)CalendarFactory._dynLoadCalendar(c,circumventWebPack);for(c in Calendar._constructors)c&&Calendar._constructors[c]&&arr.push(c);return arr},module.exports=CalendarFactory;

/***/ }),

/***/ "./node_modules/ilib/lib/CaseMapper.js":
/*!*********************************************!*\
  !*** ./node_modules/ilib/lib/CaseMapper.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),IString=__webpack_require__(/*! ./IString.js */ "./node_modules/ilib/lib/IString.js"),CaseMapper=function(options){switch(this.up=!0,this.locale=new Locale(),options&&(void 0!==options.locale&&(this.locale="string"==typeof options.locale?new Locale(options.locale):options.locale),this.up=!options.direction||"toupper"===options.direction),this.mapData=this.up?{"ß":"SS","ΐ":"Ι","ά":"Α","έ":"Ε","ή":"Η","ί":"Ι","ΰ":"Υ","ϊ":"Ι","ϋ":"Υ","ό":"Ο","ύ":"Υ","ώ":"Ω","Ӏ":"Ӏ","ӏ":"Ӏ"}:{"Ӏ":"Ӏ"},this.locale.getLanguage()){case"az":case"tr":case"crh":case"kk":case"krc":case"tt":this._setUpMap("iı","İI")}"ie"!==ilib._getBrowser()&&"Edge"!==ilib._getBrowser()||(this.up&&(this.mapData["ς"]="Σ"),this._setUpMap("ⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⳁⳉⳋ","ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⳀⳈⳊ"),this._setUpMap("ⴀⴁⴂⴃⴄⴅⴆⴇⴈⴉⴊⴋⴌⴍⴎⴏⴐⴑⴒⴓⴔⴕⴖⴗⴘⴙⴚⴛⴜⴝⴞⴟⴠⴡⴢⴣⴤⴥ","ႠႡႢႣႤႥႦႧႨႩႪႫႬႭႮႯႰႱႲႳႴႵႶႷႸႹႺႻႼႽႾႿჀჁჂჃჄჅ"))};CaseMapper.prototype={_charMapper:function(string){if(!string)return string;for(var c,ret="",it=("string"==typeof string?new IString(string):string.toString()).charIterator();it.hasNext();)if(c=it.next(),this.up||"Σ"!==c)this.mapData[c]?ret+=this.mapData[c]:ret+=this.up?c.toUpperCase():c.toLowerCase();else if(it.hasNext()){var code=(c=it.next()).charCodeAt(0);ret+=code<904&&902!==code||974<code?"ς":"σ",ret+=c.toLowerCase()}else ret+="ς";return ret},_setUpMap:function(lower,upper){var from,to;this.up?(from=lower,to=upper):(from=upper,to=lower);for(var i=0;i<upper.length;i++)this.mapData[from[i]]=to[i]},getLocale:function(){return this.locale},map:function(string){return this._charMapper(string)}},module.exports=CaseMapper;

/***/ }),

/***/ "./node_modules/ilib/lib/CopticCal.js":
/*!********************************************!*\
  !*** ./node_modules/ilib/lib/CopticCal.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Utils=__webpack_require__(/*! ./Utils.js */ "./node_modules/ilib/lib/Utils.js"),Calendar=__webpack_require__(/*! ./Calendar.js */ "./node_modules/ilib/lib/Calendar.js"),EthiopicCal=__webpack_require__(/*! ./EthiopicCal.js */ "./node_modules/ilib/lib/EthiopicCal.js"),CopticCal=function(options){this.type="coptic",options&&"function"==typeof options.onLoad&&options.onLoad(this)};CopticCal.prototype=new EthiopicCal(),CopticCal.prototype.parent=EthiopicCal,CopticCal.prototype.constructor=CopticCal,Calendar._constructors.coptic=CopticCal,module.exports=CopticCal;

/***/ }),

/***/ "./node_modules/ilib/lib/CopticDate.js":
/*!*********************************************!*\
  !*** ./node_modules/ilib/lib/CopticDate.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),EthiopicDate=__webpack_require__(/*! ./EthiopicDate.js */ "./node_modules/ilib/lib/EthiopicDate.js"),CopticCal=__webpack_require__(/*! ./CopticCal.js */ "./node_modules/ilib/lib/CopticCal.js"),CopticRataDie=__webpack_require__(/*! ./CopticRataDie.js */ "./node_modules/ilib/lib/CopticRataDie.js"),CopticDate=function(params){this.rd=NaN,ilib.extend({},params).onLoad=function(ed){ed.cal=new CopticCal(),"function"==typeof params.onLoad&&params.onLoad(ed)},EthiopicDate.call(this,params)};CopticDate.prototype=new EthiopicDate({noinstance:!0}),CopticDate.prototype.parent=EthiopicDate.prototype,(CopticDate.prototype.constructor=CopticDate).prototype.newRd=function(params){return new CopticRataDie(params)},CopticDate.prototype.getDayOfWeek=function(){var rd=Math.floor(this.rd.getRataDie()+(this.offset||0));return MathUtils.mod(rd-3,7)},CopticDate.prototype.getCalendar=function(){return"coptic"},IDate._constructors.coptic=CopticDate,module.exports=CopticDate;

/***/ }),

/***/ "./node_modules/ilib/lib/CopticRataDie.js":
/*!************************************************!*\
  !*** ./node_modules/ilib/lib/CopticRataDie.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),CopticCal=__webpack_require__(/*! ./CopticCal.js */ "./node_modules/ilib/lib/CopticCal.js"),EthiopicRataDie=__webpack_require__(/*! ./EthiopicRataDie.js */ "./node_modules/ilib/lib/EthiopicRataDie.js"),CopticRataDie=function(params){this.cal=params&&params.cal||new CopticCal(),this.rd=NaN,this.epoch=1825028.5;var tmp={};params&&JSUtils.shallowCopy(params,tmp),tmp.cal=this.cal,EthiopicRataDie.call(this,tmp)};CopticRataDie.prototype=new EthiopicRataDie(),CopticRataDie.prototype.parent=EthiopicRataDie,CopticRataDie.prototype.constructor=CopticRataDie,module.exports=CopticRataDie;

/***/ }),

/***/ "./node_modules/ilib/lib/Currency.js":
/*!*******************************************!*\
  !*** ./node_modules/ilib/lib/Currency.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// !data currency
var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),Utils=__webpack_require__(/*! ./Utils.js */ "./node_modules/ilib/lib/Utils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),ResBundle=__webpack_require__(/*! ./ResBundle.js */ "./node_modules/ilib/lib/ResBundle.js"),Currency=function(options){options?(options.code&&(this.code=options.code),options.locale&&(this.locale="string"==typeof options.locale?new Locale(options.locale):options.locale),options.sign&&(this.sign=options.sign),options.loadParams&&(this.loadParams=options.loadParams)):options={sync:!0},void 0===options.sync&&(options.sync=!0),this.locale=this.locale||new Locale(),void 0===ilib.data.currency?Utils.loadData({name:"currency.json",object:"Currency",locale:"-",sync:this.sync,loadParams:this.loadParams,callback:ilib.bind(this,function(currency){ilib.data.currency=currency,this._loadLocinfo(options)})}):this._loadLocinfo(options)};Currency.getAvailableCurrencies=function(){var cur,ret=[],currencies=new ResBundle({name:"currency"}).getResObj();for(cur in currencies)cur&&currencies[cur]&&ret.push(cur);return ret},Currency.prototype={_loadLocinfo:function(options){new LocaleInfo(this.locale,{sync:options.sync,loadParams:options.loadParams,onLoad:ilib.bind(this,function(li){var currInfo;if(this.locinfo=li,this.code){if(!(currInfo=ilib.data.currency[this.code])){if(options.sync)throw"currency "+this.code+" is unknown";if("function"==typeof options.onLoad)return void options.onLoad(void 0)}}else if(this.sign)if(void 0!==(currInfo=ilib.data.currency[this.sign]))this.code=this.sign;else if(this.code=this.locinfo.getCurrency(),(currInfo=ilib.data.currency[this.code]).sign!==this.sign)for(var cur in ilib.data.currency)if(cur&&ilib.data.currency[cur]&&(currInfo=ilib.data.currency[cur]).sign===this.sign){this.code=cur;break}currInfo&&this.code||(this.code=this.locinfo.getCurrency(),currInfo=ilib.data.currency[this.code]),this.name=currInfo.name,this.fractionDigits=currInfo.decimals,this.sign=currInfo.sign,"function"==typeof options.onLoad&&options.onLoad(this)})})},getCode:function(){return this.code},getFractionDigits:function(){return this.fractionDigits},getSign:function(){return this.sign},getName:function(){return this.name},getLocale:function(){return this.locale}},module.exports=Currency;

/***/ }),

/***/ "./node_modules/ilib/lib/DateFactory.js":
/*!**********************************************!*\
  !*** ./node_modules/ilib/lib/DateFactory.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),JulianDay=__webpack_require__(/*! ./JulianDay.js */ "./node_modules/ilib/lib/JulianDay.js"),CalendarFactory=__webpack_require__(/*! ./CalendarFactory.js */ "./node_modules/ilib/lib/CalendarFactory.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),DateFactory=function(options){var locale,type,obj,sync=!0;return options&&(options.locale&&(locale="string"==typeof options.locale?new Locale(options.locale):options.locale),type=options.type||options.calendar,"boolean"==typeof options.sync&&(sync=options.sync)),locale||(locale=new Locale),type?obj=DateFactory._init(type,options):new LocaleInfo(locale,{sync:sync,loadParams:options&&options.loadParams,onLoad:function(info){type=info.getCalendar(),obj=DateFactory._init(type,options)}}),obj};function circumventWebPackDate(x){return"./"+x+"Date.js"}function circumventWebPackCal(x){return"./"+x+"Cal.js"}DateFactory._dynMap={coptic:"Coptic",ethiopic:"Ethiopic",gregorian:"Gregorian",han:"Han",hebrew:"Hebrew",islamic:"Islamic",julian:"Julian",persian:"Persian","persian-algo":"PersianAlgo",thaisolar:"ThaiSolar"},DateFactory._dynLoadDate=function(name,fnc){if(!IDate._constructors[name]){var entry=DateFactory._dynMap[name];entry&&(
// eslint-disable-next-line
IDate._constructors[name]=__webpack_require__("./node_modules/ilib/lib sync recursive ^$")(fnc(entry)))}return IDate._constructors[name]},DateFactory._init=function(type,options){var cons;return ilib.isDynCode()&&(DateFactory._dynLoadDate(type,circumventWebPackDate),CalendarFactory._dynLoadCalendar(type,circumventWebPackCal)),!(cons=IDate._constructors[type])&&options&&"function"==typeof options.onLoad&&options.onLoad(void 0),cons&&new cons(options)},DateFactory._dateToIlib=function(inDate,timezone,locale){return null==inDate?inDate:inDate instanceof IDate?inDate:"number"==typeof inDate?DateFactory({unixtime:inDate,timezone:timezone,locale:locale}):("string"==typeof inDate&&(inDate=new Date(inDate)),JSUtils.isDate(inDate)?DateFactory({unixtime:inDate.getTime(),timezone:timezone,locale:locale}):DateFactory(inDate instanceof JulianDay?{jd:inDate,timezone:timezone,locale:locale}:"object"==typeof inDate?inDate:{unixtime:inDate.getTime(),timezone:timezone,locale:locale}))},module.exports=DateFactory;

/***/ }),

/***/ "./node_modules/ilib/lib/DateFmt.js":
/*!******************************************!*\
  !*** ./node_modules/ilib/lib/DateFmt.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// !data dateformats sysres
var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),Utils=__webpack_require__(/*! ./Utils.js */ "./node_modules/ilib/lib/Utils.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),DateFactory=__webpack_require__(/*! ./DateFactory.js */ "./node_modules/ilib/lib/DateFactory.js"),CalendarFactory=__webpack_require__(/*! ./CalendarFactory.js */ "./node_modules/ilib/lib/CalendarFactory.js"),ResBundle=__webpack_require__(/*! ./ResBundle.js */ "./node_modules/ilib/lib/ResBundle.js"),TimeZone=__webpack_require__(/*! ./TimeZone.js */ "./node_modules/ilib/lib/TimeZone.js"),GregorianCal=__webpack_require__(/*! ./GregorianCal.js */ "./node_modules/ilib/lib/GregorianCal.js"),ISet=__webpack_require__(/*! ./ISet.js */ "./node_modules/ilib/lib/ISet.js"),DateFmt=function(options){var arr,i,bad,c,comps,loadParams,sync=!0;if(this.locale=new Locale(),this.type="date",this.length="s",this.dateComponents="dmy",this.timeComponents="ahm",this.meridiems="default",(options=options||{sync:!0}).locale&&(this.locale="string"==typeof options.locale?new Locale(options.locale):options.locale),options.type&&("date"!==options.type&&"time"!==options.type&&"datetime"!==options.type||(this.type=options.type)),options.calendar&&(this.calName=options.calendar),options.length&&("short"!==options.length&&"medium"!==options.length&&"long"!==options.length&&"full"!==options.length||(this.length=options.length.charAt(0))),options.date){arr=options.date.split("");var dateComps=new ISet();for(bad=!1,i=0;i<arr.length;i++)if("e"===(c=arr[i].toLowerCase())&&(c="w"),"d"!==c&&"m"!==c&&"y"!==c&&"w"!==c&&"n"!==c){if("h"!==c&&"m"!==c&&"s"!==c&&"a"!==c&&"z"!==c&&"g"!==c){bad=!0;break}}else dateComps.add(c);bad||(comps=dateComps.asArray().sort(function(left,right){return left<right?-1:right<left?1:0}),this.dateComponents=comps.join(""))}if(options.time){arr=options.time.split("");var timeComps=new ISet();for(this.badTime=!1,i=0;i<arr.length;i++)if("h"!==(c=arr[i].toLowerCase())&&"m"!==c&&"s"!==c&&"a"!==c&&"z"!==c){if("d"!==c&&"m"!==c&&"y"!==c&&"w"!==c&&"e"!==c&&"n"!==c&&"g"!==c){this.badTime=!0;break}}else timeComps.add(c);this.badTime||(comps=timeComps.asArray().sort(function(left,right){return left<right?-1:right<left?1:0}),this.timeComponents=comps.join(""))}!options.clock||"12"!==options.clock&&"24"!==options.clock||(this.clock=options.clock),options.template&&(this.type="",this.length="",this.dateComponents="",this.timeComponents="",this.template=options.template),options.timezone&&(options.timezone instanceof TimeZone?(this.tz=options.timezone,this.timezone=this.tz.getId()):this.timezone=options.timezone),"boolean"==typeof options.useNative&&(this.useNative=options.useNative),void 0===options.meridiems||"chinese"!==options.meridiems&&"gregorian"!==options.meridiems&&"ethiopic"!==options.meridiems||(this.meridiems=options.meridiems),void 0!==options.sync&&(sync=!0===options.sync),loadParams=options.loadParams,new LocaleInfo(this.locale,{sync:sync,loadParams:loadParams,onLoad:ilib.bind(this,function(li){this.locinfo=li,this.calName=this.calName||this.locinfo.getCalendar()||"gregorian",ilib.isDynCode()&&DateFactory._init(this.calName),CalendarFactory({type:this.calName,sync:sync,loadParams:loadParams,onLoad:ilib.bind(this,function(cal){this.cal=cal,this.cal||(this.cal=new GregorianCal),"default"===this.meridiems&&(this.meridiems=li.getMeridiemsStyle()),new ResBundle({locale:this.locale,name:"sysres",sync:sync,loadParams:loadParams,onLoad:ilib.bind(this,function(rb){if(this.sysres=rb,this.tz)this._init(options);else{var timezone=options.timezone;timezone||options.locale||(timezone="local"),new TimeZone({locale:this.locale,id:timezone,sync:sync,loadParams:loadParams,onLoad:ilib.bind(this,function(tz){this.tz=tz,this._init(options)})})}})})})})})})};DateFmt.lenmap={s:"short",m:"medium",l:"long",f:"full"},DateFmt.defaultFmt={gregorian:{order:"{date} {time}",date:{dmwy:"EEE d/MM/yyyy",dmy:"d/MM/yyyy",dmw:"EEE d/MM",dm:"d/MM",my:"MM/yyyy",dw:"EEE d",d:"dd",m:"MM",y:"yyyy",n:"NN",w:"EEE"},time:{12:"h:mm:ssa",24:"H:mm:ss"},range:{c00:"{st} - {et}, {sd}/{sm}/{sy}",c01:"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}",c02:"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}",c03:"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}",c10:"{sd}-{ed}/{sm}/{sy}",c11:"{sd}/{sm} - {ed}/{em} {sy}",c12:"{sd}/{sm}/{sy} - {ed}/{em}/{ey}",c20:"{sm}/{sy} - {em}/{ey}",c30:"{sy} - {ey}"}},islamic:"gregorian",hebrew:"gregorian",julian:"gregorian",buddhist:"gregorian",persian:"gregorian","persian-algo":"gregorian",han:"gregorian"},DateFmt.monthNameLenMap={short:"N",medium:"NN",long:"MMM",full:"MMMM"},DateFmt.weekDayLenMap={short:"E",medium:"EE",long:"EEE",full:"EEEE"},DateFmt.getMeridiemsRange=function(options){options=options||{sync:!0};var args=JSUtils.merge({},options);return args.onLoad=function(fmt){"function"==typeof options.onLoad&&options.onLoad(fmt.getMeridiemsRange())},new DateFmt(args).getMeridiemsRange()},DateFmt.prototype={_init:function(options){void 0===options.sync&&(options.sync=!0),Utils.loadData({object:"DateFmt",locale:this.locale,name:"dateformats.json",sync:options.sync,loadParams:options.loadParams,callback:ilib.bind(this,function(formats){formats||(formats=ilib.data.dateformats||DateFmt.defaultFmt),this.info=formats;var ret=this;if(this.template)this._massageTemplate();else if(void 0===this.clock&&(this.clock=this.locinfo.getClock()),"boolean"!=typeof options.sync||options.sync)this._initTemplate(formats),this._massageTemplate();else try{this._initTemplate(formats),this._massageTemplate()}catch(e){ret=void 0}"function"==typeof options.onLoad&&options.onLoad(ret)})})},_initTemplate:function(formats){if(!formats[this.calName])throw"No formats available for calendar "+this.calName+" in locale "+this.locale.toString();var name=formats[this.calName];switch(this.formats="string"==typeof name?formats[name]:name,this.template="",this.type){case"datetime":this.template=this.formats&&this._getLengthFormat(this.formats.order,this.length)||"{date} {time}",this.template=this.template.replace("{date}",this._getFormat(this.formats.date,this.dateComponents,this.length)||""),this.template=this.template.replace("{time}",this._getFormat(this.formats.time[this.clock],this.timeComponents,this.length)||"");break;case"date":this.template=this._getFormat(this.formats.date,this.dateComponents,this.length);break;case"time":this.template=this._getFormat(this.formats.time[this.clock],this.timeComponents,this.length)}this.componentOrder=this._getFormat(this.formats.date,"dmy","l").replace(/[^dMy]/g,"").replace(/y+/,"y").replace(/d+/,"d").replace(/M+/,"m")},_massageTemplate:function(){var i,digits;if(this.clock&&this.template){var temp="";switch(this.clock){case"24":for(i=0;i<this.template.length;i++)if("'"==this.template.charAt(i)){for(temp+=this.template.charAt(i++);i<this.template.length&&"'"!==this.template.charAt(i);)temp+=this.template.charAt(i++);i<this.template.length&&(temp+=this.template.charAt(i))}else"K"==this.template.charAt(i)?temp+="k":"h"==this.template.charAt(i)?temp+="H":temp+=this.template.charAt(i);this.template=temp;break;case"12":for(i=0;i<this.template.length;i++)if("'"==this.template.charAt(i)){for(temp+=this.template.charAt(i++);i<this.template.length&&"'"!==this.template.charAt(i);)temp+=this.template.charAt(i++);i<this.template.length&&(temp+=this.template.charAt(i))}else"k"==this.template.charAt(i)?temp+="K":"H"==this.template.charAt(i)?temp+="h":temp+=this.template.charAt(i);this.template=temp}}this.templateArr=this._tokenize(this.template),"boolean"==typeof this.useNative?this.useNative&&(digits=this.locinfo.getNativeDigits())&&(this.digits=digits):"native"===this.locinfo.getDigitsStyle()&&(digits=this.locinfo.getNativeDigits())&&(this.useNative=!0,this.digits=digits)},_tokenize:function(template){var start,ch,letter,i=0,arr=[];if(template)for(;i<template.length;){if(start=i,"'"===(ch=template.charAt(i))){for(i++;i<template.length&&"'"!==template.charAt(i);)i++;i<template.length&&i++}else if("a"<=ch&&ch<="z"||"A"<=ch&&ch<="Z")for(letter=template.charAt(i);i<template.length&&ch===letter;)ch=template.charAt(++i);else for(;i<template.length&&"'"!==ch&&(ch<"a"||"z"<ch)&&(ch<"A"||"Z"<ch);)ch=template.charAt(++i);arr.push(template.substring(start,i))}return arr},_getFormatInternal:function getFormatInternal(obj,components,length){if(void 0!==components&&obj&&obj[components])return this._getLengthFormat(obj[components],length)},_standAlones:{m:"l",my:"mys",d:"a",w:"e",y:"r"},_getFormat:function getFormat(obj,components,length){if(components&&this._standAlones[components]){var tmp=this._getFormatInternal(obj,this._standAlones[components],length);if(tmp)return tmp}return this._getFormatInternal(obj,components,length)},_getLengthFormat:function getLengthFormat(obj,length){return"string"==typeof obj?obj:obj[length]?obj[length]:void 0},getLocale:function(){return this.locale},getTemplate:function(){return this.template},getDateComponentOrder:function(){return this.componentOrder},getType:function(){return this.type},getCalendar:function(){return this.cal.getType()},getLength:function(){return DateFmt.lenmap[this.length]||""},getDateComponents:function(){return this.dateComponents||""},getTimeComponents:function(){return this.timeComponents||""},getTimeZone:function(){return this.tz},getClock:function(){return this.clock||this.locinfo.getClock()},getMeridiemsRange:function(){var result,_getSysString=function(key){return(this.sysres.getString(void 0,key+"-"+this.calName)||this.sysres.getString(void 0,key)).toString()};switch(this.meridiems){case"chinese":result=[{name:_getSysString.call(this,"azh0"),start:"00:00",end:"05:59"},{name:_getSysString.call(this,"azh1"),start:"06:00",end:"08:59"},{name:_getSysString.call(this,"azh2"),start:"09:00",end:"11:59"},{name:_getSysString.call(this,"azh3"),start:"12:00",end:"12:59"},{name:_getSysString.call(this,"azh4"),start:"13:00",end:"17:59"},{name:_getSysString.call(this,"azh5"),start:"18:00",end:"20:59"},{name:_getSysString.call(this,"azh6"),start:"21:00",end:"23:59"}];break;case"ethiopic":result=[{name:_getSysString.call(this,"a0-ethiopic"),start:"00:00",end:"05:59"},{name:_getSysString.call(this,"a1-ethiopic"),start:"06:00",end:"06:00"},{name:_getSysString.call(this,"a2-ethiopic"),start:"06:01",end:"11:59"},{name:_getSysString.call(this,"a3-ethiopic"),start:"12:00",end:"17:59"},{name:_getSysString.call(this,"a4-ethiopic"),start:"18:00",end:"23:59"}];break;default:result=[{name:_getSysString.call(this,"a0"),start:"00:00",end:"11:59"},{name:_getSysString.call(this,"a1"),start:"12:00",end:"23:59"}]}return result},_findMeridiem:function(hours,minutes){var range=this.info.dayPeriods;if(!range)return"";for(var minuteOfDay=60*hours+minutes,shortest={name:"",length:2e3},i=0;i<range.length;i++){var period=range[i];if(minuteOfDay===period.at||minuteOfDay>=period.from&&minuteOfDay<period.to){var periodCode="B"+i,length=void 0!==period.at?0:period.to-period.from;length<shortest.length&&(shortest={name:this.sysres.getString(void 0,periodCode+"-"+this.calName)||this.sysres.getString(void 0,periodCode),length:length})}}return shortest.name},_getTemplate:function(prefix,calendar){return"gregorian"!==calendar?prefix+"-"+calendar:prefix},getMonthsOfYear:function(options){var date,monthCount,length=options&&options.length||this.getLength(),template=DateFmt.monthNameLenMap[length],months=[void 0];options&&(options.date&&(date=DateFactory._dateToIlib(options.date)),options.year&&(date=DateFactory({year:options.year,month:1,day:1,type:this.cal.getType()}))),date||(date=DateFactory({calendar:this.cal.getType()})),monthCount=this.cal.getNumMonths(date.getYears());for(var i=1;i<=monthCount;i++)months[i]=this.sysres.getString(this._getTemplate(template+i,this.cal.getType())).toString();return months},getDaysOfWeek:function(options){for(var length=options&&options.length||this.getLength(),template=DateFmt.weekDayLenMap[length],days=[],i=0;i<7;i++)days[i]=this.sysres.getString(this._getTemplate(template+i,this.cal.getType())).toString();return days},toString:function(){return this.getTemplate()},_formatTemplate:function(date,templateArr){var i,key,temp,str="";for(i=0;i<templateArr.length;i++)switch(templateArr[i]){case"d":str+=date.day||1;break;case"dd":str+=JSUtils.pad(date.day||"1",2);break;case"yy":temp=""+(date.year||0)%100,str+=JSUtils.pad(temp,2);break;case"yyyy":str+=JSUtils.pad(date.year||"0",4);break;case"M":str+=date.month||1;break;case"MM":str+=JSUtils.pad(date.month||"1",2);break;case"h":0==(temp=(date.hour||0)%12)&&(temp="12"),str+=temp;break;case"hh":0==(temp=(date.hour||0)%12)&&(temp="12"),str+=JSUtils.pad(temp,2);break;case"K":str+=temp=(date.hour||0)%12;break;case"KK":temp=(date.hour||0)%12,str+=JSUtils.pad(temp,2);break;case"H":str+=date.hour||"0";break;case"HH":str+=JSUtils.pad(date.hour||"0",2);break;case"k":str+=0==date.hour?"24":date.hour;break;case"kk":temp=0==date.hour?"24":date.hour,str+=JSUtils.pad(temp,2);break;case"m":str+=date.minute||"0";break;case"mm":str+=JSUtils.pad(date.minute||"0",2);break;case"s":str+=date.second||"0";break;case"ss":str+=JSUtils.pad(date.second||"0",2);break;case"S":str+=date.millisecond||"0";break;case"SSS":str+=JSUtils.pad(date.millisecond||"0",3);break;case"N":case"NN":case"MMM":case"MMMM":case"L":case"LL":case"LLL":case"LLLL":key=templateArr[i]+(date.month||1),str+=this.sysres.getString(void 0,key+"-"+this.calName)||this.sysres.getString(void 0,key)||this.sysres.getString(void 0,key.replace(/L/g,"M")+"-"+this.calName)||this.sysres.getString(void 0,key.replace(/L/g,"M"));break;case"E":case"EE":case"EEE":case"EEEE":case"c":case"cc":case"ccc":case"cccc":key=templateArr[i]+date.getDayOfWeek(),str+=this.sysres.getString(void 0,key+"-"+this.calName)||this.sysres.getString(void 0,key);break;case"a":switch(this.meridiems){case"chinese":key=date.hour<6?"azh0":date.hour<9?"azh1":date.hour<12?"azh2":date.hour<13?"azh3":date.hour<18?"azh4":date.hour<21?"azh5":"azh6";break;case"ethiopic":date.hour<6?key="a0-ethiopic":6===date.hour&&0===date.minute?key="a1-ethiopic":6<=date.hour&&date.hour<12?key="a2-ethiopic":12<=date.hour&&date.hour<18?key="a3-ethiopic":18<=date.hour&&(key="a4-ethiopic");break;default:key=date.hour<12?"a0":"a1"}str+=this.sysres.getString(void 0,key+"-"+this.calName)||this.sysres.getString(void 0,key);break;case"B":str+=this._findMeridiem(date.hour,date.minute);break;case"w":str+=date.getWeekOfYear();break;case"ww":str+=JSUtils.pad(date.getWeekOfYear(),2);break;case"D":str+=date.getDayOfYear();break;case"DD":str+=JSUtils.pad(date.getDayOfYear(),2);break;case"DDD":str+=JSUtils.pad(date.getDayOfYear(),3);break;case"W":str+=date.getWeekOfMonth(this.locale);break;case"G":key="G"+date.getEra(),str+=this.sysres.getString(void 0,key+"-"+this.calName)||this.sysres.getString(void 0,key);break;case"O":str+=(temp=this.sysres.getString("1#1st|2#2nd|3#3rd|21#21st|22#22nd|23#23rd|31#31st|#{num}th","ordinalChoice")).formatChoice(date.day,{num:date.day});break;case"z":str+=this.getTimeZone().getDisplayName(date,"standard");break;case"Z":str+=this.getTimeZone().getDisplayName(date,"rfc822");break;default:str+=templateArr[i].replace(/'/g,"")}return this.digits&&(str=JSUtils.mapString(str,this.digits)),str},format:function(dateLike){var thisZoneName=this.tz&&this.tz.getId()||"local",date=DateFactory._dateToIlib(dateLike,thisZoneName,this.locale);if(!(date.getCalendar&&date instanceof IDate))throw"Wrong date type passed to DateFmt.format()";(date.timezone||"local")===thisZoneName&&date.getCalendar()===this.calName||(date=DateFactory({type:this.calName,timezone:thisZoneName,julianday:date.getJulianDay()}));return this._formatTemplate(date,this.templateArr)},formatRelative:function(reference,date){var fmt,diff,absDiff,num;if(reference=DateFactory._dateToIlib(reference),date=DateFactory._dateToIlib(date),"object"!=typeof reference||!reference.getCalendar||reference.getCalendar()!==this.calName||"object"!=typeof date||!date.getCalendar||date.getCalendar()!==this.calName)throw"Wrong calendar type";if(diff=reference.getRataDie()-date.getRataDie(),(absDiff=Math.abs(diff))<694444e-9)switch(num=Math.round(86400*absDiff),this.length){case"s":fmt=0<diff?this.sysres.getString("#{num}s ago"):this.sysres.getString("#in {num}s");break;case"m":fmt=0<diff?this.sysres.getString("1#1 sec ago|#{num} sec ago"):this.sysres.getString("1#in 1 sec|#in {num} sec");break;default:case"f":case"l":fmt=0<diff?this.sysres.getString("1#1 second ago|#{num} seconds ago"):this.sysres.getString("1#in 1 second|#in {num} seconds")}else if(absDiff<.041666667)switch(num=Math.round(1440*absDiff),this.length){case"s":fmt=0<diff?this.sysres.getString("#{num}mi ago"):this.sysres.getString("#in {num}mi");break;case"m":fmt=0<diff?this.sysres.getString("1#1 min ago|#{num} min ago"):this.sysres.getString("1#in 1 min|#in {num} min");break;default:case"f":case"l":fmt=0<diff?this.sysres.getString("1#1 minute ago|#{num} minutes ago"):this.sysres.getString("1#in 1 minute|#in {num} minutes")}else if(absDiff<1)switch(num=Math.round(24*absDiff),this.length){case"s":fmt=0<diff?this.sysres.getString("#{num}h ago"):this.sysres.getString("#in {num}h");break;case"m":fmt=0<diff?this.sysres.getString("1#1 hr ago|#{num} hrs ago"):this.sysres.getString("1#in 1 hr|#in {num} hrs");break;default:case"f":case"l":fmt=0<diff?this.sysres.getString("1#1 hour ago|#{num} hours ago"):this.sysres.getString("1#in 1 hour|#in {num} hours")}else if(absDiff<14)switch(num=Math.round(absDiff),this.length){case"s":fmt=0<diff?this.sysres.getString("#{num}d ago"):this.sysres.getString("#in {num}d");break;case"m":fmt=0<diff?this.sysres.getString("1#1 dy ago|#{nudurationm} dys ago"):this.sysres.getString("1#in 1 dy|#in {num} dys");break;default:case"f":case"l":fmt=0<diff?this.sysres.getString("1#1 day ago|#{num} days ago"):this.sysres.getString("1#in 1 day|#in {num} days")}else if(absDiff<84)switch(num=Math.round(absDiff/7),this.length){case"s":fmt=0<diff?this.sysres.getString("#{num}w ago"):this.sysres.getString("#in {num}w");break;case"m":fmt=0<diff?this.sysres.getString("1#1 wk ago|#{num} wks ago"):this.sysres.getString("1#in 1 wk|#in {num} wks");break;default:case"f":case"l":fmt=0<diff?this.sysres.getString("1#1 week ago|#{num} weeks ago"):this.sysres.getString("1#in 1 week|#in {num} weeks")}else if(absDiff<730)switch(num=Math.round(absDiff/30.4),this.length){case"s":fmt=0<diff?this.sysres.getString("#{num}mo ago"):this.sysres.getString("#in {num}mo");break;case"m":fmt=0<diff?this.sysres.getString("1#1 mon ago|#{num} mons ago"):this.sysres.getString("1#in 1 mon|#in {num} mons");break;default:case"f":case"l":fmt=0<diff?this.sysres.getString("1#1 month ago|#{num} months ago"):this.sysres.getString("1#in 1 month|#in {num} months")}else switch(num=Math.round(absDiff/365),this.length){case"s":fmt=0<diff?this.sysres.getString("#{num}y ago"):this.sysres.getString("#in {num}y");break;case"m":fmt=0<diff?this.sysres.getString("1#1 yr ago|#{num} yrs ago"):this.sysres.getString("1#in 1 yr|#in {num} yrs");break;default:case"f":case"l":fmt=0<diff?this.sysres.getString("1#1 year ago|#{num} years ago"):this.sysres.getString("1#in 1 year|#in {num} years")}return fmt.formatChoice(num,{num:num})}},module.exports=DateFmt;

/***/ }),

/***/ "./node_modules/ilib/lib/DurationFmt.js":
/*!**********************************************!*\
  !*** ./node_modules/ilib/lib/DurationFmt.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// !data dateformats sysres
var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),DateFmt=__webpack_require__(/*! ./DateFmt.js */ "./node_modules/ilib/lib/DateFmt.js"),IString=__webpack_require__(/*! ./IString.js */ "./node_modules/ilib/lib/IString.js"),ResBundle=__webpack_require__(/*! ./ResBundle.js */ "./node_modules/ilib/lib/ResBundle.js"),ScriptInfo=__webpack_require__(/*! ./ScriptInfo.js */ "./node_modules/ilib/lib/ScriptInfo.js"),DurationFmt=function(options){var sync=!0,loadParams=void 0;this.locale=new Locale(),this.length="short",this.style="text",options&&(options.locale&&(this.locale="string"==typeof options.locale?new Locale(options.locale):options.locale),options.length&&("short"!==options.length&&"medium"!==options.length&&"long"!==options.length&&"full"!==options.length||(this.length=options.length)),options.style&&("text"!==options.style&&"clock"!==options.style||(this.style=options.style)),void 0!==options.sync&&(sync=!!options.sync),"boolean"==typeof options.useNative&&(this.useNative=options.useNative),loadParams=options.loadParams),options=options||{sync:!0},new LocaleInfo(this.locale,{sync:sync,loadParams:loadParams,onLoad:ilib.bind(this,function(li){this.script=li.getScript(),new ResBundle({locale:this.locale,name:"sysres",sync:sync,loadParams:loadParams,onLoad:ilib.bind(this,function(sysres){IString.loadPlurals(sync,this.locale,loadParams,ilib.bind(this,function(){switch("medium"===this.length&&"Latn"!==this.script&&"Grek"!==this.script&&"Cyrl"!==this.script&&(this.length="short"),this.length){case"short":this.components={year:sysres.getString("#{num}y"),month:sysres.getString("#{num}m","durationShortMonths"),week:sysres.getString("#{num}w"),day:sysres.getString("#{num}d"),hour:sysres.getString("#{num}h"),minute:sysres.getString("#{num}m","durationShortMinutes"),second:sysres.getString("#{num}s"),millisecond:sysres.getString("#{num}m","durationShortMillis"),separator:sysres.getString(" ","separatorShort"),finalSeparator:""};break;case"medium":this.components={year:sysres.getString("1#1 yr|#{num} yrs","durationMediumYears"),month:sysres.getString("1#1 mo|#{num} mos"),week:sysres.getString("1#1 wk|#{num} wks","durationMediumWeeks"),day:sysres.getString("1#1 dy|#{num} dys"),hour:sysres.getString("1#1 hr|#{num} hrs","durationMediumHours"),minute:sysres.getString("1#1 mi|#{num} min"),second:sysres.getString("1#1 se|#{num} sec"),millisecond:sysres.getString("#{num} ms","durationMediumMillis"),separator:sysres.getString(" ","separatorMedium"),finalSeparator:""};break;case"long":this.components={year:sysres.getString("1#1 yr|#{num} yrs"),month:sysres.getString("1#1 mon|#{num} mons"),week:sysres.getString("1#1 wk|#{num} wks"),day:sysres.getString("1#1 day|#{num} days","durationLongDays"),hour:sysres.getString("1#1 hr|#{num} hrs"),minute:sysres.getString("1#1 min|#{num} min"),second:sysres.getString("1#1 sec|#{num} sec"),millisecond:sysres.getString("#{num} ms"),separator:sysres.getString(", ","separatorLong"),finalSeparator:""};break;case"full":this.components={year:sysres.getString("1#1 year|#{num} years"),month:sysres.getString("1#1 month|#{num} months"),week:sysres.getString("1#1 week|#{num} weeks"),day:sysres.getString("1#1 day|#{num} days"),hour:sysres.getString("1#1 hour|#{num} hours"),minute:sysres.getString("1#1 minute|#{num} minutes"),second:sysres.getString("1#1 second|#{num} seconds"),millisecond:sysres.getString("1#1 millisecond|#{num} milliseconds"),separator:sysres.getString(", ","separatorFull"),finalSeparator:sysres.getString(" and ","finalSeparatorFull")}}"clock"!==this.style?this._init(li,options):new DateFmt({locale:this.locale,calendar:"gregorian",type:"time",time:"ms",sync:sync,loadParams:loadParams,useNative:this.useNative,onLoad:ilib.bind(this,function(fmtMS){this.timeFmtMS=fmtMS,new DateFmt({locale:this.locale,calendar:"gregorian",type:"time",time:"hm",sync:sync,loadParams:loadParams,useNative:this.useNative,onLoad:ilib.bind(this,function(fmtHM){this.timeFmtHM=fmtHM,new DateFmt({locale:this.locale,calendar:"gregorian",type:"time",time:"hms",sync:sync,loadParams:loadParams,useNative:this.useNative,onLoad:ilib.bind(this,function(fmtHMS){this.timeFmtHMS=fmtHMS,this.timeFmtHM.template=this.timeFmtHM.template.replace(/hh?/,"H"),this.timeFmtHM.templateArr=this.timeFmtHM._tokenize(this.timeFmtHM.template),this.timeFmtHMS.template=this.timeFmtHMS.template.replace(/hh?/,"H"),this.timeFmtHMS.templateArr=this.timeFmtHMS._tokenize(this.timeFmtHMS.template),this._init(this.timeFmtHM.locinfo,options)})})})})})})}))})})})})};DurationFmt.complist={text:["year","month","week","day","hour","minute","second","millisecond"],clock:["year","month","week","day"]},DurationFmt.prototype._mapDigits=function(str){return this.useNative&&this.digits?JSUtils.mapString(str.toString(),this.digits):str},DurationFmt.prototype._init=function(locinfo,options){var digits;new ScriptInfo(locinfo.getScript(),{sync:options.sync,loadParams:options.loadParams,onLoad:ilib.bind(this,function(scriptInfo){this.scriptDirection=scriptInfo.getScriptDirection(),"boolean"==typeof this.useNative?this.useNative&&(digits=locinfo.getNativeDigits())&&(this.digits=digits):"native"===locinfo.getDigitsStyle()&&(digits=locinfo.getNativeDigits())&&(this.useNative=!0,this.digits=digits),"function"==typeof options.onLoad&&options.onLoad(this)})})},DurationFmt.prototype.format=function(components){var i,list,fmt,secondlast=!0,str="";for(i=(list=DurationFmt.complist[this.style]).length-1;0<=i;i--)void 0!==components[list[i]]&&0!=components[list[i]]&&(0<str.length&&(str=("full"===this.length&&secondlast?this.components.finalSeparator:this.components.separator)+str,secondlast=!1),str=this.components[list[i]].formatChoice(components[list[i]],{num:this._mapDigits(components[list[i]])})+str);return"clock"===this.style&&(fmt=void 0!==components.hour?void 0!==components.second?this.timeFmtHMS:this.timeFmtHM:this.timeFmtMS,0<str.length&&(str+=this.components.separator),str+=fmt._formatTemplate(components,fmt.templateArr)),"rtl"===this.scriptDirection&&(str="‏"+str),new IString(str)},DurationFmt.prototype.getLocale=function(){return this.locale},DurationFmt.prototype.getLength=function(){return this.length},DurationFmt.prototype.getStyle=function(){return this.style},module.exports=DurationFmt;

/***/ }),

/***/ "./node_modules/ilib/lib/EthiopicCal.js":
/*!**********************************************!*\
  !*** ./node_modules/ilib/lib/EthiopicCal.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Calendar=__webpack_require__(/*! ./Calendar.js */ "./node_modules/ilib/lib/Calendar.js"),EthiopicCal=function(options){this.type="ethiopic",options&&"function"==typeof options.onLoad&&options.onLoad(this)};EthiopicCal.prototype.getNumMonths=function(year){return 13},EthiopicCal.prototype.getMonLength=function(month,year){var m=month;switch(typeof m){case"string":m=parseInt(m,10);break;case"function":case"object":case"undefined":return 30}return m<13?30:this.isLeapYear(year)?6:5},EthiopicCal.prototype.isLeapYear=function(year){var y=year;switch(typeof y){case"string":y=parseInt(y,10);break;case"object":if("number"!=typeof y.year)return!1;y=y.year;break;case"function":case"undefined":return!1}return 3===MathUtils.mod(y,4)},EthiopicCal.prototype.getType=function(){return this.type},Calendar._constructors.ethiopic=EthiopicCal,module.exports=EthiopicCal;

/***/ }),

/***/ "./node_modules/ilib/lib/EthiopicDate.js":
/*!***********************************************!*\
  !*** ./node_modules/ilib/lib/EthiopicDate.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),EthiopicRataDie=__webpack_require__(/*! ./EthiopicRataDie.js */ "./node_modules/ilib/lib/EthiopicRataDie.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),TimeZone=__webpack_require__(/*! ./TimeZone.js */ "./node_modules/ilib/lib/TimeZone.js"),EthiopicCal=__webpack_require__(/*! ./EthiopicCal.js */ "./node_modules/ilib/lib/EthiopicCal.js"),EthiopicDate=function(params){this.cal=new EthiopicCal(),"boolean"==typeof(params=params||{}).noinstance&&params.noinstance||(params.timezone&&(this.timezone=params.timezone),params.locale&&(this.locale="string"==typeof params.locale?new Locale(params.locale):params.locale),this.timezone?this._init(params):this.locale?new LocaleInfo(this.locale,{sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(li){this.li=li,this.timezone=li.getTimeZone(),this._init(params)})}):(this.timezone="local",this._init(params)))};EthiopicDate.prototype=new IDate({noinstance:!0}),EthiopicDate.prototype.parent=IDate,(EthiopicDate.prototype.constructor=EthiopicDate).prototype._init=function(params){new TimeZone({id:this.timezone,sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(tz){this.tz=tz,(params.year||params.month||params.day||params.hour||params.minute||params.second||params.millisecond)&&(this.year=parseInt(params.year,10)||0,this.month=parseInt(params.month,10)||1,this.day=parseInt(params.day,10)||1,this.hour=parseInt(params.hour,10)||0,this.minute=parseInt(params.minute,10)||0,this.second=parseInt(params.second,10)||0,this.millisecond=parseInt(params.millisecond,10)||0,this.dayOfYear=parseInt(params.dayOfYear,10),"boolean"==typeof params.dst&&(this.dst=params.dst),this.rd=this.newRd(this),this.offset=this.tz._getOffsetMillisWallTime(this)/864e5,0!==this.offset&&(this.rd=this.newRd({rd:this.rd.getRataDie()-this.offset}))),this.rd||(this.rd=this.newRd(params),this._calcDateComponents()),"function"==typeof params.onLoad&&params.onLoad(this)})})},EthiopicDate.prototype.newRd=function(params){return new EthiopicRataDie(params)},EthiopicDate.prototype._calcYear=function(rd){return Math.floor((4*(Math.floor(rd)-1)+1463)/1461)},EthiopicDate.prototype._calcDateComponents=function(){var remainder,rd=this.rd.getRataDie();this.year=this._calcYear(rd),void 0===this.offset&&(this.year=this._calcYear(rd),this.tz||(this.tz=new TimeZone({id:this.timezone})),this.offset=this.tz.getOffsetMillis(this)/864e5),0!==this.offset&&(rd+=this.offset,this.year=this._calcYear(rd)),remainder=rd+1-this.newRd({year:this.year,month:1,day:1,hour:0,minute:0,second:0,millisecond:0}).getRataDie(),this.month=Math.floor((remainder-1)/30)+1,remainder-=30*(this.month-1),this.day=Math.floor(remainder),remainder-=this.day,remainder=Math.round(864e5*remainder),this.hour=Math.floor(remainder/36e5),remainder-=36e5*this.hour,this.minute=Math.floor(remainder/6e4),remainder-=6e4*this.minute,this.second=Math.floor(remainder/1e3),remainder-=1e3*this.second,this.millisecond=remainder},EthiopicDate.prototype.getDayOfWeek=function(){var rd=Math.floor(this.rd.getRataDie()+(this.offset||0));return MathUtils.mod(rd-5,7)},EthiopicDate.prototype.getCalendar=function(){return"ethiopic"},IDate._constructors.ethiopic=EthiopicDate,module.exports=EthiopicDate;

/***/ }),

/***/ "./node_modules/ilib/lib/EthiopicRataDie.js":
/*!**************************************************!*\
  !*** ./node_modules/ilib/lib/EthiopicRataDie.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var EthiopicCal=__webpack_require__(/*! ./EthiopicCal.js */ "./node_modules/ilib/lib/EthiopicCal.js"),RataDie=__webpack_require__(/*! ./RataDie.js */ "./node_modules/ilib/lib/RataDie.js"),EthiopicRataDie=function(params){this.cal=params&&params.cal||new EthiopicCal(),this.rd=NaN,RataDie.call(this,params)};EthiopicRataDie.prototype=new RataDie(),EthiopicRataDie.prototype.parent=RataDie,(EthiopicRataDie.prototype.constructor=EthiopicRataDie).prototype.epoch=1724219.75,EthiopicRataDie.prototype._setDateComponents=function(date){var year=date.year,years=365*(year-1)+Math.floor(year/4),dayInYear=30*(date.month-1)+date.day,rdtime=(36e5*date.hour+6e4*date.minute+1e3*date.second+date.millisecond)/864e5;this.rd=years+dayInYear+rdtime},module.exports=EthiopicRataDie;

/***/ }),

/***/ "./node_modules/ilib/lib/GregRataDie.js":
/*!**********************************************!*\
  !*** ./node_modules/ilib/lib/GregRataDie.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),GregorianCal=__webpack_require__(/*! ./GregorianCal.js */ "./node_modules/ilib/lib/GregorianCal.js"),RataDie=__webpack_require__(/*! ./RataDie.js */ "./node_modules/ilib/lib/RataDie.js"),GregRataDie=function(params){this.cal=params&&params.cal||new GregorianCal(),this.rd=NaN,RataDie.call(this,params)};GregRataDie.prototype=new RataDie(),GregRataDie.prototype.parent=RataDie,(GregRataDie.prototype.constructor=GregRataDie).cumMonthLengths=[0,31,59,90,120,151,181,212,243,273,304,334,365],GregRataDie.cumMonthLengthsLeap=[0,31,60,91,121,152,182,213,244,274,305,335,366],GregRataDie.prototype._setDateComponents=function(date){var year=parseInt(date.year,10)||0,month=parseInt(date.month,10)||1,day=parseInt(date.day,10)||1,hour=parseInt(date.hour,10)||0,minute=parseInt(date.minute,10)||0,second=parseInt(date.second,10)||0,millisecond=parseInt(date.millisecond,10)||0,years=365*(year-1)+Math.floor((year-1)/4)-Math.floor((year-1)/100)+Math.floor((year-1)/400),dayInYear=(1<month?GregRataDie.cumMonthLengths[month-1]:0)+day+(GregorianCal.prototype.isLeapYear.call(this.cal,year)&&2<month?1:0),rdtime=(36e5*hour+6e4*minute+1e3*second+millisecond)/864e5;this.rd=years+dayInYear+rdtime},GregRataDie.prototype._onOrBefore=function(rd,dayOfWeek){return rd-MathUtils.mod(Math.floor(rd)-dayOfWeek,7)},module.exports=GregRataDie;

/***/ }),

/***/ "./node_modules/ilib/lib/GregorianCal.js":
/*!***********************************************!*\
  !*** ./node_modules/ilib/lib/GregorianCal.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Utils=__webpack_require__(/*! ./Utils.js */ "./node_modules/ilib/lib/Utils.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Calendar=__webpack_require__(/*! ./Calendar.js */ "./node_modules/ilib/lib/Calendar.js"),GregorianCal=function(options){options&&options.noinstance||(this.type="gregorian"),options&&"function"==typeof options.onLoad&&options.onLoad(this)};GregorianCal.monthLengths=[31,28,31,30,31,30,31,31,30,31,30,31],GregorianCal.prototype.getNumMonths=function(year){return 12},GregorianCal.prototype.getMonLength=function(month,year){return 2===month&&this.isLeapYear(year)?29:GregorianCal.monthLengths[month-1]},GregorianCal.prototype.isLeapYear=function(year){var y="number"==typeof year?year:year.getYears(),centuries=MathUtils.mod(y,400);return 0===MathUtils.mod(y,4)&&100!==centuries&&200!==centuries&&300!==centuries},GregorianCal.prototype.getType=function(){return this.type},Calendar._constructors.gregorian=GregorianCal,module.exports=GregorianCal;

/***/ }),

/***/ "./node_modules/ilib/lib/GregorianDate.js":
/*!************************************************!*\
  !*** ./node_modules/ilib/lib/GregorianDate.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),SearchUtils=__webpack_require__(/*! ./SearchUtils.js */ "./node_modules/ilib/lib/SearchUtils.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),TimeZone=__webpack_require__(/*! ./TimeZone.js */ "./node_modules/ilib/lib/TimeZone.js"),GregorianCal=__webpack_require__(/*! ./GregorianCal.js */ "./node_modules/ilib/lib/GregorianCal.js"),GregRataDie=__webpack_require__(/*! ./GregRataDie.js */ "./node_modules/ilib/lib/GregRataDie.js"),GregorianDate=function(params){this.cal=new GregorianCal(),"boolean"==typeof(params=params||{}).noinstance&&params.noinstance||(params.timezone&&(this.timezone=params.timezone.toString()),params.locale&&(this.locale="string"==typeof params.locale?new Locale(params.locale):params.locale),this.timezone?this._init(params):this.locale?new LocaleInfo(this.locale,{sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(li){this.li=li,this.timezone=li.getTimeZone(),this._init(params)})}):(this.timezone="local",this._init(params)))};GregorianDate.prototype=new IDate({noinstance:!0}),GregorianDate.prototype.parent=IDate,(GregorianDate.prototype.constructor=GregorianDate).prototype._init=function(params){if(params.year||params.month||params.day||params.hour||params.minute||params.second||params.millisecond)if(this.year=parseInt(params.year,10)||0,this.month=parseInt(params.month,10)||1,this.day=parseInt(params.day,10)||1,this.hour=parseInt(params.hour,10)||0,this.minute=parseInt(params.minute,10)||0,this.second=parseInt(params.second,10)||0,this.millisecond=parseInt(params.millisecond,10)||0,"boolean"==typeof params.dst&&(this.dst=params.dst),this.rd=this.newRd(params),this.offset=0,"local"===this.timezone&&void 0===params.dst){var d=new Date(this.year,this.month-1,this.day,this.hour,this.minute,this.second,this.millisecond),hBefore=new Date(this.year,this.month-1,this.day,this.hour-1,this.minute,this.second,this.millisecond);if(this.offset=-d.getTimezoneOffset()/1440,d.getTimezoneOffset()<hBefore.getTimezoneOffset()){var startOffset=-hBefore.getTimezoneOffset()/1440;this.rd=this.newRd({rd:this.rd.getRataDie()-startOffset})}else this.rd=this.newRd({rd:this.rd.getRataDie()-this.offset});this._init2(params)}else new TimeZone({id:this.timezone,sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(tz){this.tz=tz,this.offset=this.tz._getOffsetMillisWallTime(this)/864e5,this.rd=this.newRd({rd:this.rd.getRataDie()-this.offset}),this._init2(params)})});else this._init2(params)},GregorianDate.prototype._init2=function(params){this.rd||(this.rd=this.newRd(params),this._calcDateComponents()),"function"==typeof params.onLoad&&params.onLoad(this)},GregorianDate.prototype.newRd=function(params){return new GregRataDie(params)},GregorianDate._calcYear=function(rd){var days400,days100,days4,years400,years100,years4,years1,year;return years400=Math.floor((rd-1)/146097),days400=MathUtils.mod(rd-1,146097),years100=Math.floor(days400/36524),days100=MathUtils.mod(days400,36524),years4=Math.floor(days100/1461),days4=MathUtils.mod(days100,1461),year=400*years400+100*years100+4*years4+(years1=Math.floor(days4/365)),4!==years100&&4!==years1&&year++,year},GregorianDate.prototype._calcYear=function(rd){return GregorianDate._calcYear(rd)},GregorianDate.prototype._calcDateComponents=function(){if("local"===this.timezone&&-99280837<=this.rd.getRataDie()&&this.rd.getRataDie()<=100719163){var d=new Date(this.rd.getTimeExtended());this.year=d.getFullYear(),this.month=d.getMonth()+1,this.day=d.getDate(),this.hour=d.getHours(),this.minute=d.getMinutes(),this.second=d.getSeconds(),this.millisecond=d.getMilliseconds(),this.offset=-d.getTimezoneOffset()/1440}else{void 0===this.offset&&(this.year=this._calcYear(this.rd.getRataDie()),this.tz||(this.tz=new TimeZone({id:this.timezone})),this.offset=this.tz.getOffsetMillis(this)/864e5);var rd=this.rd.getRataDie();0!==this.offset&&(rd+=this.offset),this.year=this._calcYear(rd);var remainder=rd-this.newRd({year:this.year,month:1,day:1,cal:this.cal}).getRataDie()+1,cumulative=GregorianCal.prototype.isLeapYear.call(this.cal,this.year)?GregRataDie.cumMonthLengthsLeap:GregRataDie.cumMonthLengths;this.month=SearchUtils.bsearch(Math.floor(remainder),cumulative),remainder-=cumulative[this.month-1],this.day=Math.floor(remainder),remainder-=this.day,remainder=Math.round(864e5*remainder),this.hour=Math.floor(remainder/36e5),remainder-=36e5*this.hour,this.minute=Math.floor(remainder/6e4),remainder-=6e4*this.minute,this.second=Math.floor(remainder/1e3),remainder-=1e3*this.second,this.millisecond=Math.floor(remainder)}},GregorianDate.prototype.getDayOfWeek=function(){var rd=Math.floor(this.rd.getRataDie()+(this.offset||0));return MathUtils.mod(rd,7)},GregorianDate.prototype.getDayOfYear=function(){return(this.cal.isLeapYear(this.year)?GregRataDie.cumMonthLengthsLeap:GregRataDie.cumMonthLengths)[this.month-1]+this.day},GregorianDate.prototype.getEra=function(){return this.year<1?-1:1},GregorianDate.prototype.getCalendar=function(){return"gregorian"},IDate._constructors.gregorian=GregorianDate,module.exports=GregorianDate;

/***/ }),

/***/ "./node_modules/ilib/lib/HanCal.js":
/*!*****************************************!*\
  !*** ./node_modules/ilib/lib/HanCal.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Calendar=__webpack_require__(/*! ./Calendar.js */ "./node_modules/ilib/lib/Calendar.js"),Astro=__webpack_require__(/*! ./Astro.js */ "./node_modules/ilib/lib/Astro.js"),RataDie=__webpack_require__(/*! ./RataDie.js */ "./node_modules/ilib/lib/RataDie.js"),GregorianDate=__webpack_require__(/*! ./GregorianDate.js */ "./node_modules/ilib/lib/GregorianDate.js"),GregRataDie=__webpack_require__(/*! ./GregRataDie.js */ "./node_modules/ilib/lib/GregRataDie.js"),HanCal=function(params){this.type="han";var sync=!params||"boolean"!=typeof params.sync||params.sync;Astro.initAstro(sync,params&&params.loadParams,ilib.bind(this,function(x){params&&"function"==typeof params.onLoad&&params.onLoad(this)}))};HanCal._getElapsedYear=function(year,cycle){var elapsedYear=year||0;return void 0!==year&&year<61&&void 0!==cycle&&(elapsedYear=60*cycle+year),elapsedYear},HanCal._hanNextSolarLongitude=function(jd,longitude){var tz=HanCal._chineseTZ(jd),uni=Astro._universalFromLocal(jd,tz),sol=Astro._nextSolarLongitude(uni,longitude);return Astro._localFromUniversal(sol,tz)},HanCal._majorSTOnOrAfter=function(jd){var tz=HanCal._chineseTZ(jd),uni=Astro._universalFromLocal(jd,tz),next=Astro._fixangle(30*Math.ceil(Astro._solarLongitude(uni)/30));return HanCal._hanNextSolarLongitude(jd,next)},HanCal._solsticeBefore=function(year,cycle){var elapsedYear=HanCal._getElapsedYear(year,cycle),rd=new GregRataDie({year:elapsedYear-2697-1,month:12,day:15,hour:0,minute:0,second:0,millisecond:0});return HanCal._majorSTOnOrAfter(rd.getRataDie()+RataDie.gregorianEpoch)},HanCal._chineseTZ=function(jd){return GregorianDate._calcYear(jd-RataDie.gregorianEpoch)<1929?465.6666666666667:480},HanCal._newMoonOnOrAfter=function(jd){var tz=HanCal._chineseTZ(jd),uni=Astro._universalFromLocal(jd,tz),moon=Astro._newMoonAtOrAfter(uni);return Astro._floorToJD(Astro._localFromUniversal(moon,tz))},HanCal._newMoonBefore=function(jd){var tz=HanCal._chineseTZ(jd),uni=Astro._universalFromLocal(jd,tz),moon=Astro._newMoonBefore(uni);return Astro._floorToJD(Astro._localFromUniversal(moon,tz))},HanCal._leapYearCalc=function(year,cycle){var ret={elapsedYear:HanCal._getElapsedYear(year,cycle)};return ret.solstice1=HanCal._solsticeBefore(ret.elapsedYear),ret.solstice2=HanCal._solsticeBefore(ret.elapsedYear+1),ret.m1=HanCal._newMoonOnOrAfter(Astro._ceilToJD(ret.solstice1)),ret.m2=HanCal._newMoonBefore(Astro._ceilToJD(ret.solstice2)),ret},HanCal._currentMajorST=function(jd){var s=Astro._solarLongitude(Astro._universalFromLocal(jd,HanCal._chineseTZ(jd)));return MathUtils.amod(2+Math.floor(s/30),12)},HanCal._noMajorST=function(jd){return HanCal._currentMajorST(jd)===HanCal._currentMajorST(HanCal._newMoonOnOrAfter(jd+1))},HanCal.prototype.getNumMonths=function(year,cycle){return this.isLeapYear(year,cycle)?13:12},HanCal.prototype.getMonLength=function(month,year){var calc=HanCal._leapYearCalc(year),priorNewMoon=HanCal._newMoonOnOrAfter(calc.m1+29*month);return HanCal._newMoonOnOrAfter(priorNewMoon+1)-priorNewMoon},HanCal.prototype.equivalentCycleYear=function(year){var y=year-(0<=year?474:473);return MathUtils.mod(y,2820)+474},HanCal.prototype.isLeapYear=function(year,cycle){var calc=HanCal._leapYearCalc(year,cycle);return 12===Math.round((calc.m2-calc.m1)/29.530588853)},HanCal.prototype.getLeapMonth=function(year,cycle){var calc=HanCal._leapYearCalc(year,cycle);if(12!=Math.round((calc.m2-calc.m1)/29.530588853))return-1;for(var month=0,m=HanCal._newMoonOnOrAfter(calc.m1+1);!HanCal._noMajorST(m);)month++,m=HanCal._newMoonOnOrAfter(m+1);return month},HanCal.prototype.newYears=function(year,cycle){var calc=HanCal._leapYearCalc(year,cycle),m2=HanCal._newMoonOnOrAfter(calc.m1+1);return 12===Math.round((calc.m2-calc.m1)/29.530588853)&&(HanCal._noMajorST(calc.m1)||HanCal._noMajorST(m2))?HanCal._newMoonOnOrAfter(m2+1):m2},HanCal.prototype.getType=function(){return this.type},Calendar._constructors.han=HanCal,module.exports=HanCal;

/***/ }),

/***/ "./node_modules/ilib/lib/HanDate.js":
/*!******************************************!*\
  !*** ./node_modules/ilib/lib/HanDate.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),TimeZone=__webpack_require__(/*! ./TimeZone.js */ "./node_modules/ilib/lib/TimeZone.js"),Astro=__webpack_require__(/*! ./Astro.js */ "./node_modules/ilib/lib/Astro.js"),HanCal=__webpack_require__(/*! ./HanCal.js */ "./node_modules/ilib/lib/HanCal.js"),GregorianDate=__webpack_require__(/*! ./GregorianDate.js */ "./node_modules/ilib/lib/GregorianDate.js"),HanRataDie=__webpack_require__(/*! ./HanRataDie.js */ "./node_modules/ilib/lib/HanRataDie.js"),RataDie=__webpack_require__(/*! ./RataDie.js */ "./node_modules/ilib/lib/RataDie.js"),HanDate=function(params){(params=params||{}).locale&&(this.locale="string"==typeof params.locale?new Locale(params.locale):params.locale),params.timezone&&(this.timezone=params.timezone),this.timezone?this._init(params):this.locale?new LocaleInfo(this.locale,{sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(li){this.li=li,this.timezone=li.getTimeZone(),this._init(params)})}):(this.timezone="local",this._init(params))};HanDate.prototype=new IDate({noinstance:!0}),HanDate.prototype.parent=IDate,(HanDate.prototype.constructor=HanDate).prototype._init=function(params){new HanCal({sync:!params||"boolean"!=typeof params.sync||params.sync,loadParams:params&&params.loadParams,onLoad:ilib.bind(this,function(cal){if(this.cal=cal,params.year||params.month||params.day||params.hour||params.minute||params.second||params.millisecond||params.cycle||params.cycleYear){if(void 0!==params.cycle){this.cycle=parseInt(params.cycle,10)||0;var year=(void 0!==params.year?parseInt(params.year,10):parseInt(params.cycleYear,10))||0;this.year=HanCal._getElapsedYear(year,this.cycle)}else void 0!==params.year?(this.year=parseInt(params.year,10)||0,this.cycle=Math.floor((this.year-1)/60)):this.year=this.cycle=0;this.month=parseInt(params.month,10)||1,this.day=parseInt(params.day,10)||1,this.hour=parseInt(params.hour,10)||0,this.minute=parseInt(params.minute,10)||0,this.second=parseInt(params.second,10)||0,this.millisecond=parseInt(params.millisecond,10)||0,this.cycleYear=MathUtils.amod(this.year,60),this.dayOfYear=parseInt(params.dayOfYear,10),"boolean"==typeof params.dst&&(this.dst=params.dst),this.newRd({cal:this.cal,cycle:this.cycle,year:this.year,month:this.month,day:this.day,hour:this.hour,minute:this.minute,second:this.second,millisecond:this.millisecond,sync:params.sync,loadParams:params.loadParams,callback:ilib.bind(this,function(rd){rd?(this.rd=rd,new TimeZone({id:this.timezone,sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(tz){this.tz=tz,this.offset=this.tz._getOffsetMillisWallTime(this)/864e5,0!==this.offset?(this.rd=this.newRd({cal:this.cal,rd:this.rd.getRataDie()-this.offset}),this._calcLeap()):(this.leapMonth=this.rd.leapMonth,this.priorLeapMonth=this.rd.priorLeapMonth,this.leapYear=this.rd.leapYear),this._init2(params)})})):this._init2(params)})})}else this._init2(params)})})},HanDate.prototype._init2=function(params){this.rd?params&&"function"==typeof params.onLoad&&params.onLoad(this):this.newRd(JSUtils.merge(params||{},{cal:this.cal,sync:params.sync,loadParams:params.loadParams,callback:ilib.bind(this,function(rd){this.rd=rd,this._calcDateComponents(),params&&"function"==typeof params.onLoad&&params.onLoad(this)})}))},HanDate.prototype.newRd=function(params){return new HanRataDie(params)},HanDate.prototype._calcYear=function(rd){var hanyear=new GregorianDate({rd:rd,timezone:this.timezone}).year+2697,newYears=this.cal.newYears(hanyear);return hanyear-(rd+RataDie.gregorianEpoch<newYears?1:0)},HanDate.prototype._calcLeap=function(){var jd=this.rd.getRataDie()+RataDie.gregorianEpoch,calc=HanCal._leapYearCalc(this.year),m2=HanCal._newMoonOnOrAfter(calc.m1+1);this.leapYear=12===Math.round((calc.m2-calc.m1)/29.530588853);var newYears=this.leapYear&&(HanCal._noMajorST(calc.m1)||HanCal._noMajorST(m2))?HanCal._newMoonOnOrAfter(m2+1):m2,m=HanCal._newMoonBefore(jd+1);this.priorLeapMonth=HanRataDie._priorLeapMonth(newYears,HanCal._newMoonBefore(m)),this.leapMonth=this.leapYear&&HanCal._noMajorST(m)&&!this.priorLeapMonth},HanDate.prototype._calcDateComponents=function(){var remainder,jd=this.rd.getRataDie()+RataDie.gregorianEpoch;void 0===this.offset&&(this.tz||(this.tz=new TimeZone({id:this.timezone})),this.offset=this.tz.getOffsetMillis(this)/864e5),0!==this.offset&&(jd+=this.offset);var gregyear=GregorianDate._calcYear(this.rd.getRataDie());this.year=gregyear+2697;var calc=HanCal._leapYearCalc(this.year),m2=HanCal._newMoonOnOrAfter(calc.m1+1);this.leapYear=12===Math.round((calc.m2-calc.m1)/29.530588853);var newYears=this.leapYear&&(HanCal._noMajorST(calc.m1)||HanCal._noMajorST(m2))?HanCal._newMoonOnOrAfter(m2+1):m2;jd<newYears&&(this.year--,calc=HanCal._leapYearCalc(this.year),m2=HanCal._newMoonOnOrAfter(calc.m1+1),this.leapYear=12===Math.round((calc.m2-calc.m1)/29.530588853),newYears=this.leapYear&&(HanCal._noMajorST(calc.m1)||HanCal._noMajorST(m2))?HanCal._newMoonOnOrAfter(m2+1):m2);var m=HanCal._newMoonBefore(jd+1);this.month=Math.round((m-calc.m1)/29.530588853),this.priorLeapMonth=HanRataDie._priorLeapMonth(newYears,HanCal._newMoonBefore(m)),this.leapMonth=this.leapYear&&HanCal._noMajorST(m)&&!this.priorLeapMonth,this.cycle=Math.floor((this.year-1)/60),this.cycleYear=MathUtils.amod(this.year,60),this.day=Astro._floorToJD(jd)-m+1,remainder=jd-Astro._floorToJD(jd),remainder=Math.round(864e5*remainder),this.hour=Math.floor(remainder/36e5),remainder-=36e5*this.hour,this.minute=Math.floor(remainder/6e4),remainder-=6e4*this.minute,this.second=Math.floor(remainder/1e3),remainder-=1e3*this.second,this.millisecond=remainder},HanDate.prototype.getCycleYears=function(){return this.cycleYear},HanDate.prototype.getCycles=function(){return this.cycle},HanDate.prototype.isLeapYear=function(){return this.leapYear},HanDate.prototype.isLeapMonth=function(){return this.leapMonth},HanDate.prototype.getDayOfWeek=function(){var rd=Math.floor(this.rd.getRataDie()+(this.offset||0));return MathUtils.mod(rd,7)},HanDate.prototype.getDayOfYear=function(){var newYears=this.cal.newYears(this.year);return HanCal._newMoonOnOrAfter(newYears+29*(this.month-1))-newYears+this.day},HanDate.prototype.getEra=function(){return this.year<1?-1:1},HanDate.prototype.getCalendar=function(){return"han"},IDate._constructors.han=HanDate,module.exports=HanDate;

/***/ }),

/***/ "./node_modules/ilib/lib/HanRataDie.js":
/*!*********************************************!*\
  !*** ./node_modules/ilib/lib/HanRataDie.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),HanCal=__webpack_require__(/*! ./HanCal.js */ "./node_modules/ilib/lib/HanCal.js"),RataDie=__webpack_require__(/*! ./RataDie.js */ "./node_modules/ilib/lib/RataDie.js"),HanRataDie=function(params){this.rd=NaN,params&&params.cal?(this.cal=params.cal,RataDie.call(this,params),params&&"function"==typeof params.callback&&params.callback(this)):new HanCal({sync:params&&params.sync,loadParams:params&&params.loadParams,onLoad:ilib.bind(this,function(c){this.cal=c,RataDie.call(this,params),params&&"function"==typeof params.callback&&params.callback(this)})})};HanRataDie.prototype=new RataDie(),HanRataDie.prototype.parent=RataDie,(HanRataDie.prototype.constructor=HanRataDie).epoch=758325.5,HanRataDie.prototype._setDateComponents=function(date){var newYears,calc=HanCal._leapYearCalc(date.year,date.cycle),m2=HanCal._newMoonOnOrAfter(calc.m1+1);this.leapYear=12===Math.round((calc.m2-calc.m1)/29.530588853),newYears=this.leapYear&&(HanCal._noMajorST(calc.m1)||HanCal._noMajorST(m2))?HanCal._newMoonOnOrAfter(m2+1):m2;var priorNewMoon=HanCal._newMoonOnOrAfter(calc.m1+29*date.month);this.priorLeapMonth=HanRataDie._priorLeapMonth(newYears,HanCal._newMoonBefore(priorNewMoon)),this.leapMonth=this.leapYear&&HanCal._noMajorST(priorNewMoon)&&!this.priorLeapMonth;var rdtime=(36e5*date.hour+6e4*date.minute+1e3*date.second+date.millisecond)/864e5;this.rd=priorNewMoon+date.day-1+rdtime-RataDie.gregorianEpoch},HanRataDie.prototype._onOrBefore=function(rd,dayOfWeek){return rd-MathUtils.mod(Math.floor(rd)-dayOfWeek,7)},HanRataDie._priorLeapMonth=function(jd1,jd2){return jd1<=jd2&&(HanRataDie._priorLeapMonth(jd1,HanCal._newMoonBefore(jd2))||HanCal._noMajorST(jd2))},module.exports=HanRataDie;

/***/ }),

/***/ "./node_modules/ilib/lib/HebrewCal.js":
/*!********************************************!*\
  !*** ./node_modules/ilib/lib/HebrewCal.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Calendar=__webpack_require__(/*! ./Calendar.js */ "./node_modules/ilib/lib/Calendar.js"),HebrewCal=function(options){this.type="hebrew",options&&"function"==typeof options.onLoad&&options.onLoad(this)};HebrewCal.elapsedDays=function(year){var months=Math.floor((235*year-234)/19),parts=204+793*MathUtils.mod(months,1080),hours=11+12*months+793*Math.floor(months/1080)+Math.floor(parts/1080),days=29*months+Math.floor(hours/24);return MathUtils.mod(3*(days+1),7)<3?days+1:days},HebrewCal.newYearsCorrection=function(year,elapsed){var lastYear=HebrewCal.elapsedDays(year-1),thisYear=elapsed;return HebrewCal.elapsedDays(year+1)-thisYear==356?2:thisYear-lastYear==382?1:0},HebrewCal.newYear=function(year){var elapsed=HebrewCal.elapsedDays(year);return elapsed+HebrewCal.newYearsCorrection(year,elapsed)},HebrewCal.daysInYear=function(year){return HebrewCal.newYear(year+1)-HebrewCal.newYear(year)},HebrewCal.longHeshvan=function(year){return 5===MathUtils.mod(HebrewCal.daysInYear(year),10)},HebrewCal.longKislev=function(year){return 3!==MathUtils.mod(HebrewCal.daysInYear(year),10)},HebrewCal.prototype.lastDayOfMonth=function(month,year){switch(month){case 2:case 4:case 6:case 10:return 29;case 13:return this.isLeapYear(year)?29:0;case 8:return HebrewCal.longHeshvan(year)?30:29;case 9:return HebrewCal.longKislev(year)?30:29;case 12:case 1:case 3:case 5:case 7:case 11:return 30;default:return 0}},HebrewCal.prototype.getNumMonths=function(year){return this.isLeapYear(year)?13:12},HebrewCal.prototype.getMonLength=function(month,year){return month<1||13<month||13==month&&!this.isLeapYear(year)?0:this.lastDayOfMonth(month,year)},HebrewCal.prototype.isLeapYear=function(year){var y="number"==typeof year?year:year.year;return MathUtils.mod(1+7*y,19)<7},HebrewCal.prototype.getType=function(){return this.type},Calendar._constructors.hebrew=HebrewCal,module.exports=HebrewCal;

/***/ }),

/***/ "./node_modules/ilib/lib/HebrewDate.js":
/*!*********************************************!*\
  !*** ./node_modules/ilib/lib/HebrewDate.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),TimeZone=__webpack_require__(/*! ./TimeZone.js */ "./node_modules/ilib/lib/TimeZone.js"),HebrewCal=__webpack_require__(/*! ./HebrewCal.js */ "./node_modules/ilib/lib/HebrewCal.js"),HebrewRataDie=__webpack_require__(/*! ./HebrewRataDie.js */ "./node_modules/ilib/lib/HebrewRataDie.js"),HebrewDate=function(params){this.cal=new HebrewCal(),(params=params||{}).timezone&&(this.timezone=params.timezone),params.locale&&(this.locale="string"==typeof params.locale?new Locale(params.locale):params.locale),this.timezone?this._init(params):this.locale?new LocaleInfo(this.locale,{sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(li){this.li=li,this.timezone=li.getTimeZone(),this._init(params)})}):(this.timezone="local",this._init(params))};HebrewDate.prototype=new IDate({noinstance:!0}),HebrewDate.prototype.parent=IDate,(HebrewDate.prototype.constructor=HebrewDate).prototype._init=function(params){if(params.year||params.month||params.day||params.hour||params.minute||params.second||params.millisecond||params.parts){if(this.year=parseInt(params.year,10)||0,this.month=parseInt(params.month,10)||1,this.day=parseInt(params.day,10)||1,this.hour=parseInt(params.hour,10)||0,void 0!==params.parts){this.parts=parseInt(params.parts,10);var seconds=3.333333333333*parseInt(params.parts,10);this.minute=Math.floor(seconds/60),seconds-=60*this.minute,this.second=Math.floor(seconds),this.millisecond=seconds-this.second}else this.minute=parseInt(params.minute,10)||0,this.second=parseInt(params.second,10)||0,this.millisecond=parseInt(params.millisecond,10)||0;this.dayOfYear=parseInt(params.dayOfYear,10),"boolean"==typeof params.dst&&(this.dst=params.dst),this.rd=this.newRd(this),new TimeZone({id:this.timezone,sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(tz){this.tz=tz,this.offset=this.tz._getOffsetMillisWallTime(this)/864e5,0!==this.offset&&(this.rd=this.newRd({rd:this.rd.getRataDie()-this.offset})),this._init2(params)})})}else this._init2(params)},HebrewDate.prototype._init2=function(params){this.rd||(this.rd=this.newRd(params),this._calcDateComponents()),"function"==typeof params.onLoad&&params.onLoad(this)},HebrewDate.cumMonthLengthsReverse=[[0,7],[30,8],[59,9],[88,10],[117,11],[147,12],[176,1],[206,2],[235,3],[265,4],[294,5],[324,6],[354,7]],HebrewDate.cumMonthLengthsLeapReverse=[[0,7],[30,8],[59,9],[88,10],[117,11],[147,12],[177,13],[206,1],[236,2],[265,3],[295,4],[324,5],[354,6],[384,7]],HebrewDate.GregorianDiff=1373060.25,HebrewDate.prototype.newRd=function(params){return new HebrewRataDie(params)},HebrewDate.prototype._calcYear=function(rd){var year,nextNewYear;for(year=Math.floor(rd/365.246822206)+1,nextNewYear=HebrewCal.newYear(year);nextNewYear<=rd;)year++,nextNewYear=HebrewCal.newYear(year);return year-1},HebrewDate.prototype._calcDateComponents=function(){var remainder,i,table,target,rd=this.rd.getRataDie();for(void 0===this.offset&&(this.year=this._calcYear(rd),this.tz||(this.tz=new TimeZone({id:this.timezone})),this.offset=this.tz.getOffsetMillis(this)/864e5),0!==this.offset&&(rd+=this.offset,this.year=this._calcYear(rd)),59<=(remainder=rd-HebrewCal.newYear(this.year))&&(88<=remainder&&HebrewCal.longKislev(this.year)&&remainder--,HebrewCal.longHeshvan(this.year)&&remainder--),table=this.cal.isLeapYear(this.year)?HebrewDate.cumMonthLengthsLeapReverse:HebrewDate.cumMonthLengthsReverse,i=0,target=Math.floor(remainder);i+1<table.length&&target>=table[i+1][0];)i++;this.month=table[i][1],remainder-=table[i][0],this.day=Math.floor(remainder),remainder-=this.day,this.day++,remainder=Math.round(864e5*remainder),this.hour=Math.floor(remainder/36e5),remainder-=36e5*this.hour,6<=this.hour?this.hour-=6:this.hour+=18,this.minute=Math.floor(remainder/6e4),remainder-=6e4*this.minute,this.second=Math.floor(remainder/1e3),remainder-=1e3*this.second,this.millisecond=Math.floor(remainder)},HebrewDate.prototype.getDayOfWeek=function(){var rd=Math.floor(this.rd.getRataDie()+(this.offset||0));return MathUtils.mod(rd+1,7)},HebrewDate.prototype.getHalaqim=function(){if(this.parts<0){var h=6e4*this.minute+1e3*this.second+this.millisecond;this.parts=3e-4*h}return this.parts},HebrewDate.prototype.firstSunday=function(year){var tishri1=this.newRd({year:year,month:7,day:1,hour:18,minute:0,second:0,millisecond:0,cal:this.cal});return this.newRd({rd:tishri1.onOrAfter(4),cal:this.cal}).before(0)},HebrewDate.prototype.getDayOfYear=function(){var days=(this.cal.isLeapYear(this.year)?HebrewRataDie.cumMonthLengthsLeap:HebrewRataDie.cumMonthLengths)[this.month-1];return(this.month<7||8<this.month)&&HebrewCal.longHeshvan(this.year)&&days++,(this.month<7||9<this.month)&&HebrewCal.longKislev(this.year)&&days++,days+this.day},HebrewDate.prototype.getWeekOfMonth=function(locale){var li=new LocaleInfo(locale),first=this.newRd({year:this.year,month:this.month,day:1,hour:18,minute:0,second:0,millisecond:0}),rd=this.rd.getRataDie(),weekStart=first.onOrAfter(li.getFirstDayOfWeek());return 3<weekStart-first.getRataDie()&&(weekStart-=7),rd<weekStart?0:Math.floor((rd-weekStart)/7)+1},HebrewDate.prototype.getEra=function(){return this.year<1?-1:1},HebrewDate.prototype.getCalendar=function(){return"hebrew"},IDate._constructors.hebrew=HebrewDate,module.exports=HebrewDate;

/***/ }),

/***/ "./node_modules/ilib/lib/HebrewRataDie.js":
/*!************************************************!*\
  !*** ./node_modules/ilib/lib/HebrewRataDie.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var HebrewCal=__webpack_require__(/*! ./HebrewCal.js */ "./node_modules/ilib/lib/HebrewCal.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),RataDie=__webpack_require__(/*! ./RataDie.js */ "./node_modules/ilib/lib/RataDie.js"),HebrewRataDie=function(params){this.cal=params&&params.cal||new HebrewCal(),this.rd=NaN,RataDie.call(this,params)};HebrewRataDie.prototype=new RataDie(),HebrewRataDie.prototype.parent=RataDie,(HebrewRataDie.prototype.constructor=HebrewRataDie).prototype.epoch=347997.25,HebrewRataDie.cumMonthLengths=[176,206,235,265,294,324,0,30,59,88,117,147],HebrewRataDie.cumMonthLengthsLeap=[206,236,265,295,324,354,0,30,59,88,117,147,177],HebrewRataDie.prototype._setDateComponents=function(date){var minute,second,millisecond,time,elapsed=HebrewCal.elapsedDays(date.year),days=elapsed+HebrewCal.newYearsCorrection(date.year,elapsed)+date.day-1,sum=0;if(sum=(this.cal.isLeapYear(date.year)?HebrewRataDie.cumMonthLengthsLeap:HebrewRataDie.cumMonthLengths)[date.month-1],(date.month<7||8<date.month)&&HebrewCal.longHeshvan(date.year)&&sum++,(date.month<7||9<date.month)&&HebrewCal.longKislev(date.year)&&sum++,days+=sum,void 0!==date.parts){var parts=parseInt(date.parts,10),seconds=3.333333333333*parseInt(parts,10);millisecond=(seconds-=60*(minute=Math.floor(seconds/60)))-(second=Math.floor(seconds))}else minute=parseInt(date.minute,10)||0,second=parseInt(date.second,10)||0,millisecond=parseInt(date.millisecond,10)||0;time=18<=date.hour?(36e5*(date.hour-18||0)+6e4*(minute||0)+1e3*(second||0)+(millisecond||0))/864e5:.25+(36e5*(date.hour||0)+6e4*(minute||0)+1e3*(second||0)+(millisecond||0))/864e5,this.rd=days+time},HebrewRataDie.prototype._onOrBefore=function(rd,dayOfWeek){return rd-MathUtils.mod(Math.floor(rd)-dayOfWeek+1,7)},module.exports=HebrewRataDie;

/***/ }),

/***/ "./node_modules/ilib/lib/IDate.js":
/*!****************************************!*\
  !*** ./node_modules/ilib/lib/IDate.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),IDate=function(options){};IDate._constructors={},IDate.prototype={getType:function(){return"date"},getTime:function(){return this.rd.getTime()},getTimeExtended:function(){return this.rd.getTimeExtended()},setTime:function(millis){this.rd=this.newRd({unixtime:millis,cal:this.cal}),this._calcDateComponents()},getDays:function(){return this.day},getMonths:function(){return this.month},getYears:function(){return this.year},getHours:function(){return this.hour},getMinutes:function(){return this.minute},getSeconds:function(){return this.second},getMilliseconds:function(){return this.millisecond},getEra:function(){return this.year<1?-1:1},setDays:function(day){this.day=parseInt(day,10)||1,this.rd._setDateComponents(this)},setMonths:function(month){this.month=parseInt(month,10)||1,this.rd._setDateComponents(this)},setYears:function(year){this.year=parseInt(year,10)||0,this.rd._setDateComponents(this)},setHours:function(hour){this.hour=parseInt(hour,10)||0,this.rd._setDateComponents(this)},setMinutes:function(minute){this.minute=parseInt(minute,10)||0,this.rd._setDateComponents(this)},setSeconds:function(second){this.second=parseInt(second,10)||0,this.rd._setDateComponents(this)},setMilliseconds:function(milli){this.millisecond=parseInt(milli,10)||0,this.rd._setDateComponents(this)},before:function(dow){return new this.constructor({rd:this.rd.before(dow,this.offset),timezone:this.timezone})},after:function(dow){return new this.constructor({rd:this.rd.after(dow,this.offset),timezone:this.timezone})},onOrBefore:function(dow){return new this.constructor({rd:this.rd.onOrBefore(dow,this.offset),timezone:this.timezone})},onOrAfter:function(dow){return new this.constructor({rd:this.rd.onOrAfter(dow,this.offset),timezone:this.timezone})},getJSDate:function(){var unix=this.rd.getTimeExtended();return isNaN(unix)?void 0:new Date(unix)},getRataDie:function(){return this.rd.getRataDie()},setRd:function(rd){this.rd=this.newRd({rd:rd,cal:this.cal}),this._calcDateComponents()},getJulianDay:function(){return this.rd.getJulianDay()},setJulianDay:function(date){this.rd=this.newRd({julianday:"object"==typeof date?date.getDate():date,cal:this.cal}),this._calcDateComponents()},getTimeZone:function(){return this.timezone||"local"},setTimeZone:function(tzName){tzName&&""!==tzName?"string"==typeof tzName&&(this.timezone=tzName,this.tz=void 0,this._calcDateComponents()):(this.timezone=void 0,this.tz=void 0)},firstSunday:function(year){var firstDay=this.newRd({year:year,month:1,day:1,hour:0,minute:0,second:0,millisecond:0,cal:this.cal});return this.newRd({rd:firstDay.onOrAfter(4),cal:this.cal}).before(0)},getWeekOfYear:function(){var nextYear,rd=Math.floor(this.rd.getRataDie()),year=this._calcYear(rd+this.offset),yearStart=this.firstSunday(year);return rd<yearStart?yearStart=this.firstSunday(year-1):(nextYear=this.firstSunday(year+1))<=rd&&(yearStart=nextYear),Math.floor((rd-yearStart)/7)+1},getWeekOfMonth:function(locale){var li=new LocaleInfo(locale),first=this.newRd({year:this._calcYear(this.rd.getRataDie()+this.offset),month:this.getMonths(),day:1,hour:0,minute:0,second:0,millisecond:0,cal:this.cal}),weekStart=first.onOrAfter(li.getFirstDayOfWeek());return 3<weekStart-first.getRataDie()&&(weekStart-=7),Math.floor((this.rd.getRataDie()-weekStart)/7)+1}},module.exports=IDate;

/***/ }),

/***/ "./node_modules/ilib/lib/ISet.js":
/*!***************************************!*\
  !*** ./node_modules/ilib/lib/ISet.js ***!
  \***************************************/
/***/ (function(module) {

var ISet=function(elements){if(this.elements={},elements&&elements.length){for(var i=0;i<elements.length;i++)this.elements[elements[i]]=!0;this.type=typeof elements[0]}};ISet.prototype._addOne=function(element){return this.isEmpty()&&(this.type=typeof element),!this.elements[element]&&(this.elements[element]=!0)},ISet.prototype.add=function(element){var ret=!1;if("object"==typeof element)for(var i=0;i<element.length;i++)ret=this._addOne(element[i])||ret;else ret=this._addOne(element);return ret},ISet.prototype.clear=function(){this.elements={}},ISet.prototype.contains=function(element){return this.elements[element]||!1},ISet.prototype.has=ISet.prototype.contains,ISet.prototype.isEmpty=function(){return 0===Object.keys(this.elements).length},ISet.prototype.remove=function(element){return!!this.elements[element]&&(delete this.elements[element],!0)},ISet.prototype.asArray=function(){var keys=Object.keys(this.elements);if("number"===this.type){for(var tmp=[],i=0;i<keys.length;i++)tmp.push(Number(keys[i]).valueOf());keys=tmp}return keys},ISet.prototype.toJson=function(){return JSON.stringify(this.asArray())},ISet.prototype.toJS=function(){return this.asArray()},ISet.prototype.fromJS=function(obj){return this.add(obj)?this:void 0},module.exports=ISet;

/***/ }),

/***/ "./node_modules/ilib/lib/IString.js":
/*!******************************************!*\
  !*** ./node_modules/ilib/lib/IString.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// !data plurals
var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),Utils=__webpack_require__(/*! ./Utils.js */ "./node_modules/ilib/lib/Utils.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),IString=function(string){this.str="object"==typeof string?string instanceof IString?string.str:string.toString():"string"==typeof string?String(string):"",this.length=this.str.length,this.cpLength=-1,this.localeSpec=ilib.getLocale()};IString._isSurrogate=function(ch){var n=ch.charCodeAt(0);return 56320<=n&&n<=57343||55296<=n&&n<=56319},IString.plurals_default={one:{and:[{eq:["i",1]},{eq:["v",0]}]}},IString.fromCodePoint=function(codepoint){if(codepoint<65536)return String.fromCharCode(codepoint);var high=Math.floor(codepoint/65536)-1,low=65535&codepoint;return String.fromCharCode(55296|(15&high)<<6|(64512&low)>>10)+String.fromCharCode(56320|1023&low)},IString.toCodePoint=function(str,index){if(!str||0===str.length)return-1;var code=-1,high=str.charCodeAt(index);if(55296<=high&&high<=56319){if(str.length>index+1){var low=str.charCodeAt(index+1);56320<=low&&low<=57343&&(code=1+((960&high)>>6)<<16|(63&high)<<10|1023&low)}}else code=high;return code},IString.loadPlurals=function(sync,locale,loadParams,onLoad){var loc;(loc=locale?"string"==typeof locale?new Locale(locale):locale:new Locale(ilib.getLocale())).getLanguage();Utils.loadData({name:"plurals.json",object:"IString",locale:loc,sync:sync,loadParams:loadParams,callback:ilib.bind(this,function(plurals){plurals=plurals||IString.plurals_default,onLoad&&"function"==typeof onLoad&&onLoad(plurals)})})},IString._fncs={firstProp:function(obj){for(var p in obj)if(p&&obj[p])return p},firstPropRule:function(obj){if("[object Array]"===Object.prototype.toString.call(obj))return"inrange";if("[object Object]"===Object.prototype.toString.call(obj))for(var p in obj)if(p&&obj[p])return p},getValue:function(obj,n){if("object"!=typeof obj)return"string"==typeof obj?"object"==typeof n?n[obj]:n:obj;var subrule=IString._fncs.firstPropRule(obj);return"inrange"===subrule?IString._fncs[subrule](obj,n):IString._fncs[subrule](obj[subrule],n)},matchRangeContinuous:function(n,range){for(var num in range)if(void 0!==num&&void 0!==range[num]){var obj=range[num];if("number"==typeof obj){if(n===range[num])return!0;if(n>=range[0]&&n<=range[1])return!0}else if("[object Array]"===Object.prototype.toString.call(obj)&&n>=obj[0]&&n<=obj[1])return!0}return!1},calculateNumberDigits:function(number){var numberToString=number.toString(),parts=[],numberDigits={},operandSymbol={},exponentialNum=number.toExponential(),exponentialIndex=exponentialNum.indexOf("e");return-1!=exponentialIndex?(operandSymbol.c=parseInt(exponentialNum[exponentialIndex+2]),operandSymbol.e=parseInt(exponentialNum[exponentialIndex+2])):(operandSymbol.c=0,operandSymbol.e=0),-1!==numberToString.indexOf(".")?(parts=numberToString.split(".",2),numberDigits.integerPart=parseInt(parts[0],10),numberDigits.decimalPartLength=parts[1].length,numberDigits.decimalPart=parseInt(parts[1],10),operandSymbol.n=parseFloat(number),operandSymbol.i=numberDigits.integerPart,operandSymbol.v=numberDigits.decimalPartLength,operandSymbol.w=numberDigits.decimalPartLength,operandSymbol.f=numberDigits.decimalPart,operandSymbol.t=numberDigits.decimalPart):(numberDigits.integerPart=number,numberDigits.decimalPartLength=0,numberDigits.decimalPart=0,operandSymbol.n=parseInt(number,10),operandSymbol.i=numberDigits.integerPart,operandSymbol.v=0,operandSymbol.w=0,operandSymbol.f=0,operandSymbol.t=0),operandSymbol},matchRange:function(n,range){return IString._fncs.matchRangeContinuous(n,range)},is:function(rule,n){return IString._fncs.getValue(rule[0],n)==IString._fncs.getValue(rule[1],n)},isnot:function(rule,n){return IString._fncs.getValue(rule[0],n)!=IString._fncs.getValue(rule[1],n)},inrange:function(rule,n){if("number"==typeof rule[0])return"object"==typeof n?IString._fncs.matchRange(n.n,rule):IString._fncs.matchRange(n,rule);if(void 0!==rule[0])return IString._fncs.matchRange(IString._fncs.getValue(rule[0],n),rule[1]);var subrule=IString._fncs.firstPropRule(rule);return IString._fncs[subrule](rule[subrule],n)},notin:function(rule,n){return!IString._fncs.matchRange(IString._fncs.getValue(rule[0],n),rule[1])},within:function(rule,n){return IString._fncs.matchRangeContinuous(IString._fncs.getValue(rule[0],n),rule[1])},mod:function(rule,n){return MathUtils.mod(IString._fncs.getValue(rule[0],n),IString._fncs.getValue(rule[1],n))},n:function(rule,n){return n},or:function(rule,n){var i,ruleLength=rule.length;for(i=0;i<ruleLength;i++)if(IString._fncs.getValue(rule[i],n))return!0;return!1},and:function(rule,n){var i,ruleLength=rule.length;for(i=0;i<ruleLength;i++)if(!IString._fncs.getValue(rule[i],n))return!1;return!0},eq:function(rule,n){var valueRight,valueLeft=IString._fncs.getValue(rule[0],n);return"string"==typeof rule[0]?"object"==typeof n&&(valueRight=n[rule[0]],"number"==typeof rule[1]?valueRight=IString._fncs.getValue(rule[1],n):"object"==typeof rule[1]&&"inrange"===IString._fncs.firstPropRule(rule[1])&&(valueRight=IString._fncs.getValue(rule[1],n))):valueRight="inrange"===IString._fncs.firstPropRule(rule[1])?IString._fncs.getValue(rule[1],valueLeft):IString._fncs.getValue(rule[1],n),"boolean"==typeof valueRight?!!valueRight:valueLeft==valueRight},neq:function(rule,n){var valueRight,leftRange,rightRange,valueLeft=IString._fncs.getValue(rule[0],n);if("string"==typeof rule[0]){if(valueRight=n[rule[0]],"number"==typeof rule[1])valueRight=IString._fncs.getValue(rule[1],n);else if("object"==typeof rule[1]&&(leftRange=rule[1][0],rightRange=rule[1][1],"number"==typeof leftRange&&"number"==typeof rightRange))return!(leftRange<=valueLeft&&valueRight<=rightRange)}else valueRight="inrange"===IString._fncs.firstPropRule(rule[1])?IString._fncs.getValue(rule[1],valueLeft):IString._fncs.getValue(rule[1],n);return"boolean"==typeof valueRight?!valueRight:valueLeft!==valueRight}},IString.prototype={_length:function(){return this.str.length},format:function(params){var regex,formatted=this.str;if(params)for(var p in params)void 0!==params[p]&&(regex=new RegExp("{"+p+"}","g"),formatted=formatted.replace(regex,params[p]));return formatted.toString()},_testChoice:function(index,limit){var operandValue={};switch(typeof index){case"number":if(operandValue=IString._fncs.calculateNumberDigits(index),"<="===limit.substring(0,2))return limit=parseFloat(limit.substring(2)),operandValue.n<=limit;if(">="===limit.substring(0,2))return limit=parseFloat(limit.substring(2)),operandValue.n>=limit;if("<"===limit.charAt(0))return limit=parseFloat(limit.substring(1)),operandValue.n<limit;if(">"===limit.charAt(0))return limit=parseFloat(limit.substring(1)),operandValue.n>limit;switch(this.locale=this.locale||new Locale(this.localeSpec),limit){case"zero":case"one":case"two":case"few":case"many":var ruleset=ilib.data["plurals_"+this.locale.getLanguage()+"_"+this.locale.getRegion()]||ilib.data["plurals_"+this.locale.getLanguage()]||IString.plurals_default;if(ruleset){var rule=ruleset[limit];return IString._fncs.getValue(rule,operandValue)}break;case"":case"other":return!0;default:var dash=limit.indexOf("-");if(-1===dash)return operandValue.n===parseInt(limit,10);var start=limit.substring(0,dash),end=limit.substring(dash+1);return operandValue.n>=parseInt(start,10)&&operandValue.n<=parseInt(end,10)}break;case"boolean":return"true"===limit&&!0===index||"false"===limit&&!1===index;case"string":return new RegExp(limit,"i").test(index);case"object":throw"syntax error: formatChoice parameter for the argument index cannot be an object"}return!1},formatChoice:function(argIndex,params){var i,parts,choices=this.str.split("|"),limits=[],strings=[],result=void 0,defaultCase="";if(0===this.str.length)return"";for(i=0;i<choices.length;i++)if(2<(parts=choices[i].split("#")).length)limits[i]=parts[0],parts=parts.shift(),strings[i]=parts.join("#");else{if(2!==parts.length)throw"syntax error in choice format pattern: "+choices[i];limits[i]=parts[0],strings[i]=parts[1]}var args=ilib.isArray(argIndex)?argIndex:[argIndex];for(i=0;i<limits.length;i++)if(0===limits[i].length)defaultCase=new IString(strings[i]);else{for(var limitsArr=-1<limits[i].indexOf(",")?limits[i].split(","):[limits[i]],applicable=!0,j=0;applicable&&j<args.length&&j<limitsArr.length;j++)applicable=this._testChoice(args[j],limitsArr[j]);applicable&&(result=new IString(strings[i]),i=limits.length)}return result||(result=defaultCase||new IString("")),(result=result.format(params)).toString()},toString:function(){return this.str.toString()},valueOf:function(){return this.str.valueOf()},charAt:function(index){return new IString(this.str.charAt(index))},charCodeAt:function(index){return this.str.charCodeAt(index)},concat:function(strings){return new IString(this.str.concat(strings))},indexOf:function(searchValue,start){return this.str.indexOf(searchValue,start)},lastIndexOf:function(searchValue,start){return this.str.lastIndexOf(searchValue,start)},match:function(regexp){return this.str.match(regexp)},matchAll:function(regexp){return this.str.matchAll(regexp)},replace:function(searchValue,newValue){return new IString(this.str.replace(searchValue,newValue))},search:function(regexp){return this.str.search(regexp)},slice:function(start,end){return new IString(this.str.slice(start,end))},split:function(separator,limit){return this.str.split(separator,limit)},substr:function(start,length){var plat=ilib._getPlatform();return"qt"!==plat&&"rhino"!==plat&&"trireme"!==plat||void 0===length&&(length=this.str.length-start),new IString(this.str.substr(start,length))},substring:function(from,to){return this.str.substring(from,to)},toLowerCase:function(){return this.str.toLowerCase()},toUpperCase:function(){return this.str.toUpperCase()},endsWith:function(searchString,length){return void 0===length&&(length=this.str.length),this.str.endsWith(searchString,length)},startsWith:function(searchString,length){return this.str.startsWith(searchString,length)},includes:function(searchString,position){return this.str.includes(searchString,position)},normalize:function(form){return this.str.normalize(form)},padEnd:function(targetLength,padString){return this.str.padEnd(targetLength,padString)},padStart:function(targetLength,padString){return this.str.padStart(targetLength,padString)},repeat:function(count){return this.str.repeat(count)},toLocaleLowerCase:function(locale){return this.str.toLocaleLowerCase(locale)},toLocaleUpperCase:function(locale){return this.str.toLocaleUpperCase(locale)},trim:function(){return this.str.trim()},trimEnd:function(){return this.str.trimEnd()},trimRight:function(){return this.str.trimRight()},trimStart:function(){return this.str.trimStart()},trimLeft:function(){return this.str.trimLeft()},_toCodePoint:function(index){return IString.toCodePoint(this.str,index)},forEach:function(callback){if("function"==typeof callback)for(var it=this.charIterator();it.hasNext();)callback(it.next())},forEachCodePoint:function(callback){if("function"==typeof callback)for(var it=this.iterator();it.hasNext();)callback(it.next())},iterator:function(){return new function _iterator(istring){this.index=0,this.hasNext=function(){return this.index<istring.str.length},this.next=function(){if(this.index<istring.str.length){var num=istring._toCodePoint(this.index);this.index+=65535<num?2:1}else num=-1;return num}}(this)},charIterator:function(){return new function _chiterator(istring){this.index=0,this.hasNext=function(){return this.index<istring.str.length},this.next=function(){var ch;return this.index<istring.str.length&&(ch=istring.str.charAt(this.index),IString._isSurrogate(ch)&&this.index+1<istring.str.length&&IString._isSurrogate(istring.str.charAt(this.index+1))&&(this.index++,ch+=istring.str.charAt(this.index)),this.index++),ch}}(this)},codePointAt:function(index){if(index<0)return-1;var count,ch,it=this.iterator();for(count=index;0<=count&&it.hasNext();count--)ch=it.next();return count<0?ch:-1},setLocale:function(locale,sync,loadParams,onLoad){"object"==typeof locale?this.locale=locale:(this.localeSpec=locale,this.locale=new Locale(locale)),IString.loadPlurals(void 0===sync||sync,this.locale,loadParams,onLoad)},getLocale:function(){return(this.locale?this.locale.getSpec():this.localeSpec)||ilib.getLocale()},codePointLength:function(){if(-1===this.cpLength){var it=this.iterator();for(this.cpLength=0;it.hasNext();)this.cpLength++,it.next()}return this.cpLength}},module.exports=IString;

/***/ }),

/***/ "./node_modules/ilib/lib/IslamicCal.js":
/*!*********************************************!*\
  !*** ./node_modules/ilib/lib/IslamicCal.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Calendar=__webpack_require__(/*! ./Calendar.js */ "./node_modules/ilib/lib/Calendar.js"),IslamicCal=function(options){this.type="islamic",options&&"function"==typeof options.onLoad&&options.onLoad(this)};IslamicCal.monthLengths=[30,29,30,29,30,29,30,29,30,29,30,29],IslamicCal.prototype.getNumMonths=function(year){return 12},IslamicCal.prototype.getMonLength=function(month,year){return 12!==month?IslamicCal.monthLengths[month-1]:this.isLeapYear(year)?30:29},IslamicCal.prototype.isLeapYear=function(year){return MathUtils.mod(14+11*year,30)<11},IslamicCal.prototype.getType=function(){return this.type},Calendar._constructors.islamic=IslamicCal,module.exports=IslamicCal;

/***/ }),

/***/ "./node_modules/ilib/lib/IslamicDate.js":
/*!**********************************************!*\
  !*** ./node_modules/ilib/lib/IslamicDate.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),SearchUtils=__webpack_require__(/*! ./SearchUtils.js */ "./node_modules/ilib/lib/SearchUtils.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),TimeZone=__webpack_require__(/*! ./TimeZone.js */ "./node_modules/ilib/lib/TimeZone.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),IslamicRataDie=__webpack_require__(/*! ./IslamicRataDie.js */ "./node_modules/ilib/lib/IslamicRataDie.js"),IslamicCal=__webpack_require__(/*! ./IslamicCal.js */ "./node_modules/ilib/lib/IslamicCal.js"),IslamicDate=function(params){this.cal=new IslamicCal(),(params=params||{}).timezone&&(this.timezone=params.timezone),params.locale&&(this.locale="string"==typeof params.locale?new Locale(params.locale):params.locale),this.timezone?this._init(params):this.locale?new LocaleInfo(this.locale,{sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(li){this.li=li,this.timezone=li.getTimeZone(),this._init(params)})}):(this.timezone="local",this._init(params))};IslamicDate.prototype=new IDate({noinstance:!0}),IslamicDate.prototype.parent=IDate,(IslamicDate.prototype.constructor=IslamicDate).prototype._init=function(params){params.year||params.month||params.day||params.hour||params.minute||params.second||params.millisecond?(this.year=parseInt(params.year,10)||0,this.month=parseInt(params.month,10)||1,this.day=parseInt(params.day,10)||1,this.hour=parseInt(params.hour,10)||0,this.minute=parseInt(params.minute,10)||0,this.second=parseInt(params.second,10)||0,this.millisecond=parseInt(params.millisecond,10)||0,this.dayOfYear=parseInt(params.dayOfYear,10),"boolean"==typeof params.dst&&(this.dst=params.dst),this.rd=this.newRd(this),new TimeZone({id:this.timezone,sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(tz){this.tz=tz,this.offset=this.tz._getOffsetMillisWallTime(this)/864e5,0!==this.offset&&(this.rd=this.newRd({rd:this.rd.getRataDie()-this.offset})),this._init2(params)})})):this._init2(params)},IslamicDate.prototype._init2=function(params){this.rd||(this.rd=this.newRd(params),this._calcDateComponents()),"function"==typeof params.onLoad&&params.onLoad(this)},IslamicDate.cumMonthLengths=[0,30,59,89,118,148,177,207,236,266,295,325,354],IslamicDate.GregorianDiff=227015,IslamicDate.prototype.newRd=function(params){return new IslamicRataDie(params)},IslamicDate.prototype._calcYear=function(rd){return Math.floor((30*rd+10646)/10631)},IslamicDate.prototype._calcDateComponents=function(){var remainder,rd=this.rd.getRataDie();this.year=this._calcYear(rd),void 0===this.offset&&(this.year=this._calcYear(rd),this.tz||(this.tz=new TimeZone({id:this.timezone})),this.offset=this.tz.getOffsetMillis(this)/864e5),0!==this.offset&&(rd+=this.offset,this.year=this._calcYear(rd)),remainder=rd-this.newRd({year:this.year,month:1,day:1,hour:0,minute:0,second:0,millisecond:0}).getRataDie()+1,this.dayOfYear=remainder,this.month=SearchUtils.bsearch(remainder,IslamicDate.cumMonthLengths),remainder-=IslamicDate.cumMonthLengths[this.month-1],this.day=Math.floor(remainder),remainder-=this.day,remainder=Math.round(864e5*remainder),this.hour=Math.floor(remainder/36e5),remainder-=36e5*this.hour,this.minute=Math.floor(remainder/6e4),remainder-=6e4*this.minute,this.second=Math.floor(remainder/1e3),remainder-=1e3*this.second,this.millisecond=remainder},IslamicDate.prototype.getDayOfWeek=function(){var rd=Math.floor(this.rd.getRataDie()+(this.offset||0));return MathUtils.mod(rd-2,7)},IslamicDate.prototype.getDayOfYear=function(){return IslamicDate.cumMonthLengths[this.month-1]+this.day},IslamicDate.prototype.getEra=function(){return this.year<1?-1:1},IslamicDate.prototype.getCalendar=function(){return"islamic"},IDate._constructors.islamic=IslamicDate,module.exports=IslamicDate;

/***/ }),

/***/ "./node_modules/ilib/lib/IslamicRataDie.js":
/*!*************************************************!*\
  !*** ./node_modules/ilib/lib/IslamicRataDie.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var RataDie=__webpack_require__(/*! ./RataDie.js */ "./node_modules/ilib/lib/RataDie.js"),IslamicCal=__webpack_require__(/*! ./IslamicCal.js */ "./node_modules/ilib/lib/IslamicCal.js"),IslamicRataDie=function(params){this.cal=params&&params.cal||new IslamicCal(),this.rd=NaN,RataDie.call(this,params)};IslamicRataDie.prototype=new RataDie(),IslamicRataDie.prototype.parent=RataDie,(IslamicRataDie.prototype.constructor=IslamicRataDie).prototype.epoch=1948439.5,IslamicRataDie.prototype._setDateComponents=function(date){var days=354*(date.year-1)+Math.ceil(29.5*(date.month-1))+date.day+Math.floor((3+11*date.year)/30)-1,time=(36e5*date.hour+6e4*date.minute+1e3*date.second+date.millisecond)/864e5;this.rd=days+time},module.exports=IslamicRataDie;

/***/ }),

/***/ "./node_modules/ilib/lib/JSUtils.js":
/*!******************************************!*\
  !*** ./node_modules/ilib/lib/JSUtils.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
var ilib=__webpack_require__(/*! ./ilib.js */ "./node_modules/ilib/lib/ilib.js"),JSUtils={shallowCopy:function(source,target){var prop=void 0;if(source&&target){if("function"==typeof Object.assign)return Object.assign(target,source);for(prop in source)void 0!==prop&&void 0!==source[prop]&&(target[prop]=source[prop])}},deepCopy:function(from,to){var prop;for(prop in from)prop&&("object"==typeof from[prop]?(to[prop]={},JSUtils.deepCopy(from[prop],to[prop])):to[prop]=from[prop]);return to},mapString:function(str,map){var mapped="";if(map&&str)for(var i=0;i<str.length;i++){var c=str.charAt(i);mapped+=map[c]||c}else mapped=str;return mapped},indexOf:function(array,obj){if(!array||!obj)return-1;if("function"==typeof array.indexOf)return array.indexOf(obj);for(var i=0;i<array.length;i++)if(array[i]===obj)return i;return-1},pad:function(str,length,right){"string"!=typeof str&&(str=""+str);var start=0;return"-"===str.charAt(0)&&start++,str.length>=length+start?str:right?str+JSUtils.pad.zeros.substring(0,length-str.length+start):str.substring(0,start)+JSUtils.pad.zeros.substring(0,length-str.length+start)+str.substring(start)}};JSUtils.pad.zeros="00000000000000000000000000000000",JSUtils.toHexString=function(string,limit){var i,result="",lim=limit&&limit<9?limit:4;if(!string)return"";for(i=0;i<string.length;i++){var ch=string.charCodeAt(i).toString(16);result+=JSUtils.pad(ch,lim)}return result.toUpperCase()},JSUtils.isDate=function(object){return"object"==typeof object&&"[object Date]"===Object.prototype.toString.call(object)},JSUtils.merge=function(object1,object2,replace,name1,name2){if(!object1&&object2)return object2;if(object1&&!object2)return object1;var prop=void 0,newObj={};for(prop in object1)prop&&void 0!==object1[prop]&&(newObj[prop]=object1[prop]);for(prop in object2)prop&&void 0!==object2[prop]&&(ilib.isArray(object1[prop])&&ilib.isArray(object2[prop])?"boolean"==typeof replace&&replace?newObj[prop]=object2[prop]:(newObj[prop]=[].concat(object1[prop]),newObj[prop]=newObj[prop].concat(object2[prop])):"object"==typeof object1[prop]&&"object"==typeof object2[prop]?newObj[prop]=JSUtils.merge(object1[prop],object2[prop],replace):(name1&&name2&&newObj[prop]==object2[prop]&&console.log("Property "+prop+" in "+name1+" is being overridden by the same value in "+name2),newObj[prop]=object2[prop]));return newObj},JSUtils.isEmpty=function(obj){var prop=void 0;if(!obj)return!0;for(prop in obj)if(prop&&void 0!==obj[prop])return!1;return!0},JSUtils.hashCode=function(obj){var hash=0;function addHash(hash,newValue){return hash*=65543,hash+=newValue,hash%=2147483647}function stringHash(str){for(var hash=0,i=0;i<str.length;i++)hash=addHash(hash,str.charCodeAt(i));return hash}switch(typeof obj){case"undefined":hash=0;break;case"string":hash=stringHash(obj);break;case"function":case"number":case"xml":hash=stringHash(String(obj));break;case"boolean":hash=obj?1:0;break;case"object":var props=[];for(var p in obj)obj.hasOwnProperty(p)&&props.push(p);props.sort();for(var i=0;i<props.length;i++)hash=addHash(hash=addHash(hash,stringHash(props[i])),JSUtils.hashCode(obj[props[i]]))}return hash},JSUtils.callAll=function(arr,action,callback,results){results=results||[],arr&&arr.length?action(arr,function(result){results.push(result),JSUtils.callAll(arr.slice(1),action,callback,results)}):callback(results)},module.exports=JSUtils;

/***/ }),

/***/ "./node_modules/ilib/lib/JulianCal.js":
/*!********************************************!*\
  !*** ./node_modules/ilib/lib/JulianCal.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Calendar=__webpack_require__(/*! ./Calendar.js */ "./node_modules/ilib/lib/Calendar.js"),JulianCal=function(options){this.type="julian",options&&"function"==typeof options.onLoad&&options.onLoad(this)};JulianCal.monthLengths=[31,28,31,30,31,30,31,31,30,31,30,31],JulianCal.cumMonthLengths=[0,31,59,90,120,151,181,212,243,273,304,334,365],JulianCal.cumMonthLengthsLeap=[0,31,60,91,121,152,182,213,244,274,305,335,366],JulianCal.prototype.getNumMonths=function(year){return 12},JulianCal.prototype.getMonLength=function(month,year){return 2===month&&this.isLeapYear(year)?29:JulianCal.monthLengths[month-1]},JulianCal.prototype.isLeapYear=function(year){var y="number"==typeof year?year:year.year;return MathUtils.mod(y,4)===(0<year?0:3)},JulianCal.prototype.getType=function(){return this.type},Calendar._constructors.julian=JulianCal,module.exports=JulianCal;

/***/ }),

/***/ "./node_modules/ilib/lib/JulianDate.js":
/*!*********************************************!*\
  !*** ./node_modules/ilib/lib/JulianDate.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),SearchUtils=__webpack_require__(/*! ./SearchUtils.js */ "./node_modules/ilib/lib/SearchUtils.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),TimeZone=__webpack_require__(/*! ./TimeZone.js */ "./node_modules/ilib/lib/TimeZone.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),JulianRataDie=__webpack_require__(/*! ./JulianRataDie.js */ "./node_modules/ilib/lib/JulianRataDie.js"),JulianCal=__webpack_require__(/*! ./JulianCal.js */ "./node_modules/ilib/lib/JulianCal.js"),JulianDate=function(params){this.cal=new JulianCal(),(params=params||{}).timezone&&(this.timezone=params.timezone),params.locale&&(this.locale="string"==typeof params.locale?new Locale(params.locale):params.locale),this.timezone?this._init(params):this.locale?new LocaleInfo(this.locale,{sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(li){this.li=li,this.timezone=li.getTimeZone(),this._init(params)})}):(this.timezone="local",this._init(params))};JulianDate.prototype=new IDate({noinstance:!0}),JulianDate.prototype.parent=IDate,(JulianDate.prototype.constructor=JulianDate).prototype._init=function(params){params.year||params.month||params.day||params.hour||params.minute||params.second||params.millisecond?(this.year=parseInt(params.year,10)||0,this.month=parseInt(params.month,10)||1,this.day=parseInt(params.day,10)||1,this.hour=parseInt(params.hour,10)||0,this.minute=parseInt(params.minute,10)||0,this.second=parseInt(params.second,10)||0,this.millisecond=parseInt(params.millisecond,10)||0,this.dayOfYear=parseInt(params.dayOfYear,10),"boolean"==typeof params.dst&&(this.dst=params.dst),this.rd=this.newRd(this),new TimeZone({id:this.timezone,sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(tz){this.tz=tz,this.offset=this.tz._getOffsetMillisWallTime(this)/864e5,0!==this.offset&&(this.rd=this.newRd({rd:this.rd.getRataDie()-this.offset})),this._init2(params)})})):this._init2(params)},JulianDate.prototype._init2=function(params){this.rd||(this.rd=this.newRd(params),this._calcDateComponents()),"function"==typeof params.onLoad&&params.onLoad(this)},JulianDate.prototype.newRd=function(params){return new JulianRataDie(params)},JulianDate.prototype._calcYear=function(rd){var year=Math.floor((4*(Math.floor(rd)-1)+1464)/1461);return year<=0?year-1:year},JulianDate.prototype._calcDateComponents=function(){var remainder,cumulative,rd=this.rd.getRataDie();this.year=this._calcYear(rd),void 0===this.offset&&(this.year=this._calcYear(rd),this.tz||(this.tz=new TimeZone({id:this.timezone})),this.offset=this.tz.getOffsetMillis(this)/864e5),0!==this.offset&&(rd+=this.offset,this.year=this._calcYear(rd)),remainder=rd+1-this.newRd({year:this.year,month:1,day:1,hour:0,minute:0,second:0,millisecond:0}).getRataDie(),cumulative=this.cal.isLeapYear(this.year)?JulianCal.cumMonthLengthsLeap:JulianCal.cumMonthLengths,this.month=SearchUtils.bsearch(Math.floor(remainder),cumulative),remainder-=cumulative[this.month-1],this.day=Math.floor(remainder),remainder-=this.day,remainder=Math.round(864e5*remainder),this.hour=Math.floor(remainder/36e5),remainder-=36e5*this.hour,this.minute=Math.floor(remainder/6e4),remainder-=6e4*this.minute,this.second=Math.floor(remainder/1e3),remainder-=1e3*this.second,this.millisecond=remainder},JulianDate.prototype.getDayOfWeek=function(){var rd=Math.floor(this.rd.getRataDie()+(this.offset||0));return MathUtils.mod(rd-2,7)},JulianDate.prototype.getCalendar=function(){return"julian"},IDate._constructors.julian=JulianDate,module.exports=JulianDate;

/***/ }),

/***/ "./node_modules/ilib/lib/JulianDay.js":
/*!********************************************!*\
  !*** ./node_modules/ilib/lib/JulianDay.js ***!
  \********************************************/
/***/ (function(module) {

var JulianDay=function(num){this.jd=num,this.days=Math.floor(this.jd),this.frac=num-this.days};JulianDay.prototype={getDays:function(){return this.days},setDays:function(days){this.days=Math.floor(days),this.jd=this.days+this.frac},getDayFraction:function(){return this.frac},setDayFraction:function(fraction){var t=Math.floor(fraction);this.frac=fraction-t,this.jd=this.days+this.frac},getDate:function(){return this.jd},setDate:function(num){this.jd=num},addDate:function(offset){"number"==typeof offset&&(this.jd+=offset,this.days=Math.floor(this.jd),this.frac=this.jd-this.days)}},module.exports=JulianDay;

/***/ }),

/***/ "./node_modules/ilib/lib/JulianRataDie.js":
/*!************************************************!*\
  !*** ./node_modules/ilib/lib/JulianRataDie.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var RataDie=__webpack_require__(/*! ./RataDie.js */ "./node_modules/ilib/lib/RataDie.js"),JulianCal=__webpack_require__(/*! ./JulianCal.js */ "./node_modules/ilib/lib/JulianCal.js"),JulianRataDie=function(params){this.cal=params&&params.cal||new JulianCal(),this.rd=NaN,RataDie.call(this,params)};JulianRataDie.prototype=new RataDie(),JulianRataDie.prototype.parent=RataDie,(JulianRataDie.prototype.constructor=JulianRataDie).prototype.epoch=1721422.5,JulianRataDie.prototype._setDateComponents=function(date){var year=date.year+(date.year<0?1:0),years=365*(year-1)+Math.floor((year-1)/4),dayInYear=(1<date.month?JulianCal.cumMonthLengths[date.month-1]:0)+date.day+(this.cal.isLeapYear(date.year)&&2<date.month?1:0),rdtime=(36e5*date.hour+6e4*date.minute+1e3*date.second+date.millisecond)/864e5;this.rd=years+dayInYear+rdtime},module.exports=JulianRataDie;

/***/ }),

/***/ "./node_modules/ilib/lib/Loader.js":
/*!*****************************************!*\
  !*** ./node_modules/ilib/lib/Loader.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Path=__webpack_require__(/*! ./Path.js */ "./node_modules/ilib/lib/Path.js"),ilib=__webpack_require__(/*! ./ilib.js */ "./node_modules/ilib/lib/ilib.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),Loader=function(){this.protocol="file://",this.includePath=[],this.addPaths=[],this.jsutils=JSUtils};Loader.prototype=new ilib.Loader(),Loader.prototype.parent=ilib.Loader,(Loader.prototype.constructor=Loader).prototype._loadFile=function(pathname,sync,cb){},Loader.prototype._exists=function(dir,file){var fullpath=Path.normalize(Path.join(dir,file));if("http://"!==this.protocol){var text=this._loadFile(fullpath,!0);text&&-1===this.includePath.indexOf(text)&&this.includePath.push(dir)}else-1===this.includePath.indexOf(dir)&&(this.includePath.push(dir),this._loadFile(fullpath,!1,ilib.bind(this,function(text){text||(this.includePath=this.includePath.slice(-1))})))},Loader.prototype._loadFileAlongIncludePath=function(includePath,pathname){for(var textMerge={},i=0;i<includePath.length;i++){var manifest=this.manifest[includePath[i]];if(!manifest||-1<Loader.indexOf(manifest,pathname)){var filepath=Path.join(includePath[i],pathname),text=this._loadFile(filepath,!0);if(text){if(void 0===this.isMultiPaths||1!=this.isMultiPaths)return text;"string"==typeof text&&(text=JSON.parse(text)),textMerge=this.jsutils.merge(text,textMerge)}}}if(0<Object.keys(textMerge).length)return textMerge},Loader.prototype.loadFiles=function(paths,sync,params,callback,root){root=root||params&&params.base;var includePath=[];if(this.addPaths&&0<this.addPaths.length&&(includePath=includePath.concat(this.addPaths)),root&&includePath.push(root),includePath=includePath.concat(this.includePath),paths){if(sync){var ret=[];this._loadManifests(!0);for(var i=0;i<paths.length;i++){var text=this._loadFileAlongIncludePath(includePath,Path.normalize(paths[i]));ret.push("string"==typeof text?JSON.parse(text):text)}return"function"==typeof callback&&callback(ret),ret}this._loadManifests(!1,ilib.bind(this,function(){this._loadFilesAsync(includePath,paths,[],callback)}))}},Loader.prototype._loadFilesAsyncAlongIncludePath=function(includes,filename,cb){if(0<includes.length){var root=includes[0];includes=includes.slice(1);var manifest=this.manifest[root];if(!manifest||-1<Loader.indexOf(manifest,filename)){var filepath=Path.join(root,filename);this._loadFile(filepath,!1,ilib.bind(this,function(t){t?cb(t):this._loadFilesAsyncAlongIncludePath(includes,filename,cb)}))}else this._loadFilesAsyncAlongIncludePath(includes,filename,cb)}else cb()},Loader.prototype._loadFilesAsync=function(includePath,paths,results,callback){if(0<paths.length){var filename=paths[0];paths=paths.slice(1),this._loadFilesAsyncAlongIncludePath(includePath,filename,ilib.bind(this,function(json){results.push("string"==typeof json?JSON.parse(json):json),this._loadFilesAsync(includePath,paths,results,callback)}))}else"function"==typeof callback&&callback(results)},Loader.prototype._loadManifestFile=function(i,sync,cb){if(i<this.includePath.length){var filepath=Path.join(this.includePath[i],"ilibmanifest.json");this._loadFile(filepath,sync,ilib.bind(this,function(text){text&&(this.manifest[this.includePath[i]]=("string"==typeof text?JSON.parse(text):text).files),this._loadManifestFile(i+1,sync,cb)}))}else"function"==typeof cb&&cb()},Loader.prototype._loadManifests=function(sync,cb){this.manifest?"function"==typeof cb&&cb():(this.manifest={},"boolean"!=typeof sync&&(sync=!0),this._loadManifestFile(0,sync,cb))},Loader.prototype.listAvailableFiles=function(sync,cb){return this._loadManifests(sync,ilib.bind(this,function(){"function"==typeof cb&&cb(this.manifest)})),this.manifest},Loader.prototype.addPath=function(paths){if(paths){var newpaths=ilib.isArray(paths)?paths:[paths];this.addPaths=this.addPaths.concat(newpaths),this.isMultiPaths=!0}},Loader.prototype.removePath=function(paths){paths&&(paths=ilib.isArray(paths)?paths:[paths]).forEach(ilib.bind(this,function(item){var index=this.addPaths.indexOf(item);-1!==index&&this.addPaths.splice(index,1)}))},Loader.indexOf=function(array,obj){if(!array||!obj)return-1;if("function"==typeof array.indexOf)return array.indexOf(obj);for(var i=0;i<array.length;i++)if(array[i]===obj)return i;return-1},Loader.prototype.checkAvailability=function(file){for(var dir in this.manifest)if(-1!==Loader.indexOf(this.manifest[dir],file))return!0;return!1},Loader.prototype.isAvailable=function(file,sync,cb){if("boolean"!=typeof sync&&(sync=!0),sync)return this._loadManifests(sync),this.checkAvailability(file);this._loadManifests(!1,ilib.bind(this,function(){"function"==typeof cb&&cb(this.checkAvailability(file))}))},module.exports=Loader;

/***/ }),

/***/ "./node_modules/ilib/lib/Locale.js":
/*!*****************************************!*\
  !*** ./node_modules/ilib/lib/Locale.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ./ilib.js */ "./node_modules/ilib/lib/ilib.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),Locale=function(language,region,variant,script){if(void 0===region&&void 0===variant&&void 0===script){var spec=language||ilib.getLocale();if("string"==typeof spec){for(var parts=spec.split(/[-_]/g),i=0;i<parts.length;i++)Locale._isLanguageCode(parts[i])?this.language=parts[i]:Locale._isRegionCode(parts[i])?this.region=parts[i]:Locale._isScriptCode(parts[i])?this.script=parts[i]:this.variant=parts[i];this.language=this.language||void 0,this.region=this.region||void 0,this.script=this.script||void 0,this.variant=this.variant||void 0}else"object"==typeof spec&&(this.language=spec.language||void 0,this.region=spec.region||void 0,this.script=spec.script||void 0,this.variant=spec.variant||void 0)}else language&&"string"==typeof language?(language=language.trim(),this.language=0<language.length?language.toLowerCase():void 0):this.language=void 0,region&&"string"==typeof region?(region=region.trim(),this.region=0<region.length?region.toUpperCase():void 0):this.region=void 0,variant&&"string"==typeof variant?(variant=variant.trim(),this.variant=0<variant.length?variant:void 0):this.variant=void 0,script&&"string"==typeof script?(script=script.trim(),this.script=0<script.length?script:void 0):this.script=void 0;this._genSpec()};Locale.a2toa3regmap={AF:"AFG",AX:"ALA",AL:"ALB",DZ:"DZA",AS:"ASM",AD:"AND",AO:"AGO",AI:"AIA",AQ:"ATA",AG:"ATG",AR:"ARG",AM:"ARM",AW:"ABW",AU:"AUS",AT:"AUT",AZ:"AZE",BS:"BHS",BH:"BHR",BD:"BGD",BB:"BRB",BY:"BLR",BE:"BEL",BZ:"BLZ",BJ:"BEN",BM:"BMU",BT:"BTN",BO:"BOL",BQ:"BES",BA:"BIH",BW:"BWA",BV:"BVT",BR:"BRA",IO:"IOT",BN:"BRN",BG:"BGR",BF:"BFA",BI:"BDI",KH:"KHM",CM:"CMR",CA:"CAN",CV:"CPV",KY:"CYM",CF:"CAF",TD:"TCD",CL:"CHL",CN:"CHN",CX:"CXR",CC:"CCK",CO:"COL",KM:"COM",CG:"COG",CD:"COD",CK:"COK",CR:"CRI",CI:"CIV",HR:"HRV",CU:"CUB",CW:"CUW",CY:"CYP",CZ:"CZE",DK:"DNK",DJ:"DJI",DM:"DMA",DO:"DOM",EC:"ECU",EG:"EGY",SV:"SLV",GQ:"GNQ",ER:"ERI",EE:"EST",ET:"ETH",FK:"FLK",FO:"FRO",FJ:"FJI",FI:"FIN",FR:"FRA",GF:"GUF",PF:"PYF",TF:"ATF",GA:"GAB",GM:"GMB",GE:"GEO",DE:"DEU",GH:"GHA",GI:"GIB",GR:"GRC",GL:"GRL",GD:"GRD",GP:"GLP",GU:"GUM",GT:"GTM",GG:"GGY",GN:"GIN",GW:"GNB",GY:"GUY",HT:"HTI",HM:"HMD",VA:"VAT",HN:"HND",HK:"HKG",HU:"HUN",IS:"ISL",IN:"IND",ID:"IDN",IR:"IRN",IQ:"IRQ",IE:"IRL",IM:"IMN",IL:"ISR",IT:"ITA",JM:"JAM",JP:"JPN",JE:"JEY",JO:"JOR",KZ:"KAZ",KE:"KEN",KI:"KIR",KP:"PRK",KR:"KOR",KW:"KWT",KG:"KGZ",LA:"LAO",LV:"LVA",LB:"LBN",LS:"LSO",LR:"LBR",LY:"LBY",LI:"LIE",LT:"LTU",LU:"LUX",MO:"MAC",MK:"MKD",MG:"MDG",MW:"MWI",MY:"MYS",MV:"MDV",ML:"MLI",MT:"MLT",MH:"MHL",MQ:"MTQ",MR:"MRT",MU:"MUS",YT:"MYT",MX:"MEX",FM:"FSM",MD:"MDA",MC:"MCO",MN:"MNG",ME:"MNE",MS:"MSR",MA:"MAR",MZ:"MOZ",MM:"MMR",NA:"NAM",NR:"NRU",NP:"NPL",NL:"NLD",NC:"NCL",NZ:"NZL",NI:"NIC",NE:"NER",NG:"NGA",NU:"NIU",NF:"NFK",MP:"MNP",NO:"NOR",OM:"OMN",PK:"PAK",PW:"PLW",PS:"PSE",PA:"PAN",PG:"PNG",PY:"PRY",PE:"PER",PH:"PHL",PN:"PCN",PL:"POL",PT:"PRT",PR:"PRI",QA:"QAT",RE:"REU",RO:"ROU",RU:"RUS",RW:"RWA",BL:"BLM",SH:"SHN",KN:"KNA",LC:"LCA",MF:"MAF",PM:"SPM",VC:"VCT",WS:"WSM",SM:"SMR",ST:"STP",SA:"SAU",SN:"SEN",RS:"SRB",SC:"SYC",SL:"SLE",SG:"SGP",SX:"SXM",SK:"SVK",SI:"SVN",SB:"SLB",SO:"SOM",ZA:"ZAF",GS:"SGS",SS:"SSD",ES:"ESP",LK:"LKA",SD:"SDN",SR:"SUR",SJ:"SJM",SZ:"SWZ",SE:"SWE",CH:"CHE",SY:"SYR",TW:"TWN",TJ:"TJK",TZ:"TZA",TH:"THA",TL:"TLS",TG:"TGO",TK:"TKL",TO:"TON",TT:"TTO",TN:"TUN",TR:"TUR",TM:"TKM",TC:"TCA",TV:"TUV",UG:"UGA",UA:"UKR",AE:"ARE",GB:"GBR",US:"USA",UM:"UMI",UY:"URY",UZ:"UZB",VU:"VUT",VE:"VEN",VN:"VNM",VG:"VGB",VI:"VIR",WF:"WLF",EH:"ESH",YE:"YEM",ZM:"ZMB",ZW:"ZWE"},Locale.a1toa3langmap={ab:"abk",aa:"aar",af:"afr",ak:"aka",sq:"sqi",am:"amh",ar:"ara",an:"arg",hy:"hye","as":"asm",av:"ava",ae:"ave",ay:"aym",az:"aze",bm:"bam",ba:"bak",eu:"eus",be:"bel",bn:"ben",bh:"bih",bi:"bis",bs:"bos",br:"bre",bg:"bul",my:"mya",ca:"cat",ch:"cha",ce:"che",ny:"nya",zh:"zho",cv:"chv",kw:"cor",co:"cos",cr:"cre",hr:"hrv",cs:"ces",da:"dan",dv:"div",nl:"nld",dz:"dzo",en:"eng",eo:"epo",et:"est",ee:"ewe",fo:"fao",fj:"fij",fi:"fin",fr:"fra",ff:"ful",gl:"glg",ka:"kat",de:"deu",el:"ell",gn:"grn",gu:"guj",ht:"hat",ha:"hau",he:"heb",hz:"her",hi:"hin",ho:"hmo",hu:"hun",ia:"ina",id:"ind",ie:"ile",ga:"gle",ig:"ibo",ik:"ipk",io:"ido",is:"isl",it:"ita",iu:"iku",ja:"jpn",jv:"jav",kl:"kal",kn:"kan",kr:"kau",ks:"kas",kk:"kaz",km:"khm",ki:"kik",rw:"kin",ky:"kir",kv:"kom",kg:"kon",ko:"kor",ku:"kur",kj:"kua",la:"lat",lb:"ltz",lg:"lug",li:"lim",ln:"lin",lo:"lao",lt:"lit",lu:"lub",lv:"lav",gv:"glv",mk:"mkd",mg:"mlg",ms:"msa",ml:"mal",mt:"mlt",mi:"mri",mr:"mar",mh:"mah",mn:"mon",na:"nau",nv:"nav",nb:"nob",nd:"nde",ne:"nep",ng:"ndo",nn:"nno",no:"nor",ii:"iii",nr:"nbl",oc:"oci",oj:"oji",cu:"chu",om:"orm",or:"ori",os:"oss",pa:"pan",pi:"pli",fa:"fas",pl:"pol",ps:"pus",pt:"por",qu:"que",rm:"roh",rn:"run",ro:"ron",ru:"rus",sa:"san",sc:"srd",sd:"snd",se:"sme",sm:"smo",sg:"sag",sr:"srp",gd:"gla",sn:"sna",si:"sin",sk:"slk",sl:"slv",so:"som",st:"sot",es:"spa",su:"sun",sw:"swa",ss:"ssw",sv:"swe",ta:"tam",te:"tel",tg:"tgk",th:"tha",ti:"tir",bo:"bod",tk:"tuk",tl:"tgl",tn:"tsn",to:"ton",tr:"tur",ts:"tso",tt:"tat",tw:"twi",ty:"tah",ug:"uig",uk:"ukr",ur:"urd",uz:"uzb",ve:"ven",vi:"vie",vo:"vol",wa:"wln",cy:"cym",wo:"wol",fy:"fry",xh:"xho",yi:"yid",yo:"yor",za:"zha",zu:"zul"},Locale.iso15924=["Adlm","Afak","Aghb","Ahom","Arab","Aran","Armi","Armn","Avst","Bali","Bamu","Bass","Batk","Beng","Bhks","Blis","Bopo","Brah","Brai","Bugi","Buhd","Cakm","Cans","Cari","Cham","Cher","Chrs","Cirt","Copt","Cpmn","Cprt","Cyrl","Cyrs","Deva","Diak","Dogr","Dsrt","Dupl","Egyd","Egyh","Egyp","Elba","Elym","Ethi","Geok","Geor","Glag","Gong","Gonm","Goth","Gran","Grek","Gujr","Guru","Hanb","Hang","Hani","Hano","Hans","Hant","Hatr","Hebr","Hira","Hluw","Hmng","Hmnp","Hrkt","Hung","Inds","Ital","Jamo","Java","Jpan","Jurc","Kali","Kana","Khar","Khmr","Khoj","Kitl","Kits","Knda","Kore","Kpel","Kthi","Lana","Laoo","Latf","Latg","Latn","Leke","Lepc","Limb","Lina","Linb","Lisu","Loma","Lyci","Lydi","Mahj","Maka","Mand","Mani","Marc","Maya","Medf","Mend","Merc","Mero","Mlym","Modi","Mong","Moon","Mroo","Mtei","Mult","Mymr","Nand","Narb","Nbat","Newa","Nkdb","Nkgb","Nkoo","Nshu","Ogam","Olck","Orkh","Orya","Osge","Osma","Palm","Pauc","Perm","Phag","Phli","Phlp","Phlv","Phnx","Plrd","Piqd","Prti","Qaaa","Qabx","Rjng","Rohg","Roro","Runr","Samr","Sara","Sarb","Saur","Sgnw","Shaw","Shrd","Shui","Sidd","Sind","Sinh","Sogd","Sogo","Sora","Soyo","Sund","Sylo","Syrc","Syre","Syrj","Syrn","Tagb","Takr","Tale","Talu","Taml","Tang","Tavt","Telu","Teng","Tfng","Tglg","Thaa","Thai","Tibt","Tirh","Toto","Ugar","Vaii","Visp","Wara","Wcho","Wole","Xpeo","Xsux","Yezi","Yiii","Zanb","Zinh","Zmth","Zsye","Zsym","Zxxx","Zyyy","Zzzz"],Locale._notLower=function(str){var ch=str.charCodeAt(0);return ch<97||122<ch},Locale._notUpper=function(str){var ch=str.charCodeAt(0);return ch<65||90<ch},Locale._notDigit=function(str){var ch=str.charCodeAt(0);return ch<48||57<ch},Locale._isLanguageCode=function(str){if(void 0===str||str.length<2||3<str.length)return!1;for(var i=0;i<str.length;i++)if(Locale._notLower(str.charAt(i)))return!1;return!0},Locale._isRegionCode=function(str){var i;if(void 0===str||str.length<2||3<str.length)return!1;if(2===str.length){for(i=0;i<str.length;i++)if(Locale._notUpper(str.charAt(i)))return!1}else for(i=0;i<str.length;i++)if(Locale._notDigit(str.charAt(i)))return!1;return!0},Locale._isScriptCode=function(str){if(void 0===str||4!==str.length||Locale._notUpper(str.charAt(0)))return!1;for(var i=1;i<4;i++)if(Locale._notLower(str.charAt(i)))return!1;return!0},Locale.regionAlpha2ToAlpha3=function(alpha2){return Locale.a2toa3regmap[alpha2]||alpha2},Locale.languageAlpha1ToAlpha3=function(alpha1){return Locale.a1toa3langmap[alpha1]||alpha1},Locale.prototype={_genSpec:function(){this.spec=this.language||"",this.script&&(0<this.spec.length&&(this.spec+="-"),this.spec+=this.script),this.region&&(0<this.spec.length&&(this.spec+="-"),this.spec+=this.region),this.variant&&(0<this.spec.length&&(this.spec+="-"),this.spec+=this.variant)},getLanguage:function(){return this.language},getLanguageAlpha3:function(){return Locale.languageAlpha1ToAlpha3(this.language)},getRegion:function(){return this.region},getRegionAlpha3:function(){return Locale.regionAlpha2ToAlpha3(this.region)},getScript:function(){return this.script},getVariant:function(){return this.variant},getSpec:function(){return this.spec||this._genSpec(),this.spec},getLangSpec:function(){var spec=this.language;return spec&&this.script&&(spec+="-"+this.script),spec||""},toString:function(){return this.getSpec()},equals:function(other){return this.language===other.language&&this.region===other.region&&this.script===other.script&&this.variant===other.variant},isPseudo:function(){return-1<JSUtils.indexOf(ilib.pseudoLocales,this.spec)},isValid:function(){return!!(this.language||this.script||this.region)&&!(!(!this.language||Locale._isLanguageCode(this.language)&&Locale.a1toa3langmap[this.language])||this.script&&!(Locale._isScriptCode(this.script)&&-1<Locale.iso15924.indexOf(this.script))||!(!this.region||Locale._isRegionCode(this.region)&&Locale.a2toa3regmap[this.region]))}},Locale.locales=[],
// !macro localelist
Locale.getAvailableLocales=function(sync,onLoad){var locales=[];return Locale.locales.length||"function"!=typeof ilib._load.listAvailableFiles?(locales=Locale.locales,onLoad&&"function"==typeof onLoad&&onLoad(locales)):(void 0===sync&&(sync=!0),ilib._load.listAvailableFiles(sync,function(manifest){if(manifest)for(var dir in manifest)for(var filelist=manifest[dir],i=0;i<filelist.length;i++)15<filelist[i].length&&"localeinfo.json"===filelist[i].substr(-15)&&locales.push(filelist[i].substring(0,filelist[i].length-16).replace(/\//g,"-"));onLoad&&"function"==typeof onLoad&&onLoad(locales)})),locales},module.exports=Locale;

/***/ }),

/***/ "./node_modules/ilib/lib/LocaleInfo.js":
/*!*********************************************!*\
  !*** ./node_modules/ilib/lib/LocaleInfo.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// !data localeinfo
var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),Utils=__webpack_require__(/*! ./Utils.js */ "./node_modules/ilib/lib/Utils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleMatcher=__webpack_require__(/*! ./LocaleMatcher.js */ "./node_modules/ilib/lib/LocaleMatcher.js"),LocaleInfo=function(locale,options){var sync=!0,loadParams=void 0;switch(this.info=LocaleInfo.defaultInfo,typeof locale){case"string":this.locale=new Locale(locale);break;default:case"undefined":this.locale=new Locale();break;case"object":this.locale=locale}-1!=["pa-PK","ha-CM","ha-SD"].indexOf(this.locale.getSpec())&&new LocaleMatcher({locale:this.locale.getSpec(),sync:sync,loadParams:loadParams,onLoad:ilib.bind(this,function(lm){this.locale=new Locale(lm.getLikelyLocale())})}),options&&(void 0!==options.sync&&(sync=!!options.sync),void 0!==options.loadParams&&(loadParams=options.loadParams)),Utils.loadData({object:"LocaleInfo",locale:this.locale,name:"localeinfo.json",sync:sync,loadParams:loadParams,callback:ilib.bind(this,function(info){this.info=info||LocaleInfo.defaultInfo,options&&"function"==typeof options.onLoad&&options.onLoad(this)})})};LocaleInfo.defaultInfo=ilib.data.localeinfo,LocaleInfo.defaultInfo=LocaleInfo.defaultInfo||{calendar:"gregorian",clock:"24",currency:"USD",delimiter:{quotationStart:"“",quotationEnd:"”",alternateQuotationStart:"‘",alternateQuotationEnd:"’"},firstDayOfWeek:1,meridiems:"gregorian",numfmt:{script:"Latn",decimalChar:".",groupChar:",",pctChar:"%",exponential:"E",prigroupSize:3,currencyFormats:{common:"{s} {n}",commonNegative:"-{s} {n}",iso:"{s} {n}",isoNegative:"({s} {n})"},negativenumFmt:"-{n}",pctFmt:"{n}%",negativepctFmt:"-{n}%",roundingMode:"halfdown",secGroupSize:null,useNative:!1},paperSizes:{regular:"A4"},timezone:"Etc/UTC",units:"metric",weekendEnd:0,weekendStart:6},LocaleInfo.prototype={getLanguageName:function(){return this.info["language.name"]},getRegionName:function(){return this.info["region.name"]},getClock:function(){return this.info.clock},getLocale:function(){return this.locale},getUnits:function(){return this.info.units},getCalendar:function(){return this.info.calendar},getFirstDayOfWeek:function(){return this.info.firstDayOfWeek},getWeekEndStart:function(){return this.info.weekendStart},getWeekEndEnd:function(){return this.info.weekendEnd},getTimeZone:function(){return this.info.timezone},getDecimalSeparator:function(){return this.info.numfmt.decimalChar},getNativeDecimalSeparator:function(){return this.info.native_numfmt&&this.info.native_numfmt.decimalChar||this.info.numfmt.decimalChar},getGroupingSeparator:function(){return this.info.numfmt.groupChar},getNativeGroupingSeparator:function(){return this.info.native_numfmt&&this.info.native_numfmt.groupChar||this.info.numfmt.groupChar},getPrimaryGroupingDigits:function(){return void 0!==this.info.numfmt.prigroupSize&&this.info.numfmt.prigroupSize||0},getSecondaryGroupingDigits:function(){return this.info.numfmt.secgroupSize||0},getPercentageFormat:function(){return this.info.numfmt.pctFmt},getNegativePercentageFormat:function(){return this.info.numfmt.negativepctFmt},getPercentageSymbol:function(){return this.info.numfmt.pctChar||"%"},getExponential:function(){return this.info.numfmt.exponential},getNativeExponential:function(){return this.info.native_numfmt&&this.info.native_numfmt.exponential||this.info.numfmt.exponential},getNativePercentageSymbol:function(){return this.info.native_numfmt&&this.info.native_numfmt.pctChar||this.info.numfmt.pctChar||"%"},getNegativeNumberFormat:function(){return this.info.numfmt.negativenumFmt},getCurrencyFormats:function(){return this.info.numfmt.currencyFormats},getCurrency:function(){return this.info.currency},getDigitsStyle:function(){return this.info.numfmt&&this.info.numfmt.useNative?"native":void 0!==this.info.native_numfmt?"optional":"western"},getDigits:function(){return this.info.numfmt.digits},getNativeDigits:function(){return this.info.numfmt.useNative&&this.info.numfmt.digits||this.info.native_numfmt&&this.info.native_numfmt.digits},getRoundingMode:function(){return this.info.numfmt.roundingMode},getDefaultScript:function(){return this.info.scripts?this.info.scripts[0]:"Latn"},getScript:function(){return this.locale.getScript()||this.getDefaultScript()},getAllScripts:function(){return this.info.scripts||["Latn"]},getMeridiemsStyle:function(){return this.info.meridiems||"gregorian"},getPaperSize:function(){return this.info.paperSizes.regular},getDelimiterQuotationStart:function(){return this.info.delimiter.quotationStart},getDelimiterQuotationEnd:function(){return this.info.delimiter.quotationEnd}},module.exports=LocaleInfo;

/***/ }),

/***/ "./node_modules/ilib/lib/LocaleMatcher.js":
/*!************************************************!*\
  !*** ./node_modules/ilib/lib/LocaleMatcher.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// !data localematch
var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),Utils=__webpack_require__(/*! ./Utils.js */ "./node_modules/ilib/lib/Utils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),componentWeights=[.5,.2,.25,.05],multiScriptLanguages={az:!0,kk:!0,ku:!0,ky:!0,pa:!0,sr:!0,tg:!0,uz:!0,zh:!0},LocaleMatcher=function(options){var sync=!0,loadParams=void 0;this.locale=new Locale(),options&&(void 0!==options.locale&&(this.locale="string"==typeof options.locale?new Locale(options.locale):options.locale),void 0!==options.sync&&(sync=!!options.sync),void 0!==options.loadParams&&(loadParams=options.loadParams)),void 0===ilib.data.localematch?Utils.loadData({object:"LocaleMatcher",locale:"-",name:"localematch.json",sync:sync,loadParams:loadParams,callback:ilib.bind(this,function(info){info||(info={}),this.info=info,options&&"function"==typeof options.onLoad&&options.onLoad(this)})}):(this.info=ilib.data.localematch,options&&"function"==typeof options.onLoad&&options.onLoad(this))};LocaleMatcher.prototype={getLocale:function(){return this.locale},_getLikelyLocale:function(locale){if(locale.language&&locale.script&&locale.region)return locale;if(void 0!==this.info.likelyLocales[locale.getSpec()])return new Locale(this.info.likelyLocales[locale.getSpec()]);var partial=this.info.likelyLocales[new Locale(locale.language,void 0,locale.region).getSpec()];return void 0!==partial?new Locale(partial):void 0!==(partial=this.info.likelyLocales[new Locale(locale.language,locale.script,void 0).getSpec()])?new Locale(partial):void 0!==(partial=this.info.likelyLocales[new Locale(locale.language,void 0,void 0).getSpec()])?new Locale(partial):void 0!==(partial=this.info.likelyLocales[new Locale(void 0,locale.script,locale.region).getSpec()])?new Locale(partial):void 0!==(partial=this.info.likelyLocales[new Locale(void 0,void 0,locale.region).getSpec()])?new Locale(partial):void 0!==(partial=this.info.likelyLocales[new Locale(void 0,locale.script,void 0).getSpec()])?new Locale(partial):locale},getLikelyLocale:function(){return this._getLikelyLocale(this.locale)},getLikelyLocaleMinimal:function(){var fullLocale=this._getLikelyLocale(this.locale),langLocale=this._getLikelyLocale(new Locale(fullLocale.language));return fullLocale.script!==langLocale.script||multiScriptLanguages[fullLocale.language]?fullLocale:new Locale(fullLocale.language,void 0,fullLocale.region)},match:function(locale){var thisfull,otherfull,i,other=new Locale(locale),scores=[0,0,0,0];if(this.locale.language===other.language)scores[0]=100;else if(this.locale.language&&other.language)if((this.info.macroLanguagesReverse[this.locale.language]||this.locale.language)===(this.info.macroLanguagesReverse[other.language]||other.language))scores[0]=90;else{var pair=this.locale.language+"-"+other.language;scores[0]=this.info.mutualIntelligibility[pair]||0}else thisfull=this.getLikelyLocale(),otherfull=new Locale(this.info.likelyLocales[other.getSpec()]||other.getSpec()),thisfull.language===otherfull.language&&(scores[0]=100);if(this.locale.script===other.script?scores[1]=100:this.locale.script&&other.script||(thisfull=this.locale.script?this.locale:new Locale(this.info.likelyLocales[this.locale.language]),otherfull=other.script?other:new Locale(this.info.likelyLocales[other.language]),thisfull.script===otherfull.script&&(scores[1]=100)),this.locale.region===other.region)scores[2]=100;else if(this.locale.region&&other.region){var containers=this.info.territoryContainmentReverse[this.locale.region]||[];for(i=containers.length-1;0<i;i--){var container=this.info.territoryContainment[containers[i]];if(container&&-1<container.indexOf(other.region)){scores[2]=100*(i+1)/containers.length*.2;break}}}else thisfull=this.getLikelyLocale(),otherfull=new Locale(this.info.likelyLocales[other.getSpec()]||other.getSpec()),thisfull.region===otherfull.region&&(scores[2]=100);this.locale.variant===other.variant&&(scores[3]=100);var total=0;for(i=0;i<4;i++)total+=scores[i]*componentWeights[i];return Math.round(total)},getMacroLanguage:function(){return this.info.macroLanguagesReverse[this.locale.language]||this.locale.language},_getRegionContainment:function(region){return this.info.territoryContainmentReverse[region]||[]},getRegionContainment:function(){var region=this.locale.region||this.getLikelyLocale().region;return this._getRegionContainment(region)},smallestCommonRegion:function(otherLocale){if(void 0===otherLocale)return"001";for(var thisRegion=this.locale.region||this.getLikelyLocale().region,otherLoc="string"==typeof otherLocale?new Locale(otherLocale):otherLocale,otherRegion=this._getLikelyLocale(otherLoc).region,thisRegions=this._getRegionContainment(thisRegion),otherRegions=this._getRegionContainment(otherRegion),i=thisRegions.length-1;0<i;i--)if(-1<otherRegions.indexOf(thisRegions[i]))return thisRegions[i];return"001"}},module.exports=LocaleMatcher;

/***/ }),

/***/ "./node_modules/ilib/lib/MathUtils.js":
/*!********************************************!*\
  !*** ./node_modules/ilib/lib/MathUtils.js ***!
  \********************************************/
/***/ (function(module) {

var MathUtils={signum:function(num){var n=num;if("string"==typeof num)n=parseInt(num,10);else if("number"!=typeof num)return 1;return n<0?-1:1},floor:function(num){return Math.floor(num)},ceiling:function(num){return Math.ceil(num)},down:function(num){return num<0?Math.ceil(num):Math.floor(num)},up:function(num){return num<0?Math.floor(num):Math.ceil(num)},halfup:function(num){return num<0?Math.ceil(num-.5):Math.floor(num+.5)},halfdown:function(num){return num<0?Math.floor(num+.5):Math.ceil(num-.5)},halfeven:function(num){return Math.floor(num)%2==0?Math.ceil(num-.5):Math.floor(num+.5)},halfodd:function(num){return Math.floor(num)%2!=0?Math.ceil(num-.5):Math.floor(num+.5)},mod:function(dividend,modulus){if(0==modulus)return 0;var x=dividend%modulus;return x<0?x+modulus:x},amod:function(dividend,modulus){if(0==modulus)return 0;var x=dividend%modulus;return x<=0?x+modulus:x},shiftDecimal:function shift(number,precision){var numArray=(""+number).split("e");return+(numArray[0]+"e"+(numArray[1]?+numArray[1]+precision:precision))},log10:function(num){return"function"==typeof Math.log10?Math.log10(num):Math.log(num)/Math.LN10},significant:function(number,digits,round){if(digits<1||0===number)return number;var rnd=round||Math.round,factor=-Math.floor(MathUtils.log10(Math.abs(number)))+digits-1;return MathUtils.shiftDecimal(rnd(MathUtils.shiftDecimal(number,factor)),-factor)}};module.exports=MathUtils;

/***/ }),

/***/ "./node_modules/ilib/lib/NumFmt.js":
/*!*****************************************!*\
  !*** ./node_modules/ilib/lib/NumFmt.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// !data localeinfo currency
var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),Currency=__webpack_require__(/*! ./Currency.js */ "./node_modules/ilib/lib/Currency.js"),IString=__webpack_require__(/*! ./IString.js */ "./node_modules/ilib/lib/IString.js"),NumFmt=function(options){var sync=!0;this.locale=new Locale(),this.type="number";var loadParams=void 0;options&&(options.locale&&(this.locale="string"==typeof options.locale?new Locale(options.locale):options.locale),options.type&&("number"!==options.type&&"currency"!==options.type&&"percentage"!==options.type||(this.type=options.type)),options.currency&&(this.currency=options.currency),void 0!==options.maxFractionDigits&&(this.maxFractionDigits=Number(options.maxFractionDigits)),void 0!==options.minFractionDigits&&(this.minFractionDigits=Number(options.minFractionDigits),this.minFractionDigits<0&&(this.minFractionDigits=0),20<this.minFractionDigits&&(this.minFractionDigits=20)),void 0!==options.significantDigits&&(this.significantDigits=Number(options.significantDigits),this.significantDigits<1&&(this.significantDigits=1),20<this.significantDigits&&(this.significantDigits=20)),options.style&&(this.style=options.style),"boolean"==typeof options.useNative&&(this.useNative=options.useNative),this.roundingMode=options.roundingMode,"boolean"==typeof options.sync&&(sync=options.sync),loadParams=options.loadParams),this.localeInfo=void 0,new LocaleInfo(this.locale,{sync:sync,loadParams:loadParams,onLoad:ilib.bind(this,function(li){if(this.localeInfo=li,"number"===this.type)this.templateNegative=new IString(this.localeInfo.getNegativeNumberFormat()||"-{n}");else{if("currency"===this.type){var templates;if(!this.currency||"string"!=typeof this.currency)throw"A currency property is required in the options to the number formatter constructor when the type property is set to currency.";return void new Currency({locale:this.locale,code:this.currency,sync:sync,loadParams:loadParams,onLoad:ilib.bind(this,function(cur){this.currencyInfo=cur,"common"!==this.style&&"iso"!==this.style&&(this.style="common"),"number"!=typeof this.maxFractionDigits&&"number"!=typeof this.minFractionDigits&&(this.minFractionDigits=this.maxFractionDigits=this.currencyInfo.getFractionDigits()),templates=this.localeInfo.getCurrencyFormats(),this.template=new IString(templates[this.style]||templates.common),this.templateNegative=new IString(templates[this.style+"Negative"]||templates.commonNegative),this.sign="iso"===this.style?this.currencyInfo.getCode():this.currencyInfo.getSign(),this.roundingMode||(this.roundingMode=this.currencyInfo&&this.currencyInfo.roundingMode),this._init(),options&&"function"==typeof options.onLoad&&options.onLoad(this)})})}"percentage"===this.type&&(this.template=new IString(this.localeInfo.getPercentageFormat()||"{n}%"),this.templateNegative=new IString(this.localeInfo.getNegativePercentageFormat()||this.localeInfo.getNegativeNumberFormat()+"%"))}this._init(),options&&"function"==typeof options.onLoad&&options.onLoad(this)})})};NumFmt.getAvailableLocales=function(){},NumFmt.zeros="0000000000000000000000000000000000000000000000000000000000000000000000",NumFmt.prototype={getUseNative:function(){return"boolean"==typeof this.useNative?this.useNative:"native"===this.localeInfo.getDigitsStyle()},_init:function(){if(this.maxFractionDigits<this.minFractionDigits&&(this.minFractionDigits=this.maxFractionDigits),this.roundingMode||(this.roundingMode=this.localeInfo.getRoundingMode()),this.roundingMode||(this.roundingMode="halfdown"),this.round=MathUtils[this.roundingMode],this.round||(this.roundingMode="halfdown",this.round=MathUtils[this.roundingMode]),"nogrouping"===this.style?this.prigroupSize=this.secgroupSize=0:(this.prigroupSize=this.localeInfo.getPrimaryGroupingDigits(),this.secgroupSize=this.localeInfo.getSecondaryGroupingDigits(),this.groupingSeparator=this.getUseNative()?this.localeInfo.getNativeGroupingSeparator():this.localeInfo.getGroupingSeparator()),this.decimalSeparator=this.getUseNative()?this.localeInfo.getNativeDecimalSeparator():this.localeInfo.getDecimalSeparator(),this.getUseNative()){var nd=this.localeInfo.getNativeDigits()||this.localeInfo.getDigits();nd&&(this.digits=nd.split(""))}this.exponentSymbol=this.localeInfo.getExponential()||"e"},constrain:function(num){var parts=(""+num).split("."),result=num;return void 0!==this.significantDigits&&0<this.significantDigits&&(void 0===this.maxFractionDigits||this.maxFractionDigits<0||parts[0].length+this.maxFractionDigits>this.significantDigits)&&(result=MathUtils.significant(result,this.significantDigits,this.round)),void 0!==this.maxFractionDigits&&-1<this.maxFractionDigits&&(result=MathUtils.shiftDecimal(this.round(MathUtils.shiftDecimal(result,this.maxFractionDigits)),-this.maxFractionDigits)),result},_formatScientific:function(num){var formatted,numparts,integral,fraction,parts=new Number(num).toExponential().split("e"),significant=parts[0],exponent=parts[1];if(0<this.maxFractionDigits||0<this.significantDigits){var maxDigits=(this.maxFractionDigits||25)+1;0<this.significantDigits&&(maxDigits=Math.min(maxDigits,this.significantDigits)),significant=MathUtils.significant(Number(significant),maxDigits,this.round)}return integral=(numparts=(""+significant).split("."))[0],fraction=numparts[1],void 0!==this.maxFractionDigits&&(fraction=fraction.substring(0,this.maxFractionDigits)),void 0!==this.minFractionDigits&&(fraction=JSUtils.pad(fraction||"",this.minFractionDigits,!0)),formatted=integral,fraction.length&&(formatted+=this.decimalSeparator+fraction),formatted+=this.exponentSymbol+exponent},_formatStandard:function(num){var i,k,parts,integral,fraction,cycle,formatted;if(integral=(parts=(""+(num=Math.abs(this.constrain(num)))).split("."))[0].toString(),fraction=parts[1],0<this.minFractionDigits&&(fraction=JSUtils.pad(fraction||"",this.minFractionDigits,!0)),0<this.secgroupSize){if(integral.length>this.prigroupSize){var size1=this.prigroupSize,size3=integral.length-size1,num_sec=(integral=integral.slice(0,size3)+this.groupingSeparator+integral.slice(size3)).substring(0,integral.indexOf(this.groupingSeparator));for(k=num_sec.length;k>this.secgroupSize;){var secsize1=this.secgroupSize,secsize3=num_sec.length-secsize1;k=(num_sec=(integral=integral.slice(0,secsize3)+this.groupingSeparator+integral.slice(secsize3)).substring(0,integral.indexOf(this.groupingSeparator))).length}}formatted=integral}else if(0!==this.prigroupSize){for(cycle=MathUtils.mod(integral.length-1,this.prigroupSize),formatted="",i=0;i<integral.length-1;i++)formatted+=integral.charAt(i),0===cycle&&(formatted+=this.groupingSeparator),cycle=MathUtils.mod(cycle-1,this.prigroupSize);formatted+=integral.charAt(integral.length-1)}else formatted=integral;return fraction&&(void 0===this.maxFractionDigits&&void 0===this.significantDigits||0<this.maxFractionDigits||0<this.significantDigits)&&(formatted+=this.decimalSeparator,formatted+=fraction),this.digits&&(formatted=JSUtils.mapString(formatted,this.digits)),formatted},format:function(num){var formatted,n;if(void 0===num)return"";(n=Number(num),"number"===this.type)?(formatted="scientific"===this.style?this._formatScientific(n):this._formatStandard(n),num<0&&(formatted=this.templateNegative.format({n:formatted}))):(formatted=this._formatStandard(n),formatted=(n<0?this.templateNegative:this.template).format({n:formatted,s:this.sign}));return formatted},getType:function(){return this.type},getLocale:function(){return this.locale},isGroupingUsed:function(){return"undefined"!==this.groupingSeparator&&0<this.groupingSeparator.length},getMaxFractionDigits:function(){return void 0!==this.maxFractionDigits?this.maxFractionDigits:-1},getMinFractionDigits:function(){return void 0!==this.minFractionDigits?this.minFractionDigits:-1},getSignificantDigits:function(){return void 0!==this.significantDigits?this.significantDigits:-1},getCurrency:function(){return this.currencyInfo&&this.currencyInfo.getCode()},getRoundingMode:function(){return this.roundingMode},getStyle:function(){return this.style}},module.exports=NumFmt;

/***/ }),

/***/ "./node_modules/ilib/lib/Path.js":
/*!***************************************!*\
  !*** ./node_modules/ilib/lib/Path.js ***!
  \***************************************/
/***/ (function(module) {

var Path={dirname:function(pathname){return pathname?"."===(pathname=Path.normalize(pathname))?"..":Path.normalize(pathname+"/.."):pathname},normalize:function(pathname){return pathname&&(1<(pathname=(pathname=(pathname=(pathname=(pathname=(pathname=(pathname=(pathname=(pathname=(pathname=pathname.replace(/\\/g,"/")).replace(/\/\//g,"/")).replace(/\/\//g,"/")).replace(/\/[^/]*[^\./]\/\.\./g,"/.")).replace(/^[^/]*[^\./]\/\.\./g,".")).replace(/\/\.\//g,"/")).replace(/^\.\//,"")).replace(/\/\//g,"/")).replace(/\/\.$/,"")).replace(/\/\//g,"/")).length&&(pathname=pathname.replace(/\/$/,"")),0===pathname.length&&(pathname=".")),pathname},join:function(var_args){for(var arr=[],i=0;i<arguments.length;i++)arr.push(arguments[i]&&0<arguments[i].length?arguments[i]:".");return Path.normalize(arr.join("/"))},basename:function(pathname,extension){var base=pathname,slash=pathname.lastIndexOf("/");if(-1!==slash&&(base=pathname.substring(slash+1)),extension){var ext="."===extension[0]?extension:"."+extension,index=base.lastIndexOf(ext);-1<index&&(base=base.substring(0,index))}return base}};module.exports=Path;

/***/ }),

/***/ "./node_modules/ilib/lib/PersAlgoRataDie.js":
/*!**************************************************!*\
  !*** ./node_modules/ilib/lib/PersAlgoRataDie.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),PersianAlgoCal=__webpack_require__(/*! ./PersianAlgoCal.js */ "./node_modules/ilib/lib/PersianAlgoCal.js"),RataDie=__webpack_require__(/*! ./RataDie.js */ "./node_modules/ilib/lib/RataDie.js"),PersAlgoRataDie=function(params){this.cal=params&&params.cal||new PersianAlgoCal(),this.rd=NaN,RataDie.call(this,params)};PersAlgoRataDie.prototype=new RataDie(),PersAlgoRataDie.prototype.parent=RataDie,(PersAlgoRataDie.prototype.constructor=PersAlgoRataDie).prototype.epoch=1948319.5,PersAlgoRataDie.cumMonthLengths=[0,31,62,93,124,155,186,216,246,276,306,336,365],PersAlgoRataDie.prototype._setDateComponents=function(date){var year=this.cal.equivalentCycleYear(date.year),y=date.year-(0<=date.year?474:473),rdOfYears=1029983*Math.floor(y/2820)+365*(year-1)+Math.floor((682*year-110)/2816),dayInYear=(1<date.month?PersAlgoRataDie.cumMonthLengths[date.month-1]:0)+date.day,rdtime=(36e5*date.hour+6e4*date.minute+1e3*date.second+date.millisecond)/864e5;this.rd=rdOfYears+dayInYear+rdtime},PersAlgoRataDie.prototype._onOrBefore=function(rd,dayOfWeek){return rd-MathUtils.mod(Math.floor(rd)-dayOfWeek-3,7)},module.exports=PersAlgoRataDie;

/***/ }),

/***/ "./node_modules/ilib/lib/PersRataDie.js":
/*!**********************************************!*\
  !*** ./node_modules/ilib/lib/PersRataDie.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Astro=__webpack_require__(/*! ./Astro.js */ "./node_modules/ilib/lib/Astro.js"),RataDie=__webpack_require__(/*! ./RataDie.js */ "./node_modules/ilib/lib/RataDie.js"),GregorianDate=__webpack_require__(/*! ./GregorianDate.js */ "./node_modules/ilib/lib/GregorianDate.js"),PersRataDie=function(params){this.rd=NaN,Astro.initAstro(!params||"boolean"!=typeof params.sync||params.sync,params&&params.loadParams,ilib.bind(this,function(x){RataDie.call(this,params),params&&"function"==typeof params.callback&&params.callback(this)}))};PersRataDie.prototype=new RataDie(),PersRataDie.prototype.parent=RataDie,(PersRataDie.prototype.constructor=PersRataDie).prototype.epoch=1948319.5,PersRataDie.prototype._tehranEquinox=function(year){var equJED,eot;return(equJED=Astro._equinox(year,0))-Astro._deltat(year)/86400+(eot=((eot=360*Astro._equationOfTime(equJED))-20*Math.floor(eot/20))/360)+52.5/360},PersRataDie.prototype._getYear=function(jd){var nexteq,guess=new GregorianDate({julianday:jd}).getYears()-2,ret={};for(ret.equinox=this._tehranEquinox(guess);ret.equinox>jd;)guess--,ret.equinox=this._tehranEquinox(guess);for(nexteq=ret.equinox-1;!(Math.floor(ret.equinox)+.5<=jd&&jd<Math.floor(nexteq)+.5);)ret.equinox=nexteq,guess++,nexteq=this._tehranEquinox(guess);return ret.year=Math.round((ret.equinox-this.epoch-1)/365.24219878)+1,ret},PersRataDie.prototype._setDateComponents=function(date){var adr,guess,jd;for(guess=this.epoch+1+365.24219878*((date.year||0)-2),adr={year:(date.year||0)-1,equinox:0};adr.year<date.year;)guess=(adr=this._getYear(guess)).equinox+367.24219878;jd=Math.floor(adr.equinox)+((date.month||0)<=7?31*((date.month||1)-1):30*((date.month||1)-1)+6)+((date.day||1)-1+.5),jd+=(36e5*(date.hour||0)+6e4*(date.minute||0)+1e3*(date.second||0)+(date.millisecond||0))/864e5,this.rd=jd-this.epoch},PersRataDie.prototype._onOrBefore=function(rd,dayOfWeek){return rd-MathUtils.mod(Math.floor(rd)-dayOfWeek-3,7)},module.exports=PersRataDie;

/***/ }),

/***/ "./node_modules/ilib/lib/PersianAlgoCal.js":
/*!*************************************************!*\
  !*** ./node_modules/ilib/lib/PersianAlgoCal.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Calendar=__webpack_require__(/*! ./Calendar.js */ "./node_modules/ilib/lib/Calendar.js"),PersianAlgoCal=function(options){this.type="persian-algo",options&&"function"==typeof options.onLoad&&options.onLoad(this)};PersianAlgoCal.monthLengths=[31,31,31,31,31,31,30,30,30,30,30,29],PersianAlgoCal.prototype.getNumMonths=function(year){return 12},PersianAlgoCal.prototype.getMonLength=function(month,year){return 12===month&&this.isLeapYear(year)?30:PersianAlgoCal.monthLengths[month-1]},PersianAlgoCal.prototype.equivalentCycleYear=function(year){var y=year-(0<=year?474:473);return MathUtils.mod(y,2820)+474},PersianAlgoCal.prototype.isLeapYear=function(year){return MathUtils.mod(682*(this.equivalentCycleYear(year)+38),2816)<682},PersianAlgoCal.prototype.getType=function(){return this.type},Calendar._constructors["persian-algo"]=PersianAlgoCal,module.exports=PersianAlgoCal;

/***/ }),

/***/ "./node_modules/ilib/lib/PersianAlgoDate.js":
/*!**************************************************!*\
  !*** ./node_modules/ilib/lib/PersianAlgoDate.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),SearchUtils=__webpack_require__(/*! ./SearchUtils.js */ "./node_modules/ilib/lib/SearchUtils.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),TimeZone=__webpack_require__(/*! ./TimeZone.js */ "./node_modules/ilib/lib/TimeZone.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),PersianAlgoCal=__webpack_require__(/*! ./PersianAlgoCal.js */ "./node_modules/ilib/lib/PersianAlgoCal.js"),PersAlgoRataDie=__webpack_require__(/*! ./PersAlgoRataDie.js */ "./node_modules/ilib/lib/PersAlgoRataDie.js"),PersianAlgoDate=function(params){this.cal=new PersianAlgoCal(),(params=params||{}).timezone&&(this.timezone=params.timezone),params.locale&&(this.locale="string"==typeof params.locale?new Locale(params.locale):params.locale),this.timezone?this._init(params):this.locale?new LocaleInfo(this.locale,{sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(li){this.li=li,this.timezone=li.getTimeZone(),this._init(params)})}):(this.timezone="local",this._init(params)),this.rd||(this.rd=this.newRd(params),this._calcDateComponents())};PersianAlgoDate.prototype=new IDate({noinstance:!0}),PersianAlgoDate.prototype.parent=IDate,(PersianAlgoDate.prototype.constructor=PersianAlgoDate).prototype._init=function(params){params.year||params.month||params.day||params.hour||params.minute||params.second||params.millisecond?(this.year=parseInt(params.year,10)||0,this.month=parseInt(params.month,10)||1,this.day=parseInt(params.day,10)||1,this.hour=parseInt(params.hour,10)||0,this.minute=parseInt(params.minute,10)||0,this.second=parseInt(params.second,10)||0,this.millisecond=parseInt(params.millisecond,10)||0,this.dayOfYear=parseInt(params.dayOfYear,10),"boolean"==typeof params.dst&&(this.dst=params.dst),this.rd=this.newRd(this),new TimeZone({id:this.timezone,sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(tz){this.tz=tz,this.offset=this.tz._getOffsetMillisWallTime(this)/864e5,0!==this.offset&&(this.rd=this.newRd({rd:this.rd.getRataDie()-this.offset})),this._init2(params)})})):this._init2(params)},PersianAlgoDate.prototype._init2=function(params){this.rd||(this.rd=this.newRd(params),this._calcDateComponents()),"function"==typeof params.onLoad&&params.onLoad(this)},PersianAlgoDate.prototype.newRd=function(params){return new PersAlgoRataDie(params)},PersianAlgoDate.prototype._calcYear=function(rd){var shiftedRd=rd-173126,numberOfCycles=Math.floor(shiftedRd/1029983),shiftedDayInCycle=MathUtils.mod(shiftedRd,1029983),year=474+2820*numberOfCycles+(1029982===shiftedDayInCycle?2820:Math.floor((2816*shiftedDayInCycle+1031337)/1028522));return 0<year?year:year-1},PersianAlgoDate.prototype._calcDateComponents=function(){var remainder,rd=this.rd.getRataDie();this.year=this._calcYear(rd),void 0===this.offset&&(this.tz||(this.tz=new TimeZone({id:this.timezone})),this.offset=this.tz.getOffsetMillis(this)/864e5),0!==this.offset&&(rd+=this.offset,this.year=this._calcYear(rd)),remainder=rd-this.newRd({year:this.year,month:1,day:1,hour:0,minute:0,second:0,millisecond:0}).getRataDie()+1,this.dayOfYear=remainder,this.month=SearchUtils.bsearch(remainder,PersAlgoRataDie.cumMonthLengths),remainder-=PersAlgoRataDie.cumMonthLengths[this.month-1],this.day=Math.floor(remainder),remainder-=this.day,remainder=Math.round(864e5*remainder),this.hour=Math.floor(remainder/36e5),remainder-=36e5*this.hour,this.minute=Math.floor(remainder/6e4),remainder-=6e4*this.minute,this.second=Math.floor(remainder/1e3),remainder-=1e3*this.second,this.millisecond=remainder},PersianAlgoDate.prototype.getDayOfWeek=function(){var rd=Math.floor(this.getRataDie());return MathUtils.mod(rd-3,7)},PersianAlgoDate.prototype.getDayOfYear=function(){return PersAlgoRataDie.cumMonthLengths[this.month-1]+this.day},PersianAlgoDate.prototype.getEra=function(){return this.year<1?-1:1},PersianAlgoDate.prototype.getCalendar=function(){return"persian-algo"},IDate._constructors["persian-algo"]=PersianAlgoDate,module.exports=PersianAlgoDate;

/***/ }),

/***/ "./node_modules/ilib/lib/PersianCal.js":
/*!*********************************************!*\
  !*** ./node_modules/ilib/lib/PersianCal.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Calendar=__webpack_require__(/*! ./Calendar.js */ "./node_modules/ilib/lib/Calendar.js"),PersRataDie=__webpack_require__(/*! ./PersRataDie.js */ "./node_modules/ilib/lib/PersRataDie.js"),PersianCal=function(options){this.type="persian",options&&"function"==typeof options.onLoad&&options.onLoad(this)};PersianCal.monthLengths=[31,31,31,31,31,31,30,30,30,30,30,29],PersianCal.prototype.getNumMonths=function(year){return 12},PersianCal.prototype.getMonLength=function(month,year){return 12===month&&this.isLeapYear(year)?30:PersianCal.monthLengths[month-1]},PersianCal.prototype.isLeapYear=function(year){var rdNextYear=new PersRataDie({cal:this,year:year+1,month:1,day:1,hour:0,minute:0,second:0,millisecond:0}),rdThisYear=new PersRataDie({cal:this,year:year,month:1,day:1,hour:0,minute:0,second:0,millisecond:0});return 365<rdNextYear.getRataDie()-rdThisYear.getRataDie()},PersianCal.prototype.getType=function(){return this.type},Calendar._constructors.persian=PersianCal,module.exports=PersianCal;

/***/ }),

/***/ "./node_modules/ilib/lib/PersianDate.js":
/*!**********************************************!*\
  !*** ./node_modules/ilib/lib/PersianDate.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),SearchUtils=__webpack_require__(/*! ./SearchUtils.js */ "./node_modules/ilib/lib/SearchUtils.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),TimeZone=__webpack_require__(/*! ./TimeZone.js */ "./node_modules/ilib/lib/TimeZone.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),Astro=__webpack_require__(/*! ./Astro.js */ "./node_modules/ilib/lib/Astro.js"),PersianCal=__webpack_require__(/*! ./PersianCal.js */ "./node_modules/ilib/lib/PersianCal.js"),PersRataDie=__webpack_require__(/*! ./PersRataDie.js */ "./node_modules/ilib/lib/PersRataDie.js"),PersianDate=function(params){this.cal=new PersianCal(),(params=params||{}).timezone&&(this.timezone=params.timezone),params.locale&&(this.locale="string"==typeof params.locale?new Locale(params.locale):params.locale),this.timezone?this._init(params):this.locale?new LocaleInfo(this.locale,{sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(li){this.li=li,this.timezone=li.getTimeZone(),this._init(params)})}):(this.timezone="local",this._init(params))};PersianDate.prototype=new IDate({noinstance:!0}),PersianDate.prototype.parent=IDate,(PersianDate.prototype.constructor=PersianDate).prototype._init=function(params){Astro.initAstro("boolean"!=typeof params.sync||params.sync,params.loadParams,ilib.bind(this,function(x){params.year||params.month||params.day||params.hour||params.minute||params.second||params.millisecond?(this.year=parseInt(params.year,10)||0,this.month=parseInt(params.month,10)||1,this.day=parseInt(params.day,10)||1,this.hour=parseInt(params.hour,10)||0,this.minute=parseInt(params.minute,10)||0,this.second=parseInt(params.second,10)||0,this.millisecond=parseInt(params.millisecond,10)||0,this.dayOfYear=parseInt(params.dayOfYear,10),"boolean"==typeof params.dst&&(this.dst=params.dst),this.newRd(JSUtils.merge(params,{callback:ilib.bind(this,function(rd){this.rd=rd,new TimeZone({id:this.timezone,sync:params.sync,loadParams:params.loadParams,onLoad:ilib.bind(this,function(tz){this.tz=tz,this.offset=this.tz._getOffsetMillisWallTime(this)/864e5,0!==this.offset&&(this.rd=this.newRd({rd:this.rd.getRataDie()-this.offset})),this._init2(params)})})})}))):this._init2(params)}))},PersianDate.prototype._init2=function(params){this.rd?"function"==typeof params.onLoad&&params.onLoad(this):this.newRd(JSUtils.merge(params,{callback:ilib.bind(this,function(rd){this.rd=rd,this._calcDateComponents(),"function"==typeof params.onLoad&&params.onLoad(this)})}))},PersianDate.cumMonthLengths=[0,31,62,93,124,155,186,216,246,276,306,336,366],PersianDate.prototype.newRd=function(params){return new PersRataDie(params)},PersianDate.prototype._calcYear=function(rd){var julianday=rd+this.rd.epoch;return this.rd._getYear(julianday).year},PersianDate.prototype._calcDateComponents=function(){var remainder,rd=this.rd.getRataDie();this.year=this._calcYear(rd),void 0===this.offset&&(this.tz||(this.tz=new TimeZone({id:this.timezone})),this.offset=this.tz.getOffsetMillis(this)/864e5),0!==this.offset&&(rd+=this.offset,this.year=this._calcYear(rd)),remainder=rd-this.newRd({year:this.year,month:1,day:1,hour:0,minute:0,second:0,millisecond:0}).getRataDie()+1,this.dayOfYear=remainder,this.month=SearchUtils.bsearch(Math.floor(remainder),PersianDate.cumMonthLengths),remainder-=PersianDate.cumMonthLengths[this.month-1],this.day=Math.floor(remainder),remainder-=this.day,remainder=Math.round(864e5*remainder),this.hour=Math.floor(remainder/36e5),remainder-=36e5*this.hour,this.minute=Math.floor(remainder/6e4),remainder-=6e4*this.minute,this.second=Math.floor(remainder/1e3),remainder-=1e3*this.second,this.millisecond=remainder},PersianDate.prototype.getDayOfWeek=function(){var rd=Math.floor(this.getRataDie());return MathUtils.mod(rd-3,7)},PersianDate.prototype.getDayOfYear=function(){return PersianDate.cumMonthLengths[this.month-1]+this.day},PersianDate.prototype.getEra=function(){return this.year<1?-1:1},PersianDate.prototype.getCalendar=function(){return"persian"},IDate._constructors.persian=PersianDate,module.exports=PersianDate;

/***/ }),

/***/ "./node_modules/ilib/lib/RataDie.js":
/*!******************************************!*\
  !*** ./node_modules/ilib/lib/RataDie.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),JulianDay=__webpack_require__(/*! ./JulianDay.js */ "./node_modules/ilib/lib/JulianDay.js"),RataDie=function(params){if(params)if(void 0!==params.date){var date=params.date;JSUtils.isDate(date)||(date=new Date(date)),this._setTime(date.getTime())}else void 0!==params.unixtime?this._setTime(parseInt(params.unixtime,10)):void 0!==params.julianday?this._setJulianDay(parseFloat(params.julianday)):params.year||params.month||params.day||params.hour||params.minute||params.second||params.millisecond||params.parts||params.cycle?this._setDateComponents(params):void 0!==params.rd&&(this.rd="object"==typeof params.rd&&params.rd instanceof RataDie?params.rd.rd:params.rd);if(void 0===this.rd||isNaN(this.rd)){var now=new Date();this._setTime(now.getTime())}};RataDie.gregorianEpoch=1721424.5,RataDie.prototype={epoch:RataDie.gregorianEpoch,_setTime:function(millis){this._setJulianDay(2440587.5+millis/864e5)},_setJulianDay:function(date){var jd="number"==typeof date?new JulianDay(date):date;this.rd=MathUtils.halfup(864e5*(jd.getDate()-this.epoch))/864e5},_onOrBefore:function(rd,dayOfWeek){return rd-MathUtils.mod(Math.floor(rd)-dayOfWeek-2,7)},onOrBefore:function(dayOfWeek,offset){return offset=offset||0,this._onOrBefore(this.rd+offset,dayOfWeek)-offset},onOrAfter:function(dayOfWeek,offset){return offset=offset||0,this._onOrBefore(this.rd+6+offset,dayOfWeek)-offset},before:function(dayOfWeek,offset){return offset=offset||0,this._onOrBefore(this.rd-1+offset,dayOfWeek)-offset},after:function(dayOfWeek,offset){return offset=offset||0,this._onOrBefore(this.rd+7+offset,dayOfWeek)-offset},getTime:function(){var jd=this.getJulianDay();return jd<2440587.5||2465442.634803241<jd?-1:Math.round(864e5*(jd-2440587.5))},getTimeExtended:function(){var jd=this.getJulianDay();return jd<-97559412.5||102440587.5<jd?NaN:Math.round(864e5*(jd-2440587.5))},getJulianDay:function(){return this.rd+this.epoch},getRataDie:function(){return this.rd}},module.exports=RataDie;

/***/ }),

/***/ "./node_modules/ilib/lib/ResBundle.js":
/*!********************************************!*\
  !*** ./node_modules/ilib/lib/ResBundle.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// !data pseudomap
var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),Utils=__webpack_require__(/*! ./Utils.js */ "./node_modules/ilib/lib/Utils.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),IString=__webpack_require__(/*! ./IString.js */ "./node_modules/ilib/lib/IString.js"),ResBundle=function(options){var lookupLocale;this.locale=new Locale(),this.baseName="strings",this.type="text",this.loadParams={},this.missing="source",this.sync=!0,options?(options.locale&&(this.locale="string"==typeof options.locale?new Locale(options.locale):options.locale),options.name&&(this.baseName=options.name),options.type&&(this.type=options.type),this.lengthen=options.lengthen||!1,this.path=options.basePath,void 0!==options.sync&&(this.sync=!!options.sync),void 0!==options.loadParams&&(this.loadParams=options.loadParams,this.path||(void 0!==options.loadParams.root?this.path=options.loadParams.root:void 0!==options.loadParams.base&&(this.path=options.loadParams.base))),void 0!==options.missing&&("pseudo"!==options.missing&&"empty"!==options.missing||(this.missing=options.missing))):options={sync:!0},this.map={},lookupLocale=this.locale.isPseudo()?new Locale("en-US"):this.locale,Utils.loadData({locale:lookupLocale,name:this.baseName+".json",sync:this.sync,loadParams:this.loadParams,root:this.path,callback:ilib.bind(this,function(map){map||(map=ilib.data[this.baseName]||{}),this.map=map,this.locale.isPseudo()?this._loadPseudo(this.locale,options.onLoad):"pseudo"===this.missing?new LocaleInfo(this.locale,{sync:this.sync,loadParams:this.loadParams,onLoad:ilib.bind(this,function(li){var pseudoLocale=new Locale("zxx","XX",void 0,li.getDefaultScript());this._loadPseudo(pseudoLocale,options.onLoad)})}):"function"==typeof options.onLoad&&options.onLoad(this)})})};ResBundle.defaultPseudo=ilib.data.pseudomap||{a:"à",e:"ë",i:"í",o:"õ",u:"ü",y:"ÿ",A:"Ã",E:"Ë",I:"Ï",O:"Ø",U:"Ú",Y:"Ŷ"},ResBundle.prototype={_loadPseudo:function(pseudoLocale,onLoad){Utils.loadData({object:"ResBundle",locale:pseudoLocale,name:"pseudomap.json",sync:this.sync,loadParams:this.loadParams,callback:ilib.bind(this,function(map){this.pseudomap=!map||JSUtils.isEmpty(map)?ResBundle.defaultPseudo:map,"function"==typeof onLoad&&onLoad(this)})})},getLocale:function(){return this.locale},getName:function(){return this.baseName},getType:function(){return this.type},percentRE:new RegExp("%(\\d+\\$)?([\\-#\\+ 0,\\(])*(\\d+)?(\\.\\d+)?(h|hh|l|ll|j|z|t|L|q)?[diouxXfFeEgGaAcspnCS%@]"),_pseudo:function(str){if(str){var i,ret="";for(i=0;i<str.length;i++)if("raw"!==this.type){if("html"===this.type||"xml"===this.type)if("<"===str.charAt(i))for(ret+=str.charAt(i++);i<str.length&&">"!==str.charAt(i);)ret+=str.charAt(i++);else if("&"===str.charAt(i))for(ret+=str.charAt(i++);i<str.length&&";"!==str.charAt(i)&&" "!==str.charAt(i);)ret+=str.charAt(i++);else"\\"===str.charAt(i)&&"u"===str.charAt(i+1)&&(ret+=str.substring(i,i+6),i+=6);else if("c"===this.type){if("%"===str.charAt(i)){var m=this.percentRE.exec(str.substring(i));m&&m.length&&(ret+=m[0],i+=m[0].length)}}else if("ruby"===this.type){if("%"===str.charAt(i)&&i<str.length&&"{"!==str.charAt(i+1))for(ret+=str.charAt(i++);i<str.length&&"%"!==str.charAt(i);)ret+=str.charAt(i++)}else if("template"===this.type)if("<"===str.charAt(i)&&"%"===str.charAt(i+1))for(ret+=str.charAt(i++),ret+=str.charAt(i++);i<str.length&&(">"!==str.charAt(i)||"%"!==str.charAt(i-1));)ret+=str.charAt(i++);else if("&"===str.charAt(i))for(ret+=str.charAt(i++);i<str.length&&";"!==str.charAt(i)&&" "!==str.charAt(i);)ret+=str.charAt(i++);else"\\"===str.charAt(i)&&"u"===str.charAt(i+1)&&(ret+=str.substring(i,i+6),i+=6);if(i<str.length)if("{"===str.charAt(i)){for(ret+=str.charAt(i++);i<str.length&&"}"!==str.charAt(i);)ret+=str.charAt(i++);i<str.length&&(ret+=str.charAt(i))}else ret+=this.pseudomap[str.charAt(i)]||str.charAt(i)}else ret+=this.pseudomap[str.charAt(i)]||str.charAt(i);if(this.lengthen)for(i=(ret.length<=20?Math.round(ret.length/2):20<ret.length&&ret.length<=40?Math.round(ret.length/3):Math.round(ret.length/5))-1;0<=i;i--)ret+=i%10;return"Hans"!==this.locale.getScript()&&"Hant"!==this.locale.getScript()&&"Hani"!==this.locale.getScript()&&"Hrkt"!==this.locale.getScript()&&"Jpan"!==this.locale.getScript()&&"Hira"!==this.locale.getScript()&&"Kana"!==this.locale.getScript()||(ret=ret.replace(/ /g,"")),ret}},_escapeXml:function(str){return str=(str=(str=str.replace(/&/g,"&amp;")).replace(/</g,"&lt;")).replace(/>/g,"&gt;")},_unescapeXml:function(str){return str=(str=(str=str.replace(/&amp;/g,"&")).replace(/&lt;/g,"<")).replace(/&gt;/g,">")},_makeKey:function(source){if(source){var key=source.replace(/\s+/gm," ");return"xml"===this.type||"html"===this.type?this._unescapeXml(key):key}},_getStringSingle:function(source,key,escapeMode){if(!source&&!key)return new IString("");var trans;if(this.locale.isPseudo()){var str=source||this.map[key];trans=this._pseudo(str||key)}else{var keyName=key||this._makeKey(source);trans=void 0!==this.map[keyName]?this.map[keyName]:"pseudo"===this.missing?this._pseudo(source||key):"empty"===this.missing?"":source}if(escapeMode&&"none"!==escapeMode&&("default"==escapeMode&&(escapeMode=this.type),"xml"===escapeMode||"html"===escapeMode?trans=this._escapeXml(trans):"js"!=escapeMode&&"attribute"!==escapeMode||(trans=trans.replace(/'/g,"\\'").replace(/"/g,'\\"'))),void 0!==trans){var ret=new IString(trans);return ret.setLocale(this.locale.getSpec(),!0,this.loadParams),ret}},getString:function(source,key,escapeMode){return source||key?ilib.isArray(source)?source.map(ilib.bind(this,function(str){return"string"==typeof str?this._getStringSingle(str,key,escapeMode):str})):this._getStringSingle(source,key,escapeMode):new IString("")},getStringJS:function(source,key,escapeMode){if(void 0!==source||void 0!==key){if(ilib.isArray(source))return this.getString(source,key,escapeMode).map(function(str){return str&&str instanceof IString?str.toString():str});var s=this.getString(source,key,escapeMode);return s?s.toString():void 0}},containsKey:function(source,key){if(void 0===source&&void 0===key)return!1;var keyName=key||this._makeKey(source);return void 0!==this.map[keyName]},getResObj:function(){return this.map}},module.exports=ResBundle;

/***/ }),

/***/ "./node_modules/ilib/lib/ScriptInfo.js":
/*!*********************************************!*\
  !*** ./node_modules/ilib/lib/ScriptInfo.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// !data scripts
var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),Utils=__webpack_require__(/*! ./Utils.js */ "./node_modules/ilib/lib/Utils.js"),ScriptInfo=function(script,options){var sync=!0,loadParams=void 0;this.script=script,options&&(void 0!==options.sync&&(sync=!!options.sync),void 0!==options.loadParams&&(loadParams=options.loadParams)),ilib.data.scripts?(this.info=ilib.data.scripts[script],options&&"function"==typeof options.onLoad&&options.onLoad(this)):Utils.loadData({object:"ScriptInfo",nonlocale:!0,name:"scripts.json",sync:sync,loadParams:loadParams,callback:ilib.bind(this,function(info){info||(info={Latn:{nb:215,nm:"Latin",lid:"Latin",rtl:!1,ime:!1,casing:!0}}),ilib.data.scripts=info,this.info=script&&ilib.data.scripts[script],options&&"function"==typeof options.onLoad&&options.onLoad(this)})})};ScriptInfo._getScriptsArray=function(){var ret=[],script=void 0,scripts=ilib.data.scripts;for(script in scripts)script&&scripts[script]&&ret.push(script);return ret},ScriptInfo.getAllScripts=function(sync,loadParams,onLoad){return ilib.data.scripts?"function"==typeof onLoad&&onLoad(ScriptInfo._getScriptsArray()):Utils.loadData({object:"ScriptInfo",locale:"-",name:"scripts.json",sync:sync,loadParams:loadParams,callback:ilib.bind(this,function(info){ilib.data.scripts=info,"function"==typeof onLoad&&onLoad(ScriptInfo._getScriptsArray())})}),ScriptInfo._getScriptsArray()},ScriptInfo.prototype={getCode:function(){return this.info&&this.script},getCodeNumber:function(){return this.info&&this.info.nb||0},getName:function(){return this.info&&this.info.nm},getLongCode:function(){return this.info&&this.info.lid},getScriptDirection:function(){return this.info&&void 0!==this.info.rtl&&this.info.rtl?"rtl":"ltr"},getNeedsIME:function(){return!(!this.info||!this.info.ime)},getCasing:function(){return!(!this.info||!this.info.casing)}},module.exports=ScriptInfo;

/***/ }),

/***/ "./node_modules/ilib/lib/SearchUtils.js":
/*!**********************************************!*\
  !*** ./node_modules/ilib/lib/SearchUtils.js ***!
  \**********************************************/
/***/ (function(module) {

var SearchUtils={bsearch:function(target,arr,comparator){if(void 0===arr||!arr||void 0===target)return-1;for(var value,high=arr.length-1,low=0,mid=0,cmp=comparator||SearchUtils.bsearch.numbers;low<=high;)if(0<(value=cmp(arr[mid=Math.floor((high+low)/2)],target)))high=mid-1;else{if(!(value<0))return mid;low=mid+1}return low}};SearchUtils.bsearch.numbers=function(element,target){return element-target},SearchUtils.bisectionSearch=function(target,low,high,precision,func){if("number"!=typeof target||"number"!=typeof low||"number"!=typeof high||"function"!=typeof func)return NaN;for(var value,mid=0,pre=0<precision?precision:1e-13;target<(value=func(mid=(high+low)/2))?high=mid:value<target&&(low=mid),pre<high-low;);return mid},module.exports=SearchUtils;

/***/ }),

/***/ "./node_modules/ilib/lib/ThaiSolarCal.js":
/*!***********************************************!*\
  !*** ./node_modules/ilib/lib/ThaiSolarCal.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),Calendar=__webpack_require__(/*! ./Calendar.js */ "./node_modules/ilib/lib/Calendar.js"),GregorianCal=__webpack_require__(/*! ./GregorianCal.js */ "./node_modules/ilib/lib/GregorianCal.js"),ThaiSolarCal=function(options){this.type="thaisolar",options&&"function"==typeof options.onLoad&&options.onLoad(this)};ThaiSolarCal.prototype=new GregorianCal({noinstance:!0}),ThaiSolarCal.prototype.parent=GregorianCal,(ThaiSolarCal.prototype.constructor=ThaiSolarCal).prototype.isLeapYear=function(year){var y="number"==typeof year?year:year.getYears();y-=543;var centuries=MathUtils.mod(y,400);return 0===MathUtils.mod(y,4)&&100!==centuries&&200!==centuries&&300!==centuries},Calendar._constructors.thaisolar=ThaiSolarCal,module.exports=ThaiSolarCal;

/***/ }),

/***/ "./node_modules/ilib/lib/ThaiSolarDate.js":
/*!************************************************!*\
  !*** ./node_modules/ilib/lib/ThaiSolarDate.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),IDate=__webpack_require__(/*! ./IDate.js */ "./node_modules/ilib/lib/IDate.js"),ThaiSolarCal=__webpack_require__(/*! ./ThaiSolarCal.js */ "./node_modules/ilib/lib/ThaiSolarCal.js"),GregorianDate=__webpack_require__(/*! ./GregorianDate.js */ "./node_modules/ilib/lib/GregorianDate.js"),ThaiSolarDate=function(params){var p={};params&&(JSUtils.shallowCopy(params,p),void 0!==p.year&&(p.year-=543),void 0!==p.rd&&(p.rd-=198327)),this.rd=null,this.offset=void 0,p.onLoad=ilib.bind(this,function(gd){this.cal=new ThaiSolarCal(),params&&void 0!==params.year&&(this.year=parseInt(params.year,10)),params&&"function"==typeof params.onLoad&&params.onLoad(gd)}),GregorianDate.call(this,p)};ThaiSolarDate.prototype=new GregorianDate({noinstance:!0}),ThaiSolarDate.prototype.parent=GregorianDate.prototype,(ThaiSolarDate.prototype.constructor=ThaiSolarDate).epoch=1523097.5,ThaiSolarDate.prototype._calcDateComponents=function(){this.parent._calcDateComponents.call(this),this.year+=543},ThaiSolarDate.prototype.getRataDie=function(){return this.rd.getRataDie()+198327},ThaiSolarDate.prototype.before=function(dow){return new ThaiSolarDate({rd:this.rd.before(dow,this.offset)+198327,timezone:this.timezone})},ThaiSolarDate.prototype.after=function(dow){return new ThaiSolarDate({rd:this.rd.after(dow,this.offset)+198327,timezone:this.timezone})},ThaiSolarDate.prototype.onOrBefore=function(dow){return new ThaiSolarDate({rd:this.rd.onOrBefore(dow,this.offset)+198327,timezone:this.timezone})},ThaiSolarDate.prototype.onOrAfter=function(dow){return new ThaiSolarDate({rd:this.rd.onOrAfter(dow,this.offset)+198327,timezone:this.timezone})},ThaiSolarDate.prototype.getCalendar=function(){return"thaisolar"},IDate._constructors.thaisolar=ThaiSolarDate,module.exports=ThaiSolarDate;

/***/ }),

/***/ "./node_modules/ilib/lib/TimeZone.js":
/*!*******************************************!*\
  !*** ./node_modules/ilib/lib/TimeZone.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// !data localeinfo zoneinfo
var ilib=__webpack_require__(/*! ../index.js */ "./node_modules/ilib/index.js"),Utils=__webpack_require__(/*! ./Utils.js */ "./node_modules/ilib/lib/Utils.js"),MathUtils=__webpack_require__(/*! ./MathUtils.js */ "./node_modules/ilib/lib/MathUtils.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),LocaleInfo=__webpack_require__(/*! ./LocaleInfo.js */ "./node_modules/ilib/lib/LocaleInfo.js"),GregRataDie=__webpack_require__(/*! ./GregRataDie.js */ "./node_modules/ilib/lib/GregRataDie.js"),CalendarFactory=__webpack_require__(/*! ./CalendarFactory.js */ "./node_modules/ilib/lib/CalendarFactory.js"),IString=__webpack_require__(/*! ./IString.js */ "./node_modules/ilib/lib/IString.js"),DateFactory=__webpack_require__(/*! ./DateFactory.js */ "./node_modules/ilib/lib/DateFactory.js"),TimeZone=function(options){if(this.sync=!0,this.locale=new Locale(),this.isLocal=!1,options){if(options.locale&&(this.locale="string"==typeof options.locale?new Locale(options.locale):options.locale),options.id){var id=options.id.toString();if("local"===id){this.isLocal=!0;var now=new Date(),jan1=new Date(now.getFullYear(),0,1),jun1=new Date(now.getFullYear(),5,1);this.offsetJan1=-jan1.getTimezoneOffset(),this.offsetJun1=-jun1.getTimezoneOffset(),this.offset=Math.min(this.offsetJan1,this.offsetJun1)}this.id=id}else options.offset&&(this.offset="string"==typeof options.offset?parseInt(options.offset,10):options.offset,this.id=this.getDisplayName(void 0,void 0));void 0!==options.sync&&(this.sync=!!options.sync),this.loadParams=options.loadParams,this.onLoad=options.onLoad}this.id?this._loadtzdata():new LocaleInfo(this.locale,{sync:this.sync,loadParams:this.loadParams,onLoad:ilib.bind(this,function(li){this.id=li.getTimeZone()||"Etc/UTC",this._loadtzdata()})})};TimeZone.prototype._loadtzdata=function(){var zoneName=this.id.replace(/-/g,"m").replace(/\+/g,"p");ilib.data.zoneinfo[zoneName]||void 0!==this.offset?this._initZone(zoneName):Utils.loadData({object:"TimeZone",nonlocale:!0,name:"zoneinfo/"+this.id+".json",sync:this.sync,loadParams:this.loadParams,callback:ilib.bind(this,function(tzdata){tzdata&&!JSUtils.isEmpty(tzdata)&&(ilib.data.zoneinfo[zoneName]=tzdata),this._initZone(zoneName)})})},TimeZone.prototype._initZone=function(zoneName){if(this.zone=ilib.data.zoneinfo[zoneName],this.zone||void 0!==this.offset||(this.id="Etc/UTC",this.zone=ilib.data.zoneinfo[this.id]),this._calcDSTSavings(),void 0===this.offset&&this.zone.o){var offsetParts=this._offsetStringToObj(this.zone.o);this.offset=(60*Math.abs(offsetParts.h||0)+(offsetParts.m||0))*MathUtils.signum(offsetParts.h||0)}this.onLoad&&"function"==typeof this.onLoad&&this.onLoad(this)},TimeZone._marshallIds=function(country,sync,callback){var tz,ids=[];if(country)ilib.data.zoneinfo.zonetab?(ids=ilib.data.zoneinfo.zonetab[country],"function"==typeof callback&&callback(ids)):Utils.loadData({object:"TimeZone",nonlocale:!0,name:"zoneinfo/zonetab.json",sync:sync,callback:ilib.bind(this,function(tzdata){tzdata&&(ilib.data.zoneinfo.zonetab=tzdata),ids=ilib.data.zoneinfo.zonetab[country],"function"==typeof callback&&callback(ids)})});else{for(tz in ids.push("local"),ilib.data.timezones)ilib.data.timezones[tz]&&ids.push(ilib.data.timezones[tz]);"function"==typeof callback&&callback(ids)}return ids},TimeZone.getAvailableIds=function(country,sync,onLoad){var tz,ids=[];if("boolean"!=typeof sync&&(sync=!0),0===ilib.data.timezones.length)if(void 0!==ilib._load&&"function"==typeof ilib._load.listAvailableFiles)ilib._load.listAvailableFiles(sync,function(hash){for(var dir in hash){var files=hash[dir];ilib.isArray(files)&&files.forEach(function(filename){filename&&filename.match(/^zoneinfo/)&&ilib.data.timezones.push(filename.replace(/^zoneinfo\//,"").replace(/\.json$/,""))})}ids=TimeZone._marshallIds(country,sync,onLoad)});else{for(tz in ilib.data.zoneinfo)ilib.data.zoneinfo[tz]&&ilib.data.timezones.push(tz);ids=TimeZone._marshallIds(country,sync,onLoad)}else ids=TimeZone._marshallIds(country,sync,onLoad);return ids},TimeZone.prototype.getId=function(){return this.id.toString()},TimeZone.prototype.getDisplayName=function(date,style){var temp;switch(style=this.isLocal||void 0===this.zone?"rfc822":style||"standard"){default:case"standard":if(this.zone.f&&"zzz"!==this.zone.f){if(-1===this.zone.f.indexOf("{c}"))return this.zone.f;var letter;return letter=this.inDaylightTime(date)?this.zone.s&&this.zone.s.c:this.zone.e&&this.zone.e.c,(temp=new IString(this.zone.f)).format({c:letter||""})}return temp="GMT"+this.zone.o,this.inDaylightTime(date)&&(temp+="+"+this.zone.s.v),temp;case"rfc822":var offset=this.getOffset(date),ret="UTC",hour=offset.h||0,minute=offset.m||0;return 0!==hour&&(ret+=0<hour?"+":"-",Math.abs(hour)<10&&(ret+="0"),ret+=hour<0?-hour:hour,minute<10&&(ret+="0"),ret+=minute),ret;case"long":if(this.zone.n){if(-1===this.zone.n.indexOf("{c}"))return this.zone.n;var str=this.inDaylightTime(date)?"Daylight":"Standard";return(temp=new IString(this.zone.n)).format({c:str||""})}return temp="GMT"+this.zone.o,this.inDaylightTime(date)&&(temp+="+"+this.zone.s.v),temp}},TimeZone.prototype._offsetStringToObj=function(str){var temp,offsetParts="string"==typeof str?str.split(":"):[],ret={h:0};return 0<offsetParts.length&&(ret.h=parseInt(offsetParts[0],10),1<offsetParts.length&&((temp=parseInt(offsetParts[1],10))&&(ret.m=temp),2<offsetParts.length&&(temp=parseInt(offsetParts[2],10))&&(ret.s=temp))),ret},TimeZone.prototype.getOffset=function(date){if(!date)return this.getRawOffset();var offset=this.getOffsetMillis(date)/6e4,hours=MathUtils.down(offset/60),minutes=Math.abs(offset)-60*Math.abs(hours),ret={h:hours};return 0!=minutes&&(ret.m=minutes),ret},TimeZone.prototype.getOffsetMillis=function(date){var ret;return this.isLocal&&void 0===date.dst?6e4*-(date?new Date(date.getTimeExtended()):new Date).getTimezoneOffset():(ret=this.offset,date&&this.inDaylightTime(date)&&(ret+=this.dstSavings),6e4*ret)},TimeZone.prototype._getOffsetMillisWallTime=function(date){var ret;return ret=this.offset,date&&this.inDaylightTime(date,!0)&&(ret+=this.dstSavings),6e4*ret},TimeZone.prototype.getOffsetStr=function(date){var ret,offset=this.getOffset(date);return ret=offset.h,void 0!==offset.m?(ret+=":"+offset.m,void 0!==offset.s&&(ret+=":"+offset.s)):ret+=":0",ret},TimeZone.prototype.getRawOffset=function(){var hours=MathUtils.down(this.offset/60),minutes=Math.abs(this.offset)-60*Math.abs(hours),ret={h:hours};return 0!=minutes&&(ret.m=minutes),ret},TimeZone.prototype.getRawOffsetMillis=function(){return 6e4*this.offset},TimeZone.prototype.getRawOffsetStr=function(){var off=this.getRawOffset();return off.h+":"+(off.m||"0")},TimeZone.prototype.getDSTSavings=function(){if(this.isLocal){var savings=Math.abs(this.offsetJan1-this.offsetJun1),hours=MathUtils.down(savings/60);return{h:hours,m:savings-60*hours}}return this.zone&&this.zone.s?this._offsetStringToObj(this.zone.s.v):{h:0}},TimeZone.prototype.getDSTSavingsStr=function(){if(this.isLocal){var savings=this.getDSTSavings();return savings.h+":"+savings.m}return void 0!==this.offset&&this.zone&&this.zone.s?this.zone.s.v:"0:0"},TimeZone.prototype._calcRuleStart=function(rule,year){var day,refDay,cal,time,i,type="=",weekday=0,hour=0,minute=0,second=0;void 0!==rule.j?refDay=new GregRataDie({julianday:rule.j}):("l"==rule.r.charAt(0)||"f"==rule.r.charAt(0)?(cal=CalendarFactory({type:"gregorian"}),type=rule.r.charAt(0),weekday=parseInt(rule.r.substring(1),10),day="l"===type?cal.getMonLength(rule.m,year):1):(-1==(i=rule.r.indexOf("<"))&&(i=rule.r.indexOf(">")),-1!=i?(type=rule.r.charAt(i),weekday=parseInt(rule.r.substring(0,i),10),day=parseInt(rule.r.substring(i+1),10)):day=parseInt(rule.r,10)),rule.t&&(time=rule.t.split(":"),hour=parseInt(time[0],10),1<time.length&&(minute=parseInt(time[1],10),2<time.length&&(second=parseInt(time[2],10)))),refDay=new GregRataDie({year:year,month:rule.m,day:day,hour:hour,minute:minute,second:second}));var d=refDay.getRataDie();switch(type){case"l":case"<":d=refDay.onOrBefore(weekday);break;case"f":case">":d=refDay.onOrAfter(weekday)}return d},TimeZone.prototype._calcDSTSavings=function(){var saveParts=this.getDSTSavings();this.dstSavings=(60*Math.abs(saveParts.h||0)+(saveParts.m||0))*MathUtils.signum(saveParts.h||0)},TimeZone.prototype._getDSTStartRule=function(year){return this.zone.s},TimeZone.prototype._getDSTEndRule=function(year){return this.zone.e},TimeZone.prototype.inDaylightTime=function(date,wallTime){var rd,startRd,endRd,year;if(date&&(date=DateFactory._dateToIlib(date,this.id,this.locale)),this.isLocal){var offset=6e4*this.offset;void 0===date.dst||date.dst||(offset+=6e4*this.dstSavings);var d=new Date(date?date.getTimeExtended()-offset:void 0),dst=Math.max(this.offsetJan1,this.offsetJun1);return-d.getTimezoneOffset()===dst}if(date&&date.cal&&"gregorian"===date.cal.type)rd=date.rd.getRataDie(),year=date.year;else{var time=date&&"function"==typeof date.getTimeExtended?date.getTimeExtended():void 0;rd=new GregRataDie({unixtime:time}).getRataDie(),year=new Date(time).getUTCFullYear()}if(!this.useDaylightTime(year))return!1;var startrule=this._getDSTStartRule(year),endrule=this._getDSTEndRule(year);return startRd=this._calcRuleStart(startrule,year),endRd=this._calcRuleStart(endrule,year),wallTime?startRd+=this.dstSavings/1440:(startRd-=this.offset/1440,endRd-=(this.offset+this.dstSavings)/1440),rd<endRd&&endRd-rd<=this.dstSavings/1440&&"boolean"==typeof date.dst?date.dst:startRd<endRd?startRd<=rd&&rd<endRd:startRd<=rd||rd<endRd},TimeZone.prototype.useDaylightTime=function(year){return this.isLocal&&this.offsetJan1!==this.offsetJun1||void 0!==this.zone&&void 0!==this.zone.s&&void 0!==this.zone.e},TimeZone.prototype.getCountry=function(){return this.zone.c},module.exports=TimeZone;

/***/ }),

/***/ "./node_modules/ilib/lib/Utils.js":
/*!****************************************!*\
  !*** ./node_modules/ilib/lib/Utils.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ./ilib.js */ "./node_modules/ilib/lib/ilib.js"),Locale=__webpack_require__(/*! ./Locale.js */ "./node_modules/ilib/lib/Locale.js"),JSUtils=__webpack_require__(/*! ./JSUtils.js */ "./node_modules/ilib/lib/JSUtils.js"),Path=__webpack_require__(/*! ./Path.js */ "./node_modules/ilib/lib/Path.js"),ISet=__webpack_require__(/*! ./ISet.js */ "./node_modules/ilib/lib/ISet.js"),Utils={};function getPropertyName(basename,pathname,root){var bits=[basename];return root&&(bits=bits.concat(root.split("/"))),pathname&&(bits=bits.concat(pathname.split("/"))),bits.join("_")}function getPropertyNameFromFile(basename,filepath,root){var dir=Path.dirname(filepath);return getPropertyName(basename,"."===dir||"/"===dir||".."===dir?void 0:dir,root)}function dataNotExists(basename,pathname,root){return!ilib.data[getPropertyNameFromFile(basename,pathname,root)]}Utils.getSublocales=function(locale){var ret=["root"],loc="string"==typeof locale?new Locale(locale):locale,lang=loc.getLanguage(),region=loc.getRegion(),script=loc.getScript(),variant=loc.getVariant();return lang&&ret.push(lang),region&&ret.push("und-"+region),lang&&(script&&ret.push(lang+"-"+script),region&&ret.push(lang+"-"+region),variant&&ret.push(lang+"-"+variant)),region&&variant&&ret.push("und-"+region+"-"+variant),lang&&(script&&region&&ret.push(lang+"-"+script+"-"+region),script&&variant&&ret.push(lang+"-"+script+"-"+variant),region&&variant&&ret.push(lang+"-"+region+"-"+variant),script&&region&&variant&&ret.push(lang+"-"+script+"-"+region+"-"+variant)),ret},Utils.mergeLocData=function(prefix,locale,replaceArrays,returnOne,root){var mostSpecific,data=void 0,loc=locale||new Locale();return mostSpecific=data={},Utils.getSublocales(loc).forEach(function(l){var property=getPropertyName(prefix,"root"===l?void 0:l.replace(/-/g,"/"),root);ilib.data[property]&&(returnOne?mostSpecific=ilib.data[property]:data=JSUtils.merge(data,ilib.data[property],replaceArrays))}),returnOne?mostSpecific:data},Utils.getLocFiles=function(locale,name){var filename=name||"resources.json",loc=locale||new Locale();return Utils.getSublocales(loc).map(function(l){return"root"===l?filename:Path.join(l.replace(/-/g,"/"),filename)})},Utils._callLoadData=function(files,sync,params,root,callback){return"function"==typeof ilib._load?ilib._load(files,sync,params,callback):"object"==typeof ilib._load&&"function"==typeof ilib._load.loadFiles?ilib._load.loadFiles(files,sync,params,callback,root):void 0},Utils.loadData=function(params){var root,basename,name="resources.json",locale=new Locale(ilib.getLocale()),sync=!1,type=void 0,loadParams={},callback=void 0,nonlocale=!1,replace=!1;if(!params||"function"!=typeof params.callback)throw"Utils.loadData called without a callback. It must have a callback to work.";if(params.name&&(name=params.name),params.locale&&(locale="string"==typeof params.locale?new Locale(params.locale):params.locale),params.type&&(type=params.type),params.loadParams&&(loadParams=params.loadParams),params.sync&&(sync=params.sync),params.nonlocale&&(nonlocale=!!params.nonlocale),"boolean"==typeof params.replace&&(replace=params.replace),root=params.root,callback=params.callback,!type){var dot=name.lastIndexOf(".");type=-1!==dot?name.substring(dot+1):"text"}void 0===ilib.data.cache&&(ilib.data.cache={}),void 0===ilib.data.cache.fileSet&&(ilib.data.cache.fileSet=new ISet);var data,returnOne=loadParams&&loadParams.returnOne||"json"!==type;if(basename=name.substring(0,name.lastIndexOf(".")).replace(/[\.:\(\)\/\\\+\-]/g,"_"),ilib._cacheMerged){void 0===ilib.data.cache.merged&&(ilib.data.cache.merged={});var spec=(!nonlocale&&locale.getSpec().replace(/-/g,"_")||"root")+","+basename+","+String(JSUtils.hashCode(loadParams));if(void 0!==ilib.data.cache.merged[spec])return void callback(ilib.data.cache.merged[spec])}if(void 0!==ilib._load){var files=nonlocale?[name||"resources.json"]:Utils.getLocFiles(locale,name),isPath=ilib._load.isMultiPaths;if(void 0!==isPath&&0!=isPath||(files=files.filter(ilib.bind(this,function(file){return!ilib.data.cache.fileSet.has(Path.join(root,file))&&dataNotExists(basename,file,root)}))),files.length)return void Utils._callLoadData(files,sync,loadParams,root,ilib.bind(this,function(arr){for(var i=0;i<files.length;i++){if(arr[i]){var property=nonlocale?basename:getPropertyNameFromFile(basename,files[i],root);!isPath&&ilib.data[property]||(ilib.data[property]=arr[i])}ilib.data.cache.fileSet.add(Path.join(root,files[i]))}nonlocale?data=ilib.data[basename]:(data=Utils.mergeLocData(basename,locale,replace,returnOne,root),ilib._cacheMerged&&(ilib.data.cache.merged[spec]=data)),callback(data)}))}nonlocale?data=ilib.data[basename]:(data=Utils.mergeLocData(basename,locale,replace,returnOne,root),ilib._cacheMerged&&(ilib.data.cache.merged[spec]=data)),callback(data)},module.exports=Utils;

/***/ }),

/***/ "./node_modules/ilib/lib/ilib-webpack.js":
/*!***********************************************!*\
  !*** ./node_modules/ilib/lib/ilib-webpack.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ilib=__webpack_require__(/*! ./ilib.js */ "./node_modules/ilib/lib/ilib.js");
// !defineLocaleData
module.exports=ilib;

/***/ }),

/***/ "./node_modules/ilib/lib/ilib.js":
/*!***************************************!*\
  !*** ./node_modules/ilib/lib/ilib.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* provided dependency */ var process = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js");
var ilib=ilib||{};function parseLocale(str){if(!str)return str;var dot=str.indexOf(".");if(-1<dot&&(str=str.substring(0,dot)),"C"===str)return"en-US";var parts=str.replace(/_/g,"-").split(/-/g),localeParts=[];return 0<parts.length&&(2!==parts[0].length&&3!==parts[0].length||(localeParts.push(parts[0].toLowerCase()),1<parts.length&&(4===parts[1].length?localeParts.push(parts[1][0].toUpperCase()+parts[1].substring(1).toLowerCase()):2!==parts[1].length&&3!=parts[1].length||localeParts.push(parts[1].toUpperCase()),2<parts.length&&(2!==parts[2].length&&3!=parts[2].length||localeParts.push(parts[2].toUpperCase()))))),localeParts.join("-")}ilib._ver=function(){return"14.14.0"},ilib.getVersion=function(){if(ilib._dyncode)try{return (__webpack_require__(/*! ../package.json */ "./node_modules/ilib/package.json").version)}catch(e){}return ilib._ver()||"14.0"},ilib.data={norm:{ccc:{},nfd:{},nfc:{},nfkd:{},nfkc:{}},zoneinfo:{"Etc/UTC":{o:"0:0",f:"UTC"},local:{f:"local"}},charmaps:{},ctype:null,ctype_c:null,ctype_l:null,ctype_m:null,ctype_p:null,ctype_z:null,scriptToRange:null,dateformats:null,timezones:[],cache:{}}, true&&(module.exports=ilib,module.exports.ilib=ilib),ilib.setAsPseudoLocale=function(localename){localename&&ilib.pseudoLocales.push(localename)},ilib.clearPseudoLocales=function(){ilib.pseudoLocales=["zxx-XX","zxx-Cyrl-XX","zxx-Hans-XX","zxx-Hebr-XX"]},ilib.clearPseudoLocales(),ilib._getPlatform=function(){if(!ilib._platform){try{if(void 0!==java.lang.Object)return ilib._platform="undefined"!=typeof process?"trireme":"rhino",ilib._platform}catch(e){}"undefined"!=typeof __webpack_require__.g&&__webpack_require__.g.process&&(__webpack_require__.g.process.versions&&__webpack_require__.g.process.versions.node&&"undefined"!="object"||void 0!==__webpack_require__.g.process.iotjs)?ilib._platform="nodejs":"undefined"!=typeof Qt?(ilib._platform="qt",ilib._cacheMerged=!0):"undefined"!=typeof PalmSystem?ilib._platform="undefined"!=typeof window?"webos-webapp":"webos":"undefined"!=typeof window?ilib._platform="browser":ilib._platform="unknown"}return ilib._platform},ilib._getBrowser=function(){var browser=void 0;return"browser"===ilib._getPlatform()&&navigator&&navigator.userAgent&&(-1<navigator.userAgent.indexOf("Firefox")&&(browser="firefox"),-1<navigator.userAgent.search(/Opera|OPR/)&&(browser="opera"),-1<navigator.userAgent.indexOf("Chrome")&&(browser="chrome"),-1<navigator.userAgent.indexOf(" .NET")&&(browser="ie"),-1<navigator.userAgent.indexOf("Safari")&&(browser="safari"),-1<navigator.userAgent.indexOf("Edge")&&(browser="Edge"),-1<navigator.userAgent.search(/iPad|iPhone|iPod/)&&(browser="iOS")),browser},ilib._top=function(){if(void 0===this.top)switch(this.top=null,ilib._getPlatform()){case"rhino":this.top=function(){return"object"==typeof __webpack_require__.g?__webpack_require__.g:this}();break;case"nodejs":case"trireme":this.top="undefined"!=typeof __webpack_require__.g?__webpack_require__.g:this;break;default:this.top=window}return this.top||void 0},ilib._global=function(name){var top=this._top();try{return top[name]}catch(e){return}},ilib._isGlobal=function(name){return void 0!==ilib._global(name)},ilib.clearCache=function(){ilib.data.cache={}},ilib.setLocale=function(spec){"string"!=typeof spec&&spec||(ilib.locale=spec)},ilib.getLocale=function(){var lang;if("string"!=typeof ilib.locale){switch(ilib._getPlatform()){case"browser":void 0!==navigator.language&&(ilib.locale=parseLocale(navigator.language)),ilib.locale||(lang=void 0!==navigator.browserLanguage?navigator.browserLanguage:void 0!==navigator.userLanguage?navigator.userLanguage:void 0!==navigator.systemLanguage?navigator.systemLanguage:void 0,ilib.locale=void 0!==lang&&lang?parseLocale(lang):void 0);break;case"webos-webapp":case"webos":void 0!==PalmSystem.locales&&void 0!==PalmSystem.locales.UI&&0<PalmSystem.locales.UI.length?ilib.locale=parseLocale(PalmSystem.locales.UI):void 0!==PalmSystem.locale?ilib.locale=parseLocale(PalmSystem.locale):ilib.locale=void 0;break;case"rhino":if("undefined"!=typeof environment&&environment.user&&"string"==typeof environment.user.language&&0<environment.user.language.length){var l=[environment.user.language];"string"==typeof environment.user.country&&0<environment.user.country.length&&l.push(environment.user.country),ilib.locale=l.join("-")}break;case"trireme":lang=process.env.LANG||process.env.LANGUAGE||process.env.LC_ALL,ilib.locale=parseLocale(lang);break;case"nodejs":lang=__webpack_require__.g.process.env.LANG||__webpack_require__.g.process.env.LC_ALL,ilib.locale=parseLocale(lang);break;case"qt":var locobj=Qt.locale();ilib.locale=parseLocale(locobj.name||"en-US")}ilib.locale="string"==typeof ilib.locale&&ilib.locale.length&&"C"!==ilib.locale?ilib.locale:"en-US","en"===ilib.locale&&(ilib.locale="en-US")}return ilib.locale},ilib.setTimeZone=function(tz){ilib.tz=tz||ilib.tz},ilib.getTimeZone=function(){if(void 0===ilib.tz){if("undefined"!=typeof Intl&&void 0!==Intl.DateTimeFormat){var ro=(new Intl.DateTimeFormat).resolvedOptions();return ilib.tz=ro&&ro.timeZone,ilib.tz}switch(ilib._getPlatform()){case"browser":navigator.timezone&&0<navigator.timezone.length&&(ilib.tz=navigator.timezone);break;case"webos-webapp":case"webos":PalmSystem.timezone&&0<PalmSystem.timezone.length&&(ilib.tz=PalmSystem.timezone);break;case"rhino":void 0!==environment.user.timezone&&0<environment.user.timezone.length&&(ilib.tz=environment.user.timezone);break;case"nodejs":__webpack_require__.g.process.env&&void 0!==__webpack_require__.g.process.env.TZ&&(ilib.tz=__webpack_require__.g.process.env.TZ)}ilib.tz=ilib.tz||"local"}return ilib.tz},ilib.Loader=function(){},ilib.Loader.prototype.loadFiles=function(paths,sync,params,callback){},ilib.Loader.prototype.listAvailableFiles=function(){},ilib.Loader.prototype.isAvailable=function(path){},ilib.setLoaderCallback=function(loader){return("object"==typeof loader&&"function"==typeof loader.loadFiles||"function"==typeof loader||void 0===loader)&&(ilib._load=loader,!0)},ilib.getLoader=function(){return ilib._load},ilib.isArray=function(object){return"object"==typeof object&&"[object Array]"===Object.prototype.toString.call(object)},ilib.extend=function(object1,object2){var prop=void 0;if(object2)for(prop in object2)prop&&void 0!==object2[prop]&&"function"!=typeof object2[prop]&&(ilib.isArray(object1[prop])&&ilib.isArray(object2[prop])?object1[prop]=object1[prop].concat(object2[prop]):"object"==typeof object1[prop]&&"object"==typeof object2[prop]?"ilib"!==prop&&(object1[prop]=ilib.extend(object1[prop],object2[prop])):object1[prop]=object2[prop]);return object1},ilib.extend2=function(object1,object2){var prop=void 0;if(object2)for(prop in object2)prop&&void 0!==object2[prop]&&(ilib.isArray(object1[prop])&&ilib.isArray(object2[prop])?object1[prop]=object1[prop].concat(object2[prop]):"object"==typeof object1[prop]&&"object"==typeof object2[prop]?"ilib"!==prop&&(object1[prop]=ilib.extend2(object1[prop],object2[prop])):object1[prop]=object2[prop]);return object1},ilib.bind=function(scope,method){if(scope&&method&&"function"==typeof method){var args=cloneArray(arguments,2);return"function"==typeof method.bind?method.bind.apply(method,[scope].concat(args)):function(){var nargs=cloneArray(arguments);return method.apply(scope,args.concat(nargs))}}function cloneArray(inArrayLike,inOffset){for(var arr=[],i=inOffset||0,l=inArrayLike.length;i<l;i++)arr.push(inArrayLike[i]);return arr}},ilib._dyncode=!1,ilib.isDynCode=function(){return ilib._dyncode},ilib._dyndata=!1,ilib.isDynData=function(){return ilib._dyndata},ilib._cacheMerged=!1,ilib._loadtime=(new Date).getTime();

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ (function(module) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "./node_modules/invariant/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/invariant/browser.js ***!
  \*******************************************/
/***/ (function(module) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (true) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;


/***/ }),

/***/ "./node_modules/is-function/index.js":
/*!*******************************************!*\
  !*** ./node_modules/is-function/index.js ***!
  \*******************************************/
/***/ (function(module) {

module.exports = isFunction

var toString = Object.prototype.toString

function isFunction (fn) {
  if (!fn) {
    return false
  }
  var string = toString.call(fn)
  return string === '[object Function]' ||
    (typeof fn === 'function' && string !== '[object RegExp]') ||
    (typeof window !== 'undefined' &&
     // IE8 and below
     (fn === window.setTimeout ||
      fn === window.alert ||
      fn === window.confirm ||
      fn === window.prompt))
};


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/***/ (function(module) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/mini-create-react-context/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/mini-create-react-context/dist/esm/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");





var MAX_SIGNED_31_BIT_INT = 1073741823;
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : {};

function getUniqueId() {
  var key = '__global_unique_id__';
  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
}

function objectIs(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function createEventEmitter(value) {
  var handlers = [];
  return {
    on: function on(handler) {
      handlers.push(handler);
    },
    off: function off(handler) {
      handlers = handlers.filter(function (h) {
        return h !== handler;
      });
    },
    get: function get() {
      return value;
    },
    set: function set(newValue, changedBits) {
      value = newValue;
      handlers.forEach(function (handler) {
        return handler(value, changedBits);
      });
    }
  };
}

function onlyChild(children) {
  return Array.isArray(children) ? children[0] : children;
}

function createReactContext(defaultValue, calculateChangedBits) {
  var _Provider$childContex, _Consumer$contextType;

  var contextProp = '__create-react-context-' + getUniqueId() + '__';

  var Provider = /*#__PURE__*/function (_Component) {
    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(Provider, _Component);

    function Provider() {
      var _this;

      _this = _Component.apply(this, arguments) || this;
      _this.emitter = createEventEmitter(_this.props.value);
      return _this;
    }

    var _proto = Provider.prototype;

    _proto.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
    };

    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        var oldValue = this.props.value;
        var newValue = nextProps.value;
        var changedBits;

        if (objectIs(oldValue, newValue)) {
          changedBits = 0;
        } else {
          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

          if (true) {
            (0,tiny_warning__WEBPACK_IMPORTED_MODULE_2__["default"])((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);
          }

          changedBits |= 0;

          if (changedBits !== 0) {
            this.emitter.set(nextProps.value, changedBits);
          }
        }
      }
    };

    _proto.render = function render() {
      return this.props.children;
    };

    return Provider;
  }(react__WEBPACK_IMPORTED_MODULE_0__.Component);

  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = (prop_types__WEBPACK_IMPORTED_MODULE_3___default().object.isRequired), _Provider$childContex);

  var Consumer = /*#__PURE__*/function (_Component2) {
    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(Consumer, _Component2);

    function Consumer() {
      var _this2;

      _this2 = _Component2.apply(this, arguments) || this;
      _this2.state = {
        value: _this2.getValue()
      };

      _this2.onUpdate = function (newValue, changedBits) {
        var observedBits = _this2.observedBits | 0;

        if ((observedBits & changedBits) !== 0) {
          _this2.setState({
            value: _this2.getValue()
          });
        }
      };

      return _this2;
    }

    var _proto2 = Consumer.prototype;

    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var observedBits = nextProps.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };

    _proto2.componentDidMount = function componentDidMount() {
      if (this.context[contextProp]) {
        this.context[contextProp].on(this.onUpdate);
      }

      var observedBits = this.props.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };

    _proto2.componentWillUnmount = function componentWillUnmount() {
      if (this.context[contextProp]) {
        this.context[contextProp].off(this.onUpdate);
      }
    };

    _proto2.getValue = function getValue() {
      if (this.context[contextProp]) {
        return this.context[contextProp].get();
      } else {
        return defaultValue;
      }
    };

    _proto2.render = function render() {
      return onlyChild(this.props.children)(this.state.value);
    };

    return Consumer;
  }(react__WEBPACK_IMPORTED_MODULE_0__.Component);

  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = (prop_types__WEBPACK_IMPORTED_MODULE_3___default().object), _Consumer$contextType);
  return {
    Provider: Provider,
    Consumer: Consumer
  };
}

var index = (react__WEBPACK_IMPORTED_MODULE_0___default().createContext) || createReactContext;

/* harmony default export */ __webpack_exports__["default"] = (index);


/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/***/ (function(module) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "./node_modules/parse-headers/parse-headers.js":
/*!*****************************************************!*\
  !*** ./node_modules/parse-headers/parse-headers.js ***!
  \*****************************************************/
/***/ (function(module) {

var trim = function(string) {
  return string.replace(/^\s+|\s+$/g, '');
}
  , isArray = function(arg) {
      return Object.prototype.toString.call(arg) === '[object Array]';
    }

module.exports = function (headers) {
  if (!headers)
    return {}

  var result = {}

  var headersArr = trim(headers).split('\n')

  for (var i = 0; i < headersArr.length; i++) {
    var row = headersArr[i]
    var index = row.indexOf(':')
    , key = trim(row.slice(0, index)).toLowerCase()
    , value = trim(row.slice(index + 1))

    if (typeof(result[key]) === 'undefined') {
      result[key] = value
    } else if (isArray(result[key])) {
      result[key].push(value)
    } else {
      result[key] = [ result[key], value ]
    }
  }

  return result
}


/***/ }),

/***/ "./node_modules/path-to-regexp/index.js":
/*!**********************************************!*\
  !*** ./node_modules/path-to-regexp/index.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isarray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp
module.exports.parse = parse
module.exports.compile = compile
module.exports.tokensToFunction = tokensToFunction
module.exports.tokensToRegExp = tokensToRegExp

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g')

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = []
  var key = 0
  var index = 0
  var path = ''
  var defaultDelimiter = options && options.delimiter || '/'
  var res

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0]
    var escaped = res[1]
    var offset = res.index
    path += str.slice(index, offset)
    index = offset + m.length

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1]
      continue
    }

    var next = str[index]
    var prefix = res[2]
    var name = res[3]
    var capture = res[4]
    var group = res[5]
    var modifier = res[6]
    var asterisk = res[7]

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path)
      path = ''
    }

    var partial = prefix != null && next != null && next !== prefix
    var repeat = modifier === '+' || modifier === '*'
    var optional = modifier === '?' || modifier === '*'
    var delimiter = res[2] || defaultDelimiter
    var pattern = capture || group

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    })
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index)
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path)
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options), options)
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens, options) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length)

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))
    }
  }

  return function (obj, opts) {
    var path = ''
    var data = obj || {}
    var options = opts || {}
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i]

      if (typeof token === 'string') {
        path += token

        continue
      }

      var value = data[token.name]
      var segment

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j])

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value)

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options && options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g)

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      })
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = []

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source)
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  var strict = options.strict
  var end = options.end !== false
  var route = ''

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i]

    if (typeof token === 'string') {
      route += escapeString(token)
    } else {
      var prefix = escapeString(token.prefix)
      var capture = '(?:' + token.pattern + ')'

      keys.push(token)

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*'
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?'
        } else {
          capture = prefix + '(' + capture + ')?'
        }
      } else {
        capture = prefix + '(' + capture + ')'
      }

      route += capture
    }
  }

  var delimiter = escapeString(options.delimiter || '/')
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
  }

  if (end) {
    route += '$'
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (isarray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}


/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
  var loggedTypeFailures = {};
  var has = __webpack_require__(/*! ./lib/has */ "./node_modules/prop-types/lib/has.js");

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) { /**/ }
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (true) {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;


/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
var assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
var has = __webpack_require__(/*! ./lib/has */ "./node_modules/prop-types/lib/has.js");
var checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var printWarning = function() {};

if (true) {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bigint: createPrimitiveTypeChecker('bigint'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message, data) {
    this.message = message;
    this.data = data && typeof data === 'object' ? data: {};
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ( true && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError(
          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
          {expectedType: expectedType}
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (true) {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      var expectedTypes = [];
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
        if (checkerResult == null) {
          return null;
        }
        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
          expectedTypes.push(checkerResult.data.expectedType);
        }
      }
      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function invalidValidatorError(componentName, location, propFullName, key, type) {
    return new PropTypeError(
      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
    );
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (has(shapeTypes, key) && typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (true) {
  var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ "./node_modules/prop-types/factoryWithTypeCheckers.js")(ReactIs.isElement, throwOnDirectAccess);
} else {}


/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/***/ (function(module) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "./node_modules/prop-types/lib/has.js":
/*!********************************************!*\
  !*** ./node_modules/prop-types/lib/has.js ***!
  \********************************************/
/***/ (function(module) {

module.exports = Function.call.bind(Object.prototype.hasOwnProperty);


/***/ }),

/***/ "./node_modules/ramda/src/always.js":
/*!******************************************!*\
  !*** ./node_modules/ramda/src/always.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");
/**
 * Returns a function that always returns the given value. Note that for
 * non-primitives the value returned is a reference to the original value.
 *
 * This function is known as `const`, `constant`, or `K` (for K combinator) in
 * other languages and libraries.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> (* -> a)
 * @param {*} val The value to wrap in a function
 * @return {Function} A Function :: * -> val.
 * @example
 *
 *      const t = R.always('Tee');
 *      t(); //=> 'Tee'
 */


var always =
/*#__PURE__*/
_curry1(function always(val) {
  return function () {
    return val;
  };
});

module.exports = always;

/***/ }),

/***/ "./node_modules/ramda/src/and.js":
/*!***************************************!*\
  !*** ./node_modules/ramda/src/and.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");
/**
 * Returns the first argument if it is falsy, otherwise the second argument.
 * Acts as the boolean `and` statement if both inputs are `Boolean`s.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any}
 * @see R.both, R.or
 * @example
 *
 *      R.and(true, true); //=> true
 *      R.and(true, false); //=> false
 *      R.and(false, true); //=> false
 *      R.and(false, false); //=> false
 */


var and =
/*#__PURE__*/
_curry2(function and(a, b) {
  return a && b;
});

module.exports = and;

/***/ }),

/***/ "./node_modules/ramda/src/anyPass.js":
/*!*******************************************!*\
  !*** ./node_modules/ramda/src/anyPass.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var curryN =
/*#__PURE__*/
__webpack_require__(/*! ./curryN.js */ "./node_modules/ramda/src/curryN.js");

var max =
/*#__PURE__*/
__webpack_require__(/*! ./max.js */ "./node_modules/ramda/src/max.js");

var pluck =
/*#__PURE__*/
__webpack_require__(/*! ./pluck.js */ "./node_modules/ramda/src/pluck.js");

var reduce =
/*#__PURE__*/
__webpack_require__(/*! ./reduce.js */ "./node_modules/ramda/src/reduce.js");
/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if at least one of the provided predicates is
 * satisfied by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.allPass
 * @example
 *
 *      const isClub = R.propEq('suit', '♣');
 *      const isSpade = R.propEq('suit', '♠');
 *      const isBlackCard = R.anyPass([isClub, isSpade]);
 *
 *      isBlackCard({rank: '10', suit: '♣'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false
 */


var anyPass =
/*#__PURE__*/
_curry1(function anyPass(preds) {
  return curryN(reduce(max, 0, pluck('length', preds)), function () {
    var idx = 0;
    var len = preds.length;

    while (idx < len) {
      if (preds[idx].apply(this, arguments)) {
        return true;
      }

      idx += 1;
    }

    return false;
  });
});

module.exports = anyPass;

/***/ }),

/***/ "./node_modules/ramda/src/ap.js":
/*!**************************************!*\
  !*** ./node_modules/ramda/src/ap.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _concat =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_concat.js */ "./node_modules/ramda/src/internal/_concat.js");

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _reduce =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_reduce.js */ "./node_modules/ramda/src/internal/_reduce.js");

var map =
/*#__PURE__*/
__webpack_require__(/*! ./map.js */ "./node_modules/ramda/src/map.js");
/**
 * ap applies a list of functions to a list of values.
 *
 * Dispatches to the `ap` method of the second argument, if present. Also
 * treats curried functions as applicatives.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig [a -> b] -> [a] -> [b]
 * @sig Apply f => f (a -> b) -> f a -> f b
 * @sig (r -> a -> b) -> (r -> a) -> (r -> b)
 * @param {*} applyF
 * @param {*} applyX
 * @return {*}
 * @example
 *
 *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
 *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> ["tasty pizza", "tasty salad", "PIZZA", "SALAD"]
 *
 *      // R.ap can also be used as S combinator
 *      // when only two functions are passed
 *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'
 * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]
 */


var ap =
/*#__PURE__*/
_curry2(function ap(applyF, applyX) {
  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {
    return applyF(x)(applyX(x));
  } : _reduce(function (acc, f) {
    return _concat(acc, map(f, applyX));
  }, [], applyF);
});

module.exports = ap;

/***/ }),

/***/ "./node_modules/ramda/src/bind.js":
/*!****************************************!*\
  !*** ./node_modules/ramda/src/bind.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _arity =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_arity.js */ "./node_modules/ramda/src/internal/_arity.js");

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");
/**
 * Creates a function that is bound to a context.
 * Note: `R.bind` does not provide the additional argument-binding capabilities of
 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @category Object
 * @sig (* -> *) -> {*} -> (* -> *)
 * @param {Function} fn The function to bind to context
 * @param {Object} thisObj The context to bind `fn` to
 * @return {Function} A function that will execute in the context of `thisObj`.
 * @see R.partial
 * @example
 *
 *      const log = R.bind(console.log, console);
 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
 *      // logs {a: 2}
 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
 */


var bind =
/*#__PURE__*/
_curry2(function bind(fn, thisObj) {
  return _arity(fn.length, function () {
    return fn.apply(thisObj, arguments);
  });
});

module.exports = bind;

/***/ }),

/***/ "./node_modules/ramda/src/clamp.js":
/*!*****************************************!*\
  !*** ./node_modules/ramda/src/clamp.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry3 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry3.js */ "./node_modules/ramda/src/internal/_curry3.js");
/**
 * Restricts a number to be within a range.
 *
 * Also works for other ordered types such as Strings and Dates.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Relation
 * @sig Ord a => a -> a -> a -> a
 * @param {Number} minimum The lower limit of the clamp (inclusive)
 * @param {Number} maximum The upper limit of the clamp (inclusive)
 * @param {Number} value Value to be clamped
 * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise
 * @example
 *
 *      R.clamp(1, 10, -5) // => 1
 *      R.clamp(1, 10, 15) // => 10
 *      R.clamp(1, 10, 4)  // => 4
 */


var clamp =
/*#__PURE__*/
_curry3(function clamp(min, max, value) {
  if (min > max) {
    throw new Error('min must not be greater than max in clamp(min, max, value)');
  }

  return value < min ? min : value > max ? max : value;
});

module.exports = clamp;

/***/ }),

/***/ "./node_modules/ramda/src/complement.js":
/*!**********************************************!*\
  !*** ./node_modules/ramda/src/complement.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var lift =
/*#__PURE__*/
__webpack_require__(/*! ./lift.js */ "./node_modules/ramda/src/lift.js");

var not =
/*#__PURE__*/
__webpack_require__(/*! ./not.js */ "./node_modules/ramda/src/not.js");
/**
 * Takes a function `f` and returns a function `g` such that if called with the same arguments
 * when `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.
 *
 * `R.complement` may be applied to any functor
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> *) -> (*... -> Boolean)
 * @param {Function} f
 * @return {Function}
 * @see R.not
 * @example
 *
 *      const isNotNil = R.complement(R.isNil);
 *      R.isNil(null); //=> true
 *      isNotNil(null); //=> false
 *      R.isNil(7); //=> false
 *      isNotNil(7); //=> true
 */


var complement =
/*#__PURE__*/
lift(not);
module.exports = complement;

/***/ }),

/***/ "./node_modules/ramda/src/compose.js":
/*!*******************************************!*\
  !*** ./node_modules/ramda/src/compose.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var pipe =
/*#__PURE__*/
__webpack_require__(/*! ./pipe.js */ "./node_modules/ramda/src/pipe.js");

var reverse =
/*#__PURE__*/
__webpack_require__(/*! ./reverse.js */ "./node_modules/ramda/src/reverse.js");
/**
 * Performs right-to-left function composition. The last argument may have
 * any arity; the remaining arguments must be unary.
 *
 * **Note:** The result of compose is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipe
 * @example
 *
 *      const classyGreeting = (firstName, lastName) => "The name's " + lastName + ", " + firstName + " " + lastName
 *      const yellGreeting = R.compose(R.toUpper, classyGreeting);
 *      yellGreeting('James', 'Bond'); //=> "THE NAME'S BOND, JAMES BOND"
 *
 *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7
 *
 * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))
 * @symb R.compose(f, g, h)(a)(b) = f(g(h(a)))(b)
 */


function compose() {
  if (arguments.length === 0) {
    throw new Error('compose requires at least one argument');
  }

  return pipe.apply(this, reverse(arguments));
}

module.exports = compose;

/***/ }),

/***/ "./node_modules/ramda/src/concat.js":
/*!******************************************!*\
  !*** ./node_modules/ramda/src/concat.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _isArray =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_isArray.js */ "./node_modules/ramda/src/internal/_isArray.js");

var _isFunction =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_isFunction.js */ "./node_modules/ramda/src/internal/_isFunction.js");

var _isString =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_isString.js */ "./node_modules/ramda/src/internal/_isString.js");

var toString =
/*#__PURE__*/
__webpack_require__(/*! ./toString.js */ "./node_modules/ramda/src/toString.js");
/**
 * Returns the result of concatenating the given lists or strings.
 *
 * Note: `R.concat` expects both arguments to be of the same type,
 * unlike the native `Array.prototype.concat` method. It will throw
 * an error if you `concat` an Array with a non-Array value.
 *
 * Dispatches to the `concat` method of the first argument, if present.
 * Can also concatenate two members of a [fantasy-land
 * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @sig String -> String -> String
 * @param {Array|String} firstList The first list
 * @param {Array|String} secondList The second list
 * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of
 * `secondList`.
 *
 * @example
 *
 *      R.concat('ABC', 'DEF'); // 'ABCDEF'
 *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 *      R.concat([], []); //=> []
 */


var concat =
/*#__PURE__*/
_curry2(function concat(a, b) {
  if (_isArray(a)) {
    if (_isArray(b)) {
      return a.concat(b);
    }

    throw new TypeError(toString(b) + ' is not an array');
  }

  if (_isString(a)) {
    if (_isString(b)) {
      return a + b;
    }

    throw new TypeError(toString(b) + ' is not a string');
  }

  if (a != null && _isFunction(a['fantasy-land/concat'])) {
    return a['fantasy-land/concat'](b);
  }

  if (a != null && _isFunction(a.concat)) {
    return a.concat(b);
  }

  throw new TypeError(toString(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
});

module.exports = concat;

/***/ }),

/***/ "./node_modules/ramda/src/cond.js":
/*!****************************************!*\
  !*** ./node_modules/ramda/src/cond.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _arity =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_arity.js */ "./node_modules/ramda/src/internal/_arity.js");

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var map =
/*#__PURE__*/
__webpack_require__(/*! ./map.js */ "./node_modules/ramda/src/map.js");

var max =
/*#__PURE__*/
__webpack_require__(/*! ./max.js */ "./node_modules/ramda/src/max.js");

var reduce =
/*#__PURE__*/
__webpack_require__(/*! ./reduce.js */ "./node_modules/ramda/src/reduce.js");
/**
 * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.
 * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments
 * to `fn` are applied to each of the predicates in turn until one returns a
 * "truthy" value, at which point `fn` returns the result of applying its
 * arguments to the corresponding transformer. If none of the predicates
 * matches, `fn` returns undefined.
 *
 * **Please note**: This is not a direct substitute for a `switch` statement.
 * Remember that both elements of every pair passed to `cond` are *functions*,
 * and `cond` returns a function.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Logic
 * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
 * @param {Array} pairs A list of [predicate, transformer]
 * @return {Function}
 * @see R.ifElse, R.unless, R.when
 * @example
 *
 *      const fn = R.cond([
 *        [R.equals(0),   R.always('water freezes at 0°C')],
 *        [R.equals(100), R.always('water boils at 100°C')],
 *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']
 *      ]);
 *      fn(0); //=> 'water freezes at 0°C'
 *      fn(50); //=> 'nothing special happens at 50°C'
 *      fn(100); //=> 'water boils at 100°C'
 */


var cond =
/*#__PURE__*/
_curry1(function cond(pairs) {
  var arity = reduce(max, 0, map(function (pair) {
    return pair[0].length;
  }, pairs));
  return _arity(arity, function () {
    var idx = 0;

    while (idx < pairs.length) {
      if (pairs[idx][0].apply(this, arguments)) {
        return pairs[idx][1].apply(this, arguments);
      }

      idx += 1;
    }
  });
});

module.exports = cond;

/***/ }),

/***/ "./node_modules/ramda/src/curry.js":
/*!*****************************************!*\
  !*** ./node_modules/ramda/src/curry.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var curryN =
/*#__PURE__*/
__webpack_require__(/*! ./curryN.js */ "./node_modules/ramda/src/curryN.js");
/**
 * Returns a curried equivalent of the provided function. The curried function
 * has two unusual capabilities. First, its arguments needn't be provided one
 * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
 * the following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> a) -> (* -> a)
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curryN, R.partial
 * @example
 *
 *      const addFourNumbers = (a, b, c, d) => a + b + c + d;
 *
 *      const curriedAddFourNumbers = R.curry(addFourNumbers);
 *      const f = curriedAddFourNumbers(1, 2);
 *      const g = f(3);
 *      g(4); //=> 10
 */


var curry =
/*#__PURE__*/
_curry1(function curry(fn) {
  return curryN(fn.length, fn);
});

module.exports = curry;

/***/ }),

/***/ "./node_modules/ramda/src/curryN.js":
/*!******************************************!*\
  !*** ./node_modules/ramda/src/curryN.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _arity =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_arity.js */ "./node_modules/ramda/src/internal/_arity.js");

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _curryN =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curryN.js */ "./node_modules/ramda/src/internal/_curryN.js");
/**
 * Returns a curried equivalent of the provided function, with the specified
 * arity. The curried function has two unusual capabilities. First, its
 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
 * the following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curry
 * @example
 *
 *      const sumArgs = (...args) => R.sum(args);
 *
 *      const curriedAddFourNumbers = R.curryN(4, sumArgs);
 *      const f = curriedAddFourNumbers(1, 2);
 *      const g = f(3);
 *      g(4); //=> 10
 */


var curryN =
/*#__PURE__*/
_curry2(function curryN(length, fn) {
  if (length === 1) {
    return _curry1(fn);
  }

  return _arity(length, _curryN(length, [], fn));
});

module.exports = curryN;

/***/ }),

/***/ "./node_modules/ramda/src/equals.js":
/*!******************************************!*\
  !*** ./node_modules/ramda/src/equals.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _equals =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_equals.js */ "./node_modules/ramda/src/internal/_equals.js");
/**
 * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
 * cyclical data structures.
 *
 * Dispatches symmetrically to the `equals` methods of both arguments, if
 * present.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> b -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      R.equals(1, 1); //=> true
 *      R.equals(1, '1'); //=> false
 *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
 *
 *      const a = {}; a.v = a;
 *      const b = {}; b.v = b;
 *      R.equals(a, b); //=> true
 */


var equals =
/*#__PURE__*/
_curry2(function equals(a, b) {
  return _equals(a, b, [], []);
});

module.exports = equals;

/***/ }),

/***/ "./node_modules/ramda/src/filter.js":
/*!******************************************!*\
  !*** ./node_modules/ramda/src/filter.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _dispatchable =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_dispatchable.js */ "./node_modules/ramda/src/internal/_dispatchable.js");

var _filter =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_filter.js */ "./node_modules/ramda/src/internal/_filter.js");

var _isObject =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_isObject.js */ "./node_modules/ramda/src/internal/_isObject.js");

var _reduce =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_reduce.js */ "./node_modules/ramda/src/internal/_reduce.js");

var _xfilter =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_xfilter.js */ "./node_modules/ramda/src/internal/_xfilter.js");

var keys =
/*#__PURE__*/
__webpack_require__(/*! ./keys.js */ "./node_modules/ramda/src/keys.js");
/**
 * Takes a predicate and a `Filterable`, and returns a new filterable of the
 * same type containing the members of the given filterable which satisfy the
 * given predicate. Filterable objects include plain objects or any object
 * that has a filter method such as `Array`.
 *
 * Dispatches to the `filter` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array} Filterable
 * @see R.reject, R.transduce, R.addIndex
 * @example
 *
 *      const isEven = n => n % 2 === 0;
 *
 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */


var filter =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['fantasy-land/filter', 'filter'], _xfilter, function (pred, filterable) {
  return _isObject(filterable) ? _reduce(function (acc, key) {
    if (pred(filterable[key])) {
      acc[key] = filterable[key];
    }

    return acc;
  }, {}, keys(filterable)) : // else
  _filter(pred, filterable);
}));

module.exports = filter;

/***/ }),

/***/ "./node_modules/ramda/src/flip.js":
/*!****************************************!*\
  !*** ./node_modules/ramda/src/flip.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var curryN =
/*#__PURE__*/
__webpack_require__(/*! ./curryN.js */ "./node_modules/ramda/src/curryN.js");
/**
 * Returns a new function much like the supplied one, except that the first two
 * arguments' order is reversed.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)
 * @param {Function} fn The function to invoke with its first two parameters reversed.
 * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
 * @example
 *
 *      const mergeThree = (a, b, c) => [].concat(a, b, c);
 *
 *      mergeThree(1, 2, 3); //=> [1, 2, 3]
 *
 *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
 * @symb R.flip(f)(a, b, c) = f(b, a, c)
 */


var flip =
/*#__PURE__*/
_curry1(function flip(fn) {
  return curryN(fn.length, function (a, b) {
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = b;
    args[1] = a;
    return fn.apply(this, args);
  });
});

module.exports = flip;

/***/ }),

/***/ "./node_modules/ramda/src/identity.js":
/*!********************************************!*\
  !*** ./node_modules/ramda/src/identity.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var _identity =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_identity.js */ "./node_modules/ramda/src/internal/_identity.js");
/**
 * A function that does nothing but return the parameter supplied to it. Good
 * as a default or placeholder function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> a
 * @param {*} x The value to return.
 * @return {*} The input value, `x`.
 * @example
 *
 *      R.identity(1); //=> 1
 *
 *      const obj = {};
 *      R.identity(obj) === obj; //=> true
 * @symb R.identity(a) = a
 */


var identity =
/*#__PURE__*/
_curry1(_identity);

module.exports = identity;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_Set.js":
/*!*************************************************!*\
  !*** ./node_modules/ramda/src/internal/_Set.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _includes =
/*#__PURE__*/
__webpack_require__(/*! ./_includes.js */ "./node_modules/ramda/src/internal/_includes.js");

var _Set =
/*#__PURE__*/
function () {
  function _Set() {
    /* globals Set */
    this._nativeSet = typeof Set === 'function' ? new Set() : null;
    this._items = {};
  }

  // until we figure out why jsdoc chokes on this
  // @param item The item to add to the Set
  // @returns {boolean} true if the item did not exist prior, otherwise false
  //
  _Set.prototype.add = function (item) {
    return !hasOrAdd(item, true, this);
  }; //
  // @param item The item to check for existence in the Set
  // @returns {boolean} true if the item exists in the Set, otherwise false
  //


  _Set.prototype.has = function (item) {
    return hasOrAdd(item, false, this);
  }; //
  // Combines the logic for checking whether an item is a member of the set and
  // for adding a new item to the set.
  //
  // @param item       The item to check or add to the Set instance.
  // @param shouldAdd  If true, the item will be added to the set if it doesn't
  //                   already exist.
  // @param set        The set instance to check or add to.
  // @return {boolean} true if the item already existed, otherwise false.
  //


  return _Set;
}();

function hasOrAdd(item, shouldAdd, set) {
  var type = typeof item;
  var prevSize, newSize;

  switch (type) {
    case 'string':
    case 'number':
      // distinguish between +0 and -0
      if (item === 0 && 1 / item === -Infinity) {
        if (set._items['-0']) {
          return true;
        } else {
          if (shouldAdd) {
            set._items['-0'] = true;
          }

          return false;
        }
      } // these types can all utilise the native Set


      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;

          set._nativeSet.add(item);

          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = {};
            set._items[type][item] = true;
          }

          return false;
        } else if (item in set._items[type]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type][item] = true;
          }

          return false;
        }
      }

    case 'boolean':
      // set._items['boolean'] holds a two element array
      // representing [ falseExists, trueExists ]
      if (type in set._items) {
        var bIdx = item ? 1 : 0;

        if (set._items[type][bIdx]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type][bIdx] = true;
          }

          return false;
        }
      } else {
        if (shouldAdd) {
          set._items[type] = item ? [false, true] : [true, false];
        }

        return false;
      }

    case 'function':
      // compare functions for reference equality
      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;

          set._nativeSet.add(item);

          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = [item];
          }

          return false;
        }

        if (!_includes(item, set._items[type])) {
          if (shouldAdd) {
            set._items[type].push(item);
          }

          return false;
        }

        return true;
      }

    case 'undefined':
      if (set._items[type]) {
        return true;
      } else {
        if (shouldAdd) {
          set._items[type] = true;
        }

        return false;
      }

    case 'object':
      if (item === null) {
        if (!set._items['null']) {
          if (shouldAdd) {
            set._items['null'] = true;
          }

          return false;
        }

        return true;
      }

    /* falls through */

    default:
      // reduce the search size of heterogeneous sets by creating buckets
      // for each type.
      type = Object.prototype.toString.call(item);

      if (!(type in set._items)) {
        if (shouldAdd) {
          set._items[type] = [item];
        }

        return false;
      } // scan through all previously applied items


      if (!_includes(item, set._items[type])) {
        if (shouldAdd) {
          set._items[type].push(item);
        }

        return false;
      }

      return true;
  }
} // A simple Set type that honours R.equals semantics


module.exports = _Set;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_arity.js":
/*!***************************************************!*\
  !*** ./node_modules/ramda/src/internal/_arity.js ***!
  \***************************************************/
/***/ (function(module) {

function _arity(n, fn) {
  /* eslint-disable no-unused-vars */
  switch (n) {
    case 0:
      return function () {
        return fn.apply(this, arguments);
      };

    case 1:
      return function (a0) {
        return fn.apply(this, arguments);
      };

    case 2:
      return function (a0, a1) {
        return fn.apply(this, arguments);
      };

    case 3:
      return function (a0, a1, a2) {
        return fn.apply(this, arguments);
      };

    case 4:
      return function (a0, a1, a2, a3) {
        return fn.apply(this, arguments);
      };

    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.apply(this, arguments);
      };

    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.apply(this, arguments);
      };

    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.apply(this, arguments);
      };

    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.apply(this, arguments);
      };

    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.apply(this, arguments);
      };

    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.apply(this, arguments);
      };

    default:
      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
  }
}

module.exports = _arity;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_arrayFromIterator.js":
/*!***************************************************************!*\
  !*** ./node_modules/ramda/src/internal/_arrayFromIterator.js ***!
  \***************************************************************/
/***/ (function(module) {

function _arrayFromIterator(iter) {
  var list = [];
  var next;

  while (!(next = iter.next()).done) {
    list.push(next.value);
  }

  return list;
}

module.exports = _arrayFromIterator;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_checkForMethod.js":
/*!************************************************************!*\
  !*** ./node_modules/ramda/src/internal/_checkForMethod.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _isArray =
/*#__PURE__*/
__webpack_require__(/*! ./_isArray.js */ "./node_modules/ramda/src/internal/_isArray.js");
/**
 * This checks whether a function has a [methodname] function. If it isn't an
 * array it will execute that function otherwise it will default to the ramda
 * implementation.
 *
 * @private
 * @param {Function} fn ramda implementation
 * @param {String} methodname property to check for a custom implementation
 * @return {Object} Whatever the return value of the method is.
 */


function _checkForMethod(methodname, fn) {
  return function () {
    var length = arguments.length;

    if (length === 0) {
      return fn();
    }

    var obj = arguments[length - 1];
    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
  };
}

module.exports = _checkForMethod;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_complement.js":
/*!********************************************************!*\
  !*** ./node_modules/ramda/src/internal/_complement.js ***!
  \********************************************************/
/***/ (function(module) {

function _complement(f) {
  return function () {
    return !f.apply(this, arguments);
  };
}

module.exports = _complement;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_concat.js":
/*!****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_concat.js ***!
  \****************************************************/
/***/ (function(module) {

/**
 * Private `concat` function to merge two array-like objects.
 *
 * @private
 * @param {Array|Arguments} [set1=[]] An array-like object.
 * @param {Array|Arguments} [set2=[]] An array-like object.
 * @return {Array} A new, merged array.
 * @example
 *
 *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 */
function _concat(set1, set2) {
  set1 = set1 || [];
  set2 = set2 || [];
  var idx;
  var len1 = set1.length;
  var len2 = set2.length;
  var result = [];
  idx = 0;

  while (idx < len1) {
    result[result.length] = set1[idx];
    idx += 1;
  }

  idx = 0;

  while (idx < len2) {
    result[result.length] = set2[idx];
    idx += 1;
  }

  return result;
}

module.exports = _concat;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_curry1.js":
/*!****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_curry1.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _isPlaceholder =
/*#__PURE__*/
__webpack_require__(/*! ./_isPlaceholder.js */ "./node_modules/ramda/src/internal/_isPlaceholder.js");
/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
}

module.exports = _curry1;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_curry2.js":
/*!****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_curry2.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var _isPlaceholder =
/*#__PURE__*/
__webpack_require__(/*! ./_isPlaceholder.js */ "./node_modules/ramda/src/internal/_isPlaceholder.js");
/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;

      case 1:
        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
          return fn(a, _b);
        });

      default:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
          return fn(_a, b);
        }) : _isPlaceholder(b) ? _curry1(function (_b) {
          return fn(a, _b);
        }) : fn(a, b);
    }
  };
}

module.exports = _curry2;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_curry3.js":
/*!****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_curry3.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _isPlaceholder =
/*#__PURE__*/
__webpack_require__(/*! ./_isPlaceholder.js */ "./node_modules/ramda/src/internal/_isPlaceholder.js");
/**
 * Optimized internal three-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry3(fn) {
  return function f3(a, b, c) {
    switch (arguments.length) {
      case 0:
        return f3;

      case 1:
        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        });

      case 2:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        }) : _curry1(function (_c) {
          return fn(a, b, _c);
        });

      default:
        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
          return fn(_a, _b, c);
        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        }) : _isPlaceholder(a) ? _curry1(function (_a) {
          return fn(_a, b, c);
        }) : _isPlaceholder(b) ? _curry1(function (_b) {
          return fn(a, _b, c);
        }) : _isPlaceholder(c) ? _curry1(function (_c) {
          return fn(a, b, _c);
        }) : fn(a, b, c);
    }
  };
}

module.exports = _curry3;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_curryN.js":
/*!****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_curryN.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _arity =
/*#__PURE__*/
__webpack_require__(/*! ./_arity.js */ "./node_modules/ramda/src/internal/_arity.js");

var _isPlaceholder =
/*#__PURE__*/
__webpack_require__(/*! ./_isPlaceholder.js */ "./node_modules/ramda/src/internal/_isPlaceholder.js");
/**
 * Internal curryN function.
 *
 * @private
 * @category Function
 * @param {Number} length The arity of the curried function.
 * @param {Array} received An array of arguments received thus far.
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curryN(length, received, fn) {
  return function () {
    var combined = [];
    var argsIdx = 0;
    var left = length;
    var combinedIdx = 0;

    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;

      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
        result = received[combinedIdx];
      } else {
        result = arguments[argsIdx];
        argsIdx += 1;
      }

      combined[combinedIdx] = result;

      if (!_isPlaceholder(result)) {
        left -= 1;
      }

      combinedIdx += 1;
    }

    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
  };
}

module.exports = _curryN;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_dispatchable.js":
/*!**********************************************************!*\
  !*** ./node_modules/ramda/src/internal/_dispatchable.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _isArray =
/*#__PURE__*/
__webpack_require__(/*! ./_isArray.js */ "./node_modules/ramda/src/internal/_isArray.js");

var _isTransformer =
/*#__PURE__*/
__webpack_require__(/*! ./_isTransformer.js */ "./node_modules/ramda/src/internal/_isTransformer.js");
/**
 * Returns a function that dispatches with different strategies based on the
 * object in list position (last argument). If it is an array, executes [fn].
 * Otherwise, if it has a function with one of the given method names, it will
 * execute that function (functor case). Otherwise, if it is a transformer,
 * uses transducer created by [transducerCreator] to return a new transformer
 * (transducer case).
 * Otherwise, it will default to executing [fn].
 *
 * @private
 * @param {Array} methodNames properties to check for a custom implementation
 * @param {Function} transducerCreator transducer factory if object is transformer
 * @param {Function} fn default ramda implementation
 * @return {Function} A function that dispatches on object in list position
 */


function _dispatchable(methodNames, transducerCreator, fn) {
  return function () {
    if (arguments.length === 0) {
      return fn();
    }

    var obj = arguments[arguments.length - 1];

    if (!_isArray(obj)) {
      var idx = 0;

      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === 'function') {
          return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));
        }

        idx += 1;
      }

      if (_isTransformer(obj)) {
        var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));
        return transducer(obj);
      }
    }

    return fn.apply(this, arguments);
  };
}

module.exports = _dispatchable;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_equals.js":
/*!****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_equals.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _arrayFromIterator =
/*#__PURE__*/
__webpack_require__(/*! ./_arrayFromIterator.js */ "./node_modules/ramda/src/internal/_arrayFromIterator.js");

var _includesWith =
/*#__PURE__*/
__webpack_require__(/*! ./_includesWith.js */ "./node_modules/ramda/src/internal/_includesWith.js");

var _functionName =
/*#__PURE__*/
__webpack_require__(/*! ./_functionName.js */ "./node_modules/ramda/src/internal/_functionName.js");

var _has =
/*#__PURE__*/
__webpack_require__(/*! ./_has.js */ "./node_modules/ramda/src/internal/_has.js");

var _objectIs =
/*#__PURE__*/
__webpack_require__(/*! ./_objectIs.js */ "./node_modules/ramda/src/internal/_objectIs.js");

var keys =
/*#__PURE__*/
__webpack_require__(/*! ../keys.js */ "./node_modules/ramda/src/keys.js");

var type =
/*#__PURE__*/
__webpack_require__(/*! ../type.js */ "./node_modules/ramda/src/type.js");
/**
 * private _uniqContentEquals function.
 * That function is checking equality of 2 iterator contents with 2 assumptions
 * - iterators lengths are the same
 * - iterators values are unique
 *
 * false-positive result will be returned for comparison of, e.g.
 * - [1,2,3] and [1,2,3,4]
 * - [1,1,1] and [1,2,3]
 * */


function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
  var a = _arrayFromIterator(aIterator);

  var b = _arrayFromIterator(bIterator);

  function eq(_a, _b) {
    return _equals(_a, _b, stackA.slice(), stackB.slice());
  } // if *a* array contains any element that is not included in *b*


  return !_includesWith(function (b, aItem) {
    return !_includesWith(eq, aItem, b);
  }, b, a);
}

function _equals(a, b, stackA, stackB) {
  if (_objectIs(a, b)) {
    return true;
  }

  var typeA = type(a);

  if (typeA !== type(b)) {
    return false;
  }

  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {
    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);
  }

  if (typeof a.equals === 'function' || typeof b.equals === 'function') {
    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
  }

  switch (typeA) {
    case 'Arguments':
    case 'Array':
    case 'Object':
      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {
        return a === b;
      }

      break;

    case 'Boolean':
    case 'Number':
    case 'String':
      if (!(typeof a === typeof b && _objectIs(a.valueOf(), b.valueOf()))) {
        return false;
      }

      break;

    case 'Date':
      if (!_objectIs(a.valueOf(), b.valueOf())) {
        return false;
      }

      break;

    case 'Error':
      return a.name === b.name && a.message === b.message;

    case 'RegExp':
      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
        return false;
      }

      break;
  }

  var idx = stackA.length - 1;

  while (idx >= 0) {
    if (stackA[idx] === a) {
      return stackB[idx] === b;
    }

    idx -= 1;
  }

  switch (typeA) {
    case 'Map':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));

    case 'Set':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));

    case 'Arguments':
    case 'Array':
    case 'Object':
    case 'Boolean':
    case 'Number':
    case 'String':
    case 'Date':
    case 'Error':
    case 'RegExp':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'ArrayBuffer':
      break;

    default:
      // Values of other types are only equal if identical.
      return false;
  }

  var keysA = keys(a);

  if (keysA.length !== keys(b).length) {
    return false;
  }

  var extendedStackA = stackA.concat([a]);
  var extendedStackB = stackB.concat([b]);
  idx = keysA.length - 1;

  while (idx >= 0) {
    var key = keysA[idx];

    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
      return false;
    }

    idx -= 1;
  }

  return true;
}

module.exports = _equals;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_filter.js":
/*!****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_filter.js ***!
  \****************************************************/
/***/ (function(module) {

function _filter(fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];

  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }

    idx += 1;
  }

  return result;
}

module.exports = _filter;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_functionName.js":
/*!**********************************************************!*\
  !*** ./node_modules/ramda/src/internal/_functionName.js ***!
  \**********************************************************/
/***/ (function(module) {

function _functionName(f) {
  // String(x => x) evaluates to "x => x", so the pattern may not match.
  var match = String(f).match(/^function (\w*)/);
  return match == null ? '' : match[1];
}

module.exports = _functionName;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_has.js":
/*!*************************************************!*\
  !*** ./node_modules/ramda/src/internal/_has.js ***!
  \*************************************************/
/***/ (function(module) {

function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = _has;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_identity.js":
/*!******************************************************!*\
  !*** ./node_modules/ramda/src/internal/_identity.js ***!
  \******************************************************/
/***/ (function(module) {

function _identity(x) {
  return x;
}

module.exports = _identity;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_includes.js":
/*!******************************************************!*\
  !*** ./node_modules/ramda/src/internal/_includes.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _indexOf =
/*#__PURE__*/
__webpack_require__(/*! ./_indexOf.js */ "./node_modules/ramda/src/internal/_indexOf.js");

function _includes(a, list) {
  return _indexOf(list, a, 0) >= 0;
}

module.exports = _includes;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_includesWith.js":
/*!**********************************************************!*\
  !*** ./node_modules/ramda/src/internal/_includesWith.js ***!
  \**********************************************************/
/***/ (function(module) {

function _includesWith(pred, x, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    if (pred(x, list[idx])) {
      return true;
    }

    idx += 1;
  }

  return false;
}

module.exports = _includesWith;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_indexOf.js":
/*!*****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_indexOf.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var equals =
/*#__PURE__*/
__webpack_require__(/*! ../equals.js */ "./node_modules/ramda/src/equals.js");

function _indexOf(list, a, idx) {
  var inf, item; // Array.prototype.indexOf doesn't exist below IE9

  if (typeof list.indexOf === 'function') {
    switch (typeof a) {
      case 'number':
        if (a === 0) {
          // manually crawl the list to distinguish between +0 and -0
          inf = 1 / a;

          while (idx < list.length) {
            item = list[idx];

            if (item === 0 && 1 / item === inf) {
              return idx;
            }

            idx += 1;
          }

          return -1;
        } else if (a !== a) {
          // NaN
          while (idx < list.length) {
            item = list[idx];

            if (typeof item === 'number' && item !== item) {
              return idx;
            }

            idx += 1;
          }

          return -1;
        } // non-zero numbers can utilise Set


        return list.indexOf(a, idx);
      // all these types can utilise Set

      case 'string':
      case 'boolean':
      case 'function':
      case 'undefined':
        return list.indexOf(a, idx);

      case 'object':
        if (a === null) {
          // null can utilise Set
          return list.indexOf(a, idx);
        }

    }
  } // anything else not covered above, defer to R.equals


  while (idx < list.length) {
    if (equals(list[idx], a)) {
      return idx;
    }

    idx += 1;
  }

  return -1;
}

module.exports = _indexOf;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_isArguments.js":
/*!*********************************************************!*\
  !*** ./node_modules/ramda/src/internal/_isArguments.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _has =
/*#__PURE__*/
__webpack_require__(/*! ./_has.js */ "./node_modules/ramda/src/internal/_has.js");

var toString = Object.prototype.toString;

var _isArguments =
/*#__PURE__*/
function () {
  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
    return toString.call(x) === '[object Arguments]';
  } : function _isArguments(x) {
    return _has('callee', x);
  };
}();

module.exports = _isArguments;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_isArray.js":
/*!*****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_isArray.js ***!
  \*****************************************************/
/***/ (function(module) {

/**
 * Tests whether or not an object is an array.
 *
 * @private
 * @param {*} val The object to test.
 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
 * @example
 *
 *      _isArray([]); //=> true
 *      _isArray(null); //=> false
 *      _isArray({}); //=> false
 */
module.exports = Array.isArray || function _isArray(val) {
  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
};

/***/ }),

/***/ "./node_modules/ramda/src/internal/_isArrayLike.js":
/*!*********************************************************!*\
  !*** ./node_modules/ramda/src/internal/_isArrayLike.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var _isArray =
/*#__PURE__*/
__webpack_require__(/*! ./_isArray.js */ "./node_modules/ramda/src/internal/_isArray.js");

var _isString =
/*#__PURE__*/
__webpack_require__(/*! ./_isString.js */ "./node_modules/ramda/src/internal/_isString.js");
/**
 * Tests whether or not an object is similar to an array.
 *
 * @private
 * @category Type
 * @category List
 * @sig * -> Boolean
 * @param {*} x The object to test.
 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
 * @example
 *
 *      _isArrayLike([]); //=> true
 *      _isArrayLike(true); //=> false
 *      _isArrayLike({}); //=> false
 *      _isArrayLike({length: 10}); //=> false
 *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
 *      _isArrayLike({nodeType: 1, length: 1}) // => false
 */


var _isArrayLike =
/*#__PURE__*/
_curry1(function isArrayLike(x) {
  if (_isArray(x)) {
    return true;
  }

  if (!x) {
    return false;
  }

  if (typeof x !== 'object') {
    return false;
  }

  if (_isString(x)) {
    return false;
  }

  if (x.length === 0) {
    return true;
  }

  if (x.length > 0) {
    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
  }

  return false;
});

module.exports = _isArrayLike;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_isFunction.js":
/*!********************************************************!*\
  !*** ./node_modules/ramda/src/internal/_isFunction.js ***!
  \********************************************************/
/***/ (function(module) {

function _isFunction(x) {
  var type = Object.prototype.toString.call(x);
  return type === '[object Function]' || type === '[object AsyncFunction]' || type === '[object GeneratorFunction]' || type === '[object AsyncGeneratorFunction]';
}

module.exports = _isFunction;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_isInteger.js":
/*!*******************************************************!*\
  !*** ./node_modules/ramda/src/internal/_isInteger.js ***!
  \*******************************************************/
/***/ (function(module) {

/**
 * Determine if the passed argument is an integer.
 *
 * @private
 * @param {*} n
 * @category Type
 * @return {Boolean}
 */
module.exports = Number.isInteger || function _isInteger(n) {
  return n << 0 === n;
};

/***/ }),

/***/ "./node_modules/ramda/src/internal/_isObject.js":
/*!******************************************************!*\
  !*** ./node_modules/ramda/src/internal/_isObject.js ***!
  \******************************************************/
/***/ (function(module) {

function _isObject(x) {
  return Object.prototype.toString.call(x) === '[object Object]';
}

module.exports = _isObject;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_isPlaceholder.js":
/*!***********************************************************!*\
  !*** ./node_modules/ramda/src/internal/_isPlaceholder.js ***!
  \***********************************************************/
/***/ (function(module) {

function _isPlaceholder(a) {
  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
}

module.exports = _isPlaceholder;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_isString.js":
/*!******************************************************!*\
  !*** ./node_modules/ramda/src/internal/_isString.js ***!
  \******************************************************/
/***/ (function(module) {

function _isString(x) {
  return Object.prototype.toString.call(x) === '[object String]';
}

module.exports = _isString;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_isTransformer.js":
/*!***********************************************************!*\
  !*** ./node_modules/ramda/src/internal/_isTransformer.js ***!
  \***********************************************************/
/***/ (function(module) {

function _isTransformer(obj) {
  return obj != null && typeof obj['@@transducer/step'] === 'function';
}

module.exports = _isTransformer;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_map.js":
/*!*************************************************!*\
  !*** ./node_modules/ramda/src/internal/_map.js ***!
  \*************************************************/
/***/ (function(module) {

function _map(fn, functor) {
  var idx = 0;
  var len = functor.length;
  var result = Array(len);

  while (idx < len) {
    result[idx] = fn(functor[idx]);
    idx += 1;
  }

  return result;
}

module.exports = _map;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_objectIs.js":
/*!******************************************************!*\
  !*** ./node_modules/ramda/src/internal/_objectIs.js ***!
  \******************************************************/
/***/ (function(module) {

// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
function _objectIs(a, b) {
  // SameValue algorithm
  if (a === b) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return a !== 0 || 1 / a === 1 / b;
  } else {
    // Step 6.a: NaN == NaN
    return a !== a && b !== b;
  }
}

module.exports = typeof Object.is === 'function' ? Object.is : _objectIs;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_pipe.js":
/*!**************************************************!*\
  !*** ./node_modules/ramda/src/internal/_pipe.js ***!
  \**************************************************/
/***/ (function(module) {

function _pipe(f, g) {
  return function () {
    return g.call(this, f.apply(this, arguments));
  };
}

module.exports = _pipe;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_quote.js":
/*!***************************************************!*\
  !*** ./node_modules/ramda/src/internal/_quote.js ***!
  \***************************************************/
/***/ (function(module) {

function _quote(s) {
  var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b') // \b matches word boundary; [\b] matches backspace
  .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');
  return '"' + escaped.replace(/"/g, '\\"') + '"';
}

module.exports = _quote;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_reduce.js":
/*!****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_reduce.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _isArrayLike =
/*#__PURE__*/
__webpack_require__(/*! ./_isArrayLike.js */ "./node_modules/ramda/src/internal/_isArrayLike.js");

var _xwrap =
/*#__PURE__*/
__webpack_require__(/*! ./_xwrap.js */ "./node_modules/ramda/src/internal/_xwrap.js");

var bind =
/*#__PURE__*/
__webpack_require__(/*! ../bind.js */ "./node_modules/ramda/src/bind.js");

function _arrayReduce(xf, acc, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    acc = xf['@@transducer/step'](acc, list[idx]);

    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }

    idx += 1;
  }

  return xf['@@transducer/result'](acc);
}

function _iterableReduce(xf, acc, iter) {
  var step = iter.next();

  while (!step.done) {
    acc = xf['@@transducer/step'](acc, step.value);

    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }

    step = iter.next();
  }

  return xf['@@transducer/result'](acc);
}

function _methodReduce(xf, acc, obj, methodName) {
  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));
}

var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

function _reduce(fn, acc, list) {
  if (typeof fn === 'function') {
    fn = _xwrap(fn);
  }

  if (_isArrayLike(list)) {
    return _arrayReduce(fn, acc, list);
  }

  if (typeof list['fantasy-land/reduce'] === 'function') {
    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
  }

  if (list[symIterator] != null) {
    return _iterableReduce(fn, acc, list[symIterator]());
  }

  if (typeof list.next === 'function') {
    return _iterableReduce(fn, acc, list);
  }

  if (typeof list.reduce === 'function') {
    return _methodReduce(fn, acc, list, 'reduce');
  }

  throw new TypeError('reduce: list must be array or iterable');
}

module.exports = _reduce;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_toISOString.js":
/*!*********************************************************!*\
  !*** ./node_modules/ramda/src/internal/_toISOString.js ***!
  \*********************************************************/
/***/ (function(module) {

/**
 * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
 */
var pad = function pad(n) {
  return (n < 10 ? '0' : '') + n;
};

var _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {
  return d.toISOString();
} : function _toISOString(d) {
  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
};

module.exports = _toISOString;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_toString.js":
/*!******************************************************!*\
  !*** ./node_modules/ramda/src/internal/_toString.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _includes =
/*#__PURE__*/
__webpack_require__(/*! ./_includes.js */ "./node_modules/ramda/src/internal/_includes.js");

var _map =
/*#__PURE__*/
__webpack_require__(/*! ./_map.js */ "./node_modules/ramda/src/internal/_map.js");

var _quote =
/*#__PURE__*/
__webpack_require__(/*! ./_quote.js */ "./node_modules/ramda/src/internal/_quote.js");

var _toISOString =
/*#__PURE__*/
__webpack_require__(/*! ./_toISOString.js */ "./node_modules/ramda/src/internal/_toISOString.js");

var keys =
/*#__PURE__*/
__webpack_require__(/*! ../keys.js */ "./node_modules/ramda/src/keys.js");

var reject =
/*#__PURE__*/
__webpack_require__(/*! ../reject.js */ "./node_modules/ramda/src/reject.js");

function _toString(x, seen) {
  var recur = function recur(y) {
    var xs = seen.concat([x]);
    return _includes(y, xs) ? '<Circular>' : _toString(y, xs);
  }; //  mapPairs :: (Object, [String]) -> [String]


  var mapPairs = function (obj, keys) {
    return _map(function (k) {
      return _quote(k) + ': ' + recur(obj[k]);
    }, keys.slice().sort());
  };

  switch (Object.prototype.toString.call(x)) {
    case '[object Arguments]':
      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';

    case '[object Array]':
      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {
        return /^\d+$/.test(k);
      }, keys(x)))).join(', ') + ']';

    case '[object Boolean]':
      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();

    case '[object Date]':
      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';

    case '[object Null]':
      return 'null';

    case '[object Number]':
      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);

    case '[object String]':
      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);

    case '[object Undefined]':
      return 'undefined';

    default:
      if (typeof x.toString === 'function') {
        var repr = x.toString();

        if (repr !== '[object Object]') {
          return repr;
        }
      }

      return '{' + mapPairs(x, keys(x)).join(', ') + '}';
  }
}

module.exports = _toString;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_xfBase.js":
/*!****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_xfBase.js ***!
  \****************************************************/
/***/ (function(module) {

module.exports = {
  init: function () {
    return this.xf['@@transducer/init']();
  },
  result: function (result) {
    return this.xf['@@transducer/result'](result);
  }
};

/***/ }),

/***/ "./node_modules/ramda/src/internal/_xfilter.js":
/*!*****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_xfilter.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _xfBase =
/*#__PURE__*/
__webpack_require__(/*! ./_xfBase.js */ "./node_modules/ramda/src/internal/_xfBase.js");

var XFilter =
/*#__PURE__*/
function () {
  function XFilter(f, xf) {
    this.xf = xf;
    this.f = f;
  }

  XFilter.prototype['@@transducer/init'] = _xfBase.init;
  XFilter.prototype['@@transducer/result'] = _xfBase.result;

  XFilter.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
  };

  return XFilter;
}();

var _xfilter =
/*#__PURE__*/
_curry2(function _xfilter(f, xf) {
  return new XFilter(f, xf);
});

module.exports = _xfilter;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_xmap.js":
/*!**************************************************!*\
  !*** ./node_modules/ramda/src/internal/_xmap.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _xfBase =
/*#__PURE__*/
__webpack_require__(/*! ./_xfBase.js */ "./node_modules/ramda/src/internal/_xfBase.js");

var XMap =
/*#__PURE__*/
function () {
  function XMap(f, xf) {
    this.xf = xf;
    this.f = f;
  }

  XMap.prototype['@@transducer/init'] = _xfBase.init;
  XMap.prototype['@@transducer/result'] = _xfBase.result;

  XMap.prototype['@@transducer/step'] = function (result, input) {
    return this.xf['@@transducer/step'](result, this.f(input));
  };

  return XMap;
}();

var _xmap =
/*#__PURE__*/
_curry2(function _xmap(f, xf) {
  return new XMap(f, xf);
});

module.exports = _xmap;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_xuniqBy.js":
/*!*****************************************************!*\
  !*** ./node_modules/ramda/src/internal/_xuniqBy.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _Set =
/*#__PURE__*/
__webpack_require__(/*! ./_Set.js */ "./node_modules/ramda/src/internal/_Set.js");

var _xfBase =
/*#__PURE__*/
__webpack_require__(/*! ./_xfBase.js */ "./node_modules/ramda/src/internal/_xfBase.js");

var XUniqBy =
/*#__PURE__*/
function () {
  function XUniqBy(f, xf) {
    this.xf = xf;
    this.f = f;
    this.set = new _Set();
  }

  XUniqBy.prototype['@@transducer/init'] = _xfBase.init;
  XUniqBy.prototype['@@transducer/result'] = _xfBase.result;

  XUniqBy.prototype['@@transducer/step'] = function (result, input) {
    return this.set.add(this.f(input)) ? this.xf['@@transducer/step'](result, input) : result;
  };

  return XUniqBy;
}();

var _xuniqBy =
/*#__PURE__*/
_curry2(function _xuniqBy(f, xf) {
  return new XUniqBy(f, xf);
});

module.exports = _xuniqBy;

/***/ }),

/***/ "./node_modules/ramda/src/internal/_xwrap.js":
/*!***************************************************!*\
  !*** ./node_modules/ramda/src/internal/_xwrap.js ***!
  \***************************************************/
/***/ (function(module) {

var XWrap =
/*#__PURE__*/
function () {
  function XWrap(fn) {
    this.f = fn;
  }

  XWrap.prototype['@@transducer/init'] = function () {
    throw new Error('init not implemented on XWrap');
  };

  XWrap.prototype['@@transducer/result'] = function (acc) {
    return acc;
  };

  XWrap.prototype['@@transducer/step'] = function (acc, x) {
    return this.f(acc, x);
  };

  return XWrap;
}();

function _xwrap(fn) {
  return new XWrap(fn);
}

module.exports = _xwrap;

/***/ }),

/***/ "./node_modules/ramda/src/intersection.js":
/*!************************************************!*\
  !*** ./node_modules/ramda/src/intersection.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _includes =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_includes.js */ "./node_modules/ramda/src/internal/_includes.js");

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _filter =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_filter.js */ "./node_modules/ramda/src/internal/_filter.js");

var flip =
/*#__PURE__*/
__webpack_require__(/*! ./flip.js */ "./node_modules/ramda/src/flip.js");

var uniq =
/*#__PURE__*/
__webpack_require__(/*! ./uniq.js */ "./node_modules/ramda/src/uniq.js");
/**
 * Combines two lists into a set (i.e. no duplicates) composed of those
 * elements common to both lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The list of elements found in both `list1` and `list2`.
 * @see R.innerJoin
 * @example
 *
 *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
 */


var intersection =
/*#__PURE__*/
_curry2(function intersection(list1, list2) {
  var lookupList, filteredList;

  if (list1.length > list2.length) {
    lookupList = list1;
    filteredList = list2;
  } else {
    lookupList = list2;
    filteredList = list1;
  }

  return uniq(_filter(flip(_includes)(lookupList), filteredList));
});

module.exports = intersection;

/***/ }),

/***/ "./node_modules/ramda/src/is.js":
/*!**************************************!*\
  !*** ./node_modules/ramda/src/is.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");
/**
 * See if an object (i.e. `val`) is an instance of the supplied constructor. This
 * function will check up the inheritance chain, if any.
 * If `val` was created using `Object.create`, `R.is(Object, val) === true`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Type
 * @sig (* -> {*}) -> a -> Boolean
 * @param {Object} ctor A constructor
 * @param {*} val The value to test
 * @return {Boolean}
 * @example
 *
 *      R.is(Object, {}); //=> true
 *      R.is(Number, 1); //=> true
 *      R.is(Object, 1); //=> false
 *      R.is(String, 's'); //=> true
 *      R.is(String, new String('')); //=> true
 *      R.is(Object, new String('')); //=> true
 *      R.is(Object, 's'); //=> false
 *      R.is(Number, {}); //=> false
 */


var is =
/*#__PURE__*/
_curry2(function is(Ctor, val) {
  return val instanceof Ctor || val != null && (val.constructor === Ctor || Ctor.name === 'Object' && typeof val === 'object');
});

module.exports = is;

/***/ }),

/***/ "./node_modules/ramda/src/keys.js":
/*!****************************************!*\
  !*** ./node_modules/ramda/src/keys.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var _has =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_has.js */ "./node_modules/ramda/src/internal/_has.js");

var _isArguments =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_isArguments.js */ "./node_modules/ramda/src/internal/_isArguments.js"); // cover IE < 9 keys issues


var hasEnumBug = !
/*#__PURE__*/
{
  toString: null
}.propertyIsEnumerable('toString');
var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug

var hasArgsEnumBug =
/*#__PURE__*/
function () {
  'use strict';

  return arguments.propertyIsEnumerable('length');
}();

var contains = function contains(list, item) {
  var idx = 0;

  while (idx < list.length) {
    if (list[idx] === item) {
      return true;
    }

    idx += 1;
  }

  return false;
};
/**
 * Returns a list containing the names of all the enumerable own properties of
 * the supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own properties.
 * @see R.keysIn, R.values, R.toPairs
 * @example
 *
 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
 */


var keys = typeof Object.keys === 'function' && !hasArgsEnumBug ?
/*#__PURE__*/
_curry1(function keys(obj) {
  return Object(obj) !== obj ? [] : Object.keys(obj);
}) :
/*#__PURE__*/
_curry1(function keys(obj) {
  if (Object(obj) !== obj) {
    return [];
  }

  var prop, nIdx;
  var ks = [];

  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);

  for (prop in obj) {
    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
      ks[ks.length] = prop;
    }
  }

  if (hasEnumBug) {
    nIdx = nonEnumerableProps.length - 1;

    while (nIdx >= 0) {
      prop = nonEnumerableProps[nIdx];

      if (_has(prop, obj) && !contains(ks, prop)) {
        ks[ks.length] = prop;
      }

      nIdx -= 1;
    }
  }

  return ks;
});
module.exports = keys;

/***/ }),

/***/ "./node_modules/ramda/src/last.js":
/*!****************************************!*\
  !*** ./node_modules/ramda/src/last.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var nth =
/*#__PURE__*/
__webpack_require__(/*! ./nth.js */ "./node_modules/ramda/src/nth.js");
/**
 * Returns the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.init, R.head, R.tail
 * @example
 *
 *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
 *      R.last([]); //=> undefined
 *
 *      R.last('abc'); //=> 'c'
 *      R.last(''); //=> ''
 */


var last =
/*#__PURE__*/
nth(-1);
module.exports = last;

/***/ }),

/***/ "./node_modules/ramda/src/lift.js":
/*!****************************************!*\
  !*** ./node_modules/ramda/src/lift.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var liftN =
/*#__PURE__*/
__webpack_require__(/*! ./liftN.js */ "./node_modules/ramda/src/liftN.js");
/**
 * "lifts" a function of arity >= 1 so that it may "map over" a list, Function or other
 * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.liftN
 * @example
 *
 *      const madd3 = R.lift((a, b, c) => a + b + c);
 *
 *      madd3([100, 200], [30, 40], [5, 6, 7]); //=> [135, 136, 137, 145, 146, 147, 235, 236, 237, 245, 246, 247]
 *
 *      const madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);
 *
 *      madd5([10, 20], [1], [2, 3], [4], [100, 200]); //=> [117, 217, 118, 218, 127, 227, 128, 228]
 */


var lift =
/*#__PURE__*/
_curry1(function lift(fn) {
  return liftN(fn.length, fn);
});

module.exports = lift;

/***/ }),

/***/ "./node_modules/ramda/src/liftN.js":
/*!*****************************************!*\
  !*** ./node_modules/ramda/src/liftN.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _reduce =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_reduce.js */ "./node_modules/ramda/src/internal/_reduce.js");

var ap =
/*#__PURE__*/
__webpack_require__(/*! ./ap.js */ "./node_modules/ramda/src/ap.js");

var curryN =
/*#__PURE__*/
__webpack_require__(/*! ./curryN.js */ "./node_modules/ramda/src/curryN.js");

var map =
/*#__PURE__*/
__webpack_require__(/*! ./map.js */ "./node_modules/ramda/src/map.js");
/**
 * "lifts" a function to be the specified arity, so that it may "map over" that
 * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig Number -> (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.lift, R.ap
 * @example
 *
 *      const madd3 = R.liftN(3, (...args) => R.sum(args));
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 */


var liftN =
/*#__PURE__*/
_curry2(function liftN(arity, fn) {
  var lifted = curryN(arity, fn);
  return curryN(arity, function () {
    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
  });
});

module.exports = liftN;

/***/ }),

/***/ "./node_modules/ramda/src/map.js":
/*!***************************************!*\
  !*** ./node_modules/ramda/src/map.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _dispatchable =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_dispatchable.js */ "./node_modules/ramda/src/internal/_dispatchable.js");

var _map =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_map.js */ "./node_modules/ramda/src/internal/_map.js");

var _reduce =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_reduce.js */ "./node_modules/ramda/src/internal/_reduce.js");

var _xmap =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_xmap.js */ "./node_modules/ramda/src/internal/_xmap.js");

var curryN =
/*#__PURE__*/
__webpack_require__(/*! ./curryN.js */ "./node_modules/ramda/src/curryN.js");

var keys =
/*#__PURE__*/
__webpack_require__(/*! ./keys.js */ "./node_modules/ramda/src/keys.js");
/**
 * Takes a function and
 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
 * applies the function to each of the functor's values, and returns
 * a functor of the same shape.
 *
 * Ramda provides suitable `map` implementations for `Array` and `Object`,
 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
 *
 * Dispatches to the `map` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * Also treats functions as functors and will compose them together.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => (a -> b) -> f a -> f b
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {Array} list The list to be iterated over.
 * @return {Array} The new list.
 * @see R.transduce, R.addIndex, R.pluck, R.project
 * @example
 *
 *      const double = x => x * 2;
 *
 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
 *
 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
 * @symb R.map(f, [a, b]) = [f(a), f(b)]
 * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
 * @symb R.map(f, functor_o) = functor_o.map(f)
 */


var map =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {
  switch (Object.prototype.toString.call(functor)) {
    case '[object Function]':
      return curryN(functor.length, function () {
        return fn.call(this, functor.apply(this, arguments));
      });

    case '[object Object]':
      return _reduce(function (acc, key) {
        acc[key] = fn(functor[key]);
        return acc;
      }, {}, keys(functor));

    default:
      return _map(fn, functor);
  }
}));

module.exports = map;

/***/ }),

/***/ "./node_modules/ramda/src/max.js":
/*!***************************************!*\
  !*** ./node_modules/ramda/src/max.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");
/**
 * Returns the larger of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.maxBy, R.min
 * @example
 *
 *      R.max(789, 123); //=> 789
 *      R.max('a', 'b'); //=> 'b'
 */


var max =
/*#__PURE__*/
_curry2(function max(a, b) {
  return b > a ? b : a;
});

module.exports = max;

/***/ }),

/***/ "./node_modules/ramda/src/mergeDeepWithKey.js":
/*!****************************************************!*\
  !*** ./node_modules/ramda/src/mergeDeepWithKey.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry3 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry3.js */ "./node_modules/ramda/src/internal/_curry3.js");

var _isObject =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_isObject.js */ "./node_modules/ramda/src/internal/_isObject.js");

var mergeWithKey =
/*#__PURE__*/
__webpack_require__(/*! ./mergeWithKey.js */ "./node_modules/ramda/src/mergeWithKey.js");
/**
 * Creates a new object with the own properties of the two provided objects.
 * If a key exists in both objects:
 * - and both associated values are also objects then the values will be
 *   recursively merged.
 * - otherwise the provided function is applied to the key and associated values
 *   using the resulting value as the new value associated with the key.
 * If a key only exists in one object, the value will be associated with the key
 * of the resulting object.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.mergeWithKey, R.mergeDeepWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeDeepWithKey(concatValues,
 *                         { a: true, c: { thing: 'foo', values: [10, 20] }},
 *                         { b: true, c: { thing: 'bar', values: [15, 35] }});
 *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}
 */


var mergeDeepWithKey =
/*#__PURE__*/
_curry3(function mergeDeepWithKey(fn, lObj, rObj) {
  return mergeWithKey(function (k, lVal, rVal) {
    if (_isObject(lVal) && _isObject(rVal)) {
      return mergeDeepWithKey(fn, lVal, rVal);
    } else {
      return fn(k, lVal, rVal);
    }
  }, lObj, rObj);
});

module.exports = mergeDeepWithKey;

/***/ }),

/***/ "./node_modules/ramda/src/mergeWithKey.js":
/*!************************************************!*\
  !*** ./node_modules/ramda/src/mergeWithKey.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry3 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry3.js */ "./node_modules/ramda/src/internal/_curry3.js");

var _has =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_has.js */ "./node_modules/ramda/src/internal/_has.js");
/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the key
 * and the values associated with the key in each object, with the result being
 * used as the value associated with the key in the returned object.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepWithKey, R.merge, R.mergeWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeWithKey(concatValues,
 *                     { a: true, thing: 'foo', values: [10, 20] },
 *                     { b: true, thing: 'bar', values: [15, 35] });
 *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
 * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }
 */


var mergeWithKey =
/*#__PURE__*/
_curry3(function mergeWithKey(fn, l, r) {
  var result = {};
  var k;

  for (k in l) {
    if (_has(k, l)) {
      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
    }
  }

  for (k in r) {
    if (_has(k, r) && !_has(k, result)) {
      result[k] = r[k];
    }
  }

  return result;
});

module.exports = mergeWithKey;

/***/ }),

/***/ "./node_modules/ramda/src/not.js":
/*!***************************************!*\
  !*** ./node_modules/ramda/src/not.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");
/**
 * A function that returns the `!` of its argument. It will return `true` when
 * passed false-y value, and `false` when passed a truth-y one.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig * -> Boolean
 * @param {*} a any value
 * @return {Boolean} the logical inverse of passed argument.
 * @see R.complement
 * @example
 *
 *      R.not(true); //=> false
 *      R.not(false); //=> true
 *      R.not(0); //=> true
 *      R.not(1); //=> false
 */


var not =
/*#__PURE__*/
_curry1(function not(a) {
  return !a;
});

module.exports = not;

/***/ }),

/***/ "./node_modules/ramda/src/nth.js":
/*!***************************************!*\
  !*** ./node_modules/ramda/src/nth.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _isString =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_isString.js */ "./node_modules/ramda/src/internal/_isString.js");
/**
 * Returns the nth element of the given list or string. If n is negative the
 * element at index length + n is returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> a | Undefined
 * @sig Number -> String -> String
 * @param {Number} offset
 * @param {*} list
 * @return {*}
 * @example
 *
 *      const list = ['foo', 'bar', 'baz', 'quux'];
 *      R.nth(1, list); //=> 'bar'
 *      R.nth(-1, list); //=> 'quux'
 *      R.nth(-99, list); //=> undefined
 *
 *      R.nth(2, 'abc'); //=> 'c'
 *      R.nth(3, 'abc'); //=> ''
 * @symb R.nth(-1, [a, b, c]) = c
 * @symb R.nth(0, [a, b, c]) = a
 * @symb R.nth(1, [a, b, c]) = b
 */


var nth =
/*#__PURE__*/
_curry2(function nth(offset, list) {
  var idx = offset < 0 ? list.length + offset : offset;
  return _isString(list) ? list.charAt(idx) : list[idx];
});

module.exports = nth;

/***/ }),

/***/ "./node_modules/ramda/src/pipe.js":
/*!****************************************!*\
  !*** ./node_modules/ramda/src/pipe.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _arity =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_arity.js */ "./node_modules/ramda/src/internal/_arity.js");

var _pipe =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_pipe.js */ "./node_modules/ramda/src/internal/_pipe.js");

var reduce =
/*#__PURE__*/
__webpack_require__(/*! ./reduce.js */ "./node_modules/ramda/src/reduce.js");

var tail =
/*#__PURE__*/
__webpack_require__(/*! ./tail.js */ "./node_modules/ramda/src/tail.js");
/**
 * Performs left-to-right function composition. The first argument may have
 * any arity; the remaining arguments must be unary.
 *
 * In some libraries this function is named `sequence`.
 *
 * **Note:** The result of pipe is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.compose
 * @example
 *
 *      const f = R.pipe(Math.pow, R.negate, R.inc);
 *
 *      f(3, 4); // -(3^4) + 1
 * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
 * @symb R.pipe(f, g, h)(a)(b) = h(g(f(a)))(b)
 */


function pipe() {
  if (arguments.length === 0) {
    throw new Error('pipe requires at least one argument');
  }

  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
}

module.exports = pipe;

/***/ }),

/***/ "./node_modules/ramda/src/pluck.js":
/*!*****************************************!*\
  !*** ./node_modules/ramda/src/pluck.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var map =
/*#__PURE__*/
__webpack_require__(/*! ./map.js */ "./node_modules/ramda/src/map.js");

var prop =
/*#__PURE__*/
__webpack_require__(/*! ./prop.js */ "./node_modules/ramda/src/prop.js");
/**
 * Returns a new list by plucking the same named property off all objects in
 * the list supplied.
 *
 * `pluck` will work on
 * any [functor](https://github.com/fantasyland/fantasy-land#functor) in
 * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => k -> f {k: v} -> f v
 * @param {Number|String} key The key name to pluck off of each object.
 * @param {Array} f The array or functor to consider.
 * @return {Array} The list of values for the given key.
 * @see R.project, R.prop, R.props
 * @example
 *
 *      var getAges = R.pluck('age');
 *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]
 *
 *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]
 *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}
 * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
 * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
 */


var pluck =
/*#__PURE__*/
_curry2(function pluck(p, list) {
  return map(prop(p), list);
});

module.exports = pluck;

/***/ }),

/***/ "./node_modules/ramda/src/prop.js":
/*!****************************************!*\
  !*** ./node_modules/ramda/src/prop.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _isInteger =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_isInteger.js */ "./node_modules/ramda/src/internal/_isInteger.js");

var nth =
/*#__PURE__*/
__webpack_require__(/*! ./nth.js */ "./node_modules/ramda/src/nth.js");
/**
 * Returns a function that when supplied an object returns the indicated
 * property of that object, if it exists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @typedefn Idx = String | Int | Symbol
 * @sig Idx -> {s: a} -> a | Undefined
 * @param {String|Number} p The property name or array index
 * @param {Object} obj The object to query
 * @return {*} The value at `obj.p`.
 * @see R.path, R.props, R.pluck, R.project, R.nth
 * @example
 *
 *      R.prop('x', {x: 100}); //=> 100
 *      R.prop('x', {}); //=> undefined
 *      R.prop(0, [100]); //=> 100
 *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4
 */


var prop =
/*#__PURE__*/
_curry2(function prop(p, obj) {
  if (obj == null) {
    return;
  }

  return _isInteger(p) ? nth(p, obj) : obj[p];
});

module.exports = prop;

/***/ }),

/***/ "./node_modules/ramda/src/reduce.js":
/*!******************************************!*\
  !*** ./node_modules/ramda/src/reduce.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry3 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry3.js */ "./node_modules/ramda/src/internal/_curry3.js");

var _reduce =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_reduce.js */ "./node_modules/ramda/src/internal/_reduce.js");
/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It may use
 * [`R.reduced`](#reduced) to shortcut the iteration.
 *
 * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
 * is *(value, acc)*.
 *
 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduce` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
 *
 * Dispatches to the `reduce` method of the third argument, if present. When
 * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
 * shortcuting, as this is not implemented by `reduce`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduced, R.addIndex, R.reduceRight
 * @example
 *
 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
 *      //          -               -10
 *      //         / \              / \
 *      //        -   4           -6   4
 *      //       / \              / \
 *      //      -   3   ==>     -3   3
 *      //     / \              / \
 *      //    -   2           -1   2
 *      //   / \              / \
 *      //  0   1            0   1
 *
 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
 */


var reduce =
/*#__PURE__*/
_curry3(_reduce);

module.exports = reduce;

/***/ }),

/***/ "./node_modules/ramda/src/reject.js":
/*!******************************************!*\
  !*** ./node_modules/ramda/src/reject.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _complement =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_complement.js */ "./node_modules/ramda/src/internal/_complement.js");

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var filter =
/*#__PURE__*/
__webpack_require__(/*! ./filter.js */ "./node_modules/ramda/src/filter.js");
/**
 * The complement of [`filter`](#filter).
 *
 * Acts as a transducer if a transformer is given in list position. Filterable
 * objects include plain objects or any object that has a filter method such
 * as `Array`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array}
 * @see R.filter, R.transduce, R.addIndex
 * @example
 *
 *      const isOdd = (n) => n % 2 !== 0;
 *
 *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */


var reject =
/*#__PURE__*/
_curry2(function reject(pred, filterable) {
  return filter(_complement(pred), filterable);
});

module.exports = reject;

/***/ }),

/***/ "./node_modules/ramda/src/reverse.js":
/*!*******************************************!*\
  !*** ./node_modules/ramda/src/reverse.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var _isString =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_isString.js */ "./node_modules/ramda/src/internal/_isString.js");
/**
 * Returns a new list or string with the elements or characters in reverse
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {Array|String} list
 * @return {Array|String}
 * @example
 *
 *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
 *      R.reverse([1, 2]);     //=> [2, 1]
 *      R.reverse([1]);        //=> [1]
 *      R.reverse([]);         //=> []
 *
 *      R.reverse('abc');      //=> 'cba'
 *      R.reverse('ab');       //=> 'ba'
 *      R.reverse('a');        //=> 'a'
 *      R.reverse('');         //=> ''
 */


var reverse =
/*#__PURE__*/
_curry1(function reverse(list) {
  return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();
});

module.exports = reverse;

/***/ }),

/***/ "./node_modules/ramda/src/slice.js":
/*!*****************************************!*\
  !*** ./node_modules/ramda/src/slice.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _checkForMethod =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_checkForMethod.js */ "./node_modules/ramda/src/internal/_checkForMethod.js");

var _curry3 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry3.js */ "./node_modules/ramda/src/internal/_curry3.js");
/**
 * Returns the elements of the given list or string (or object with a `slice`
 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
 *
 * Dispatches to the `slice` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @sig Number -> Number -> String -> String
 * @param {Number} fromIndex The start index (inclusive).
 * @param {Number} toIndex The end index (exclusive).
 * @param {*} list
 * @return {*}
 * @example
 *
 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
 */


var slice =
/*#__PURE__*/
_curry3(
/*#__PURE__*/
_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
}));

module.exports = slice;

/***/ }),

/***/ "./node_modules/ramda/src/tail.js":
/*!****************************************!*\
  !*** ./node_modules/ramda/src/tail.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _checkForMethod =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_checkForMethod.js */ "./node_modules/ramda/src/internal/_checkForMethod.js");

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var slice =
/*#__PURE__*/
__webpack_require__(/*! ./slice.js */ "./node_modules/ramda/src/slice.js");
/**
 * Returns all but the first element of the given list or string (or object
 * with a `tail` method).
 *
 * Dispatches to the `slice` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.head, R.init, R.last
 * @example
 *
 *      R.tail([1, 2, 3]);  //=> [2, 3]
 *      R.tail([1, 2]);     //=> [2]
 *      R.tail([1]);        //=> []
 *      R.tail([]);         //=> []
 *
 *      R.tail('abc');  //=> 'bc'
 *      R.tail('ab');   //=> 'b'
 *      R.tail('a');    //=> ''
 *      R.tail('');     //=> ''
 */


var tail =
/*#__PURE__*/
_curry1(
/*#__PURE__*/
_checkForMethod('tail',
/*#__PURE__*/
slice(1, Infinity)));

module.exports = tail;

/***/ }),

/***/ "./node_modules/ramda/src/toString.js":
/*!********************************************!*\
  !*** ./node_modules/ramda/src/toString.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");

var _toString =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_toString.js */ "./node_modules/ramda/src/internal/_toString.js");
/**
 * Returns the string representation of the given value. `eval`'ing the output
 * should result in a value equivalent to the input value. Many of the built-in
 * `toString` methods do not satisfy this requirement.
 *
 * If the given value is an `[object Object]` with a `toString` method other
 * than `Object.prototype.toString`, this method is invoked with no arguments
 * to produce the return value. This means user-defined constructor functions
 * can provide a suitable `toString` method. For example:
 *
 *     function Point(x, y) {
 *       this.x = x;
 *       this.y = y;
 *     }
 *
 *     Point.prototype.toString = function() {
 *       return 'new Point(' + this.x + ', ' + this.y + ')';
 *     };
 *
 *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category String
 * @sig * -> String
 * @param {*} val
 * @return {String}
 * @example
 *
 *      R.toString(42); //=> '42'
 *      R.toString('abc'); //=> '"abc"'
 *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
 *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
 *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
 */


var toString =
/*#__PURE__*/
_curry1(function toString(val) {
  return _toString(val, []);
});

module.exports = toString;

/***/ }),

/***/ "./node_modules/ramda/src/type.js":
/*!****************************************!*\
  !*** ./node_modules/ramda/src/type.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry1 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry1.js */ "./node_modules/ramda/src/internal/_curry1.js");
/**
 * Gives a single-word string description of the (native) type of a value,
 * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
 * attempt to distinguish user Object types any further, reporting them all as
 * 'Object'.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Type
 * @sig (* -> {*}) -> String
 * @param {*} val The value to test
 * @return {String}
 * @example
 *
 *      R.type({}); //=> "Object"
 *      R.type(1); //=> "Number"
 *      R.type(false); //=> "Boolean"
 *      R.type('s'); //=> "String"
 *      R.type(null); //=> "Null"
 *      R.type([]); //=> "Array"
 *      R.type(/[A-z]/); //=> "RegExp"
 *      R.type(() => {}); //=> "Function"
 *      R.type(undefined); //=> "Undefined"
 */


var type =
/*#__PURE__*/
_curry1(function type(val) {
  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
});

module.exports = type;

/***/ }),

/***/ "./node_modules/ramda/src/uniq.js":
/*!****************************************!*\
  !*** ./node_modules/ramda/src/uniq.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var identity =
/*#__PURE__*/
__webpack_require__(/*! ./identity.js */ "./node_modules/ramda/src/identity.js");

var uniqBy =
/*#__PURE__*/
__webpack_require__(/*! ./uniqBy.js */ "./node_modules/ramda/src/uniqBy.js");
/**
 * Returns a new list containing only one copy of each element in the original
 * list. [`R.equals`](#equals) is used to determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
 *      R.uniq([1, '1']);     //=> [1, '1']
 *      R.uniq([[42], [42]]); //=> [[42]]
 */


var uniq =
/*#__PURE__*/
uniqBy(identity);
module.exports = uniq;

/***/ }),

/***/ "./node_modules/ramda/src/uniqBy.js":
/*!******************************************!*\
  !*** ./node_modules/ramda/src/uniqBy.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _Set =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_Set.js */ "./node_modules/ramda/src/internal/_Set.js");

var _curry2 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry2.js */ "./node_modules/ramda/src/internal/_curry2.js");

var _dispatchable =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_dispatchable.js */ "./node_modules/ramda/src/internal/_dispatchable.js");

var _xuniqBy =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_xuniqBy.js */ "./node_modules/ramda/src/internal/_xuniqBy.js");
/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied function to
 * each list element. Prefers the first item if the supplied function produces
 * the same value on two items. [`R.equals`](#equals) is used for comparison.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> b) -> [a] -> [a]
 * @param {Function} fn A function used to produce a value to use during comparisons.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
 */


var uniqBy =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable([], _xuniqBy, function (fn, list) {
  var set = new _Set();
  var result = [];
  var idx = 0;
  var appliedItem, item;

  while (idx < list.length) {
    item = list[idx];
    appliedItem = fn(item);

    if (set.add(appliedItem)) {
      result.push(item);
    }

    idx += 1;
  }

  return result;
}));

module.exports = uniqBy;

/***/ }),

/***/ "./node_modules/ramda/src/unless.js":
/*!******************************************!*\
  !*** ./node_modules/ramda/src/unless.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _curry3 =
/*#__PURE__*/
__webpack_require__(/*! ./internal/_curry3.js */ "./node_modules/ramda/src/internal/_curry3.js");
/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is not satisfied, the function will return the result of
 * calling the `whenFalseFn` function with the same argument. If the predicate
 * is satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> b) -> a -> a | b
 * @param {Function} pred        A predicate function
 * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
 *                               to a falsy value.
 * @param {*}        x           An object to test with the `pred` function and
 *                               pass to `whenFalseFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
 * @see R.ifElse, R.when, R.cond
 * @example
 *
 *      let safeInc = R.unless(R.isNil, R.inc);
 *      safeInc(null); //=> null
 *      safeInc(1); //=> 2
 */


var unless =
/*#__PURE__*/
_curry3(function unless(pred, whenFalseFn, x) {
  return pred(x) ? x : whenFalseFn(x);
});

module.exports = unless;

/***/ }),

/***/ "./node_modules/react-dom/cjs/react-dom.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom.development.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {

          'use strict';

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
}
          var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var Scheduler = __webpack_require__(/*! scheduler */ "./node_modules/scheduler/index.js");

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var suppressWarning = false;
function setSuppressWarning(newSuppressWarning) {
  {
    suppressWarning = newSuppressWarning;
  }
} // In DEV, calls to console.warn and console.error get replaced
// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    if (!suppressWarning) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      printWarning('warn', format, args);
    }
  }
}
function error(format) {
  {
    if (!suppressWarning) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      printWarning('error', format, args);
    }
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    } // eslint-disable-next-line react-internal/safe-string-coercion


    var argsWithFormat = args.map(function (item) {
      return String(item);
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var ScopeComponent = 21;
var OffscreenComponent = 22;
var LegacyHiddenComponent = 23;
var CacheComponent = 24;
var TracingMarkerComponent = 25;

// -----------------------------------------------------------------------------

var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
// the react-reconciler package.

var enableNewReconciler = false; // Support legacy Primer support on internal FB www

var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.

var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber

var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
// React DOM Chopping Block
//
// Similar to main Chopping Block but only flags related to React DOM. These are
// grouped because we will likely batch all of them into a single major release.
// -----------------------------------------------------------------------------
// Disable support for comment nodes as React DOM containers. Already disabled
// in open source, but www codebase still relies on it. Need to remove.

var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
// and client rendering, mostly to allow JSX attributes to apply to the custom
// element's object properties instead of only HTML attributes.
// https://github.com/facebook/react/issues/11347

var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
var warnAboutStringRefs = false; // -----------------------------------------------------------------------------
// Debugging and DevTools
// -----------------------------------------------------------------------------
// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
// for an experimental timeline tool.

var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState

var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".

var allNativeEvents = new Set();
/**
 * Mapping from registration name to event name
 */


var registrationNameDependencies = {};
/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */

var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

function registerTwoPhaseEvent(registrationName, dependencies) {
  registerDirectEvent(registrationName, dependencies);
  registerDirectEvent(registrationName + 'Capture', dependencies);
}
function registerDirectEvent(registrationName, dependencies) {
  {
    if (registrationNameDependencies[registrationName]) {
      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
    }
  }

  registrationNameDependencies[registrationName] = dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }

  for (var i = 0; i < dependencies.length; i++) {
    allNativeEvents.add(dependencies[i]);
  }
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

var hasOwnProperty = Object.prototype.hasOwnProperty;

/*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */
// $FlowFixMe only called in DEV, so void return is not possible.
function typeName(value) {
  {
    // toStringTag is needed for namespaced types like Temporal.Instant
    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
    return type;
  }
} // $FlowFixMe only called in DEV, so void return is not possible.


function willCoercionThrow(value) {
  {
    try {
      testStringCoercion(value);
      return false;
    } catch (e) {
      return true;
    }
  }
}

function testStringCoercion(value) {
  // If you ended up here by following an exception call stack, here's what's
  // happened: you supplied an object or symbol value to React (as a prop, key,
  // DOM attribute, CSS property, string ref, etc.) and when React tried to
  // coerce it to a string using `'' + value`, an exception was thrown.
  //
  // The most common types that will cause this exception are `Symbol` instances
  // and Temporal objects like `Temporal.Instant`. But any object that has a
  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
  // exception. (Library authors do this to prevent users from using built-in
  // numeric operators like `+` or comparison operators like `>=` because custom
  // methods are needed to perform accurate arithmetic or comparison.)
  //
  // To fix the problem, coerce this object or symbol value to a string before
  // passing it to React. The most reliable way is usually `String(value)`.
  //
  // To find which value is throwing, check the browser or debugger console.
  // Before this exception was thrown, there should be `console.error` output
  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
  // problem and how that type was used: key, atrribute, input value prop, etc.
  // In most cases, this console output also shows the component and its
  // ancestor components where the exception happened.
  //
  // eslint-disable-next-line react-internal/safe-string-coercion
  return '' + value;
}

function checkAttributeStringCoercion(value, attributeName) {
  {
    if (willCoercionThrow(value)) {
      error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', attributeName, typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkKeyStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkPropStringCoercion(value, propName) {
  {
    if (willCoercionThrow(value)) {
      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkCSSPropertyStringCoercion(value, propName) {
  {
    if (willCoercionThrow(value)) {
      error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkHtmlStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkFormFieldValueStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('Form field values (value, checked, defaultValue, or defaultChecked props)' + ' must be strings, not %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0; // A simple string attribute.
// Attributes that aren't in the filter are presumed to have this type.

var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.

var BOOLEANISH_STRING = 2; // A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.

var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.

var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.

var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.

var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */

var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }

  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }

  illegalAttributeNameCache[attributeName] = true;

  {
    error('Invalid attribute name: `%s`', attributeName);
  }

  return false;
}
function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }

  return false;
}
function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }

  switch (typeof value) {
    case 'function': // $FlowIssue symbol is perfectly valid here

    case 'symbol':
      // eslint-disable-line
      return true;

    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }

        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }

    default:
      return false;
  }
}
function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }

  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }

  if (isCustomComponentTag) {

    return false;
  }

  if (propertyInfo !== null) {

    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;

      case OVERLOADED_BOOLEAN:
        return value === false;

      case NUMERIC:
        return isNaN(value);

      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }

  return false;
}
function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
  this.sanitizeURL = sanitizeURL;
  this.removeEmptyString = removeEmptyString;
} // When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.


var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

reservedProps.forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.

[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).

['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.

['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML boolean attributes.

['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.

['checked', // Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.

['capture', 'download' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that must be positive numbers.

['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that must be numbers.

['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
});
var CAMELIZE = /[\-\:]([a-z])/g;

var capitalize = function (token) {
  return token[1].toUpperCase();
}; // This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML attribute filter.
// Some of these attributes can be hard to find. This list was created by
// scraping the MDN documentation.


['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // String SVG attributes with the xlink namespace.

['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
  false);
}); // String SVG attributes with the xml namespace.

['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
  false);
}); // These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.

['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.

var xlinkHref = 'xlinkHref';
properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
false);
['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  true, // sanitizeURL
  true);
});

// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space

/* eslint-disable max-len */

var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
var didWarn = false;

function sanitizeURL(url) {
  {
    if (!didWarn && isJavaScriptProtocol.test(url)) {
      didWarn = true;

      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
    }
  }
}

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      return node[propertyName];
    } else {
      // This check protects multiple uses of `expected`, which is why the
      // react-internal/safe-string-coercion rule is disabled in several spots
      // below.
      {
        checkAttributeStringCoercion(expected, name);
      }

      if ( propertyInfo.sanitizeURL) {
        // If we haven't fully disabled javascript: URLs, and if
        // the hydration is successful of a javascript: URL, we
        // still want to warn on the client.
        // eslint-disable-next-line react-internal/safe-string-coercion
        sanitizeURL('' + expected);
      }

      var attributeName = propertyInfo.attributeName;
      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);

          if (value === '') {
            return true;
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          } // eslint-disable-next-line react-internal/safe-string-coercion


          if (value === '' + expected) {
            return expected;
          }

          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }

        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        } // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.


        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}
/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

function getValueForAttribute(node, name, expected, isCustomComponentTag) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }

    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }

    var value = node.getAttribute(name);

    {
      checkAttributeStringCoercion(expected, name);
    }

    if (value === '' + expected) {
      return expected;
    }

    return value;
  }
}
/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);

  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }

  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  }


  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;

      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        {
          checkAttributeStringCoercion(value, name);
        }

        node.setAttribute(_attributeName,  '' + value);
      }
    }

    return;
  }

  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;
      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }

    return;
  } // The rest are treated as attributes with special cases.


  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;
    var attributeValue;

    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      // If attribute type is boolean, we know for sure it won't be an execution sink
      // and we won't require Trusted Type here.
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      {
        {
          checkAttributeStringCoercion(value, attributeName);
        }

        attributeValue = '' + value;
      }

      if (propertyInfo.sanitizeURL) {
        sanitizeURL(attributeValue.toString());
      }
    }

    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types.
var REACT_ELEMENT_TYPE = Symbol.for('react.element');
var REACT_PORTAL_TYPE = Symbol.for('react.portal');
var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
var REACT_CONTEXT_TYPE = Symbol.for('react.context');
var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
var REACT_MEMO_TYPE = Symbol.for('react.memo');
var REACT_LAZY_TYPE = Symbol.for('react.lazy');
var REACT_SCOPE_TYPE = Symbol.for('react.scope');
var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
var REACT_CACHE_TYPE = Symbol.for('react.cache');
var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var assign = Object.assign;

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: assign({}, props, {
          value: prevLog
        }),
        info: assign({}, props, {
          value: prevInfo
        }),
        warn: assign({}, props, {
          value: prevWarn
        }),
        error: assign({}, props, {
          value: prevError
        }),
        group: assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if ( !fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                // but we have a user-provided "displayName"
                // splice it in to make the stack more readable.


                if (fn.displayName && _frame.includes('<anonymous>')) {
                  _frame = _frame.replace('<anonymous>', fn.displayName);
                }

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}

function describeClassComponentFrame(ctor, source, ownerFn) {
  {
    return describeNativeComponentFrame(ctor, true);
  }
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

function describeFiber(fiber) {
  var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;
  var source =  fiber._debugSource ;

  switch (fiber.tag) {
    case HostComponent:
      return describeBuiltInComponentFrame(fiber.type);

    case LazyComponent:
      return describeBuiltInComponentFrame('Lazy');

    case SuspenseComponent:
      return describeBuiltInComponentFrame('Suspense');

    case SuspenseListComponent:
      return describeBuiltInComponentFrame('SuspenseList');

    case FunctionComponent:
    case IndeterminateComponent:
    case SimpleMemoComponent:
      return describeFunctionComponentFrame(fiber.type);

    case ForwardRef:
      return describeFunctionComponentFrame(fiber.type.render);

    case ClassComponent:
      return describeClassComponentFrame(fiber.type);

    default:
      return '';
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  try {
    var info = '';
    var node = workInProgress;

    do {
      info += describeFiber(node);
      node = node.return;
    } while (node);

    return info;
  } catch (x) {
    return '\nError generating stack: ' + x.message + '\n' + x.stack;
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var displayName = outerType.displayName;

  if (displayName) {
    return displayName;
  }

  var functionName = innerType.displayName || innerType.name || '';
  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
} // Keep in sync with react-reconciler/getComponentNameFromFiber


function getContextName(type) {
  return type.displayName || 'Context';
} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


function getComponentNameFromType(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';

  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        var outerName = type.displayName || null;

        if (outerName !== null) {
          return outerName;
        }

        return getComponentNameFromType(type.type) || 'Memo';

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentNameFromType(init(payload));
          } catch (x) {
            return null;
          }
        }

      // eslint-disable-next-line no-fallthrough
    }
  }

  return null;
}

function getWrappedName$1(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
} // Keep in sync with shared/getComponentNameFromType


function getContextName$1(type) {
  return type.displayName || 'Context';
}

function getComponentNameFromFiber(fiber) {
  var tag = fiber.tag,
      type = fiber.type;

  switch (tag) {
    case CacheComponent:
      return 'Cache';

    case ContextConsumer:
      var context = type;
      return getContextName$1(context) + '.Consumer';

    case ContextProvider:
      var provider = type;
      return getContextName$1(provider._context) + '.Provider';

    case DehydratedFragment:
      return 'DehydratedFragment';

    case ForwardRef:
      return getWrappedName$1(type, type.render, 'ForwardRef');

    case Fragment:
      return 'Fragment';

    case HostComponent:
      // Host component type is the display name (e.g. "div", "View")
      return type;

    case HostPortal:
      return 'Portal';

    case HostRoot:
      return 'Root';

    case HostText:
      return 'Text';

    case LazyComponent:
      // Name comes from the type in this case; we don't have a tag.
      return getComponentNameFromType(type);

    case Mode:
      if (type === REACT_STRICT_MODE_TYPE) {
        // Don't be less specific than shared/getComponentNameFromType
        return 'StrictMode';
      }

      return 'Mode';

    case OffscreenComponent:
      return 'Offscreen';

    case Profiler:
      return 'Profiler';

    case ScopeComponent:
      return 'Scope';

    case SuspenseComponent:
      return 'Suspense';

    case SuspenseListComponent:
      return 'SuspenseList';

    case TracingMarkerComponent:
      return 'TracingMarker';
    // The display name for this tags come from the user-provided type:

    case ClassComponent:
    case FunctionComponent:
    case IncompleteClassComponent:
    case IndeterminateComponent:
    case MemoComponent:
    case SimpleMemoComponent:
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      break;

  }

  return null;
}

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
var current = null;
var isRendering = false;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentNameFromFiber(owner);
    }
  }

  return null;
}

function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }
}

function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    isRendering = false;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
    current = fiber;
    isRendering = false;
  }
}
function getCurrentFiber() {
  {
    return current;
  }
}
function setIsRendering(rendering) {
  {
    isRendering = rendering;
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  // The coercion safety check is performed in getToStringValue().
  // eslint-disable-next-line react-internal/safe-string-coercion
  return '' + value;
}
function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'string':
    case 'undefined':
      return value;

    case 'object':
      {
        checkFormFieldValueStringCoercion(value);
      }

      return value;

    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};
function checkControlledValueProps(tagName, props) {
  {
    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }

    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  }
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';

  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

  {
    checkFormFieldValueStringCoercion(node[valueField]);
  }

  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)

  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  var get = descriptor.get,
      set = descriptor.set;
  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      {
        checkFormFieldValueStringCoercion(value);
      }

      currentValue = '' + value;
      set.call(this, value);
    }
  }); // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });
  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      {
        checkFormFieldValueStringCoercion(value);
      }

      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  } // TODO: Once it's just Fiber we can move this to node._wrapperState


  node._valueTracker = trackValueOnNode(node);
}
function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
  // that trying again will succeed

  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);

  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }

  return false;
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}
/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */


function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;
  var hostProps = assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });
  return hostProps;
}
function initWrapperState(element, props) {
  {
    checkControlledValueProps('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnCheckedDefaultChecked = true;
    }

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}
function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;

  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}
function updateWrapper(element, props) {
  var node = element;

  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

      didWarnUncontrolledToControlled = true;
    }

    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);
  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}
function postMountWrapper(element, props, isHydrating) {
  var node = element; // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872

    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (!isHydrating) {
      {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (initialValue !== node.value) {
          node.value = initialValue;
        }
      }
    }

    {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = initialValue;
    }
  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.


  var name = node.name;

  if (name !== '') {
    node.name = '';
  }

  {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}
function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;

  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    } // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.


    {
      checkAttributeStringCoercion(name, 'name');
    }

    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];

      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      } // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.


      var otherProps = getFiberCurrentPropsFromNode(otherNode);

      if (!otherProps) {
        throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');
      } // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set


      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.

      updateWrapper(otherNode, otherProps);
    }
  }
} // In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253


function setDefaultValue(node, type, value) {
  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;
var didWarnInvalidInnerHTML = false;
/**
 * Implements an <option> host component that warns when `selected` is set.
 */

function validateProps(element, props) {
  {
    // If a value is not provided, then the children must be simple.
    if (props.value == null) {
      if (typeof props.children === 'object' && props.children !== null) {
        React.Children.forEach(props.children, function (child) {
          if (child == null) {
            return;
          }

          if (typeof child === 'string' || typeof child === 'number') {
            return;
          }

          if (!didWarnInvalidChild) {
            didWarnInvalidChild = true;

            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');
          }
        });
      } else if (props.dangerouslySetInnerHTML != null) {
        if (!didWarnInvalidInnerHTML) {
          didWarnInvalidInnerHTML = true;

          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');
        }
      }
    } // TODO: Remove support for `selected` in <option>.


    if (props.selected != null && !didWarnSelectedSetOnOption) {
      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

      didWarnSelectedSetOnOption = true;
    }
  }
}
function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}

var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

function isArray(a) {
  return isArrayImpl(a);
}

var didWarnValueDefaultValue$1;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }

  return '';
}

var valuePropNames = ['value', 'defaultValue'];
/**
 * Validation function for `value` and `defaultValue`.
 */

function checkSelectPropTypes(props) {
  {
    checkControlledValueProps('select', props);

    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];

      if (props[propName] == null) {
        continue;
      }

      var propNameIsArray = isArray(props[propName]);

      if (props.multiple && !propNameIsArray) {
        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
      } else if (!props.multiple && propNameIsArray) {
        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
      }
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};

    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }

    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }

      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));

    var defaultSelected = null;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;

        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }

        return;
      }

      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }

    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}
/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */


function getHostProps$1(element, props) {
  return assign({}, props, {
    value: undefined
  });
}
function initWrapperState$1(element, props) {
  var node = element;

  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

      didWarnValueDefaultValue$1 = true;
    }
  }
}
function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}
function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}
function restoreControlledState$1(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
function getHostProps$2(element, props) {
  var node = element;

  if (props.dangerouslySetInnerHTML != null) {
    throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
  } // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.


  var hostProps = assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}
function initWrapperState$2(element, props) {
  var node = element;

  {
    checkControlledValueProps('textarea', props);

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value; // Only bother fetching default value if we're going to use it

  if (initialValue == null) {
    var children = props.children,
        defaultValue = props.defaultValue;

    if (children != null) {
      {
        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }

      {
        if (defaultValue != null) {
          throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
        }

        if (isArray(children)) {
          if (children.length > 1) {
            throw new Error('<textarea> can only have at most one child.');
          }

          children = children[0];
        }

        defaultValue = children;
      }
    }

    if (defaultValue == null) {
      defaultValue = '';
    }

    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}
function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);

  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

    if (newValue !== node.value) {
      node.value = newValue;
    }

    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }

  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}
function postMountWrapper$3(element, props) {
  var node = element; // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.

  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

  if (textContent === node._wrapperState.initialValue) {
    if (textContent !== '' && textContent !== null) {
      node.value = textContent;
    }
  }
}
function restoreControlledState$2(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.

function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;

    case 'math':
      return MATH_NAMESPACE;

    default:
      return HTML_NAMESPACE;
  }
}
function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }

  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE;
  } // By default, pass namespace below.


  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

var reusableSVGContainer;
/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */

var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  if (node.namespaceURI === SVG_NAMESPACE) {

    if (!('innerHTML' in node)) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;

      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }

      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }

      return;
    }
  }

  node.innerHTML = html;
});

/**
 * HTML nodeType values that represent the type of the node
 */
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */

var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }

  node.textContent = text;
};

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */


var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.

Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901
  var isEmpty = value == null || typeof value === 'boolean' || value === '';

  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  {
    checkCSSPropertyStringCoercion(value, name);
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */

function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

  var badStyleValueWithSemicolonPattern = /;\s*$/;
  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;

    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;

    error('`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;

    error('`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var styleValue = styles[styleName];

      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
        delimiter = ';';
      }
    }

    return serialized || null;
  }
}
/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

function setValueForStyles(node, styles) {
  var style = node.style;

  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }

    var isCustomProperty = styleName.indexOf('--') === 0;

    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }

    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

    if (styleName === 'float') {
      styleName = 'cssFloat';
    }

    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}
/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */


function expandShorthandMap(styles) {
  var expanded = {};

  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];

    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }

  return expanded;
}
/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */


function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  {
    if (!nextStyles) {
      return;
    }

    var expandedUpdates = expandShorthandMap(styleUpdates);
    var expandedStyles = expandShorthandMap(nextStyles);
    var warnedAbout = {};

    for (var key in expandedUpdates) {
      var originalKey = expandedUpdates[key];
      var correctOriginalKey = expandedStyles[key];

      if (correctOriginalKey && originalKey !== correctOriginalKey) {
        var warningKey = originalKey + ',' + correctOriginalKey;

        if (warnedAbout[warningKey]) {
          continue;
        }

        warnedAbout[warningKey] = true;

        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
      }
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a list for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = assign({
  menuitem: true
}, omittedCloseTags);

var HTML = '__html';

function assertValidProps(tag, props) {
  if (!props) {
    return;
  } // Note the use of `==` which checks for null or undefined.


  if (voidElementTags[tag]) {
    if (props.children != null || props.dangerouslySetInnerHTML != null) {
      throw new Error(tag + " is a void element tag and must neither have `children` nor " + 'use `dangerouslySetInnerHTML`.');
    }
  }

  if (props.dangerouslySetInnerHTML != null) {
    if (props.children != null) {
      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
    }

    if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) {
      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');
    }
  }

  {
    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
    }
  }

  if (props.style != null && typeof props.style !== 'object') {
    throw new Error('The `style` prop expects a mapping from style properties to values, ' + "not a string. For example, style={{marginRight: spacing + 'em'}} when " + 'using JSX.');
  }
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }

  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this list too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;

    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG allowed attribute list, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  disablepictureinpicture: 'disablePictureInPicture',
  disableremoteplayback: 'disableRemotePlayback',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  enterkeyhint: 'enterKeyHint',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  imagesizes: 'imageSizes',
  imagesrcset: 'imageSrcSet',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0,
  // state
  'aria-description': 0,
  'aria-details': 0,
  'aria-disabled': 0,
  // state
  'aria-hidden': 0,
  // state
  'aria-invalid': 0,
  // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name) {
  {
    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
      return true;
    }

    if (rARIACamel.test(name)) {
      var ariaName = 'aria-' + name.slice(4).toLowerCase();
      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (correctName == null) {
        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

        warnedProperties[name] = true;
        return true;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== correctName) {
        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

        warnedProperties[name] = true;
        return true;
      }
    }

    if (rARIA.test(name)) {
      var lowerCasedName = name.toLowerCase();
      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (standardName == null) {
        warnedProperties[name] = true;
        return false;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== standardName) {
        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties[name] = true;
        return true;
      }
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  {
    var invalidProps = [];

    for (var key in props) {
      var isValid = validateProperty(type, key);

      if (!isValid) {
        invalidProps.push(key);
      }
    }

    var unknownPropString = invalidProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (invalidProps.length === 1) {
      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
    } else if (invalidProps.length > 1) {
      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
    }
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;
function validateProperties$1(type, props) {
  {
    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
      return;
    }

    if (props != null && props.value === null && !didWarnValueNull) {
      didWarnValueNull = true;

      if (type === 'select' && props.multiple) {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
      } else {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
      }
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, eventRegistry) {
    if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

      warnedProperties$1[name] = true;
      return true;
    } // We can't rely on the event system being injected on the server.


    if (eventRegistry != null) {
      var registrationNameDependencies = eventRegistry.registrationNameDependencies,
          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

      if (registrationNameDependencies.hasOwnProperty(name)) {
        return true;
      }

      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

      if (registrationName != null) {
        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

        warnedProperties$1[name] = true;
        return true;
      }

      if (EVENT_NAME_REGEX.test(name)) {
        error('Unknown event handler property `%s`. It will be ignored.', name);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Let the ARIA attribute hook validate ARIA attributes


    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];

      if (standardName !== name) {
        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Now that we've validated casing, do not validate
    // data types for reserved props


    if (isReserved) {
      return true;
    } // Warn when a known attribute is a bad type


    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    } // Warn when passing the strings 'false' or 'true' into a boolean prop


    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, eventRegistry) {
  {
    var unknownProps = [];

    for (var key in props) {
      var isValid = validateProperty$1(type, key, props[key], eventRegistry);

      if (!isValid) {
        unknownProps.push(key);
      }
    }

    var unknownPropString = unknownProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (unknownProps.length === 1) {
      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
    } else if (unknownProps.length > 1) {
      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
    }
  }
};

function validateProperties$2(type, props, eventRegistry) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnUnknownProperties(type, props, eventRegistry);
}

var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
var IS_NON_DELEGATED = 1 << 1;
var IS_CAPTURE_PHASE = 1 << 2;
// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
// we call willDeferLaterForLegacyFBSupport, thus not bailing out
// will result in endless cycles like an infinite loop.
// We also don't want to defer during event replaying.

var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

// This exists to avoid circular dependency between ReactDOMEventReplaying
// and DOMPluginEventSystem.
var currentReplayingEvent = null;
function setReplayingEvent(event) {
  {
    if (currentReplayingEvent !== null) {
      error('Expected currently replaying event to be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
    }
  }

  currentReplayingEvent = event;
}
function resetReplayingEvent() {
  {
    if (currentReplayingEvent === null) {
      error('Expected currently replaying event to not be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
    }
  }

  currentReplayingEvent = null;
}
function isReplayingEvent(event) {
  return event === currentReplayingEvent;
}

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html


  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);

  if (!internalInstance) {
    // Unmounted
    return;
  }

  if (typeof restoreImpl !== 'function') {
    throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');
  }

  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

  if (stateNode) {
    var _props = getFiberCurrentPropsFromNode(stateNode);

    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
  }
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}
function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}
function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}
function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }

  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;
  restoreStateOfTarget(target);

  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults

var batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var flushSyncImpl = function () {};

var isInsideEventHandler = false;

function finishEventHandler() {
  // Here we wait until all updates have propagated, which is important
  // when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  // Then we restore state of any controlled component.
  var controlledComponentsHavePendingUpdates = needsStateRestore();

  if (controlledComponentsHavePendingUpdates) {
    // If a controlled event was fired, we may need to restore the state of
    // the DOM node back to the controlled value. This is necessary when React
    // bails out of the update without touching the DOM.
    // TODO: Restore state in the microtask, after the discrete updates flush,
    // instead of early flushing them here.
    flushSyncImpl();
    restoreStateIfNeeded();
  }
}

function batchedUpdates(fn, a, b) {
  if (isInsideEventHandler) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(a, b);
  }

  isInsideEventHandler = true;

  try {
    return batchedUpdatesImpl(fn, a, b);
  } finally {
    isInsideEventHandler = false;
    finishEventHandler();
  }
} // TODO: Replace with flushSync
function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
  batchedUpdatesImpl = _batchedUpdatesImpl;
  flushSyncImpl = _flushSyncImpl;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
    case 'onMouseEnter':
      return !!(props.disabled && isInteractive(type));

    default:
      return false;
  }
}
/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */


function getListener(inst, registrationName) {
  var stateNode = inst.stateNode;

  if (stateNode === null) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }

  var props = getFiberCurrentPropsFromNode(stateNode);

  if (props === null) {
    // Work in progress.
    return null;
  }

  var listener = props[registrationName];

  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }

  if (listener && typeof listener !== 'function') {
    throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
  }

  return listener;
}

var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

if (canUseDOM) {
  try {
    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

    Object.defineProperty(options, 'passive', {
      get: function () {
        passiveBrowserEventsSupported = true;
      }
    });
    window.addEventListener('test', options, options);
    window.removeEventListener('test', options, options);
  } catch (e) {
    passiveBrowserEventsSupported = false;
  }
}

function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
}

var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebook/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (typeof document === 'undefined' || document === null) {
        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');
      }

      var evt = document.createEvent('Event');
      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

      function restoreAfterDispatch() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }
      } // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.


      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        didCall = true;
        restoreAfterDispatch();
        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didCall && didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          // eslint-disable-next-line react-internal/prod-error-codes
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          // eslint-disable-next-line react-internal/prod-error-codes
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);

      if (!didCall) {
        // Something went really wrong, and our event was not dispatched.
        // https://github.com/facebook/react/issues/16734
        // https://github.com/facebook/react/issues/16585
        // Fall back to the production implementation.
        restoreAfterDispatch();
        return invokeGuardedCallbackProd.apply(this, arguments);
      }
    };
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var hasRethrowError = false;
var rethrowError = null;
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);

  if (hasError) {
    var error = clearCaughtError();

    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}
/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');
  }
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */
function get(key) {
  return key._reactInternals;
}
function has(key) {
  return key._reactInternals !== undefined;
}
function set(key, value) {
  key._reactInternals = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoFlags =
/*                      */
0;
var PerformedWork =
/*                */
1; // You can change the rest (and add more).

var Placement =
/*                    */
2;
var Update =
/*                       */
4;
var ChildDeletion =
/*                */
16;
var ContentReset =
/*                 */
32;
var Callback =
/*                     */
64;
var DidCapture =
/*                   */
128;
var ForceClientRender =
/*            */
256;
var Ref =
/*                          */
512;
var Snapshot =
/*                     */
1024;
var Passive =
/*                      */
2048;
var Hydrating =
/*                    */
4096;
var Visibility =
/*                   */
8192;
var StoreConsistency =
/*             */
16384;
var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)

var HostEffectMask =
/*               */
32767; // These are not really side effects, but we still reuse this field.

var Incomplete =
/*                   */
32768;
var ShouldCapture =
/*                */
65536;
var ForceUpdateForLegacySuspense =
/* */
131072;
var Forked =
/*                       */
1048576; // Static tags describe aspects of a fiber that are not specific to a render,
// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
// This enables us to defer more work in the unmount case,
// since we can defer traversing the tree during layout to look for Passive effects,
// and instead rely on the static flag as a signal that there may be cleanup work.

var RefStatic =
/*                    */
2097152;
var LayoutStatic =
/*                 */
4194304;
var PassiveStatic =
/*                */
8388608; // These flags allow us to traverse to fibers that have effects on mount
// without traversing the entire tree after every commit for
// double invoking

var MountLayoutDev =
/*               */
16777216;
var MountPassiveDev =
/*              */
33554432; // Groups of flags that are used in the commit phase to skip over trees that
// don't contain effects, by checking subtreeFlags.

var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility
// flag logic (see #20043)
Update | Snapshot | ( 0);
var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask

var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
// This allows certain concepts to persist without recalculating them,
// e.g. whether a subtree contains passive effects or portals.

var StaticMask = LayoutStatic | PassiveStatic | RefStatic;

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === SuspenseComponent) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState === null) {
      var current = fiber.alternate;

      if (current !== null) {
        suspenseState = current.memoizedState;
      }
    }

    if (suspenseState !== null) {
      return suspenseState.dehydrated;
    }
  }

  return null;
}
function getContainerFromFiber(fiber) {
  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;

      if (!instance._warnedAboutRefsInRender) {
        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');
      }

      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (getNearestMountedFiber(fiber) !== fiber) {
    throw new Error('Unable to find node on an unmounted component.');
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (nearestMounted === null) {
      throw new Error('Unable to find node on an unmounted component.');
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      throw new Error('Unable to find node on an unmounted component.');
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
        }
      }
    }

    if (a.alternate !== b) {
      throw new Error("Return fibers should always be each others' alternates. " + 'This error is likely caused by a bug in React. Please file an issue.');
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (a.tag !== HostRoot) {
    throw new Error('Unable to find node on an unmounted component.');
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
}

function findCurrentHostFiberImpl(node) {
  // Next we'll drill down this component to find the first HostComponent/Text.
  if (node.tag === HostComponent || node.tag === HostText) {
    return node;
  }

  var child = node.child;

  while (child !== null) {
    var match = findCurrentHostFiberImpl(child);

    if (match !== null) {
      return match;
    }

    child = child.sibling;
  }

  return null;
}

function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
}

function findCurrentHostFiberWithNoPortalsImpl(node) {
  // Next we'll drill down this component to find the first HostComponent/Text.
  if (node.tag === HostComponent || node.tag === HostText) {
    return node;
  }

  var child = node.child;

  while (child !== null) {
    if (child.tag !== HostPortal) {
      var match = findCurrentHostFiberWithNoPortalsImpl(child);

      if (match !== null) {
        return match;
      }
    }

    child = child.sibling;
  }

  return null;
}

// This module only exists as an ESM wrapper around the external CommonJS
var scheduleCallback = Scheduler.unstable_scheduleCallback;
var cancelCallback = Scheduler.unstable_cancelCallback;
var shouldYield = Scheduler.unstable_shouldYield;
var requestPaint = Scheduler.unstable_requestPaint;
var now = Scheduler.unstable_now;
var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
var NormalPriority = Scheduler.unstable_NormalPriority;
var LowPriority = Scheduler.unstable_LowPriority;
var IdlePriority = Scheduler.unstable_IdlePriority;
// this doesn't actually exist on the scheduler, but it *does*
// on scheduler/unstable_mock, which we'll need for internal testing
var unstable_yieldValue = Scheduler.unstable_yieldValue;
var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;

var rendererID = null;
var injectedHook = null;
var injectedProfilingHooks = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    if (enableSchedulingProfiler) {
      // Conditionally inject these hooks only if Timeline profiler is supported by this build.
      // This gives DevTools a way to feature detect that isn't tied to version number
      // (since profiling and timeline are controlled by different feature flags).
      internals = assign({}, internals, {
        getLaneLabelMap: getLaneLabelMap,
        injectProfilingHooks: injectProfilingHooks
      });
    }

    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    injectedHook = hook;
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      error('React instrumentation encountered an error: %s.', err);
    }
  }

  if (hook.checkDCE) {
    // This is the real DevTools.
    return true;
  } else {
    // This is likely a hook installed by Fast Refresh runtime.
    return false;
  }
}
function onScheduleRoot(root, children) {
  {
    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
      try {
        injectedHook.onScheduleFiberRoot(rendererID, root, children);
      } catch (err) {
        if ( !hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onCommitRoot(root, eventPriority) {
  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
    try {
      var didError = (root.current.flags & DidCapture) === DidCapture;

      if (enableProfilerTimer) {
        var schedulerPriority;

        switch (eventPriority) {
          case DiscreteEventPriority:
            schedulerPriority = ImmediatePriority;
            break;

          case ContinuousEventPriority:
            schedulerPriority = UserBlockingPriority;
            break;

          case DefaultEventPriority:
            schedulerPriority = NormalPriority;
            break;

          case IdleEventPriority:
            schedulerPriority = IdlePriority;
            break;

          default:
            schedulerPriority = NormalPriority;
            break;
        }

        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
      } else {
        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
      }
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onPostCommitRoot(root) {
  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {
    try {
      injectedHook.onPostCommitFiberRoot(rendererID, root);
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onCommitUnmount(fiber) {
  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
    try {
      injectedHook.onCommitFiberUnmount(rendererID, fiber);
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function setIsStrictModeForDevtools(newIsStrictMode) {
  {
    if (typeof unstable_yieldValue === 'function') {
      // We're in a test because Scheduler.unstable_yieldValue only exists
      // in SchedulerMock. To reduce the noise in strict mode tests,
      // suppress warnings and disable scheduler yielding during the double render
      unstable_setDisableYieldValue(newIsStrictMode);
      setSuppressWarning(newIsStrictMode);
    }

    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {
      try {
        injectedHook.setStrictMode(rendererID, newIsStrictMode);
      } catch (err) {
        {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    }
  }
} // Profiler API hooks

function injectProfilingHooks(profilingHooks) {
  injectedProfilingHooks = profilingHooks;
}

function getLaneLabelMap() {
  {
    var map = new Map();
    var lane = 1;

    for (var index = 0; index < TotalLanes; index++) {
      var label = getLabelForLane(lane);
      map.set(lane, label);
      lane *= 2;
    }

    return map;
  }
}

function markCommitStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {
      injectedProfilingHooks.markCommitStarted(lanes);
    }
  }
}
function markCommitStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {
      injectedProfilingHooks.markCommitStopped();
    }
  }
}
function markComponentRenderStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {
      injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
  }
}
function markComponentRenderStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {
      injectedProfilingHooks.markComponentRenderStopped();
    }
  }
}
function markComponentPassiveEffectMountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
    }
  }
}
function markComponentPassiveEffectMountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectMountStopped();
    }
  }
}
function markComponentPassiveEffectUnmountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
    }
  }
}
function markComponentPassiveEffectUnmountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
    }
  }
}
function markComponentLayoutEffectMountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
    }
  }
}
function markComponentLayoutEffectMountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectMountStopped();
    }
  }
}
function markComponentLayoutEffectUnmountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
  }
}
function markComponentLayoutEffectUnmountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
  }
}
function markComponentErrored(fiber, thrownValue, lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {
      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
    }
  }
}
function markComponentSuspended(fiber, wakeable, lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {
      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
    }
  }
}
function markLayoutEffectsStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {
      injectedProfilingHooks.markLayoutEffectsStarted(lanes);
    }
  }
}
function markLayoutEffectsStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {
      injectedProfilingHooks.markLayoutEffectsStopped();
    }
  }
}
function markPassiveEffectsStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {
      injectedProfilingHooks.markPassiveEffectsStarted(lanes);
    }
  }
}
function markPassiveEffectsStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {
      injectedProfilingHooks.markPassiveEffectsStopped();
    }
  }
}
function markRenderStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {
      injectedProfilingHooks.markRenderStarted(lanes);
    }
  }
}
function markRenderYielded() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {
      injectedProfilingHooks.markRenderYielded();
    }
  }
}
function markRenderStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {
      injectedProfilingHooks.markRenderStopped();
    }
  }
}
function markRenderScheduled(lane) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {
      injectedProfilingHooks.markRenderScheduled(lane);
    }
  }
}
function markForceUpdateScheduled(fiber, lane) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {
      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
    }
  }
}
function markStateUpdateScheduled(fiber, lane) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {
      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
  }
}

var NoMode =
/*                         */
0; // TODO: Remove ConcurrentMode by reading from the root tag instead

var ConcurrentMode =
/*                 */
1;
var ProfileMode =
/*                    */
2;
var StrictLegacyMode =
/*               */
8;
var StrictEffectsMode =
/*              */
16;

// TODO: This is pretty well supported by browsers. Maybe we can drop it.
var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
// Based on:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

var log = Math.log;
var LN2 = Math.LN2;

function clz32Fallback(x) {
  var asUint = x >>> 0;

  if (asUint === 0) {
    return 32;
  }

  return 31 - (log(asUint) / LN2 | 0) | 0;
}

// If those values are changed that package should be rebuilt and redeployed.

var TotalLanes = 31;
var NoLanes =
/*                        */
0;
var NoLane =
/*                          */
0;
var SyncLane =
/*                        */
1;
var InputContinuousHydrationLane =
/*    */
2;
var InputContinuousLane =
/*             */
4;
var DefaultHydrationLane =
/*            */
8;
var DefaultLane =
/*                     */
16;
var TransitionHydrationLane =
/*                */
32;
var TransitionLanes =
/*                       */
4194240;
var TransitionLane1 =
/*                        */
64;
var TransitionLane2 =
/*                        */
128;
var TransitionLane3 =
/*                        */
256;
var TransitionLane4 =
/*                        */
512;
var TransitionLane5 =
/*                        */
1024;
var TransitionLane6 =
/*                        */
2048;
var TransitionLane7 =
/*                        */
4096;
var TransitionLane8 =
/*                        */
8192;
var TransitionLane9 =
/*                        */
16384;
var TransitionLane10 =
/*                       */
32768;
var TransitionLane11 =
/*                       */
65536;
var TransitionLane12 =
/*                       */
131072;
var TransitionLane13 =
/*                       */
262144;
var TransitionLane14 =
/*                       */
524288;
var TransitionLane15 =
/*                       */
1048576;
var TransitionLane16 =
/*                       */
2097152;
var RetryLanes =
/*                            */
130023424;
var RetryLane1 =
/*                             */
4194304;
var RetryLane2 =
/*                             */
8388608;
var RetryLane3 =
/*                             */
16777216;
var RetryLane4 =
/*                             */
33554432;
var RetryLane5 =
/*                             */
67108864;
var SomeRetryLane = RetryLane1;
var SelectiveHydrationLane =
/*          */
134217728;
var NonIdleLanes =
/*                          */
268435455;
var IdleHydrationLane =
/*               */
268435456;
var IdleLane =
/*                        */
536870912;
var OffscreenLane =
/*                   */
1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
// It should be kept in sync with the Lanes values above.

function getLabelForLane(lane) {
  {
    if (lane & SyncLane) {
      return 'Sync';
    }

    if (lane & InputContinuousHydrationLane) {
      return 'InputContinuousHydration';
    }

    if (lane & InputContinuousLane) {
      return 'InputContinuous';
    }

    if (lane & DefaultHydrationLane) {
      return 'DefaultHydration';
    }

    if (lane & DefaultLane) {
      return 'Default';
    }

    if (lane & TransitionHydrationLane) {
      return 'TransitionHydration';
    }

    if (lane & TransitionLanes) {
      return 'Transition';
    }

    if (lane & RetryLanes) {
      return 'Retry';
    }

    if (lane & SelectiveHydrationLane) {
      return 'SelectiveHydration';
    }

    if (lane & IdleHydrationLane) {
      return 'IdleHydration';
    }

    if (lane & IdleLane) {
      return 'Idle';
    }

    if (lane & OffscreenLane) {
      return 'Offscreen';
    }
  }
}
var NoTimestamp = -1;
var nextTransitionLane = TransitionLane1;
var nextRetryLane = RetryLane1;

function getHighestPriorityLanes(lanes) {
  switch (getHighestPriorityLane(lanes)) {
    case SyncLane:
      return SyncLane;

    case InputContinuousHydrationLane:
      return InputContinuousHydrationLane;

    case InputContinuousLane:
      return InputContinuousLane;

    case DefaultHydrationLane:
      return DefaultHydrationLane;

    case DefaultLane:
      return DefaultLane;

    case TransitionHydrationLane:
      return TransitionHydrationLane;

    case TransitionLane1:
    case TransitionLane2:
    case TransitionLane3:
    case TransitionLane4:
    case TransitionLane5:
    case TransitionLane6:
    case TransitionLane7:
    case TransitionLane8:
    case TransitionLane9:
    case TransitionLane10:
    case TransitionLane11:
    case TransitionLane12:
    case TransitionLane13:
    case TransitionLane14:
    case TransitionLane15:
    case TransitionLane16:
      return lanes & TransitionLanes;

    case RetryLane1:
    case RetryLane2:
    case RetryLane3:
    case RetryLane4:
    case RetryLane5:
      return lanes & RetryLanes;

    case SelectiveHydrationLane:
      return SelectiveHydrationLane;

    case IdleHydrationLane:
      return IdleHydrationLane;

    case IdleLane:
      return IdleLane;

    case OffscreenLane:
      return OffscreenLane;

    default:
      {
        error('Should have found matching lanes. This is a bug in React.');
      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


      return lanes;
  }
}

function getNextLanes(root, wipLanes) {
  // Early bailout if there's no pending work left.
  var pendingLanes = root.pendingLanes;

  if (pendingLanes === NoLanes) {
    return NoLanes;
  }

  var nextLanes = NoLanes;
  var suspendedLanes = root.suspendedLanes;
  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
  // even if the work is suspended.

  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

  if (nonIdlePendingLanes !== NoLanes) {
    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

    if (nonIdleUnblockedLanes !== NoLanes) {
      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
    } else {
      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

      if (nonIdlePingedLanes !== NoLanes) {
        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
      }
    }
  } else {
    // The only remaining work is Idle.
    var unblockedLanes = pendingLanes & ~suspendedLanes;

    if (unblockedLanes !== NoLanes) {
      nextLanes = getHighestPriorityLanes(unblockedLanes);
    } else {
      if (pingedLanes !== NoLanes) {
        nextLanes = getHighestPriorityLanes(pingedLanes);
      }
    }
  }

  if (nextLanes === NoLanes) {
    // This should only be reachable if we're suspended
    // TODO: Consider warning in this path if a fallback timer is not scheduled.
    return NoLanes;
  } // If we're already in the middle of a render, switching lanes will interrupt
  // it and we'll lose our progress. We should only do this if the new lanes are
  // higher priority.


  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
  // bother waiting until the root is complete.
  (wipLanes & suspendedLanes) === NoLanes) {
    var nextLane = getHighestPriorityLane(nextLanes);
    var wipLane = getHighestPriorityLane(wipLanes);

    if ( // Tests whether the next lane is equal or lower priority than the wip
    // one. This works because the bits decrease in priority as you go left.
    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
    // only difference between default updates and transition updates is that
    // default updates do not support refresh transitions.
    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
      // Keep working on the existing in-progress tree. Do not interrupt.
      return wipLanes;
    }
  }

  if ((nextLanes & InputContinuousLane) !== NoLanes) {
    // When updates are sync by default, we entangle continuous priority updates
    // and default updates, so they render in the same batch. The only reason
    // they use separate lanes is because continuous updates should interrupt
    // transitions, but default updates should not.
    nextLanes |= pendingLanes & DefaultLane;
  } // Check for entangled lanes and add them to the batch.
  //
  // A lane is said to be entangled with another when it's not allowed to render
  // in a batch that does not also include the other lane. Typically we do this
  // when multiple updates have the same source, and we only want to respond to
  // the most recent event from that source.
  //
  // Note that we apply entanglements *after* checking for partial work above.
  // This means that if a lane is entangled during an interleaved event while
  // it's already rendering, we won't interrupt it. This is intentional, since
  // entanglement is usually "best effort": we'll try our best to render the
  // lanes in the same batch, but it's not worth throwing out partially
  // completed work in order to do it.
  // TODO: Reconsider this. The counter-argument is that the partial work
  // represents an intermediate state, which we don't want to show to the user.
  // And by spending extra time finishing it, we're increasing the amount of
  // time it takes to show the final state, which is what they are actually
  // waiting for.
  //
  // For those exceptions where entanglement is semantically important, like
  // useMutableSource, we should ensure that there is no partial work at the
  // time we apply the entanglement.


  var entangledLanes = root.entangledLanes;

  if (entangledLanes !== NoLanes) {
    var entanglements = root.entanglements;
    var lanes = nextLanes & entangledLanes;

    while (lanes > 0) {
      var index = pickArbitraryLaneIndex(lanes);
      var lane = 1 << index;
      nextLanes |= entanglements[index];
      lanes &= ~lane;
    }
  }

  return nextLanes;
}
function getMostRecentEventTime(root, lanes) {
  var eventTimes = root.eventTimes;
  var mostRecentEventTime = NoTimestamp;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    var eventTime = eventTimes[index];

    if (eventTime > mostRecentEventTime) {
      mostRecentEventTime = eventTime;
    }

    lanes &= ~lane;
  }

  return mostRecentEventTime;
}

function computeExpirationTime(lane, currentTime) {
  switch (lane) {
    case SyncLane:
    case InputContinuousHydrationLane:
    case InputContinuousLane:
      // User interactions should expire slightly more quickly.
      //
      // NOTE: This is set to the corresponding constant as in Scheduler.js.
      // When we made it larger, a product metric in www regressed, suggesting
      // there's a user interaction that's being starved by a series of
      // synchronous updates. If that theory is correct, the proper solution is
      // to fix the starvation. However, this scenario supports the idea that
      // expiration times are an important safeguard when starvation
      // does happen.
      return currentTime + 250;

    case DefaultHydrationLane:
    case DefaultLane:
    case TransitionHydrationLane:
    case TransitionLane1:
    case TransitionLane2:
    case TransitionLane3:
    case TransitionLane4:
    case TransitionLane5:
    case TransitionLane6:
    case TransitionLane7:
    case TransitionLane8:
    case TransitionLane9:
    case TransitionLane10:
    case TransitionLane11:
    case TransitionLane12:
    case TransitionLane13:
    case TransitionLane14:
    case TransitionLane15:
    case TransitionLane16:
      return currentTime + 5000;

    case RetryLane1:
    case RetryLane2:
    case RetryLane3:
    case RetryLane4:
    case RetryLane5:
      // TODO: Retries should be allowed to expire if they are CPU bound for
      // too long, but when I made this change it caused a spike in browser
      // crashes. There must be some other underlying bug; not super urgent but
      // ideally should figure out why and fix it. Unfortunately we don't have
      // a repro for the crashes, only detected via production metrics.
      return NoTimestamp;

    case SelectiveHydrationLane:
    case IdleHydrationLane:
    case IdleLane:
    case OffscreenLane:
      // Anything idle priority or lower should never expire.
      return NoTimestamp;

    default:
      {
        error('Should have found matching lanes. This is a bug in React.');
      }

      return NoTimestamp;
  }
}

function markStarvedLanesAsExpired(root, currentTime) {
  // TODO: This gets called every time we yield. We can optimize by storing
  // the earliest expiration time on the root. Then use that to quickly bail out
  // of this function.
  var pendingLanes = root.pendingLanes;
  var suspendedLanes = root.suspendedLanes;
  var pingedLanes = root.pingedLanes;
  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
  // expiration time. If so, we'll assume the update is being starved and mark
  // it as expired to force it to finish.

  var lanes = pendingLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    var expirationTime = expirationTimes[index];

    if (expirationTime === NoTimestamp) {
      // Found a pending lane with no expiration time. If it's not suspended, or
      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
      // using the current time.
      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
        // Assumes timestamps are monotonically increasing.
        expirationTimes[index] = computeExpirationTime(lane, currentTime);
      }
    } else if (expirationTime <= currentTime) {
      // This lane expired
      root.expiredLanes |= lane;
    }

    lanes &= ~lane;
  }
} // This returns the highest priority pending lanes regardless of whether they
// are suspended.

function getHighestPriorityPendingLanes(root) {
  return getHighestPriorityLanes(root.pendingLanes);
}
function getLanesToRetrySynchronouslyOnError(root) {
  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

  if (everythingButOffscreen !== NoLanes) {
    return everythingButOffscreen;
  }

  if (everythingButOffscreen & OffscreenLane) {
    return OffscreenLane;
  }

  return NoLanes;
}
function includesSyncLane(lanes) {
  return (lanes & SyncLane) !== NoLanes;
}
function includesNonIdleWork(lanes) {
  return (lanes & NonIdleLanes) !== NoLanes;
}
function includesOnlyRetries(lanes) {
  return (lanes & RetryLanes) === lanes;
}
function includesOnlyNonUrgentLanes(lanes) {
  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
  return (lanes & UrgentLanes) === NoLanes;
}
function includesOnlyTransitions(lanes) {
  return (lanes & TransitionLanes) === lanes;
}
function includesBlockingLane(root, lanes) {

  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
  return (lanes & SyncDefaultLanes) !== NoLanes;
}
function includesExpiredLane(root, lanes) {
  // This is a separate check from includesBlockingLane because a lane can
  // expire after a render has already started.
  return (lanes & root.expiredLanes) !== NoLanes;
}
function isTransitionLane(lane) {
  return (lane & TransitionLanes) !== NoLanes;
}
function claimNextTransitionLane() {
  // Cycle through the lanes, assigning each new transition to the next lane.
  // In most cases, this means every transition gets its own lane, until we
  // run out of lanes and cycle back to the beginning.
  var lane = nextTransitionLane;
  nextTransitionLane <<= 1;

  if ((nextTransitionLane & TransitionLanes) === NoLanes) {
    nextTransitionLane = TransitionLane1;
  }

  return lane;
}
function claimNextRetryLane() {
  var lane = nextRetryLane;
  nextRetryLane <<= 1;

  if ((nextRetryLane & RetryLanes) === NoLanes) {
    nextRetryLane = RetryLane1;
  }

  return lane;
}
function getHighestPriorityLane(lanes) {
  return lanes & -lanes;
}
function pickArbitraryLane(lanes) {
  // This wrapper function gets inlined. Only exists so to communicate that it
  // doesn't matter which bit is selected; you can pick any bit without
  // affecting the algorithms where its used. Here I'm using
  // getHighestPriorityLane because it requires the fewest operations.
  return getHighestPriorityLane(lanes);
}

function pickArbitraryLaneIndex(lanes) {
  return 31 - clz32(lanes);
}

function laneToIndex(lane) {
  return pickArbitraryLaneIndex(lane);
}

function includesSomeLane(a, b) {
  return (a & b) !== NoLanes;
}
function isSubsetOfLanes(set, subset) {
  return (set & subset) === subset;
}
function mergeLanes(a, b) {
  return a | b;
}
function removeLanes(set, subset) {
  return set & ~subset;
}
function intersectLanes(a, b) {
  return a & b;
} // Seems redundant, but it changes the type from a single lane (used for
// updates) to a group of lanes (used for flushing work).

function laneToLanes(lane) {
  return lane;
}
function higherPriorityLane(a, b) {
  // This works because the bit ranges decrease in priority as you go left.
  return a !== NoLane && a < b ? a : b;
}
function createLaneMap(initial) {
  // Intentionally pushing one by one.
  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
  var laneMap = [];

  for (var i = 0; i < TotalLanes; i++) {
    laneMap.push(initial);
  }

  return laneMap;
}
function markRootUpdated(root, updateLane, eventTime) {
  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
  // could unblock them. Clear the suspended lanes so that we can try rendering
  // them again.
  //
  // TODO: We really only need to unsuspend only lanes that are in the
  // `subtreeLanes` of the updated fiber, or the update lanes of the return
  // path. This would exclude suspended updates in an unrelated sibling tree,
  // since there's no way for this update to unblock it.
  //
  // We don't do this if the incoming update is idle, because we never process
  // idle updates until after all the regular updates have finished; there's no
  // way it could unblock a transition.

  if (updateLane !== IdleLane) {
    root.suspendedLanes = NoLanes;
    root.pingedLanes = NoLanes;
  }

  var eventTimes = root.eventTimes;
  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
  // recent event, and we assume time is monotonically increasing.

  eventTimes[index] = eventTime;
}
function markRootSuspended(root, suspendedLanes) {
  root.suspendedLanes |= suspendedLanes;
  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

  var expirationTimes = root.expirationTimes;
  var lanes = suspendedLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    expirationTimes[index] = NoTimestamp;
    lanes &= ~lane;
  }
}
function markRootPinged(root, pingedLanes, eventTime) {
  root.pingedLanes |= root.suspendedLanes & pingedLanes;
}
function markRootFinished(root, remainingLanes) {
  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
  root.pendingLanes = remainingLanes; // Let's try everything again

  root.suspendedLanes = NoLanes;
  root.pingedLanes = NoLanes;
  root.expiredLanes &= remainingLanes;
  root.mutableReadLanes &= remainingLanes;
  root.entangledLanes &= remainingLanes;
  var entanglements = root.entanglements;
  var eventTimes = root.eventTimes;
  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

  var lanes = noLongerPendingLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    entanglements[index] = NoLanes;
    eventTimes[index] = NoTimestamp;
    expirationTimes[index] = NoTimestamp;
    lanes &= ~lane;
  }
}
function markRootEntangled(root, entangledLanes) {
  // In addition to entangling each of the given lanes with each other, we also
  // have to consider _transitive_ entanglements. For each lane that is already
  // entangled with *any* of the given lanes, that lane is now transitively
  // entangled with *all* the given lanes.
  //
  // Translated: If C is entangled with A, then entangling A with B also
  // entangles C with B.
  //
  // If this is hard to grasp, it might help to intentionally break this
  // function and look at the tests that fail in ReactTransition-test.js. Try
  // commenting out one of the conditions below.
  var rootEntangledLanes = root.entangledLanes |= entangledLanes;
  var entanglements = root.entanglements;
  var lanes = rootEntangledLanes;

  while (lanes) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;

    if ( // Is this one of the newly entangled lanes?
    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
    entanglements[index] & entangledLanes) {
      entanglements[index] |= entangledLanes;
    }

    lanes &= ~lane;
  }
}
function getBumpedLaneForHydration(root, renderLanes) {
  var renderLane = getHighestPriorityLane(renderLanes);
  var lane;

  switch (renderLane) {
    case InputContinuousLane:
      lane = InputContinuousHydrationLane;
      break;

    case DefaultLane:
      lane = DefaultHydrationLane;
      break;

    case TransitionLane1:
    case TransitionLane2:
    case TransitionLane3:
    case TransitionLane4:
    case TransitionLane5:
    case TransitionLane6:
    case TransitionLane7:
    case TransitionLane8:
    case TransitionLane9:
    case TransitionLane10:
    case TransitionLane11:
    case TransitionLane12:
    case TransitionLane13:
    case TransitionLane14:
    case TransitionLane15:
    case TransitionLane16:
    case RetryLane1:
    case RetryLane2:
    case RetryLane3:
    case RetryLane4:
    case RetryLane5:
      lane = TransitionHydrationLane;
      break;

    case IdleLane:
      lane = IdleHydrationLane;
      break;

    default:
      // Everything else is already either a hydration lane, or shouldn't
      // be retried at a hydration lane.
      lane = NoLane;
      break;
  } // Check if the lane we chose is suspended. If so, that indicates that we
  // already attempted and failed to hydrate at that level. Also check if we're
  // already rendering that lane, which is rare but could happen.


  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {
    // Give up trying to hydrate and fall back to client render.
    return NoLane;
  }

  return lane;
}
function addFiberToLanesMap(root, fiber, lanes) {

  if (!isDevToolsPresent) {
    return;
  }

  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;

  while (lanes > 0) {
    var index = laneToIndex(lanes);
    var lane = 1 << index;
    var updaters = pendingUpdatersLaneMap[index];
    updaters.add(fiber);
    lanes &= ~lane;
  }
}
function movePendingFibersToMemoized(root, lanes) {

  if (!isDevToolsPresent) {
    return;
  }

  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
  var memoizedUpdaters = root.memoizedUpdaters;

  while (lanes > 0) {
    var index = laneToIndex(lanes);
    var lane = 1 << index;
    var updaters = pendingUpdatersLaneMap[index];

    if (updaters.size > 0) {
      updaters.forEach(function (fiber) {
        var alternate = fiber.alternate;

        if (alternate === null || !memoizedUpdaters.has(alternate)) {
          memoizedUpdaters.add(fiber);
        }
      });
      updaters.clear();
    }

    lanes &= ~lane;
  }
}
function getTransitionsForLanes(root, lanes) {
  {
    return null;
  }
}

var DiscreteEventPriority = SyncLane;
var ContinuousEventPriority = InputContinuousLane;
var DefaultEventPriority = DefaultLane;
var IdleEventPriority = IdleLane;
var currentUpdatePriority = NoLane;
function getCurrentUpdatePriority() {
  return currentUpdatePriority;
}
function setCurrentUpdatePriority(newPriority) {
  currentUpdatePriority = newPriority;
}
function runWithPriority(priority, fn) {
  var previousPriority = currentUpdatePriority;

  try {
    currentUpdatePriority = priority;
    return fn();
  } finally {
    currentUpdatePriority = previousPriority;
  }
}
function higherEventPriority(a, b) {
  return a !== 0 && a < b ? a : b;
}
function lowerEventPriority(a, b) {
  return a === 0 || a > b ? a : b;
}
function isHigherEventPriority(a, b) {
  return a !== 0 && a < b;
}
function lanesToEventPriority(lanes) {
  var lane = getHighestPriorityLane(lanes);

  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
    return DiscreteEventPriority;
  }

  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
    return ContinuousEventPriority;
  }

  if (includesNonIdleWork(lane)) {
    return DefaultEventPriority;
  }

  return IdleEventPriority;
}

// This is imported by the event replaying implementation in React DOM. It's
// in a separate file to break a circular dependency between the renderer and
// the reconciler.
function isRootDehydrated(root) {
  var currentState = root.current.memoizedState;
  return currentState.isDehydrated;
}

var _attemptSynchronousHydration;

function setAttemptSynchronousHydration(fn) {
  _attemptSynchronousHydration = fn;
}
function attemptSynchronousHydration(fiber) {
  _attemptSynchronousHydration(fiber);
}
var attemptContinuousHydration;
function setAttemptContinuousHydration(fn) {
  attemptContinuousHydration = fn;
}
var attemptHydrationAtCurrentPriority;
function setAttemptHydrationAtCurrentPriority(fn) {
  attemptHydrationAtCurrentPriority = fn;
}
var getCurrentUpdatePriority$1;
function setGetCurrentUpdatePriority(fn) {
  getCurrentUpdatePriority$1 = fn;
}
var attemptHydrationAtPriority;
function setAttemptHydrationAtPriority(fn) {
  attemptHydrationAtPriority = fn;
} // TODO: Upgrade this definition once we're on a newer version of Flow that
// has this definition built-in.

var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
// if the last target was dehydrated.

var queuedFocus = null;
var queuedDrag = null;
var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

var queuedPointers = new Map();
var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

var queuedExplicitHydrationTargets = [];
var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
function isDiscreteEventThatRequiresHydration(eventType) {
  return discreteReplayableEvents.indexOf(eventType) > -1;
}

function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  return {
    blockedOn: blockedOn,
    domEventName: domEventName,
    eventSystemFlags: eventSystemFlags,
    nativeEvent: nativeEvent,
    targetContainers: [targetContainer]
  };
}

function clearIfContinuousEvent(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'focusin':
    case 'focusout':
      queuedFocus = null;
      break;

    case 'dragenter':
    case 'dragleave':
      queuedDrag = null;
      break;

    case 'mouseover':
    case 'mouseout':
      queuedMouse = null;
      break;

    case 'pointerover':
    case 'pointerout':
      {
        var pointerId = nativeEvent.pointerId;
        queuedPointers.delete(pointerId);
        break;
      }

    case 'gotpointercapture':
    case 'lostpointercapture':
      {
        var _pointerId = nativeEvent.pointerId;
        queuedPointerCaptures.delete(_pointerId);
        break;
      }
  }
}

function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

    if (blockedOn !== null) {
      var _fiber2 = getInstanceFromNode(blockedOn);

      if (_fiber2 !== null) {
        // Attempt to increase the priority of this target.
        attemptContinuousHydration(_fiber2);
      }
    }

    return queuedEvent;
  } // If we have already queued this exact event, then it's because
  // the different event systems have different DOM event listeners.
  // We can accumulate the flags, and the targetContainers, and
  // store a single event to be replayed.


  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  var targetContainers = existingQueuedEvent.targetContainers;

  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
    targetContainers.push(targetContainer);
  }

  return existingQueuedEvent;
}

function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  // These set relatedTarget to null because the replayed event will be treated as if we
  // moved from outside the window (no target) onto the target once it hydrates.
  // Instead of mutating we could clone the event.
  switch (domEventName) {
    case 'focusin':
      {
        var focusEvent = nativeEvent;
        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
        return true;
      }

    case 'dragenter':
      {
        var dragEvent = nativeEvent;
        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
        return true;
      }

    case 'mouseover':
      {
        var mouseEvent = nativeEvent;
        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
        return true;
      }

    case 'pointerover':
      {
        var pointerEvent = nativeEvent;
        var pointerId = pointerEvent.pointerId;
        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
        return true;
      }

    case 'gotpointercapture':
      {
        var _pointerEvent = nativeEvent;
        var _pointerId2 = _pointerEvent.pointerId;
        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
        return true;
      }
  }

  return false;
} // Check if this target is unblocked. Returns true if it's unblocked.

function attemptExplicitHydrationTarget(queuedTarget) {
  // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
  // Try to unify them. It's a bit tricky since it would require two return
  // values.
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted !== null) {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // We're blocked on hydrating this boundary.
          // Increase its priority.
          queuedTarget.blockedOn = instance;
          attemptHydrationAtPriority(queuedTarget.priority, function () {
            attemptHydrationAtCurrentPriority(nearestMounted);
          });
          return;
        }
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (isRootDehydrated(root)) {
          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
          // a root other than sync.

          return;
        }
      }
    }
  }

  queuedTarget.blockedOn = null;
}

function queueExplicitHydrationTarget(target) {
  // TODO: This will read the priority if it's dispatched by the React
  // event system but not native events. Should read window.event.type, like
  // we do for updates (getCurrentEventPriority).
  var updatePriority = getCurrentUpdatePriority$1();
  var queuedTarget = {
    blockedOn: null,
    target: target,
    priority: updatePriority
  };
  var i = 0;

  for (; i < queuedExplicitHydrationTargets.length; i++) {
    // Stop once we hit the first target with lower priority than
    if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
      break;
    }
  }

  queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);

  if (i === 0) {
    attemptExplicitHydrationTarget(queuedTarget);
  }
}

function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null) {
    return false;
  }

  var targetContainers = queuedEvent.targetContainers;

  while (targetContainers.length > 0) {
    var targetContainer = targetContainers[0];
    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

    if (nextBlockedOn === null) {
      {
        var nativeEvent = queuedEvent.nativeEvent;
        var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
        setReplayingEvent(nativeEventClone);
        nativeEvent.target.dispatchEvent(nativeEventClone);
        resetReplayingEvent();
      }
    } else {
      // We're still blocked. Try again later.
      var _fiber3 = getInstanceFromNode(nextBlockedOn);

      if (_fiber3 !== null) {
        attemptContinuousHydration(_fiber3);
      }

      queuedEvent.blockedOn = nextBlockedOn;
      return false;
    } // This target container was successfully dispatched. Try the next.


    targetContainers.shift();
  }

  return true;
}

function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
    map.delete(key);
  }
}

function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false;


  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
    queuedFocus = null;
  }

  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
    queuedDrag = null;
  }

  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
    queuedMouse = null;
  }

  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}

function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  if (queuedEvent.blockedOn === unblocked) {
    queuedEvent.blockedOn = null;

    if (!hasScheduledReplayAttempt) {
      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
      // now unblocked. This first might not actually be unblocked yet.
      // We could check it early to avoid scheduling an unnecessary callback.

      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
    }
  }
}

function retryIfBlockedOn(unblocked) {
  // Mark anything that was blocked on this as no longer blocked
  // and eligible for a replay.
  if (queuedDiscreteEvents.length > 0) {
    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
    // worth it because we expect very few discrete events to queue up and once
    // we are actually fully unblocked it will be fast to replay them.

    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
      var queuedEvent = queuedDiscreteEvents[i];

      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
      }
    }
  }

  if (queuedFocus !== null) {
    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  }

  if (queuedDrag !== null) {
    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  }

  if (queuedMouse !== null) {
    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  }

  var unblock = function (queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  };

  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);

  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
    var queuedTarget = queuedExplicitHydrationTargets[_i];

    if (queuedTarget.blockedOn === unblocked) {
      queuedTarget.blockedOn = null;
    }
  }

  while (queuedExplicitHydrationTargets.length > 0) {
    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

    if (nextExplicitTarget.blockedOn !== null) {
      // We're still blocked.
      break;
    } else {
      attemptExplicitHydrationTarget(nextExplicitTarget);

      if (nextExplicitTarget.blockedOn === null) {
        // We're unblocked.
        queuedExplicitHydrationTargets.shift();
      }
    }
  }
}

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?

var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
// We'd like to remove this but it's not clear if this is safe.

function setEnabled(enabled) {
  _enabled = !!enabled;
}
function isEnabled() {
  return _enabled;
}
function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
  var eventPriority = getEventPriority(domEventName);
  var listenerWrapper;

  switch (eventPriority) {
    case DiscreteEventPriority:
      listenerWrapper = dispatchDiscreteEvent;
      break;

    case ContinuousEventPriority:
      listenerWrapper = dispatchContinuousEvent;
      break;

    case DefaultEventPriority:
    default:
      listenerWrapper = dispatchEvent;
      break;
  }

  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
}

function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
  var previousPriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig.transition;
  ReactCurrentBatchConfig.transition = null;

  try {
    setCurrentUpdatePriority(DiscreteEventPriority);
    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig.transition = prevTransition;
  }
}

function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
  var previousPriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig.transition;
  ReactCurrentBatchConfig.transition = null;

  try {
    setCurrentUpdatePriority(ContinuousEventPriority);
    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig.transition = prevTransition;
  }
}

function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (!_enabled) {
    return;
  }

  {
    dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
  }
}

function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

  if (blockedOn === null) {
    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
    clearIfContinuousEvent(domEventName, nativeEvent);
    return;
  }

  if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
    nativeEvent.stopPropagation();
    return;
  } // We need to clear only if we didn't queue because
  // queueing is accumulative.


  clearIfContinuousEvent(domEventName, nativeEvent);

  if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
    while (blockedOn !== null) {
      var fiber = getInstanceFromNode(blockedOn);

      if (fiber !== null) {
        attemptSynchronousHydration(fiber);
      }

      var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

      if (nextBlockedOn === null) {
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
      }

      if (nextBlockedOn === blockedOn) {
        break;
      }

      blockedOn = nextBlockedOn;
    }

    if (blockedOn !== null) {
      nativeEvent.stopPropagation();
    }

    return;
  } // This is not replayable so we'll invoke it but without a target,
  // in case the event system needs to trace it.


  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
}

var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
// The return_targetInst field above is conceptually part of the return value.

function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  // TODO: Warn if _enabled is false.
  return_targetInst = null;
  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted === null) {
      // This tree has been unmounted already. Dispatch without a target.
      targetInst = null;
    } else {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // Queue the event to be replayed later. Abort dispatching since we
          // don't want this event dispatched twice through the event system.
          // TODO: If this is the first discrete event in the queue. Schedule an increased
          // priority for this boundary.
          return instance;
        } // This shouldn't happen, something went wrong but to avoid blocking
        // the whole system, dispatch the event without a target.
        // TODO: Warn.


        targetInst = null;
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (isRootDehydrated(root)) {
          // If this happens during a replay something went wrong and it might block
          // the whole system.
          return getContainerFromFiber(nearestMounted);
        }

        targetInst = null;
      } else if (nearestMounted !== targetInst) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }
    }
  }

  return_targetInst = targetInst; // We're not blocked on anything.

  return null;
}
function getEventPriority(domEventName) {
  switch (domEventName) {
    // Used by SimpleEventPlugin:
    case 'cancel':
    case 'click':
    case 'close':
    case 'contextmenu':
    case 'copy':
    case 'cut':
    case 'auxclick':
    case 'dblclick':
    case 'dragend':
    case 'dragstart':
    case 'drop':
    case 'focusin':
    case 'focusout':
    case 'input':
    case 'invalid':
    case 'keydown':
    case 'keypress':
    case 'keyup':
    case 'mousedown':
    case 'mouseup':
    case 'paste':
    case 'pause':
    case 'play':
    case 'pointercancel':
    case 'pointerdown':
    case 'pointerup':
    case 'ratechange':
    case 'reset':
    case 'resize':
    case 'seeked':
    case 'submit':
    case 'touchcancel':
    case 'touchend':
    case 'touchstart':
    case 'volumechange': // Used by polyfills:
    // eslint-disable-next-line no-fallthrough

    case 'change':
    case 'selectionchange':
    case 'textInput':
    case 'compositionstart':
    case 'compositionend':
    case 'compositionupdate': // Only enableCreateEventHandleAPI:
    // eslint-disable-next-line no-fallthrough

    case 'beforeblur':
    case 'afterblur': // Not used by React but could be by user code:
    // eslint-disable-next-line no-fallthrough

    case 'beforeinput':
    case 'blur':
    case 'fullscreenchange':
    case 'focus':
    case 'hashchange':
    case 'popstate':
    case 'select':
    case 'selectstart':
      return DiscreteEventPriority;

    case 'drag':
    case 'dragenter':
    case 'dragexit':
    case 'dragleave':
    case 'dragover':
    case 'mousemove':
    case 'mouseout':
    case 'mouseover':
    case 'pointermove':
    case 'pointerout':
    case 'pointerover':
    case 'scroll':
    case 'toggle':
    case 'touchmove':
    case 'wheel': // Not used by React but could be by user code:
    // eslint-disable-next-line no-fallthrough

    case 'mouseenter':
    case 'mouseleave':
    case 'pointerenter':
    case 'pointerleave':
      return ContinuousEventPriority;

    case 'message':
      {
        // We might be in the Scheduler callback.
        // Eventually this mechanism will be replaced by a check
        // of the current priority on the native scheduler.
        var schedulerPriority = getCurrentPriorityLevel();

        switch (schedulerPriority) {
          case ImmediatePriority:
            return DiscreteEventPriority;

          case UserBlockingPriority:
            return ContinuousEventPriority;

          case NormalPriority:
          case LowPriority:
            // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
            return DefaultEventPriority;

          case IdlePriority:
            return IdleEventPriority;

          default:
            return DefaultEventPriority;
        }
      }

    default:
      return DefaultEventPriority;
  }
}

function addEventBubbleListener(target, eventType, listener) {
  target.addEventListener(eventType, listener, false);
  return listener;
}
function addEventCaptureListener(target, eventType, listener) {
  target.addEventListener(eventType, listener, true);
  return listener;
}
function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
  target.addEventListener(eventType, listener, {
    capture: true,
    passive: passive
  });
  return listener;
}
function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
  target.addEventListener(eventType, listener, {
    passive: passive
  });
  return listener;
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var root = null;
var startText = null;
var fallbackText = null;
function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}
function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}
function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start;
  var startValue = startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;

  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}
function getText() {
  if ('value' in root) {
    return root.value;
  }

  return root.textContent;
}

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.


  if (charCode === 10) {
    charCode = 13;
  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.


  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
} // This is intentionally a factory so that we have different returned constructors.
// If we had a single constructor, it would be megamorphic and engines would deopt.


function createSyntheticEvent(Interface) {
  /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */
  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
    this._reactName = reactName;
    this._targetInst = targetInst;
    this.type = reactEventType;
    this.nativeEvent = nativeEvent;
    this.target = nativeEventTarget;
    this.currentTarget = null;

    for (var _propName in Interface) {
      if (!Interface.hasOwnProperty(_propName)) {
        continue;
      }

      var normalize = Interface[_propName];

      if (normalize) {
        this[_propName] = normalize(nativeEvent);
      } else {
        this[_propName] = nativeEvent[_propName];
      }
    }

    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

    if (defaultPrevented) {
      this.isDefaultPrevented = functionThatReturnsTrue;
    } else {
      this.isDefaultPrevented = functionThatReturnsFalse;
    }

    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  assign(SyntheticBaseEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;

      if (!event) {
        return;
      }

      if (event.preventDefault) {
        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
      } else if (typeof event.returnValue !== 'unknown') {
        event.returnValue = false;
      }

      this.isDefaultPrevented = functionThatReturnsTrue;
    },
    stopPropagation: function () {
      var event = this.nativeEvent;

      if (!event) {
        return;
      }

      if (event.stopPropagation) {
        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
      } else if (typeof event.cancelBubble !== 'unknown') {
        // The ChangeEventPlugin registers a "propertychange" event for
        // IE. This event does not support bubbling or cancelling, and
        // any references to cancelBubble throw "Member not found".  A
        // typeof check of "unknown" circumvents this issue (and is also
        // IE specific).
        event.cancelBubble = true;
      }

      this.isPropagationStopped = functionThatReturnsTrue;
    },

    /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */
    persist: function () {// Modern event system doesn't use pooling.
    },

    /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */
    isPersistent: functionThatReturnsTrue
  });
  return SyntheticBaseEvent;
}
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var EventInterface = {
  eventPhase: 0,
  bubbles: 0,
  cancelable: 0,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: 0,
  isTrusted: 0
};
var SyntheticEvent = createSyntheticEvent(EventInterface);

var UIEventInterface = assign({}, EventInterface, {
  view: 0,
  detail: 0
});

var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
var lastMovementX;
var lastMovementY;
var lastMouseEvent;

function updateMouseMovementPolyfillState(event) {
  if (event !== lastMouseEvent) {
    if (lastMouseEvent && event.type === 'mousemove') {
      lastMovementX = event.screenX - lastMouseEvent.screenX;
      lastMovementY = event.screenY - lastMouseEvent.screenY;
    } else {
      lastMovementX = 0;
      lastMovementY = 0;
    }

    lastMouseEvent = event;
  }
}
/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var MouseEventInterface = assign({}, UIEventInterface, {
  screenX: 0,
  screenY: 0,
  clientX: 0,
  clientY: 0,
  pageX: 0,
  pageY: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  getModifierState: getEventModifierState,
  button: 0,
  buttons: 0,
  relatedTarget: function (event) {
    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
    return event.relatedTarget;
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    updateMouseMovementPolyfillState(event);
    return lastMovementX;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    } // Don't need to call updateMouseMovementPolyfillState() here
    // because it's guaranteed to have already run when movementX
    // was copied.


    return lastMovementY;
  }
});

var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var DragEventInterface = assign({}, MouseEventInterface, {
  dataTransfer: 0
});

var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var FocusEventInterface = assign({}, UIEventInterface, {
  relatedTarget: 0
});

var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

var AnimationEventInterface = assign({}, EventInterface, {
  animationName: 0,
  elapsedTime: 0,
  pseudoElement: 0
});

var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

var ClipboardEventInterface = assign({}, EventInterface, {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

var CompositionEventInterface = assign({}, EventInterface, {
  data: 0
});

var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
// Happens to share the same list for now.

var SyntheticInputEvent = SyntheticCompositionEvent;
/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};
/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

    if (key !== 'Unidentified') {
      return key;
    }
  } // Browser does not implement `key`, polyfill as much of it as we can.


  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.

    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  return '';
}
/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */


var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;

  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}
/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var KeyboardEventInterface = assign({}, UIEventInterface, {
  key: getEventKey,
  code: 0,
  location: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  repeat: 0,
  locale: 0,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.
    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.
    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  }
});

var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */

var PointerEventInterface = assign({}, MouseEventInterface, {
  pointerId: 0,
  width: 0,
  height: 0,
  pressure: 0,
  tangentialPressure: 0,
  tiltX: 0,
  tiltY: 0,
  twist: 0,
  pointerType: 0,
  isPrimary: 0
});

var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */

var TouchEventInterface = assign({}, UIEventInterface, {
  touches: 0,
  targetTouches: 0,
  changedTouches: 0,
  altKey: 0,
  metaKey: 0,
  ctrlKey: 0,
  shiftKey: 0,
  getModifierState: getEventModifierState
});

var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */

var TransitionEventInterface = assign({}, EventInterface, {
  propertyName: 0,
  elapsedTime: 0,
  pseudoElement: 0
});

var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var WheelEventInterface = assign({}, MouseEventInterface, {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: 0,
  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: 0
});

var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

var START_KEYCODE = 229;
var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
var documentMode = null;

if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
} // Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.


var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.

var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

function registerEvents() {
  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
} // Track whether we've ever handled a keypress on the space key.


var hasSpaceKeypress = false;
/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}
/**
 * Translate native top level events into event types.
 */


function getCompositionEventType(domEventName) {
  switch (domEventName) {
    case 'compositionstart':
      return 'onCompositionStart';

    case 'compositionend':
      return 'onCompositionEnd';

    case 'compositionupdate':
      return 'onCompositionUpdate';
  }
}
/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */


function isFallbackCompositionStart(domEventName, nativeEvent) {
  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
}
/**
 * Does our fallback mode think that this event is the end of composition?
 */


function isFallbackCompositionEnd(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'keyup':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

    case 'keydown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;

    case 'keypress':
    case 'mousedown':
    case 'focusout':
      // Events are not possible without cancelling IME.
      return true;

    default:
      return false;
  }
}
/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */


function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;

  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }

  return null;
}
/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
} // Track the current IME composition status, if any.


var isComposing = false;
/**
 * @return {?object} A SyntheticCompositionEvent.
 */

function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(domEventName);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(domEventName, nativeEvent)) {
      eventType = 'onCompositionStart';
    }
  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
    eventType = 'onCompositionEnd';
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === 'onCompositionStart') {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === 'onCompositionEnd') {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

  if (listeners.length > 0) {
    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });

    if (fallbackData) {
      // Inject data generated from fallback path into the synthetic event.
      // This matches the property of native CompositionEventInterface.
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);

      if (customData !== null) {
        event.data = customData;
      }
    }
  }
}

function getNativeBeforeInputChars(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'compositionend':
      return getDataFromCustomEvent(nativeEvent);

    case 'keypress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;

      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'textInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.

      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}
/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */


function getFallbackBeforeInputChars(domEventName, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }

    return null;
  }

  switch (domEventName) {
    case 'paste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;

    case 'keypress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }

      return null;

    case 'compositionend':
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

    default:
      return null;
  }
}
/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */


function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(domEventName, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
  } // If no characters are being inserted, no BeforeInput event should
  // be fired.


  if (!chars) {
    return null;
  }

  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

  if (listeners.length > 0) {
    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
    event.data = chars;
  }
}
/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */


function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
}

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

function registerEvents$1() {
  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
}

function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

  if (listeners.length > 0) {
    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
  }
}
/**
 * For IE shims
 */


var activeElement = null;
var activeElementInst = null;
/**
 * SECTION: handle `change` event
 */

function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var dispatchQueue = [];
  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.

  batchedUpdates(runEventInBatch, dispatchQueue);
}

function runEventInBatch(dispatchQueue) {
  processDispatchQueue(dispatchQueue, 0);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance(targetInst);

  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(domEventName, targetInst) {
  if (domEventName === 'change') {
    return targetInst;
  }
}
/**
 * SECTION: handle `input` event
 */


var isInputEventSupported = false;

if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}
/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */


function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}
/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */


function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}
/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */


function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
  if (domEventName === 'focusin') {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (domEventName === 'focusout') {
    stopWatchingForValueChange();
  }
} // For IE8 and IE9.


function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}
/**
 * SECTION: handle `click` event
 */


function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(domEventName, targetInst) {
  if (domEventName === 'click') {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
  if (domEventName === 'input' || domEventName === 'change') {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}
/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */


function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
  var getTargetInstFunc, handleEventFunc;

  if (shouldUseChangeEvent(targetNode)) {
    getTargetInstFunc = getTargetInstForChangeEvent;
  } else if (isTextInputElement(targetNode)) {
    if (isInputEventSupported) {
      getTargetInstFunc = getTargetInstForInputOrChangeEvent;
    } else {
      getTargetInstFunc = getTargetInstForInputEventPolyfill;
      handleEventFunc = handleEventsForInputEventPolyfill;
    }
  } else if (shouldUseClickEvent(targetNode)) {
    getTargetInstFunc = getTargetInstForClickEvent;
  }

  if (getTargetInstFunc) {
    var inst = getTargetInstFunc(domEventName, targetInst);

    if (inst) {
      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
      return;
    }
  }

  if (handleEventFunc) {
    handleEventFunc(domEventName, targetNode, targetInst);
  } // When blurring, set the value attribute for number inputs


  if (domEventName === 'focusout') {
    handleControlledInputBlur(targetNode);
  }
}

function registerEvents$2() {
  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
}
/**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */


function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

  if (isOverEvent && !isReplayingEvent(nativeEvent)) {
    // If this is an over event with a target, we might have already dispatched
    // the event in the out event of the other target. If this is replayed,
    // then it's because we couldn't dispatch against this target previously
    // so we have to do it now instead.
    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

    if (related) {
      // If the related node is managed by React, we can assume that we have
      // already dispatched the corresponding events during its mouseout.
      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
        return;
      }
    }
  }

  if (!isOutEvent && !isOverEvent) {
    // Must not be a mouse or pointer in or out - ignoring.
    return;
  }

  var win; // TODO: why is this nullable in the types but we read from it?

  if (nativeEventTarget.window === nativeEventTarget) {
    // `nativeEventTarget` is probably a window object.
    win = nativeEventTarget;
  } else {
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    var doc = nativeEventTarget.ownerDocument;

    if (doc) {
      win = doc.defaultView || doc.parentWindow;
    } else {
      win = window;
    }
  }

  var from;
  var to;

  if (isOutEvent) {
    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

    from = targetInst;
    to = _related ? getClosestInstanceFromNode(_related) : null;

    if (to !== null) {
      var nearestMounted = getNearestMountedFiber(to);

      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
        to = null;
      }
    }
  } else {
    // Moving to a node from outside the window.
    from = null;
    to = targetInst;
  }

  if (from === to) {
    // Nothing pertains to our managed components.
    return;
  }

  var SyntheticEventCtor = SyntheticMouseEvent;
  var leaveEventType = 'onMouseLeave';
  var enterEventType = 'onMouseEnter';
  var eventTypePrefix = 'mouse';

  if (domEventName === 'pointerout' || domEventName === 'pointerover') {
    SyntheticEventCtor = SyntheticPointerEvent;
    leaveEventType = 'onPointerLeave';
    enterEventType = 'onPointerEnter';
    eventTypePrefix = 'pointer';
  }

  var fromNode = from == null ? win : getNodeFromInstance(from);
  var toNode = to == null ? win : getNodeFromInstance(to);
  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
  leave.target = fromNode;
  leave.relatedTarget = toNode;
  var enter = null; // We should only process this nativeEvent if we are processing
  // the first ancestor. Next time, we will ignore the event.

  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (nativeTargetInst === targetInst) {
    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
    enterEvent.target = toNode;
    enterEvent.relatedTarget = fromNode;
    enter = enterEvent;
  }

  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
}

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var objectIs = typeof Object.is === 'function' ? Object.is : is;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (objectIs(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    var currentKey = keysA[i];

    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
      return false;
    }
  }

  return true;
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }

  return node;
}
/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */


function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }

    node = node.parentNode;
  }
}
/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */


function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;
  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}
/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }

      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      } // Moving from `node` to its first child `next`.


      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }

      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }

      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }

      if ((next = node.nextSibling) !== null) {
        break;
      }

      node = parentNode;
      parentNode = node.parentNode;
    } // Moving from `node` to its next sibling `next`.


    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}
/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)

  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.

  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }

    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();

  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }

    element = getActiveElement(win.document);
  }

  return element;
}
/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */


function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}
function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
  };
}
/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;

  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    } // Focusing a node can change the scroll position, which is undesirable


    var ancestors = [];
    var ancestor = priorFocusedElem;

    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}
/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

function getSelection(input) {
  var selection;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || {
    start: 0,
    end: 0
  };
}
/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

function setSelection(input, offsets) {
  var start = offsets.start;
  var end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

function registerEvents$3() {
  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
}

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;
/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */

function getSelection$1(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}
/**
 * Get document associated with the event target.
 */


function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}
/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */


function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return;
  } // Only fire when selection has actually changed.


  var currentSelection = getSelection$1(activeElement$1);

  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;
    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

    if (listeners.length > 0) {
      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
      dispatchQueue.push({
        event: event,
        listeners: listeners
      });
      event.target = activeElement$1;
    }
  }
}
/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */


function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

  switch (domEventName) {
    // Track the input node that has focus.
    case 'focusin':
      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
        activeElement$1 = targetNode;
        activeElementInst$1 = targetInst;
        lastSelection = null;
      }

      break;

    case 'focusout':
      activeElement$1 = null;
      activeElementInst$1 = null;
      lastSelection = null;
      break;
    // Don't fire the event while the user is dragging. This matches the
    // semantics of the native select event.

    case 'mousedown':
      mouseDown = true;
      break;

    case 'contextmenu':
    case 'mouseup':
    case 'dragend':
      mouseDown = false;
      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      break;
    // Chrome and IE fire non-standard event when selection is changed (and
    // sometimes when it hasn't). IE's event fires out of order with respect
    // to key and input events on deletion, so we discard it.
    //
    // Firefox doesn't support selectionchange, so check selection status
    // after each key entry. The selection changes after keydown and before
    // keyup, but we check on keydown as well in the case of holding down a
    // key, when multiple keydown events are fired but only one keyup is.
    // This is also our approach for IE handling, for the reason above.

    case 'selectionchange':
      if (skipSelectionChangeEvent) {
        break;
      }

    // falls through

    case 'keydown':
    case 'keyup':
      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
  }
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  return prefixes;
}
/**
 * A list of event names to a configurable list of vendor prefixes.
 */


var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};
/**
 * Event names that have already been detected and prefixed (if applicable).
 */

var prefixedEventNames = {};
/**
 * Element to check for prefixes on.
 */

var style = {};
/**
 * Bootstrap if a DOM exists.
 */

if (canUseDOM) {
  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.

  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  } // Same as above


  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}
/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */


function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

var ANIMATION_END = getVendorPrefixedEventName('animationend');
var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
var ANIMATION_START = getVendorPrefixedEventName('animationstart');
var TRANSITION_END = getVendorPrefixedEventName('transitionend');

var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
//
// E.g. it needs "pointerDown", not "pointerdown".
// This is because we derive both React name ("onPointerDown")
// and DOM name ("pointerdown") from the same list.
//
// Exceptions that don't match this convention are listed separately.
//
// prettier-ignore

var simpleEventPluginEvents = ['abort', 'auxClick', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'gotPointerCapture', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'lostPointerCapture', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'pointerCancel', 'pointerDown', 'pointerMove', 'pointerOut', 'pointerOver', 'pointerUp', 'progress', 'rateChange', 'reset', 'resize', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange', 'scroll', 'toggle', 'touchMove', 'waiting', 'wheel'];

function registerSimpleEvent(domEventName, reactName) {
  topLevelEventsToReactNames.set(domEventName, reactName);
  registerTwoPhaseEvent(reactName, [domEventName]);
}

function registerSimpleEvents() {
  for (var i = 0; i < simpleEventPluginEvents.length; i++) {
    var eventName = simpleEventPluginEvents[i];
    var domEventName = eventName.toLowerCase();
    var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
    registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
  } // Special cases where event names don't match.


  registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
  registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
  registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
  registerSimpleEvent('dblclick', 'onDoubleClick');
  registerSimpleEvent('focusin', 'onFocus');
  registerSimpleEvent('focusout', 'onBlur');
  registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
}

function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var reactName = topLevelEventsToReactNames.get(domEventName);

  if (reactName === undefined) {
    return;
  }

  var SyntheticEventCtor = SyntheticEvent;
  var reactEventType = domEventName;

  switch (domEventName) {
    case 'keypress':
      // Firefox creates a keypress event for function keys too. This removes
      // the unwanted keypress events. Enter is however both printable and
      // non-printable. One would expect Tab to be as well (but it isn't).
      if (getEventCharCode(nativeEvent) === 0) {
        return;
      }

    /* falls through */

    case 'keydown':
    case 'keyup':
      SyntheticEventCtor = SyntheticKeyboardEvent;
      break;

    case 'focusin':
      reactEventType = 'focus';
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'focusout':
      reactEventType = 'blur';
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'beforeblur':
    case 'afterblur':
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'click':
      // Firefox creates a click event on right mouse clicks. This removes the
      // unwanted click events.
      if (nativeEvent.button === 2) {
        return;
      }

    /* falls through */

    case 'auxclick':
    case 'dblclick':
    case 'mousedown':
    case 'mousemove':
    case 'mouseup': // TODO: Disabled elements should not respond to mouse events

    /* falls through */

    case 'mouseout':
    case 'mouseover':
    case 'contextmenu':
      SyntheticEventCtor = SyntheticMouseEvent;
      break;

    case 'drag':
    case 'dragend':
    case 'dragenter':
    case 'dragexit':
    case 'dragleave':
    case 'dragover':
    case 'dragstart':
    case 'drop':
      SyntheticEventCtor = SyntheticDragEvent;
      break;

    case 'touchcancel':
    case 'touchend':
    case 'touchmove':
    case 'touchstart':
      SyntheticEventCtor = SyntheticTouchEvent;
      break;

    case ANIMATION_END:
    case ANIMATION_ITERATION:
    case ANIMATION_START:
      SyntheticEventCtor = SyntheticAnimationEvent;
      break;

    case TRANSITION_END:
      SyntheticEventCtor = SyntheticTransitionEvent;
      break;

    case 'scroll':
      SyntheticEventCtor = SyntheticUIEvent;
      break;

    case 'wheel':
      SyntheticEventCtor = SyntheticWheelEvent;
      break;

    case 'copy':
    case 'cut':
    case 'paste':
      SyntheticEventCtor = SyntheticClipboardEvent;
      break;

    case 'gotpointercapture':
    case 'lostpointercapture':
    case 'pointercancel':
    case 'pointerdown':
    case 'pointermove':
    case 'pointerout':
    case 'pointerover':
    case 'pointerup':
      SyntheticEventCtor = SyntheticPointerEvent;
      break;
  }

  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

  {
    // Some events don't bubble in the browser.
    // In the past, React has always bubbled them, but this can be surprising.
    // We're going to try aligning closer to the browser behavior by not bubbling
    // them in React either. We'll start by not bubbling onScroll, and then expand.
    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
    // nonDelegatedEvents list in DOMPluginEventSystem.
    // Then we can remove this special list.
    // This is a breaking change that can wait until React 18.
    domEventName === 'scroll';

    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

    if (_listeners.length > 0) {
      // Intentionally create event lazily.
      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

      dispatchQueue.push({
        event: _event,
        listeners: _listeners
      });
    }
  }
}

// TODO: remove top-level side effect.
registerSimpleEvents();
registerEvents$2();
registerEvents$1();
registerEvents$3();
registerEvents();

function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  // TODO: we should remove the concept of a "SimpleEventPlugin".
  // This is the basic functionality of the event system. All
  // the other plugins are essentially polyfills. So the plugin
  // should probably be inlined somewhere and have its logic
  // be core the to event system. This would potentially allow
  // us to ship builds of React without the polyfilled plugins below.
  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
  // event's native "bubble" phase, which means that we're
  // not in the capture phase. That's because we emulate
  // the capture phase here still. This is a trade-off,
  // because in an ideal world we would not emulate and use
  // the phases properly, like we do with the SimpleEvent
  // plugin. However, the plugins below either expect
  // emulation (EnterLeave) or use state localized to that
  // plugin (BeforeInput, Change, Select). The state in
  // these modules complicates things, as you'll essentially
  // get the case where the capture phase event might change
  // state, only for the following bubble event to come in
  // later and not trigger anything as the state now
  // invalidates the heuristics of the event plugin. We
  // could alter all these plugins to work in such ways, but
  // that might cause other unknown side-effects that we
  // can't foresee right now.

  if (shouldProcessPolyfillPlugins) {
    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
  }
} // List of events that need to be individually attached to media elements.


var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'resize', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
// set them on the actual target element itself. This is primarily
// because these events do not consistently bubble in the DOM.

var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

function executeDispatch(event, listener, currentTarget) {
  var type = event.type || 'unknown-event';
  event.currentTarget = currentTarget;
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
  var previousInstance;

  if (inCapturePhase) {
    for (var i = dispatchListeners.length - 1; i >= 0; i--) {
      var _dispatchListeners$i = dispatchListeners[i],
          instance = _dispatchListeners$i.instance,
          currentTarget = _dispatchListeners$i.currentTarget,
          listener = _dispatchListeners$i.listener;

      if (instance !== previousInstance && event.isPropagationStopped()) {
        return;
      }

      executeDispatch(event, listener, currentTarget);
      previousInstance = instance;
    }
  } else {
    for (var _i = 0; _i < dispatchListeners.length; _i++) {
      var _dispatchListeners$_i = dispatchListeners[_i],
          _instance = _dispatchListeners$_i.instance,
          _currentTarget = _dispatchListeners$_i.currentTarget,
          _listener = _dispatchListeners$_i.listener;

      if (_instance !== previousInstance && event.isPropagationStopped()) {
        return;
      }

      executeDispatch(event, _listener, _currentTarget);
      previousInstance = _instance;
    }
  }
}

function processDispatchQueue(dispatchQueue, eventSystemFlags) {
  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

  for (var i = 0; i < dispatchQueue.length; i++) {
    var _dispatchQueue$i = dispatchQueue[i],
        event = _dispatchQueue$i.event,
        listeners = _dispatchQueue$i.listeners;
    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
  } // This would be a good time to rethrow if any of the event handlers threw.


  rethrowCaughtError();
}

function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
  var nativeEventTarget = getEventTarget(nativeEvent);
  var dispatchQueue = [];
  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  processDispatchQueue(dispatchQueue, eventSystemFlags);
}

function listenToNonDelegatedEvent(domEventName, targetElement) {
  {
    if (!nonDelegatedEvents.has(domEventName)) {
      error('Did not expect a listenToNonDelegatedEvent() call for "%s". ' + 'This is a bug in React. Please file an issue.', domEventName);
    }
  }

  var isCapturePhaseListener = false;
  var listenerSet = getEventListenerSet(targetElement);
  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

  if (!listenerSet.has(listenerSetKey)) {
    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
    listenerSet.add(listenerSetKey);
  }
}
function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
  {
    if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
      error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. ' + 'This is a bug in React. Please file an issue.', domEventName);
    }
  }

  var eventSystemFlags = 0;

  if (isCapturePhaseListener) {
    eventSystemFlags |= IS_CAPTURE_PHASE;
  }

  addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
} // This is only used by createEventHandle when the
var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
function listenToAllSupportedEvents(rootContainerElement) {
  if (!rootContainerElement[listeningMarker]) {
    rootContainerElement[listeningMarker] = true;
    allNativeEvents.forEach(function (domEventName) {
      // We handle selectionchange separately because it
      // doesn't bubble and needs to be on the document.
      if (domEventName !== 'selectionchange') {
        if (!nonDelegatedEvents.has(domEventName)) {
          listenToNativeEvent(domEventName, false, rootContainerElement);
        }

        listenToNativeEvent(domEventName, true, rootContainerElement);
      }
    });
    var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;

    if (ownerDocument !== null) {
      // The selectionchange event also needs deduplication
      // but it is attached to the document.
      if (!ownerDocument[listeningMarker]) {
        ownerDocument[listeningMarker] = true;
        listenToNativeEvent('selectionchange', false, ownerDocument);
      }
    }
  }
}

function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
  // active and not passive.

  var isPassiveListener = undefined;

  if (passiveBrowserEventsSupported) {
    // Browsers introduced an intervention, making these events
    // passive by default on document. React doesn't bind them
    // to document anymore, but changing this now would undo
    // the performance wins from the change. So we emulate
    // the existing behavior manually on the roots now.
    // https://github.com/facebook/react/issues/19651
    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
      isPassiveListener = true;
    }
  }

  targetContainer =  targetContainer;
  var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we


  if (isCapturePhaseListener) {
    if (isPassiveListener !== undefined) {
      unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
    } else {
      unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
    }
  } else {
    if (isPassiveListener !== undefined) {
      unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
    } else {
      unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
  }
}

function isMatchingRootContainer(grandContainer, targetContainer) {
  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
}

function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
  var ancestorInst = targetInst;

  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

    if (targetInst !== null) {
      // The below logic attempts to work out if we need to change
      // the target fiber to a different ancestor. We had similar logic
      // in the legacy event system, except the big difference between
      // systems is that the modern event system now has an event listener
      // attached to each React Root and React Portal Root. Together,
      // the DOM nodes representing these roots are the "rootContainer".
      // To figure out which ancestor instance we should use, we traverse
      // up the fiber tree from the target instance and attempt to find
      // root boundaries that match that of our current "rootContainer".
      // If we find that "rootContainer", we find the parent fiber
      // sub-tree for that root and make that our ancestor instance.
      var node = targetInst;

      mainLoop: while (true) {
        if (node === null) {
          return;
        }

        var nodeTag = node.tag;

        if (nodeTag === HostRoot || nodeTag === HostPortal) {
          var container = node.stateNode.containerInfo;

          if (isMatchingRootContainer(container, targetContainerNode)) {
            break;
          }

          if (nodeTag === HostPortal) {
            // The target is a portal, but it's not the rootContainer we're looking for.
            // Normally portals handle their own events all the way down to the root.
            // So we should be able to stop now. However, we don't know if this portal
            // was part of *our* root.
            var grandNode = node.return;

            while (grandNode !== null) {
              var grandTag = grandNode.tag;

              if (grandTag === HostRoot || grandTag === HostPortal) {
                var grandContainer = grandNode.stateNode.containerInfo;

                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                  // This is the rootContainer we're looking for and we found it as
                  // a parent of the Portal. That means we can ignore it because the
                  // Portal will bubble through to us.
                  return;
                }
              }

              grandNode = grandNode.return;
            }
          } // Now we need to find it's corresponding host fiber in the other
          // tree. To do this we can use getClosestInstanceFromNode, but we
          // need to validate that the fiber is a host instance, otherwise
          // we need to traverse up through the DOM till we find the correct
          // node that is from the other tree.


          while (container !== null) {
            var parentNode = getClosestInstanceFromNode(container);

            if (parentNode === null) {
              return;
            }

            var parentTag = parentNode.tag;

            if (parentTag === HostComponent || parentTag === HostText) {
              node = ancestorInst = parentNode;
              continue mainLoop;
            }

            container = container.parentNode;
          }
        }

        node = node.return;
      }
    }
  }

  batchedUpdates(function () {
    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
  });
}

function createDispatchListener(instance, listener, currentTarget) {
  return {
    instance: instance,
    listener: listener,
    currentTarget: currentTarget
  };
}

function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
  var captureName = reactName !== null ? reactName + 'Capture' : null;
  var reactEventName = inCapturePhase ? captureName : reactName;
  var listeners = [];
  var instance = targetFiber;
  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

  while (instance !== null) {
    var _instance2 = instance,
        stateNode = _instance2.stateNode,
        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

    if (tag === HostComponent && stateNode !== null) {
      lastHostComponent = stateNode; // createEventHandle listeners


      if (reactEventName !== null) {
        var listener = getListener(instance, reactEventName);

        if (listener != null) {
          listeners.push(createDispatchListener(instance, listener, lastHostComponent));
        }
      }
    } // If we are only accumulating events for the target, then we don't
    // continue to propagate through the React fiber tree to find other
    // listeners.


    if (accumulateTargetOnly) {
      break;
    } // If we are processing the onBeforeBlur event, then we need to take

    instance = instance.return;
  }

  return listeners;
} // We should only use this function for:
// - BeforeInputEventPlugin
// - ChangeEventPlugin
// - SelectEventPlugin
// This is because we only process these plugins
// in the bubble phase, so we need to accumulate two
// phase event listeners (via emulation).

function accumulateTwoPhaseListeners(targetFiber, reactName) {
  var captureName = reactName + 'Capture';
  var listeners = [];
  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

  while (instance !== null) {
    var _instance3 = instance,
        stateNode = _instance3.stateNode,
        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

    if (tag === HostComponent && stateNode !== null) {
      var currentTarget = stateNode;
      var captureListener = getListener(instance, captureName);

      if (captureListener != null) {
        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
      }

      var bubbleListener = getListener(instance, reactName);

      if (bubbleListener != null) {
        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
      }
    }

    instance = instance.return;
  }

  return listeners;
}

function getParent(inst) {
  if (inst === null) {
    return null;
  }

  do {
    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);

  if (inst) {
    return inst;
  }

  return null;
}
/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */


function getLowestCommonAncestor(instA, instB) {
  var nodeA = instA;
  var nodeB = instB;
  var depthA = 0;

  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }

  var depthB = 0;

  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
    depthB++;
  } // If A is deeper, crawl up.


  while (depthA - depthB > 0) {
    nodeA = getParent(nodeA);
    depthA--;
  } // If B is deeper, crawl up.


  while (depthB - depthA > 0) {
    nodeB = getParent(nodeB);
    depthB--;
  } // Walk in lockstep until we find a match.


  var depth = depthA;

  while (depth--) {
    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
      return nodeA;
    }

    nodeA = getParent(nodeA);
    nodeB = getParent(nodeB);
  }

  return null;
}

function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
  var registrationName = event._reactName;
  var listeners = [];
  var instance = target;

  while (instance !== null) {
    if (instance === common) {
      break;
    }

    var _instance4 = instance,
        alternate = _instance4.alternate,
        stateNode = _instance4.stateNode,
        tag = _instance4.tag;

    if (alternate !== null && alternate === common) {
      break;
    }

    if (tag === HostComponent && stateNode !== null) {
      var currentTarget = stateNode;

      if (inCapturePhase) {
        var captureListener = getListener(instance, registrationName);

        if (captureListener != null) {
          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
        }
      } else if (!inCapturePhase) {
        var bubbleListener = getListener(instance, registrationName);

        if (bubbleListener != null) {
          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
        }
      }
    }

    instance = instance.return;
  }

  if (listeners.length !== 0) {
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
  }
} // We should only use this function for:
// - EnterLeaveEventPlugin
// This is because we only process this plugin
// in the bubble phase, so we need to accumulate two
// phase event listeners.


function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;

  if (from !== null) {
    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
  }

  if (to !== null && enterEvent !== null) {
    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
  }
}
function getListenerSetKey(domEventName, capture) {
  return domEventName + "__" + (capture ? 'capture' : 'bubble');
}

var didWarnInvalidHydration = false;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML$1 = '__html';
var warnedUnknownTags;
var validatePropertiesInDevelopment;
var warnForPropDifference;
var warnForExtraAttributes;
var warnForInvalidEventListener;
var canDiffStyleForHydrationWarning;
var normalizeHTML;

{
  warnedUnknownTags = {
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props, {
      registrationNameDependencies: registrationNameDependencies,
      possibleRegistrationNames: possibleRegistrationNames
    });
  }; // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807


  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

    if (normalizedServerValue === normalizedClientValue) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });

    error('Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  }; // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.


  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
} // HTML parsing normalizes CR and CRLF to LF.
// It also can turn \u0000 into \uFFFD inside attributes.
// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
// If we have a mismatch, it might be caused by that.
// We will still patch up in this case but not fire the warning.


var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

function normalizeMarkupForTextOrAttribute(markup) {
  {
    checkHtmlStringCoercion(markup);
  }

  var markupString = typeof markup === 'string' ? markup : '' + markup;
  return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
}

function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
  var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
  var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

  if (normalizedServerText === normalizedClientText) {
    return;
  }

  if (shouldWarnDev) {
    {
      if (!didWarnInvalidHydration) {
        didWarnInvalidHydration = true;

        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
      }
    }
  }

  if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
    // In concurrent roots, we throw when there's a text mismatch and revert to
    // client rendering, up to the nearest Suspense boundary.
    throw new Error('Text content does not match server-rendered HTML.');
  }
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = nextProps[propKey];

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];

    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.

  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;

  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }

  if (namespaceURI === HTML_NAMESPACE) {
    {
      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.

      if (!isCustomComponentTag && type !== type.toLowerCase()) {
        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
      }
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');

      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.

      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, {
        is: props.is
      });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239

      if (type === 'select') {
        var node = domElement;

        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;

        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}
function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}
function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);

  {
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  var props;

  switch (tag) {
    case 'dialog':
      listenToNonDelegatedEvent('cancel', domElement);
      listenToNonDelegatedEvent('close', domElement);
      props = rawProps;
      break;

    case 'iframe':
    case 'object':
    case 'embed':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the load event.
      listenToNonDelegatedEvent('load', domElement);
      props = rawProps;
      break;

    case 'video':
    case 'audio':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for all the media events.
      for (var i = 0; i < mediaEventTypes.length; i++) {
        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
      }

      props = rawProps;
      break;

    case 'source':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the error event.
      listenToNonDelegatedEvent('error', domElement);
      props = rawProps;
      break;

    case 'img':
    case 'image':
    case 'link':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for error and load events.
      listenToNonDelegatedEvent('error', domElement);
      listenToNonDelegatedEvent('load', domElement);
      props = rawProps;
      break;

    case 'details':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the toggle event.
      listenToNonDelegatedEvent('toggle', domElement);
      props = rawProps;
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'option':
      validateProps(domElement, rawProps);
      props = rawProps;
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    default:
      props = rawProps;
  }

  assertValidProps(tag, props);
  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;

    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;

    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }
} // Calculate the diff between the two objects.

function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;
  var lastProps;
  var nextProps;

  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'select':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'textarea':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;

    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;

      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  assertValidProps(tag, nextProps);
  var propKey;
  var styleName;
  var styleUpdates = null;

  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }

    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];

      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }

          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the allowed property list in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }

  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }

      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        } // Update styles that changed since `lastProp`.


        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }

          updatePayload.push(propKey, styleUpdates);
        }

        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, nextHtml);
        }
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string' || typeof nextProp === 'number') {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }

      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the allowed property list during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }

  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
    }

    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }

  return updatePayload;
} // Apply the diff.

function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.

  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;

    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;

    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();

    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }

    return possibleStandardNames[lowerCasedName] || null;
  }
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
  var isCustomComponentTag;
  var extraAttributeNames;

  {
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  switch (tag) {
    case 'dialog':
      listenToNonDelegatedEvent('cancel', domElement);
      listenToNonDelegatedEvent('close', domElement);
      break;

    case 'iframe':
    case 'object':
    case 'embed':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the load event.
      listenToNonDelegatedEvent('load', domElement);
      break;

    case 'video':
    case 'audio':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for all the media events.
      for (var i = 0; i < mediaEventTypes.length; i++) {
        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
      }

      break;

    case 'source':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the error event.
      listenToNonDelegatedEvent('error', domElement);
      break;

    case 'img':
    case 'image':
    case 'link':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for error and load events.
      listenToNonDelegatedEvent('error', domElement);
      listenToNonDelegatedEvent('load', domElement);
      break;

    case 'details':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the toggle event.
      listenToNonDelegatedEvent('toggle', domElement);
      break;

    case 'input':
      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'option':
      validateProps(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;

    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();

      switch (name) {
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        case 'value':
          break;

        case 'checked':
          break;

        case 'selected':
          break;

        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;

  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = rawProps[propKey];

    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
          }

          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
          }

          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }
    } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);

      if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

        if (nextHtml != null) {
          var expectedHTML = normalizeHTML(domElement, nextHtml);

          if (expectedHTML !== serverHTML) {
            warnForPropDifference(propKey, serverHTML, expectedHTML);
          }
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');

          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;

        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;

          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }

          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);

            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

              extraAttributeNames.delete(standardName);
            } // $FlowFixMe - Should be inferred as not undefined.


            extraAttributeNames.delete(propKey);
          }

          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        var dontWarnCustomElement = enableCustomElementPropertySupport  ;

        if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    if (shouldWarnDev) {
      if ( // $FlowFixMe - Should be inferred as not undefined.
      extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
      }
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;

    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  return updatePayload;
}
function diffHydratedText(textNode, text, isConcurrentMode) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}
function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}
function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }

    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}
function restoreControlledState$3(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;

    case 'textarea':
      restoreControlledState$2(domElement, props);
      return;

    case 'select':
      restoreControlledState$1(domElement, props);
      return;
  }
}

var validateDOMNesting = function () {};

var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.
  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  var emptyAncestorInfo = {
    current: null,
    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,
    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);

    var info = {
      tag: tag
    };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    } // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };
  /**
   * Returns whether
   */


  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';

      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but

      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

      case 'html':
        return tag === 'head' || tag === 'body' || tag === 'frameset';

      case 'frameset':
        return tag === 'frame';

      case '#document':
        return tag === 'html';
    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frameset':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };
  /**
   * Returns whether
   */


  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn$1 = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      if (childTag != null) {
        error('validateDOMNesting: when childText is passed, childTag should be null');
      }

      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;

    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

    if (didWarn$1[warnKey]) {
      return;
    }

    didWarn$1[warnKey] = true;
    var tagDisplayName = childTag;
    var whitespaceInfo = '';

    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';

      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
      }

      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
    } else {
      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
    }
  };
}

var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';
var SUSPENSE_PENDING_START_DATA = '$?';
var SUSPENSE_FALLBACK_START_DATA = '$!';
var STYLE$1 = 'style';
var eventsEnabled = null;
var selectionInformation = null;
function getRootHostContext(rootContainerInstance) {
  var type;
  var namespace;
  var nodeType = rootContainerInstance.nodeType;

  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }

    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }

  {
    var validatedTag = type.toLowerCase();
    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getPublicInstance(instance) {
  return instance;
}
function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  var activeInstance = null;

  setEnabled(false);
  return activeInstance;
}
function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  setEnabled(eventsEnabled);
  eventsEnabled = null;
  selectionInformation = null;
}
function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace;

  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }

    parentNamespace = hostContextDev.namespace;
  }

  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}
function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);

  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;

    case 'img':
      return true;

    default:
      return false;
  }
}
function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;

    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }

  return diffProperties(domElement, type, oldProps, newProps);
}
function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }

  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
function getCurrentEventPriority() {
  var currentEvent = window.event;

  if (currentEvent === undefined) {
    return DefaultEventPriority;
  }

  return getEventPriority(currentEvent.type);
}
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.

var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1;
var localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------
var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function (callback) {
  return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
} : scheduleTimeout; // TODO: Determine the best fallback here.

function handleErrorInNextTick(error) {
  setTimeout(function () {
    throw error;
  });
} // -------------------
function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      if (newProps.autoFocus) {
        domElement.focus();
      }

      return;

    case 'img':
      {
        if (newProps.src) {
          domElement.src = newProps.src;
        }

        return;
      }
  }
}
function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Apply the diff to the DOM node.
  updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
  // with current event handlers.

  updateFiberProps(domElement, newProps);
}
function resetTextContent(domElement) {
  setTextContent(domElement, '');
}
function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}
function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function appendChildToContainer(container, child) {
  var parentNode;

  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  } // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918


  var reactRootContainer = container._reactRootContainer;

  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}
function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}
function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}

function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}
function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}
function clearSuspenseBoundary(parentInstance, suspenseInstance) {
  var node = suspenseInstance; // Delete all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  do {
    var nextNode = node.nextSibling;
    parentInstance.removeChild(node);

    if (nextNode && nextNode.nodeType === COMMENT_NODE) {
      var data = nextNode.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.

          retryIfBlockedOn(suspenseInstance);
          return;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
        depth++;
      }
    }

    node = nextNode;
  } while (node); // TODO: Warn, we didn't find the end comment boundary.
  // Retry if any event replaying was blocked on this.


  retryIfBlockedOn(suspenseInstance);
}
function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
  if (container.nodeType === COMMENT_NODE) {
    clearSuspenseBoundary(container.parentNode, suspenseInstance);
  } else if (container.nodeType === ELEMENT_NODE) {
    clearSuspenseBoundary(container, suspenseInstance);
  } // Retry if any event replaying was blocked on this.


  retryIfBlockedOn(container);
}
function hideInstance(instance) {
  // TODO: Does this work for all element types? What about MathML? Should we
  // pass host context to this method?
  instance = instance;
  var style = instance.style;

  if (typeof style.setProperty === 'function') {
    style.setProperty('display', 'none', 'important');
  } else {
    style.display = 'none';
  }
}
function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}
function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE$1];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}
function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
}
function clearContainer(container) {
  if (container.nodeType === ELEMENT_NODE) {
    container.textContent = '';
  } else if (container.nodeType === DOCUMENT_NODE) {
    if (container.documentElement) {
      container.removeChild(container.documentElement);
    }
  }
} // -------------------
function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  } // This has now been refined to an element node.


  return instance;
}
function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a text node.


  return instance;
}
function canHydrateSuspenseInstance(instance) {
  if (instance.nodeType !== COMMENT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a suspense node.


  return instance;
}
function isSuspenseInstancePending(instance) {
  return instance.data === SUSPENSE_PENDING_START_DATA;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === SUSPENSE_FALLBACK_START_DATA;
}
function getSuspenseInstanceFallbackErrorDetails(instance) {
  var dataset = instance.nextSibling && instance.nextSibling.dataset;
  var digest, message, stack;

  if (dataset) {
    digest = dataset.dgst;

    {
      message = dataset.msg;
      stack = dataset.stck;
    }
  }

  {
    return {
      message: message,
      digest: digest,
      stack: stack
    };
  } // let value = {message: undefined, hash: undefined};
  // const nextSibling = instance.nextSibling;
  // if (nextSibling) {
  //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
  //   value.message = dataset.msg;
  //   value.hash = dataset.hash;
  //   if (true) {
  //     value.stack = dataset.stack;
  //   }
  // }
  // return value;

}
function registerSuspenseInstanceRetry(instance, callback) {
  instance._reactRetry = callback;
}

function getNextHydratable(node) {
  // Skip non-hydratable nodes.
  for (; node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;

    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
      break;
    }

    if (nodeType === COMMENT_NODE) {
      var nodeData = node.data;

      if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
        break;
      }

      if (nodeData === SUSPENSE_END_DATA) {
        return null;
      }
    }
  }

  return node;
}

function getNextHydratableSibling(instance) {
  return getNextHydratable(instance.nextSibling);
}
function getFirstHydratableChild(parentInstance) {
  return getNextHydratable(parentInstance.firstChild);
}
function getFirstHydratableChildWithinContainer(parentContainer) {
  return getNextHydratable(parentContainer.firstChild);
}
function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
  return getNextHydratable(parentInstance.nextSibling);
}
function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
  // get attached.

  updateFiberProps(instance, props);
  var parentNamespace;

  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  } // TODO: Temporary hack to check if we're in a concurrent root. We can delete
  // when the legacy root API is removed.


  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
}
function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
  precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
  // when the legacy root API is removed.

  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
  return diffHydratedText(textInstance, text);
}
function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, suspenseInstance);
}
function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        depth++;
      }
    }

    node = node.nextSibling;
  } // TODO: Warn, we didn't find the end comment boundary.


  return null;
} // Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.

function getParentSuspenseInstance(targetInstance) {
  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        if (depth === 0) {
          return node;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_END_DATA) {
        depth++;
      }
    }

    node = node.previousSibling;
  }

  return null;
}
function commitHydratedContainer(container) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(container);
}
function commitHydratedSuspenseInstance(suspenseInstance) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(suspenseInstance);
}
function shouldDeleteUnhydratedTailInstances(parentType) {
  return parentType !== 'head' && parentType !== 'body';
}
function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
  var shouldWarnDev = true;
  checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
}
function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    var shouldWarnDev = true;
    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
  }
}
function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}
function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
  {
    // $FlowFixMe: Only Element or Document can be parent nodes.
    var parentNode = parentInstance.parentNode;

    if (parentNode !== null) {
      if (instance.nodeType === ELEMENT_NODE) {
        warnForDeletedHydratableElement(parentNode, instance);
      } else if (instance.nodeType === COMMENT_NODE) ; else {
        warnForDeletedHydratableText(parentNode, instance);
      }
    }
  }
}
function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
  {
    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      if (instance.nodeType === ELEMENT_NODE) {
        warnForDeletedHydratableElement(parentInstance, instance);
      } else if (instance.nodeType === COMMENT_NODE) ; else {
        warnForDeletedHydratableText(parentInstance, instance);
      }
    }
  }
}
function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type);
  }
}
function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}
function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
  {
    // $FlowFixMe: Only Element or Document can be parent nodes.
    var parentNode = parentInstance.parentNode;
    if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
  }
}
function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
  {
    // $FlowFixMe: Only Element or Document can be parent nodes.
    var parentNode = parentInstance.parentNode;
    if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
  }
}
function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
  {
    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForInsertedHydratedElement(parentInstance, type);
    }
  }
}
function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
  {
    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForInsertedHydratedText(parentInstance, text);
    }
  }
}
function errorHydratingContainer(parentContainer) {
  {
    // TODO: This gets logged by onRecoverableError, too, so we should be
    // able to remove it.
    error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());
  }
}
function preparePortalMount(portalInstance) {
  listenToAllSupportedEvents(portalInstance);
}

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactFiber$' + randomKey;
var internalPropsKey = '__reactProps$' + randomKey;
var internalContainerInstanceKey = '__reactContainer$' + randomKey;
var internalEventHandlersKey = '__reactEvents$' + randomKey;
var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
function detachDeletedInstance(node) {
  // TODO: This function is only called on host components. I don't think all of
  // these fields are relevant.
  delete node[internalInstanceKey];
  delete node[internalPropsKey];
  delete node[internalEventHandlersKey];
  delete node[internalEventHandlerListenersKey];
  delete node[internalEventHandlesSetKey];
}
function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}
function markContainerAsRoot(hostRoot, node) {
  node[internalContainerInstanceKey] = hostRoot;
}
function unmarkContainerAsRoot(node) {
  node[internalContainerInstanceKey] = null;
}
function isContainerMarkedAsRoot(node) {
  return !!node[internalContainerInstanceKey];
} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you will not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.

function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];

  if (targetInst) {
    // Don't return HostRoot or SuspenseComponent here.
    return targetInst;
  } // If the direct event target isn't a React owned DOM node, we need to look
  // to see if one of its parents is a React owned DOM node.


  var parentNode = targetNode.parentNode;

  while (parentNode) {
    // We'll check if this is a container root that could include
    // React nodes in the future. We need to check this first because
    // if we're a child of a dehydrated container, we need to first
    // find that inner container before moving on to finding the parent
    // instance. Note that we don't check this field on  the targetNode
    // itself because the fibers are conceptually between the container
    // node and the first child. It isn't surrounding the container node.
    // If it's not a container, we check if it's an instance.
    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

    if (targetInst) {
      // Since this wasn't the direct target of the event, we might have
      // stepped past dehydrated DOM nodes to get here. However they could
      // also have been non-React nodes. We need to answer which one.
      // If we the instance doesn't have any children, then there can't be
      // a nested suspense boundary within it. So we can use this as a fast
      // bailout. Most of the time, when people add non-React children to
      // the tree, it is using a ref to a child-less DOM node.
      // Normally we'd only need to check one of the fibers because if it
      // has ever gone from having children to deleting them or vice versa
      // it would have deleted the dehydrated boundary nested inside already.
      // However, since the HostRoot starts out with an alternate it might
      // have one on the alternate so we need to check in case this was a
      // root.
      var alternate = targetInst.alternate;

      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
        // Next we need to figure out if the node that skipped past is
        // nested within a dehydrated boundary and if so, which one.
        var suspenseInstance = getParentSuspenseInstance(targetNode);

        while (suspenseInstance !== null) {
          // We found a suspense instance. That means that we haven't
          // hydrated it yet. Even though we leave the comments in the
          // DOM after hydrating, and there are boundaries in the DOM
          // that could already be hydrated, we wouldn't have found them
          // through this pass since if the target is hydrated it would
          // have had an internalInstanceKey on it.
          // Let's get the fiber associated with the SuspenseComponent
          // as the deepest instance.
          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

          if (targetSuspenseInst) {
            return targetSuspenseInst;
          } // If we don't find a Fiber on the comment, it might be because
          // we haven't gotten to hydrate it yet. There might still be a
          // parent boundary that hasn't above this one so we need to find
          // the outer most that is known.


          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
          // host component also hasn't hydrated yet. We can return it
          // below since it will bail out on the isMounted check later.
        }
      }

      return targetInst;
    }

    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }

  return null;
}
/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

function getInstanceFromNode(node) {
  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
      return inst;
    } else {
      return null;
    }
  }

  return null;
}
/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

function getNodeFromInstance(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  } // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.


  throw new Error('getNodeFromInstance: Invalid argument.');
}
function getFiberCurrentPropsFromNode(node) {
  return node[internalPropsKey] || null;
}
function updateFiberProps(node, props) {
  node[internalPropsKey] = props;
}
function getEventListenerSet(node) {
  var elementListenerSet = node[internalEventHandlersKey];

  if (elementListenerSet === undefined) {
    elementListenerSet = node[internalEventHandlersKey] = new Set();
  }

  return elementListenerSet;
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            // eslint-disable-next-line react-internal/prod-error-codes
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      error('Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      error('Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  {
    if (contextStackCursor.current !== emptyContextObject) {
      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;

          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext = instance.getChildContext();

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
      }
    }

    {
      var name = getComponentNameFromFiber(fiber) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name);
    }

    return assign({}, parentContext, childContext);
  }
}

function pushContextProvider(workInProgress) {
  {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  {
    var instance = workInProgress.stateNode;

    if (!instance) {
      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');
  }
}

var LegacyRoot = 0;
var ConcurrentRoot = 1;

var syncQueue = null;
var includesLegacySyncCallbacks = false;
var isFlushingSyncQueue = false;
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback];
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }
}
function scheduleLegacySyncCallback(callback) {
  includesLegacySyncCallbacks = true;
  scheduleSyncCallback(callback);
}
function flushSyncCallbacksOnlyInLegacyMode() {
  // Only flushes the queue if there's a legacy sync callback scheduled.
  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
  // it might make more sense for the queue to be a list of roots instead of a
  // list of generic callbacks. Then we can have two: one for legacy roots, one
  // for concurrent roots. And this method would only flush the legacy ones.
  if (includesLegacySyncCallbacks) {
    flushSyncCallbacks();
  }
}
function flushSyncCallbacks() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrance.
    isFlushingSyncQueue = true;
    var i = 0;
    var previousUpdatePriority = getCurrentUpdatePriority();

    try {
      var isSync = true;
      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
      // queue is in the render or commit phases.

      setCurrentUpdatePriority(DiscreteEventPriority);

      for (; i < queue.length; i++) {
        var callback = queue[i];

        do {
          callback = callback(isSync);
        } while (callback !== null);
      }

      syncQueue = null;
      includesLegacySyncCallbacks = false;
    } catch (error) {
      // If something throws, leave the remaining callbacks on the queue.
      if (syncQueue !== null) {
        syncQueue = syncQueue.slice(i + 1);
      } // Resume flushing in the next tick


      scheduleCallback(ImmediatePriority, flushSyncCallbacks);
      throw error;
    } finally {
      setCurrentUpdatePriority(previousUpdatePriority);
      isFlushingSyncQueue = false;
    }
  }

  return null;
}

// TODO: Use the unified fiber stack module instead of this local one?
// Intentionally not using it yet to derisk the initial implementation, because
// the way we push/pop these values is a bit unusual. If there's a mistake, I'd
// rather the ids be wrong than crash the whole reconciler.
var forkStack = [];
var forkStackIndex = 0;
var treeForkProvider = null;
var treeForkCount = 0;
var idStack = [];
var idStackIndex = 0;
var treeContextProvider = null;
var treeContextId = 1;
var treeContextOverflow = '';
function isForkedChild(workInProgress) {
  warnIfNotHydrating();
  return (workInProgress.flags & Forked) !== NoFlags;
}
function getForksAtLevel(workInProgress) {
  warnIfNotHydrating();
  return treeForkCount;
}
function getTreeId() {
  var overflow = treeContextOverflow;
  var idWithLeadingBit = treeContextId;
  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
  return id.toString(32) + overflow;
}
function pushTreeFork(workInProgress, totalChildren) {
  // This is called right after we reconcile an array (or iterator) of child
  // fibers, because that's the only place where we know how many children in
  // the whole set without doing extra work later, or storing addtional
  // information on the fiber.
  //
  // That's why this function is separate from pushTreeId — it's called during
  // the render phase of the fork parent, not the child, which is where we push
  // the other context values.
  //
  // In the Fizz implementation this is much simpler because the child is
  // rendered in the same callstack as the parent.
  //
  // It might be better to just add a `forks` field to the Fiber type. It would
  // make this module simpler.
  warnIfNotHydrating();
  forkStack[forkStackIndex++] = treeForkCount;
  forkStack[forkStackIndex++] = treeForkProvider;
  treeForkProvider = workInProgress;
  treeForkCount = totalChildren;
}
function pushTreeId(workInProgress, totalChildren, index) {
  warnIfNotHydrating();
  idStack[idStackIndex++] = treeContextId;
  idStack[idStackIndex++] = treeContextOverflow;
  idStack[idStackIndex++] = treeContextProvider;
  treeContextProvider = workInProgress;
  var baseIdWithLeadingBit = treeContextId;
  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
  // of the id; we use it to account for leading 0s.

  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
  var slot = index + 1;
  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
  // consideration the leading 1 we use to mark the end of the sequence.

  if (length > 30) {
    // We overflowed the bitwise-safe range. Fall back to slower algorithm.
    // This branch assumes the length of the base id is greater than 5; it won't
    // work for smaller ids, because you need 5 bits per character.
    //
    // We encode the id in multiple steps: first the base id, then the
    // remaining digits.
    //
    // Each 5 bit sequence corresponds to a single base 32 character. So for
    // example, if the current id is 23 bits long, we can convert 20 of those
    // bits into a string of 4 characters, with 3 bits left over.
    //
    // First calculate how many bits in the base id represent a complete
    // sequence of characters.
    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.

    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.

    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.

    var restOfBaseId = baseId >> numberOfOverflowBits;
    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
    // we made more room, this time it won't overflow.

    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
    var restOfNewBits = slot << restOfBaseLength;
    var id = restOfNewBits | restOfBaseId;
    var overflow = newOverflow + baseOverflow;
    treeContextId = 1 << restOfLength | id;
    treeContextOverflow = overflow;
  } else {
    // Normal path
    var newBits = slot << baseLength;

    var _id = newBits | baseId;

    var _overflow = baseOverflow;
    treeContextId = 1 << length | _id;
    treeContextOverflow = _overflow;
  }
}
function pushMaterializedTreeId(workInProgress) {
  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
  // in its children.

  var returnFiber = workInProgress.return;

  if (returnFiber !== null) {
    var numberOfForks = 1;
    var slotIndex = 0;
    pushTreeFork(workInProgress, numberOfForks);
    pushTreeId(workInProgress, numberOfForks, slotIndex);
  }
}

function getBitLength(number) {
  return 32 - clz32(number);
}

function getLeadingBit(id) {
  return 1 << getBitLength(id) - 1;
}

function popTreeContext(workInProgress) {
  // Restore the previous values.
  // This is a bit more complicated than other context-like modules in Fiber
  // because the same Fiber may appear on the stack multiple times and for
  // different reasons. We have to keep popping until the work-in-progress is
  // no longer at the top of the stack.
  while (workInProgress === treeForkProvider) {
    treeForkProvider = forkStack[--forkStackIndex];
    forkStack[forkStackIndex] = null;
    treeForkCount = forkStack[--forkStackIndex];
    forkStack[forkStackIndex] = null;
  }

  while (workInProgress === treeContextProvider) {
    treeContextProvider = idStack[--idStackIndex];
    idStack[idStackIndex] = null;
    treeContextOverflow = idStack[--idStackIndex];
    idStack[idStackIndex] = null;
    treeContextId = idStack[--idStackIndex];
    idStack[idStackIndex] = null;
  }
}
function getSuspendedTreeContext() {
  warnIfNotHydrating();

  if (treeContextProvider !== null) {
    return {
      id: treeContextId,
      overflow: treeContextOverflow
    };
  } else {
    return null;
  }
}
function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
  warnIfNotHydrating();
  idStack[idStackIndex++] = treeContextId;
  idStack[idStackIndex++] = treeContextOverflow;
  idStack[idStackIndex++] = treeContextProvider;
  treeContextId = suspendedContext.id;
  treeContextOverflow = suspendedContext.overflow;
  treeContextProvider = workInProgress;
}

function warnIfNotHydrating() {
  {
    if (!getIsHydrating()) {
      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');
    }
  }
}

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
// due to earlier mismatches or a suspended fiber.

var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary

var hydrationErrors = null;

function warnIfHydrating() {
  {
    if (isHydrating) {
      error('We should not be hydrating here. This is a bug in React. Please file a bug.');
    }
  }
}

function markDidThrowWhileHydratingDEV() {
  {
    didSuspendOrErrorDEV = true;
  }
}
function didSuspendOrErrorWhileHydratingDEV() {
  {
    return didSuspendOrErrorDEV;
  }
}

function enterHydrationState(fiber) {

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  hydrationErrors = null;
  didSuspendOrErrorDEV = false;
  return true;
}

function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {

  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  hydrationErrors = null;
  didSuspendOrErrorDEV = false;

  if (treeContext !== null) {
    restoreSuspendedTreeContext(fiber, treeContext);
  }

  return true;
}

function warnUnhydratedInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
          break;
        }

      case HostComponent:
        {
          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.
          isConcurrentMode);
          break;
        }

      case SuspenseComponent:
        {
          var suspenseState = returnFiber.memoizedState;
          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
          break;
        }
    }
  }
}

function deleteHydratableInstance(returnFiber, instance) {
  warnUnhydratedInstance(returnFiber, instance);
  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  var deletions = returnFiber.deletions;

  if (deletions === null) {
    returnFiber.deletions = [childToDelete];
    returnFiber.flags |= ChildDeletion;
  } else {
    deletions.push(childToDelete);
  }
}

function warnNonhydratedInstance(returnFiber, fiber) {
  {
    if (didSuspendOrErrorDEV) {
      // Inside a boundary that already suspended. We're currently rendering the
      // siblings of a suspended node. The mismatch may be due to the missing
      // data, so it's probably a false positive.
      return;
    }

    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableInstanceWithinContainer(parentContainer, type);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              {
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.
                isConcurrentMode);
                break;
              }

            case HostText:
              {
                var _text = fiber.pendingProps;

                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;

                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.
                _isConcurrentMode);
                break;
              }
          }

          break;
        }

      case SuspenseComponent:
        {
          var suspenseState = returnFiber.memoizedState;
          var _parentInstance = suspenseState.dehydrated;
          if (_parentInstance !== null) switch (fiber.tag) {
            case HostComponent:
              var _type2 = fiber.type;
              var _props2 = fiber.pendingProps;
              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
              break;

            case HostText:
              var _text2 = fiber.pendingProps;
              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
              break;
          }
          break;
        }

      default:
        return;
    }
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.flags = fiber.flags & ~Hydrating | Placement;
  warnNonhydratedInstance(returnFiber, fiber);
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type);

        if (instance !== null) {
          fiber.stateNode = instance;
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(instance);
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.

          nextHydratableInstance = null;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {
        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

        if (suspenseInstance !== null) {
          var suspenseState = {
            dehydrated: suspenseInstance,
            treeContext: getSuspendedTreeContext(),
            retryLane: OffscreenLane
          };
          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
          // This simplifies the code for getHostSibling and deleting nodes,
          // since it doesn't have to consider all Suspense boundaries and
          // check if they're dehydrated ones or not.

          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
          dehydratedFragment.return = fiber;
          fiber.child = dehydratedFragment;
          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
          // it during the first pass. Instead, we'll reenter it later.

          nextHydratableInstance = null;
          return true;
        }

        return false;
      }

    default:
      return false;
  }
}

function shouldClientRenderOnMismatch(fiber) {
  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
}

function throwOnHydrationMismatch(fiber) {
  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    if (shouldClientRenderOnMismatch(fiber)) {
      warnNonhydratedInstance(hydrationParentFiber, fiber);
      throwOnHydrationMismatch();
    } // Nothing to hydrate. Make it an insertion.


    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    if (shouldClientRenderOnMismatch(fiber)) {
      warnNonhydratedInstance(hydrationParentFiber, fiber);
      throwOnHydrationMismatch();
    } // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.


    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
    var prevHydrationParentFiber = hydrationParentFiber;

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
  }
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

  var instance = fiber.stateNode;
  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  if (shouldUpdate) {
    // We assume that prepareToHydrateHostTextInstance is called in a context where the
    // hydration parent is the parent host component of this host text.
    var returnFiber = hydrationParentFiber;

    if (returnFiber !== null) {
      switch (returnFiber.tag) {
        case HostRoot:
          {
            var parentContainer = returnFiber.stateNode.containerInfo;
            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
            isConcurrentMode);
            break;
          }

        case HostComponent:
          {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;

            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;

            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
            _isConcurrentMode2);
            break;
          }
      }
    }
  }

  return shouldUpdate;
}

function prepareToHydrateHostSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
  }

  hydrateSuspenseInstance(suspenseInstance, fiber);
}

function skipPastDehydratedSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  } // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them. We also don't delete anything inside the root container.


  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
    var nextInstance = nextHydratableInstance;

    if (nextInstance) {
      if (shouldClientRenderOnMismatch(fiber)) {
        warnIfUnhydratedTailNodes(fiber);
        throwOnHydrationMismatch();
      } else {
        while (nextInstance) {
          deleteHydratableInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function hasUnhydratedTailNodes() {
  return isHydrating && nextHydratableInstance !== null;
}

function warnIfUnhydratedTailNodes(fiber) {
  var nextInstance = nextHydratableInstance;

  while (nextInstance) {
    warnUnhydratedInstance(fiber, nextInstance);
    nextInstance = getNextHydratableSibling(nextInstance);
  }
}

function resetHydrationState() {

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
  didSuspendOrErrorDEV = false;
}

function upgradeHydrationErrorsToRecoverable() {
  if (hydrationErrors !== null) {
    // Successfully completed a forced client render. The errors that occurred
    // during the hydration attempt are now recovered. We will log them in
    // commit phase, once the entire tree has finished.
    queueRecoverableErrors(hydrationErrors);
    hydrationErrors = null;
  }
}

function getIsHydrating() {
  return isHydrating;
}

function queueHydrationError(error) {
  if (hydrationErrors === null) {
    hydrationErrors = [error];
  } else {
    hydrationErrors.push(error);
  }
}

var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var NoTransition = null;
function requestCurrentTransition() {
  return ReactCurrentBatchConfig$1.transition;
}

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictLegacyMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedupe strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      if (fiberArray.length === 0) {
        return;
      }

      var firstFiber = fiberArray[0];
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);

      try {
        setCurrentFiber(firstFiber);

        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
      } finally {
        resetCurrentFiber();
      }
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = assign({}, baseProps);
    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastFullyObservedContext = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastFullyObservedContext = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, context, nextValue) {
  {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
      }

      context._currentRenderer = rendererSigil;
    }
  }
}
function popProvider(context, providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);

  {
    {
      context._currentValue = currentValue;
    }
  }
}
function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
  // Update the child lanes of all the ancestors, including the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
      node.childLanes = mergeLanes(node.childLanes, renderLanes);

      if (alternate !== null) {
        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
      }
    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
    }

    if (node === propagationRoot) {
      break;
    }

    node = node.return;
  }

  {
    if (node !== propagationRoot) {
      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }
  }
}
function propagateContextChange(workInProgress, context, renderLanes) {
  {
    propagateContextChange_eager(workInProgress, context, renderLanes);
  }
}

function propagateContextChange_eager(workInProgress, context, renderLanes) {

  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var lane = pickArbitraryLane(renderLanes);
            var update = createUpdate(NoTimestamp, lane);
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.
            // Inlined `enqueueUpdate` to remove interleaved update check

            var updateQueue = fiber.updateQueue;

            if (updateQueue === null) ; else {
              var sharedQueue = updateQueue.shared;
              var pending = sharedQueue.pending;

              if (pending === null) {
                // This is the first update. Create a circular list.
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }

              sharedQueue.pending = update;
            }
          }

          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
          var alternate = fiber.alternate;

          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
          }

          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.

          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
          // dependency list.

          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else if (fiber.tag === DehydratedFragment) {
      // If a dehydrated suspense boundary is in this subtree, we don't know
      // if it will have any context consumers in it. The best we can do is
      // mark it as having updates.
      var parentSuspense = fiber.return;

      if (parentSuspense === null) {
        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
      }

      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
      var _alternate = parentSuspense.alternate;

      if (_alternate !== null) {
        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
      } // This is intentionally passing this fiber as the parent
      // because we want to schedule this fiber as having work
      // on its children. We'll use the childLanes on
      // this fiber to indicate that a context has changed.


      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
      nextFiber = fiber.sibling;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderLanes) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastFullyObservedContext = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    {
      var firstContext = dependencies.firstContext;

      if (firstContext !== null) {
        if (includesSomeLane(dependencies.lanes, renderLanes)) {
          // Context list has a pending update. Mark that this fiber performed work.
          markWorkInProgressReceivedUpdate();
        } // Reset the work-in-progress list


        dependencies.firstContext = null;
      }
    }
  }
}
function readContext(context) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    if (isDisallowedContextReadInDEV) {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    }
  }

  var value =  context._currentValue ;

  if (lastFullyObservedContext === context) ; else {
    var contextItem = {
      context: context,
      memoizedValue: value,
      next: null
    };

    if (lastContextDependency === null) {
      if (currentlyRenderingFiber === null) {
        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        lanes: NoLanes,
        firstContext: contextItem
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return value;
}

// render. When this render exits, either because it finishes or because it is
// interrupted, the interleaved updates will be transferred onto the main part
// of the queue.

var concurrentQueues = null;
function pushConcurrentUpdateQueue(queue) {
  if (concurrentQueues === null) {
    concurrentQueues = [queue];
  } else {
    concurrentQueues.push(queue);
  }
}
function finishQueueingConcurrentUpdates() {
  // Transfer the interleaved updates onto the main queue. Each queue has a
  // `pending` field and an `interleaved` field. When they are not null, they
  // point to the last node in a circular linked list. We need to append the
  // interleaved list to the end of the pending list by joining them into a
  // single, circular list.
  if (concurrentQueues !== null) {
    for (var i = 0; i < concurrentQueues.length; i++) {
      var queue = concurrentQueues[i];
      var lastInterleavedUpdate = queue.interleaved;

      if (lastInterleavedUpdate !== null) {
        queue.interleaved = null;
        var firstInterleavedUpdate = lastInterleavedUpdate.next;
        var lastPendingUpdate = queue.pending;

        if (lastPendingUpdate !== null) {
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = firstInterleavedUpdate;
          lastInterleavedUpdate.next = firstPendingUpdate;
        }

        queue.pending = lastInterleavedUpdate;
      }
    }

    concurrentQueues = null;
  }
}
function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
  var interleaved = queue.interleaved;

  if (interleaved === null) {
    // This is the first update. Create a circular list.
    update.next = update; // At the end of the current render, this queue's interleaved updates will
    // be transferred to the pending queue.

    pushConcurrentUpdateQueue(queue);
  } else {
    update.next = interleaved.next;
    interleaved.next = update;
  }

  queue.interleaved = update;
  return markUpdateLaneFromFiberToRoot(fiber, lane);
}
function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
  var interleaved = queue.interleaved;

  if (interleaved === null) {
    // This is the first update. Create a circular list.
    update.next = update; // At the end of the current render, this queue's interleaved updates will
    // be transferred to the pending queue.

    pushConcurrentUpdateQueue(queue);
  } else {
    update.next = interleaved.next;
    interleaved.next = update;
  }

  queue.interleaved = update;
}
function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
  var interleaved = queue.interleaved;

  if (interleaved === null) {
    // This is the first update. Create a circular list.
    update.next = update; // At the end of the current render, this queue's interleaved updates will
    // be transferred to the pending queue.

    pushConcurrentUpdateQueue(queue);
  } else {
    update.next = interleaved.next;
    interleaved.next = update;
  }

  queue.interleaved = update;
  return markUpdateLaneFromFiberToRoot(fiber, lane);
}
function enqueueConcurrentRenderForLane(fiber, lane) {
  return markUpdateLaneFromFiberToRoot(fiber, lane);
} // Calling this function outside this module should only be done for backwards
// compatibility and should always be accompanied by a warning.

var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;

function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
  // Update the source fiber's lanes
  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
  var alternate = sourceFiber.alternate;

  if (alternate !== null) {
    alternate.lanes = mergeLanes(alternate.lanes, lane);
  }

  {
    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
    }
  } // Walk the parent path to the root and update the child lanes.


  var node = sourceFiber;
  var parent = sourceFiber.return;

  while (parent !== null) {
    parent.childLanes = mergeLanes(parent.childLanes, lane);
    alternate = parent.alternate;

    if (alternate !== null) {
      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
    } else {
      {
        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        }
      }
    }

    node = parent;
    parent = parent.return;
  }

  if (node.tag === HostRoot) {
    var root = node.stateNode;
    return root;
  } else {
    return null;
  }
}

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;

{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
}

function initializeUpdateQueue(fiber) {
  var queue = {
    baseState: fiber.memoizedState,
    firstBaseUpdate: null,
    lastBaseUpdate: null,
    shared: {
      pending: null,
      interleaved: null,
      lanes: NoLanes
    },
    effects: null
  };
  fiber.updateQueue = queue;
}
function cloneUpdateQueue(current, workInProgress) {
  // Clone the update queue from current. Unless it's already a clone.
  var queue = workInProgress.updateQueue;
  var currentQueue = current.updateQueue;

  if (queue === currentQueue) {
    var clone = {
      baseState: currentQueue.baseState,
      firstBaseUpdate: currentQueue.firstBaseUpdate,
      lastBaseUpdate: currentQueue.lastBaseUpdate,
      shared: currentQueue.shared,
      effects: currentQueue.effects
    };
    workInProgress.updateQueue = clone;
  }
}
function createUpdate(eventTime, lane) {
  var update = {
    eventTime: eventTime,
    lane: lane,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null
  };
  return update;
}
function enqueueUpdate(fiber, update, lane) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return null;
  }

  var sharedQueue = updateQueue.shared;

  {
    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

      didWarnUpdateInsideUpdate = true;
    }
  }

  if (isUnsafeClassRenderPhaseUpdate()) {
    // This is an unsafe render phase update. Add directly to the update
    // queue so we can process it immediately during the current render.
    var pending = sharedQueue.pending;

    if (pending === null) {
      // This is the first update. Create a circular list.
      update.next = update;
    } else {
      update.next = pending.next;
      pending.next = update;
    }

    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
    // this fiber. This is for backwards compatibility in the case where you
    // update a different component during render phase than the one that is
    // currently renderings (a pattern that is accompanied by a warning).

    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
  } else {
    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
  }
}
function entangleTransitions(root, fiber, lane) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return;
  }

  var sharedQueue = updateQueue.shared;

  if (isTransitionLane(lane)) {
    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
    // have finished. We can remove them from the shared queue, which represents
    // a superset of the actually pending lanes. In some cases we may entangle
    // more than we need to, but that's OK. In fact it's worse if we *don't*
    // entangle when we should.

    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

    var newQueueLanes = mergeLanes(queueLanes, lane);
    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
    // the lane finished since the last time we entangled it. So we need to
    // entangle it again, just to be sure.

    markRootEntangled(root, newQueueLanes);
  }
}
function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
  // Captured updates are updates that are thrown by a child during the render
  // phase. They should be discarded if the render is aborted. Therefore,
  // we should only put them on the work-in-progress queue, not the current one.
  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

  var current = workInProgress.alternate;

  if (current !== null) {
    var currentQueue = current.updateQueue;

    if (queue === currentQueue) {
      // The work-in-progress queue is the same as current. This happens when
      // we bail out on a parent fiber that then captures an error thrown by
      // a child. Since we want to append the update only to the work-in
      // -progress queue, we need to clone the updates. We usually clone during
      // processUpdateQueue, but that didn't happen in this case because we
      // skipped over the parent when we bailed out.
      var newFirst = null;
      var newLast = null;
      var firstBaseUpdate = queue.firstBaseUpdate;

      if (firstBaseUpdate !== null) {
        // Loop through the updates and clone them.
        var update = firstBaseUpdate;

        do {
          var clone = {
            eventTime: update.eventTime,
            lane: update.lane,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };

          if (newLast === null) {
            newFirst = newLast = clone;
          } else {
            newLast.next = clone;
            newLast = clone;
          }

          update = update.next;
        } while (update !== null); // Append the captured update the end of the cloned list.


        if (newLast === null) {
          newFirst = newLast = capturedUpdate;
        } else {
          newLast.next = capturedUpdate;
          newLast = capturedUpdate;
        }
      } else {
        // There are no base updates.
        newFirst = newLast = capturedUpdate;
      }

      queue = {
        baseState: currentQueue.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: currentQueue.shared,
        effects: currentQueue.effects
      };
      workInProgress.updateQueue = queue;
      return;
    }
  } // Append the update to the end of the list.


  var lastBaseUpdate = queue.lastBaseUpdate;

  if (lastBaseUpdate === null) {
    queue.firstBaseUpdate = capturedUpdate;
  } else {
    lastBaseUpdate.next = capturedUpdate;
  }

  queue.lastBaseUpdate = capturedUpdate;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            if ( workInProgress.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);

              try {
                payload.call(instance, prevState, nextProps);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }

            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            if ( workInProgress.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);

              try {
                _payload.call(instance, prevState, nextProps);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }

            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, props, instance, renderLanes) {
  // This is always non-null on a ClassComponent or HostRoot
  var queue = workInProgress.updateQueue;
  hasForceUpdate = false;

  {
    currentlyProcessingQueue = queue.shared;
  }

  var firstBaseUpdate = queue.firstBaseUpdate;
  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

  var pendingQueue = queue.shared.pending;

  if (pendingQueue !== null) {
    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
    // and last so that it's non-circular.

    var lastPendingUpdate = pendingQueue;
    var firstPendingUpdate = lastPendingUpdate.next;
    lastPendingUpdate.next = null; // Append pending updates to base queue

    if (lastBaseUpdate === null) {
      firstBaseUpdate = firstPendingUpdate;
    } else {
      lastBaseUpdate.next = firstPendingUpdate;
    }

    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
    // we need to transfer the updates to that queue, too. Because the base
    // queue is a singly-linked list with no cycles, we can append to both
    // lists and take advantage of structural sharing.
    // TODO: Pass `current` as argument

    var current = workInProgress.alternate;

    if (current !== null) {
      // This is always non-null on a ClassComponent or HostRoot
      var currentQueue = current.updateQueue;
      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

      if (currentLastBaseUpdate !== lastBaseUpdate) {
        if (currentLastBaseUpdate === null) {
          currentQueue.firstBaseUpdate = firstPendingUpdate;
        } else {
          currentLastBaseUpdate.next = firstPendingUpdate;
        }

        currentQueue.lastBaseUpdate = lastPendingUpdate;
      }
    }
  } // These values may change as we process the queue.


  if (firstBaseUpdate !== null) {
    // Iterate through the list of updates to compute the result.
    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
    // from the original lanes.

    var newLanes = NoLanes;
    var newBaseState = null;
    var newFirstBaseUpdate = null;
    var newLastBaseUpdate = null;
    var update = firstBaseUpdate;

    do {
      var updateLane = update.lane;
      var updateEventTime = update.eventTime;

      if (!isSubsetOfLanes(renderLanes, updateLane)) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          eventTime: updateEventTime,
          lane: updateLane,
          tag: update.tag,
          payload: update.payload,
          callback: update.callback,
          next: null
        };

        if (newLastBaseUpdate === null) {
          newFirstBaseUpdate = newLastBaseUpdate = clone;
          newBaseState = newState;
        } else {
          newLastBaseUpdate = newLastBaseUpdate.next = clone;
        } // Update the remaining priority in the queue.


        newLanes = mergeLanes(newLanes, updateLane);
      } else {
        // This update does have sufficient priority.
        if (newLastBaseUpdate !== null) {
          var _clone = {
            eventTime: updateEventTime,
            // This update is going to be committed so we never want uncommit
            // it. Using NoLane works because 0 is a subset of all bitmasks, so
            // this will never be skipped by the check above.
            lane: NoLane,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };
          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
        } // Process this update.


        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
        var callback = update.callback;

        if (callback !== null && // If the update was already committed, we should not queue its
        // callback again.
        update.lane !== NoLane) {
          workInProgress.flags |= Callback;
          var effects = queue.effects;

          if (effects === null) {
            queue.effects = [update];
          } else {
            effects.push(update);
          }
        }
      }

      update = update.next;

      if (update === null) {
        pendingQueue = queue.shared.pending;

        if (pendingQueue === null) {
          break;
        } else {
          // An update was scheduled from inside a reducer. Add the new
          // pending updates to the end of the list and keep processing.
          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
          // unravel them when transferring them to the base queue.

          var _firstPendingUpdate = _lastPendingUpdate.next;
          _lastPendingUpdate.next = null;
          update = _firstPendingUpdate;
          queue.lastBaseUpdate = _lastPendingUpdate;
          queue.shared.pending = null;
        }
      }
    } while (true);

    if (newLastBaseUpdate === null) {
      newBaseState = newState;
    }

    queue.baseState = newBaseState;
    queue.firstBaseUpdate = newFirstBaseUpdate;
    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
    // process them during this render, but we do need to track which lanes
    // are remaining.

    var lastInterleaved = queue.shared.interleaved;

    if (lastInterleaved !== null) {
      var interleaved = lastInterleaved;

      do {
        newLanes = mergeLanes(newLanes, interleaved.lane);
        interleaved = interleaved.next;
      } while (interleaved !== lastInterleaved);
    } else if (firstBaseUpdate === null) {
      // `queue.lanes` is used for entangling transitions. We can set it back to
      // zero once the queue is empty.
      queue.shared.lanes = NoLanes;
    } // Set the remaining expiration time to be whatever is remaining in the queue.
    // This should be fine because the only two other things that contribute to
    // expiration time are props and context. We're already in the middle of the
    // begin phase by the time we start processing the queue, so we've already
    // dealt with the props. Context in components that specify
    // shouldComponentUpdate is tricky; but we'll have to account for
    // that regardless.


    markSkippedUpdateLanes(newLanes);
    workInProgress.lanes = newLanes;
    workInProgress.memoizedState = newState;
  }

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (typeof callback !== 'function') {
    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance) {
  // Commit the effects
  var effects = finishedQueue.effects;
  finishedQueue.effects = null;

  if (effects !== null) {
    for (var i = 0; i < effects.length; i++) {
      var effect = effects[i];
      var callback = effect.callback;

      if (callback !== null) {
        effect.callback = null;
        callCallback(callback, instance);
      }
    }
  }
}

var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + '_' + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);

      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentNameFromType(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);

        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;
  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        // Invoke the function an extra time to help detect side-effects.
        partialState = getDerivedStateFromProps(nextProps, prevState);
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }

    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  if (workInProgress.lanes === NoLanes) {
    // Queue is always non-null for classes
    var updateQueue = workInProgress.updateQueue;
    updateQueue.baseState = memoizedState;
  }
}

var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'setState');
      }

      update.callback = callback;
    }

    var root = enqueueUpdate(fiber, update, lane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitions(root, fiber, lane);
    }

    {
      markStateUpdateScheduled(fiber, lane);
    }
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }

      update.callback = callback;
    }

    var root = enqueueUpdate(fiber, update, lane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitions(root, fiber, lane);
    }

    {
      markStateUpdateScheduled(fiber, lane);
    }
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    var root = enqueueUpdate(fiber, update, lane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitions(root, fiber, lane);
    }

    {
      markForceUpdateScheduled(fiber, lane);
    }
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

    {
      if ( workInProgress.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(true);

        try {
          // Invoke the function an extra time to help detect side-effects.
          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }

      if (shouldUpdate === undefined) {
        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');
      }
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentNameFromType(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
    }

    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
    }

    if (instance.propTypes) {
      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
    }

    if (instance.contextType) {
      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
    }

    {
      if (instance.contextTypes) {
        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      }

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);

        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    if (typeof instance.componentShouldUpdate === 'function') {
      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
    }

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');
    }

    if (typeof instance.componentDidUnmount === 'function') {
      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
    }

    if (typeof instance.componentDidReceiveProps === 'function') {
      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
    }

    if (typeof instance.componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
    }

    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
    }

    var hasMutatedProps = instance.props !== newProps;

    if (instance.props !== undefined && hasMutatedProps) {
      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
    }

    if (instance.defaultProps) {
      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));
    }

    if (typeof instance.getDerivedStateFromProps === 'function') {
      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof instance.getDerivedStateFromError === 'function') {
      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
    }

    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      error('%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  }

  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.

  {
    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        instance = new ctor(props, context); // eslint-disable-line no-new
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }
  }

  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentNameFromType(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);

        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentNameFromType(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  if (oldState !== instance.state) {
    {
      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  if (instance.state !== oldState) {
    {
      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);

        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  initializeUpdateQueue(workInProgress);
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentNameFromType(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictLegacyMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  instance.state = workInProgress.memoizedState;
  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
    instance.state = workInProgress.memoizedState;
  }

  if (typeof instance.componentDidMount === 'function') {
    var fiberFlags = Update;

    {
      fiberFlags |= LayoutStatic;
    }

    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
      fiberFlags |= MountLayoutDev;
    }

    workInProgress.flags |= fiberFlags;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      var fiberFlags = Update;

      {
        fiberFlags |= LayoutStatic;
      }

      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
        fiberFlags |= MountLayoutDev;
      }

      workInProgress.flags |= fiberFlags;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }
    }

    if (typeof instance.componentDidMount === 'function') {
      var _fiberFlags = Update;

      {
        _fiberFlags |= LayoutStatic;
      }

      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
        _fiberFlags |= MountLayoutDev;
      }

      workInProgress.flags |= _fiberFlags;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      var _fiberFlags2 = Update;

      {
        _fiberFlags2 |= LayoutStatic;
      }

      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
        _fiberFlags2 |= MountLayoutDev;
      }

      workInProgress.flags |= _fiberFlags2;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
  var instance = workInProgress.stateNode;
  cloneUpdateQueue(current, workInProgress);
  var unresolvedOldProps = workInProgress.memoizedProps;
  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
  instance.props = oldProps;
  var unresolvedNewProps = workInProgress.pendingProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  newState = workInProgress.memoizedState;

  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
  // both before and after `shouldComponentUpdate` has been called. Not ideal,
  // but I'm loath to refactor this function. This only happens for memoized
  // components so it's not that common.
  enableLazyContextPropagation   ;

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.flags |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.flags |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child, returnFiber) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child, returnFiber) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (typeof child._store !== 'object') {
      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    child._store.validated = true;
    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

    if (ownerHasKeyUseWarning[componentName]) {
      return;
    }

    ownerHasKeyUseWarning[componentName] = true;

    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
  };
}

function coerceRef(returnFiber, current, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
      // because these cannot be automatically converted to an arrow function
      // using a codemod. Therefore, we don't have to warn about string refs again.
      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          {
            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (ownerFiber.tag !== ClassComponent) {
          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
      } // Assigning this to a const so Flow knows it won't change in the closure


      var resolvedInst = inst;

      {
        checkPropStringCoercion(mixedRef, 'ref');
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
        return current.ref;
      }

      var ref = function (value) {
        var refs = resolvedInst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = resolvedInst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (typeof mixedRef !== 'string') {
        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
      }

      if (!element._owner) {
        throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  var childString = Object.prototype.toString.call(newChild);
  throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
}

function warnOnFunctionType(returnFiber) {
  {
    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

    if (ownerHasFunctionTypeWarning[componentName]) {
      return;
    }

    ownerHasFunctionTypeWarning[componentName] = true;

    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
  }
}

function resolveLazy(lazyType) {
  var payload = lazyType._payload;
  var init = lazyType._init;
  return init(payload);
} // This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    }

    var deletions = returnFiber.deletions;

    if (deletions === null) {
      returnFiber.deletions = [childToDelete];
      returnFiber.flags |= ChildDeletion;
    } else {
      deletions.push(childToDelete);
    }
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // During hydration, the useId algorithm needs to know which fibers are
      // part of a list of children (arrays, iterators).
      newFiber.flags |= Forked;
      return lastPlacedIndex;
    }

    var current = newFiber.alternate;

    if (current !== null) {
      var oldIndex = current.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.flags |= Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.flags |= Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.flags |= Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, lanes) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, lanes) {
    var elementType = element.type;

    if (elementType === REACT_FRAGMENT_TYPE) {
      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
    }

    if (current !== null) {
      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.
      // We need to do this after the Hot Reloading check above,
      // because hot reloading has different semantics than prod because
      // it doesn't resuspend. So we can't let the call below suspend.
      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
        // Move based on index
        var existing = useFiber(current, element.props);
        existing.ref = coerceRef(returnFiber, current, element);
        existing.return = returnFiber;

        {
          existing._debugSource = element._source;
          existing._debugOwner = element._owner;
        }

        return existing;
      }
    } // Insert


    var created = createFiberFromElement(element, returnFiber.mode, lanes);
    created.ref = coerceRef(returnFiber, current, element);
    created.return = returnFiber;
    return created;
  }

  function updatePortal(returnFiber, current, portal, lanes) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || []);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, lanes, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, lanes) {
    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

            _created2.return = returnFiber;
            return _created2;
          }

        case REACT_LAZY_TYPE:
          {
            var payload = newChild._payload;
            var init = newChild._init;
            return createChild(returnFiber, init(payload), lanes);
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              return updateElement(returnFiber, oldFiber, newChild, lanes);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, lanes);
            } else {
              return null;
            }
          }

        case REACT_LAZY_TYPE:
          {
            var payload = newChild._payload;
            var init = newChild._init;
            return updateSlot(returnFiber, oldFiber, init(payload), lanes);
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
          }

        case REACT_LAZY_TYPE:
          var payload = newChild._payload;
          var init = newChild._init;
          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys, returnFiber) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child, returnFiber);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

          break;

        case REACT_LAZY_TYPE:
          var payload = child._payload;
          var init = child._init;
          warnOnInvalidKey(init(payload), knownKeys, returnFiber);
          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);

      if (getIsHydrating()) {
        var numberOfForks = newIdx;
        pushTreeFork(returnFiber, numberOfForks);
      }

      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      if (getIsHydrating()) {
        var _numberOfForks = newIdx;
        pushTreeFork(returnFiber, _numberOfForks);
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    if (getIsHydrating()) {
      var _numberOfForks2 = newIdx;
      pushTreeFork(returnFiber, _numberOfForks2);
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (typeof iteratorFn !== 'function') {
      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        if (!didWarnAboutGenerators) {
          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
        }

        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        if (!didWarnAboutMaps) {
          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
        }

        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (newChildren == null) {
      throw new Error('An iterable object provided no iterator.');
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);

      if (getIsHydrating()) {
        var numberOfForks = newIdx;
        pushTreeFork(returnFiber, numberOfForks);
      }

      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, lanes);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      if (getIsHydrating()) {
        var _numberOfForks3 = newIdx;
        pushTreeFork(returnFiber, _numberOfForks3);
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    if (getIsHydrating()) {
      var _numberOfForks4 = newIdx;
      pushTreeFork(returnFiber, _numberOfForks4);
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        var elementType = element.type;

        if (elementType === REACT_FRAGMENT_TYPE) {
          if (child.tag === Fragment) {
            deleteRemainingChildren(returnFiber, child.sibling);
            var existing = useFiber(child, element.props.children);
            existing.return = returnFiber;

            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }

            return existing;
          }
        } else {
          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.
          // We need to do this after the Hot Reloading check above,
          // because hot reloading has different semantics than prod because
          // it doesn't resuspend. So we can't let the call below suspend.
          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
            deleteRemainingChildren(returnFiber, child.sibling);

            var _existing = useFiber(child, element.props);

            _existing.ref = coerceRef(returnFiber, child, element);
            _existing.return = returnFiber;

            {
              _existing._debugSource = element._source;
              _existing._debugOwner = element._owner;
            }

            return _existing;
          }
        } // Didn't match.


        deleteRemainingChildren(returnFiber, child);
        break;
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || []);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

        case REACT_LAZY_TYPE:
          var payload = newChild._payload;
          var init = newChild._init; // TODO: This function is supposed to be non-recursive.

          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
      }

      if (isArray(newChild)) {
        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
      }

      if (getIteratorFn(newChild)) {
        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current, workInProgress) {
  if (current !== null && workInProgress.child !== current.child) {
    throw new Error('Resuming work not yet implemented.');
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, lanes) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, lanes);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (c === NO_CONTEXT) {
    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // Regular boundaries always capture.

  {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.flags & DidCapture) !== NoFlags;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

var NoFlags$1 =
/*   */
0; // Represents whether effect should fire.

var HasEffect =
/* */
1; // Represents the phase in which the effect (not the clean-up) fires.

var Insertion =
/*  */
2;
var Layout =
/*    */
4;
var Passive$1 =
/*   */
8;

// and should be reset before starting a new render.
// This tracks which mutable sources need to be reset after a render.

var workInProgressSources = [];
function resetWorkInProgressVersions() {
  for (var i = 0; i < workInProgressSources.length; i++) {
    var mutableSource = workInProgressSources[i];

    {
      mutableSource._workInProgressVersionPrimary = null;
    }
  }

  workInProgressSources.length = 0;
}
// This ensures that the version used for server rendering matches the one
// that is eventually read during hydration.
// If they don't match there's a potential tear and a full deopt render is required.

function registerMutableSourceForHydration(root, mutableSource) {
  var getVersion = mutableSource._getVersion;
  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
  // Retaining it forever may interfere with GC.

  if (root.mutableSourceEagerHydrationData == null) {
    root.mutableSourceEagerHydrationData = [mutableSource, version];
  } else {
    root.mutableSourceEagerHydrationData.push(mutableSource, version);
  }
}

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;
var didWarnUncachedGetSnapshot;

{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
// does not get reset if we do another render pass; only when we're completely
// finished evaluating this component. This is an optimization so we know
// whether we need to clear render phase updates after a throw.

var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
// gets reset after each attempt.
// TODO: Maybe there's some way to consolidate this with
// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.

var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
// hydration). This counter is global, so client ids are not stable across
// render attempts.

var globalClientIdCounter = 0;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (objectIs(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
  renderLanes = nextRenderLanes;
  currentlyRenderingFiber$1 = workInProgress;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  }

  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.lanes = NoLanes; // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // didScheduleRenderPhaseUpdate = false;
  // localIdCounter = 0;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because memoizedState === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so memoizedState would be null during updates and mounts.

  {
    if (current !== null && current.memoizedState !== null) {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, secondArg); // Check if there was a render phase update

  if (didScheduleRenderPhaseUpdateDuringThisPass) {
    // Keep rendering in a loop for as long as render phase updates continue to
    // be scheduled. Use a counter to prevent infinite loops.
    var numberOfReRenders = 0;

    do {
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      localIdCounter = 0;

      if (numberOfReRenders >= RE_RENDER_LIMIT) {
        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');
      }

      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      currentHook = null;
      workInProgressHook = null;
      workInProgress.updateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
      children = Component(props, secondArg);
    } while (didScheduleRenderPhaseUpdateDuringThisPass);
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrance.


  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  {
    workInProgress._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderLanes = NoLanes;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
    // render. If this fires, it suggests that we incorrectly reset the static
    // flags in some other part of the codebase. This has happened before, for
    // example, in the SuspenseList implementation.

    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
    // and creates false positives. To make this work in legacy mode, we'd
    // need to mark fibers that commit in an incomplete state, somehow. For
    // now I'll disable the warning that most of the bugs that would trigger
    // it are either exclusive to concurrent mode or exist in both.
    (current.mode & ConcurrentMode) !== NoMode) {
      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');
    }
  }

  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
  // localIdCounter = 0;

  if (didRenderTooFewHooks) {
    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');
  }

  return children;
}
function checkDidRenderIdHook() {
  // This should be called immediately after every renderWithHooks call.
  // Conceptually, it's part of the return value of renderWithHooks; it's only a
  // separate function to avoid using an array tuple.
  var didRenderIdHook = localIdCounter !== 0;
  localIdCounter = 0;
  return didRenderIdHook;
}
function bailoutHooks(current, workInProgress, lanes) {
  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
  // complete phase (bubbleProperties).

  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
  } else {
    workInProgress.flags &= ~(Passive | Update);
  }

  current.lanes = removeLanes(current.lanes, lanes);
}
function resetHooksAfterThrow() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrance.
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  if (didScheduleRenderPhaseUpdate) {
    // There were render phase updates. These are only valid for this render
    // phase, which we are now aborting. Remove the updates from the queues so
    // they do not persist to the next render. Do not remove updates from hooks
    // that weren't processed.
    //
    // Only reset the updates from the queue if it has a clone. If it does
    // not have a clone, that means it wasn't processed, and the updates were
    // scheduled before we entered the render phase.
    var hook = currentlyRenderingFiber$1.memoizedState;

    while (hook !== null) {
      var queue = hook.queue;

      if (queue !== null) {
        queue.pending = null;
      }

      hook = hook.next;
    }

    didScheduleRenderPhaseUpdate = false;
  }

  renderLanes = NoLanes;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
    isUpdatingOpaqueValueInRenderPhase = false;
  }

  didScheduleRenderPhaseUpdateDuringThisPass = false;
  localIdCounter = 0;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  var nextCurrentHook;

  if (currentHook === null) {
    var current = currentlyRenderingFiber$1.alternate;

    if (current !== null) {
      nextCurrentHook = current.memoizedState;
    } else {
      nextCurrentHook = null;
    }
  } else {
    nextCurrentHook = currentHook.next;
  }

  var nextWorkInProgressHook;

  if (workInProgressHook === null) {
    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
  } else {
    nextWorkInProgressHook = workInProgressHook.next;
  }

  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
  } else {
    // Clone from the current hook.
    if (nextCurrentHook === null) {
      throw new Error('Rendered more hooks than during the previous render.');
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null,
    stores: null
  };
}

function basicStateReducer(state, action) {
  // $FlowFixMe: Flow doesn't like mixed types
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = {
    pending: null,
    interleaved: null,
    lanes: NoLanes,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  hook.queue = queue;
  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (queue === null) {
    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
  }

  queue.lastRenderedReducer = reducer;
  var current = currentHook; // The last rebase update that is NOT part of the base state.

  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    {
      if (current.baseQueue !== baseQueue) {
        // Internal invariant that should never happen, but feasibly could in
        // the future if we implement resuming, or some form of that.
        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
      }
    }

    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }

  if (baseQueue !== null) {
    // We have a queue to process.
    var first = baseQueue.next;
    var newState = current.baseState;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;
    var update = first;

    do {
      var updateLane = update.lane;

      if (!isSubsetOfLanes(renderLanes, updateLane)) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          lane: updateLane,
          action: update.action,
          hasEagerState: update.hasEagerState,
          eagerState: update.eagerState,
          next: null
        };

        if (newBaseQueueLast === null) {
          newBaseQueueFirst = newBaseQueueLast = clone;
          newBaseState = newState;
        } else {
          newBaseQueueLast = newBaseQueueLast.next = clone;
        } // Update the remaining priority in the queue.
        // TODO: Don't need to accumulate this. Instead, we can remove
        // renderLanes from the original lanes.


        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
        markSkippedUpdateLanes(updateLane);
      } else {
        // This update does have sufficient priority.
        if (newBaseQueueLast !== null) {
          var _clone = {
            // This update is going to be committed so we never want uncommit
            // it. Using NoLane works because 0 is a subset of all bitmasks, so
            // this will never be skipped by the check above.
            lane: NoLane,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          };
          newBaseQueueLast = newBaseQueueLast.next = _clone;
        } // Process this update.


        if (update.hasEagerState) {
          // If this update is a state update (not a reducer) and was processed eagerly,
          // we can use the eagerly computed state
          newState = update.eagerState;
        } else {
          var action = update.action;
          newState = reducer(newState, action);
        }
      }

      update = update.next;
    } while (update !== null && update !== first);

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState;
    hook.baseState = newBaseState;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = newState;
  } // Interleaved updates are stored on a separate queue. We aren't going to
  // process them during this render, but we do need to track which lanes
  // are remaining.


  var lastInterleaved = queue.interleaved;

  if (lastInterleaved !== null) {
    var interleaved = lastInterleaved;

    do {
      var interleavedLane = interleaved.lane;
      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
      markSkippedUpdateLanes(interleavedLane);
      interleaved = interleaved.next;
    } while (interleaved !== lastInterleaved);
  } else if (baseQueue === null) {
    // `queue.lanes` is used for entangling transitions. We can set it back to
    // zero once the queue is empty.
    queue.lanes = NoLanes;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function rerenderReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (queue === null) {
    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
  }

  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
  // work-in-progress hook.

  var dispatch = queue.dispatch;
  var lastRenderPhaseUpdate = queue.pending;
  var newState = hook.memoizedState;

  if (lastRenderPhaseUpdate !== null) {
    // The queue doesn't persist past this render pass.
    queue.pending = null;
    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
    var update = firstRenderPhaseUpdate;

    do {
      // Process this render phase update. We don't have to check the
      // priority because it will always be the same as the current
      // render's.
      var action = update.action;
      newState = reducer(newState, action);
      update = update.next;
    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
    // the base state unless the queue is empty.
    // TODO: Not sure if this is the desired semantics, but it's what we
    // do for gDSFP. I can't remember why.

    if (hook.baseQueue === null) {
      hook.baseState = newState;
    }

    queue.lastRenderedState = newState;
  }

  return [newState, dispatch];
}

function mountMutableSource(source, getSnapshot, subscribe) {
  {
    return undefined;
  }
}

function updateMutableSource(source, getSnapshot, subscribe) {
  {
    return undefined;
  }
}

function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
  var fiber = currentlyRenderingFiber$1;
  var hook = mountWorkInProgressHook();
  var nextSnapshot;
  var isHydrating = getIsHydrating();

  if (isHydrating) {
    if (getServerSnapshot === undefined) {
      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');
    }

    nextSnapshot = getServerSnapshot();

    {
      if (!didWarnUncachedGetSnapshot) {
        if (nextSnapshot !== getServerSnapshot()) {
          error('The result of getServerSnapshot should be cached to avoid an infinite loop');

          didWarnUncachedGetSnapshot = true;
        }
      }
    }
  } else {
    nextSnapshot = getSnapshot();

    {
      if (!didWarnUncachedGetSnapshot) {
        var cachedSnapshot = getSnapshot();

        if (!objectIs(nextSnapshot, cachedSnapshot)) {
          error('The result of getSnapshot should be cached to avoid an infinite loop');

          didWarnUncachedGetSnapshot = true;
        }
      }
    } // Unless we're rendering a blocking lane, schedule a consistency check.
    // Right before committing, we will walk the tree and check if any of the
    // stores were mutated.
    //
    // We won't do this if we're hydrating server-rendered content, because if
    // the content is stale, it's already visible anyway. Instead we'll patch
    // it up in a passive effect.


    var root = getWorkInProgressRoot();

    if (root === null) {
      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
    }

    if (!includesBlockingLane(root, renderLanes)) {
      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
  } // Read the current snapshot from the store on every render. This breaks the
  // normal rules of React, and only works because store updates are
  // always synchronous.


  hook.memoizedState = nextSnapshot;
  var inst = {
    value: nextSnapshot,
    getSnapshot: getSnapshot
  };
  hook.queue = inst; // Schedule an effect to subscribe to the store.

  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update
  // this whenever subscribe, getSnapshot, or value changes. Because there's no
  // clean-up function, and we track the deps correctly, we can call pushEffect
  // directly, without storing any additional state. For the same reason, we
  // don't need to set a static flag, either.
  // TODO: We can move this to the passive phase once we add a pre-commit
  // consistency check. See the next comment.

  fiber.flags |= Passive;
  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
  return nextSnapshot;
}

function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
  var fiber = currentlyRenderingFiber$1;
  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
  // normal rules of React, and only works because store updates are
  // always synchronous.

  var nextSnapshot = getSnapshot();

  {
    if (!didWarnUncachedGetSnapshot) {
      var cachedSnapshot = getSnapshot();

      if (!objectIs(nextSnapshot, cachedSnapshot)) {
        error('The result of getSnapshot should be cached to avoid an infinite loop');

        didWarnUncachedGetSnapshot = true;
      }
    }
  }

  var prevSnapshot = hook.memoizedState;
  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);

  if (snapshotChanged) {
    hook.memoizedState = nextSnapshot;
    markWorkInProgressReceivedUpdate();
  }

  var inst = hook.queue;
  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the
  // commit phase if there was an interleaved mutation. In concurrent mode
  // this can happen all the time, but even in synchronous mode, an earlier
  // effect may have mutated the store.

  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
  // checking whether we scheduled a subscription effect above.
  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
    fiber.flags |= Passive;
    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
    // Right before committing, we will walk the tree and check if any of the
    // stores were mutated.

    var root = getWorkInProgressRoot();

    if (root === null) {
      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
    }

    if (!includesBlockingLane(root, renderLanes)) {
      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
  }

  return nextSnapshot;
}

function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
  fiber.flags |= StoreConsistency;
  var check = {
    getSnapshot: getSnapshot,
    value: renderedSnapshot
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.stores = [check];
  } else {
    var stores = componentUpdateQueue.stores;

    if (stores === null) {
      componentUpdateQueue.stores = [check];
    } else {
      stores.push(check);
    }
  }
}

function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
  // These are updated in the passive phase
  inst.value = nextSnapshot;
  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
  // have been in an event that fired before the passive effects, or it could
  // have been in a layout effect. In that case, we would have used the old
  // snapsho and getSnapshot values to bail out. We need to check one more time.

  if (checkIfSnapshotChanged(inst)) {
    // Force a re-render.
    forceStoreRerender(fiber);
  }
}

function subscribeToStore(fiber, inst, subscribe) {
  var handleStoreChange = function () {
    // The store changed. Check if the snapshot changed since the last time we
    // read from the store.
    if (checkIfSnapshotChanged(inst)) {
      // Force a re-render.
      forceStoreRerender(fiber);
    }
  }; // Subscribe to the store and return a clean-up function.


  return subscribe(handleStoreChange);
}

function checkIfSnapshotChanged(inst) {
  var latestGetSnapshot = inst.getSnapshot;
  var prevValue = inst.value;

  try {
    var nextValue = latestGetSnapshot();
    return !objectIs(prevValue, nextValue);
  } catch (error) {
    return true;
  }
}

function forceStoreRerender(fiber) {
  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

  if (root !== null) {
    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
  }
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    // $FlowFixMe: Flow doesn't like mixed types
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = {
    pending: null,
    interleaved: null,
    lanes: NoLanes,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  hook.queue = queue;
  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer);
}

function rerenderState(initialState) {
  return rerenderReducer(basicStateReducer);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();

  {
    var _ref2 = {
      current: initialValue
    };
    hook.memoizedState = _ref2;
    return _ref2;
  }
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  currentlyRenderingFiber$1.flags |= fiberFlags;
  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
}

function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
        return;
      }
    }
  }

  currentlyRenderingFiber$1.flags |= fiberFlags;
  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
  } else {
    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
  }
}

function updateEffect(create, deps) {
  return updateEffectImpl(Passive, Passive$1, create, deps);
}

function mountInsertionEffect(create, deps) {
  return mountEffectImpl(Update, Insertion, create, deps);
}

function updateInsertionEffect(create, deps) {
  return updateEffectImpl(Update, Insertion, create, deps);
}

function mountLayoutEffect(create, deps) {
  var fiberFlags = Update;

  {
    fiberFlags |= LayoutStatic;
  }

  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
    fiberFlags |= MountLayoutDev;
  }

  return mountEffectImpl(fiberFlags, Layout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, Layout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      if (!refObject.hasOwnProperty('current')) {
        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
      }
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  var fiberFlags = Update;

  {
    fiberFlags |= LayoutStatic;
  }

  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
    fiberFlags |= MountLayoutDev;
  }

  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value) {
  var hook = mountWorkInProgressHook();
  hook.memoizedState = value;
  return value;
}

function updateDeferredValue(value) {
  var hook = updateWorkInProgressHook();
  var resolvedCurrentHook = currentHook;
  var prevValue = resolvedCurrentHook.memoizedState;
  return updateDeferredValueImpl(hook, prevValue, value);
}

function rerenderDeferredValue(value) {
  var hook = updateWorkInProgressHook();

  if (currentHook === null) {
    // This is a rerender during a mount.
    hook.memoizedState = value;
    return value;
  } else {
    // This is a rerender during an update.
    var prevValue = currentHook.memoizedState;
    return updateDeferredValueImpl(hook, prevValue, value);
  }
}

function updateDeferredValueImpl(hook, prevValue, value) {
  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);

  if (shouldDeferValue) {
    // This is an urgent update. If the value has changed, keep using the
    // previous value and spawn a deferred render to update it later.
    if (!objectIs(value, prevValue)) {
      // Schedule a deferred render
      var deferredLane = claimNextTransitionLane();
      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
      // from the latest value. The name "baseState" doesn't really match how we
      // use it because we're reusing a state hook field instead of creating a
      // new one.

      hook.baseState = true;
    } // Reuse the previous value


    return prevValue;
  } else {
    // This is not an urgent update, so we can use the latest value regardless
    // of what it is. No need to defer it.
    // However, if we're currently inside a spawned render, then we need to mark
    // this as an update to prevent the fiber from bailing out.
    //
    // `baseState` is true when the current value is different from the rendered
    // value. The name doesn't really match how we use it because we're reusing
    // a state hook field instead of creating a new one.
    if (hook.baseState) {
      // Flip this back to false.
      hook.baseState = false;
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = value;
    return value;
  }
}

function startTransition(setPending, callback, options) {
  var previousPriority = getCurrentUpdatePriority();
  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
  setPending(true);
  var prevTransition = ReactCurrentBatchConfig$2.transition;
  ReactCurrentBatchConfig$2.transition = {};
  var currentTransition = ReactCurrentBatchConfig$2.transition;

  {
    ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
  }

  try {
    setPending(false);
    callback();
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$2.transition = prevTransition;

    {
      if (prevTransition === null && currentTransition._updatedFibers) {
        var updatedFibersCount = currentTransition._updatedFibers.size;

        if (updatedFibersCount > 10) {
          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
        }

        currentTransition._updatedFibers.clear();
      }
    }
  }
}

function mountTransition() {
  var _mountState = mountState(false),
      isPending = _mountState[0],
      setPending = _mountState[1]; // The `start` method never changes.


  var start = startTransition.bind(null, setPending);
  var hook = mountWorkInProgressHook();
  hook.memoizedState = start;
  return [isPending, start];
}

function updateTransition() {
  var _updateState = updateState(),
      isPending = _updateState[0];

  var hook = updateWorkInProgressHook();
  var start = hook.memoizedState;
  return [isPending, start];
}

function rerenderTransition() {
  var _rerenderState = rerenderState(),
      isPending = _rerenderState[0];

  var hook = updateWorkInProgressHook();
  var start = hook.memoizedState;
  return [isPending, start];
}

var isUpdatingOpaqueValueInRenderPhase = false;
function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
  {
    return isUpdatingOpaqueValueInRenderPhase;
  }
}

function mountId() {
  var hook = mountWorkInProgressHook();
  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
  // should do this in Fiber, too? Deferring this decision for now because
  // there's no other place to store the prefix except for an internal field on
  // the public createRoot object, which the fiber tree does not currently have
  // a reference to.

  var identifierPrefix = root.identifierPrefix;
  var id;

  if (getIsHydrating()) {
    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.

    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end
    // that represents the position of this useId hook among all the useId
    // hooks for this fiber.

    var localId = localIdCounter++;

    if (localId > 0) {
      id += 'H' + localId.toString(32);
    }

    id += ':';
  } else {
    // Use a lowercase r prefix for client-generated ids.
    var globalClientId = globalClientIdCounter++;
    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
  }

  hook.memoizedState = id;
  return id;
}

function updateId() {
  var hook = updateWorkInProgressHook();
  var id = hook.memoizedState;
  return id;
}

function dispatchReducerAction(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var lane = requestUpdateLane(fiber);
  var update = {
    lane: lane,
    action: action,
    hasEagerState: false,
    eagerState: null,
    next: null
  };

  if (isRenderPhaseUpdate(fiber)) {
    enqueueRenderPhaseUpdate(queue, update);
  } else {
    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

    if (root !== null) {
      var eventTime = requestEventTime();
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitionUpdate(root, queue, lane);
    }
  }

  markUpdateInDevTools(fiber, lane);
}

function dispatchSetState(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var lane = requestUpdateLane(fiber);
  var update = {
    lane: lane,
    action: action,
    hasEagerState: false,
    eagerState: null,
    next: null
  };

  if (isRenderPhaseUpdate(fiber)) {
    enqueueRenderPhaseUpdate(queue, update);
  } else {
    var alternate = fiber.alternate;

    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          update.hasEagerState = true;
          update.eagerState = eagerState;

          if (objectIs(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            // TODO: Do we still need to entangle transitions in this case?
            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
      }
    }

    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

    if (root !== null) {
      var eventTime = requestEventTime();
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitionUpdate(root, queue, lane);
    }
  }

  markUpdateInDevTools(fiber, lane);
}

function isRenderPhaseUpdate(fiber) {
  var alternate = fiber.alternate;
  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
}

function enqueueRenderPhaseUpdate(queue, update) {
  // This is a render phase update. Stash it in a lazily-created map of
  // queue -> linked list of updates. After this render pass, we'll restart
  // and apply the stashed updates on top of the work-in-progress hook.
  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
  var pending = queue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  queue.pending = update;
} // TODO: Move to ReactFiberConcurrentUpdates?


function entangleTransitionUpdate(root, queue, lane) {
  if (isTransitionLane(lane)) {
    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
    // must have finished. We can remove them from the shared queue, which
    // represents a superset of the actually pending lanes. In some cases we
    // may entangle more than we need to, but that's OK. In fact it's worse if
    // we *don't* entangle when we should.

    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

    var newQueueLanes = mergeLanes(queueLanes, lane);
    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
    // the lane finished since the last time we entangled it. So we need to
    // entangle it again, just to be sure.

    markRootEntangled(root, newQueueLanes);
  }
}

function markUpdateInDevTools(fiber, lane, action) {

  {
    markStateUpdateScheduled(fiber, lane);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useInsertionEffect: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError,
  useMutableSource: throwInvalidHookError,
  useSyncExternalStore: throwInvalidHookError,
  useId: throwInvalidHookError,
  unstable_isNewReconciler: enableNewReconciler
};

var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var HooksDispatcherOnRerenderInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

{
  var warnInvalidContextAccess = function () {
    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      mountHookTypesDev();
      return mountMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      mountHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      mountHookTypesDev();
      return mountId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      updateHookTypesDev();
      return mountInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return mountMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      updateHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      updateHookTypesDev();
      return mountId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  HooksDispatcherOnRerenderInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return rerenderTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context) {
      warnInvalidContextAccess();
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context) {
      warnInvalidContextAccess();
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  InvalidNestedHooksDispatcherOnRerenderInDEV = {
    readContext: function (context) {
      warnInvalidContextAccess();
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
}

var now$1 = Scheduler.unstable_now;
var commitTime = 0;
var layoutEffectStartTime = -1;
var profilerStartTime = -1;
var passiveEffectStartTime = -1;
/**
 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
 *
 * The overall sequence is:
 *   1. render
 *   2. commit (and call `onRender`, `onCommit`)
 *   3. check for nested updates
 *   4. flush passive effects (and call `onPostCommit`)
 *
 * Nested updates are identified in step 3 above,
 * but step 4 still applies to the work that was just committed.
 * We use two flags to track nested updates then:
 * one tracks whether the upcoming update is a nested update,
 * and the other tracks whether the current update was a nested update.
 * The first value gets synced to the second at the start of the render phase.
 */

var currentUpdateIsNested = false;
var nestedUpdateScheduled = false;

function isCurrentUpdateNested() {
  return currentUpdateIsNested;
}

function markNestedUpdateScheduled() {
  {
    nestedUpdateScheduled = true;
  }
}

function resetNestedUpdateFlag() {
  {
    currentUpdateIsNested = false;
    nestedUpdateScheduled = false;
  }
}

function syncNestedUpdateFlag() {
  {
    currentUpdateIsNested = nestedUpdateScheduled;
    nestedUpdateScheduled = false;
  }
}

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {

  commitTime = now$1();
}

function startProfilerTimer(fiber) {

  profilerStartTime = now$1();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$1();
  }
}

function stopProfilerTimerIfRunning(fiber) {

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

  if (profilerStartTime >= 0) {
    var elapsedTime = now$1() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

function recordLayoutEffectDuration(fiber) {

  if (layoutEffectStartTime >= 0) {
    var elapsedTime = now$1() - layoutEffectStartTime;
    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
    // Or the root (for the DevTools Profiler to read)

    var parentFiber = fiber.return;

    while (parentFiber !== null) {
      switch (parentFiber.tag) {
        case HostRoot:
          var root = parentFiber.stateNode;
          root.effectDuration += elapsedTime;
          return;

        case Profiler:
          var parentStateNode = parentFiber.stateNode;
          parentStateNode.effectDuration += elapsedTime;
          return;
      }

      parentFiber = parentFiber.return;
    }
  }
}

function recordPassiveEffectDuration(fiber) {

  if (passiveEffectStartTime >= 0) {
    var elapsedTime = now$1() - passiveEffectStartTime;
    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
    // Or the root (for the DevTools Profiler to read)

    var parentFiber = fiber.return;

    while (parentFiber !== null) {
      switch (parentFiber.tag) {
        case HostRoot:
          var root = parentFiber.stateNode;

          if (root !== null) {
            root.passiveEffectDuration += elapsedTime;
          }

          return;

        case Profiler:
          var parentStateNode = parentFiber.stateNode;

          if (parentStateNode !== null) {
            // Detached fibers have their state node cleared out.
            // In this case, the return pointer is also cleared out,
            // so we won't be able to report the time spent in this Profiler's subtree.
            parentStateNode.passiveEffectDuration += elapsedTime;
          }

          return;
      }

      parentFiber = parentFiber.return;
    }
  }
}

function startLayoutEffectTimer() {

  layoutEffectStartTime = now$1();
}

function startPassiveEffectTimer() {

  passiveEffectStartTime = now$1();
}

function transferActualDuration(fiber) {
  // Transfer time spent rendering these children so we don't lose it
  // after we rerender. This is used as a helper in special cases
  // where we should count the work of multiple passes.
  var child = fiber.child;

  while (child) {
    fiber.actualDuration += child.actualDuration;
    child = child.sibling;
  }
}

function createCapturedValueAtFiber(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source),
    digest: null
  };
}
function createCapturedValue(value, digest, stack) {
  return {
    value: value,
    source: null,
    stack: stack != null ? stack : null,
    digest: digest != null ? digest : null
  };
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(boundary, errorInfo) {
  return true;
}

function logCapturedError(boundary, errorInfo) {
  try {
    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
    // This enables renderers like ReactNative to better manage redbox behavior.

    if (logError === false) {
      return;
    }

    var error = errorInfo.value;

    if (true) {
      var source = errorInfo.source;
      var stack = errorInfo.stack;
      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
      // `preventDefault()` in window `error` handler.
      // We record this information as an expando on the error.

      if (error != null && error._suppressLogging) {
        if (boundary.tag === ClassComponent) {
          // The error is recoverable and was silenced.
          // Ignore it and don't print the stack addendum.
          // This is handy for testing error boundaries without noise.
          return;
        } // The error is fatal. Since the silencing might have
        // been accidental, we'll surface it anyway.
        // However, the browser would have silenced the original error
        // so we'll print it first, and then print the stack addendum.


        console['error'](error); // Don't transform to our wrapper
        // For a more detailed description of this block, see:
        // https://github.com/facebook/react/pull/13384
      }

      var componentName = source ? getComponentNameFromFiber(source) : null;
      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
      var errorBoundaryMessage;

      if (boundary.tag === HostRoot) {
        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
      } else {
        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      }

      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
      // We don't include the original error message and JS stack because the browser
      // has already printed it. Even if the application swallows the error, it is still
      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

      console['error'](combinedMessage); // Don't transform to our wrapper
    } else {}
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, lane) {
  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logCapturedError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, lane) {
  var update = createUpdate(NoTimestamp, lane);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error$1 = errorInfo.value;

    update.payload = function () {
      return getDerivedStateFromError(error$1);
    };

    update.callback = function () {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      logCapturedError(fiber, errorInfo);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      logCapturedError(fiber, errorInfo);

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this);
      }

      var error$1 = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error$1, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          if (!includesSomeLane(fiber.lanes, SyncLane)) {
            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');
          }
        }
      }
    };
  }

  return update;
}

function attachPingListener(root, wakeable, lanes) {
  // Attach a ping listener
  //
  // The data might resolve before we have a chance to commit the fallback. Or,
  // in the case of a refresh, we'll never commit a fallback. So we need to
  // attach a listener now. When it resolves ("pings"), we can decide whether to
  // try rendering the tree again.
  //
  // Only attach a listener if one does not already exist for the lanes
  // we're currently rendering (which acts like a "thread ID" here).
  //
  // We only need to do this in concurrent mode. Legacy Suspense always
  // commits fallbacks synchronously, so there are no pings.
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap$1();
    threadIDs = new Set();
    pingCache.set(wakeable, threadIDs);
  } else {
    threadIDs = pingCache.get(wakeable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    }
  }

  if (!threadIDs.has(lanes)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(lanes);
    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);

    {
      if (isDevToolsPresent) {
        // If we have pending work still, restore the original updaters
        restorePendingUpdaters(root, lanes);
      }
    }

    wakeable.then(ping, ping);
  }
}

function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
  // Retry listener
  //
  // If the fallback does commit, we need to attach a different type of
  // listener. This one schedules an update on the Suspense boundary to turn
  // the fallback state off.
  //
  // Stash the wakeable on the boundary fiber so we can access it in the
  // commit phase.
  //
  // When the wakeable resolves, we'll attempt to render the boundary
  // again ("retry").
  var wakeables = suspenseBoundary.updateQueue;

  if (wakeables === null) {
    var updateQueue = new Set();
    updateQueue.add(wakeable);
    suspenseBoundary.updateQueue = updateQueue;
  } else {
    wakeables.add(wakeable);
  }
}

function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
  // A legacy mode Suspense quirk, only relevant to hook components.


  var tag = sourceFiber.tag;

  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
    var currentSource = sourceFiber.alternate;

    if (currentSource) {
      sourceFiber.updateQueue = currentSource.updateQueue;
      sourceFiber.memoizedState = currentSource.memoizedState;
      sourceFiber.lanes = currentSource.lanes;
    } else {
      sourceFiber.updateQueue = null;
      sourceFiber.memoizedState = null;
    }
  }
}

function getNearestSuspenseBoundaryToCapture(returnFiber) {
  var node = returnFiber;

  do {
    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
      return node;
    } // This boundary already captured during this render. Continue to the next
    // boundary.


    node = node.return;
  } while (node !== null);

  return null;
}

function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
  // This marks a Suspense boundary so that when we're unwinding the stack,
  // it captures the suspended "exception" and does a second (fallback) pass.
  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
    // Legacy Mode Suspense
    //
    // If the boundary is in legacy mode, we should *not*
    // suspend the commit. Pretend as if the suspended component rendered
    // null and keep rendering. When the Suspense boundary completes,
    // we'll do a second pass to render the fallback.
    if (suspenseBoundary === returnFiber) {
      // Special case where we suspended while reconciling the children of
      // a Suspense boundary's inner Offscreen wrapper fiber. This happens
      // when a React.lazy component is a direct child of a
      // Suspense boundary.
      //
      // Suspense boundaries are implemented as multiple fibers, but they
      // are a single conceptual unit. The legacy mode behavior where we
      // pretend the suspended fiber committed as `null` won't work,
      // because in this case the "suspended" fiber is the inner
      // Offscreen wrapper.
      //
      // Because the contents of the boundary haven't started rendering
      // yet (i.e. nothing in the tree has partially rendered) we can
      // switch to the regular, concurrent mode behavior: mark the
      // boundary with ShouldCapture and enter the unwind phase.
      suspenseBoundary.flags |= ShouldCapture;
    } else {
      suspenseBoundary.flags |= DidCapture;
      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
      // But we shouldn't call any lifecycle methods or callbacks. Remove
      // all lifecycle effect tags.

      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

      if (sourceFiber.tag === ClassComponent) {
        var currentSourceFiber = sourceFiber.alternate;

        if (currentSourceFiber === null) {
          // This is a new mount. Change the tag so it's not mistaken for a
          // completed class component. For example, we should not call
          // componentWillUnmount if it is deleted.
          sourceFiber.tag = IncompleteClassComponent;
        } else {
          // When we try rendering again, we should not reuse the current fiber,
          // since it's known to be in an inconsistent state. Use a force update to
          // prevent a bail out.
          var update = createUpdate(NoTimestamp, SyncLane);
          update.tag = ForceUpdate;
          enqueueUpdate(sourceFiber, update, SyncLane);
        }
      } // The source fiber did not complete. Mark it with Sync priority to
      // indicate that it still has pending work.


      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
    }

    return suspenseBoundary;
  } // Confirmed that the boundary is in a concurrent mode tree. Continue
  // with the normal suspend path.
  //
  // After this we'll use a set of heuristics to determine whether this
  // render pass will run to completion or restart or "suspend" the commit.
  // The actual logic for this is spread out in different places.
  //
  // This first principle is that if we're going to suspend when we complete
  // a root, then we should also restart if we get an update or ping that
  // might unsuspend it, and vice versa. The only reason to suspend is
  // because you think you might want to restart before committing. However,
  // it doesn't make sense to restart only while in the period we're suspended.
  //
  // Restarting too aggressively is also not good because it starves out any
  // intermediate loading state. So we use heuristics to determine when.
  // Suspense Heuristics
  //
  // If nothing threw a Promise or all the same fallbacks are already showing,
  // then don't suspend/restart.
  //
  // If this is an initial render of a new tree of Suspense boundaries and
  // those trigger a fallback, then don't suspend/restart. We want to ensure
  // that we can show the initial loading state as quickly as possible.
  //
  // If we hit a "Delayed" case, such as when we'd switch from content back into
  // a fallback, then we should always suspend/restart. Transitions apply
  // to this case. If none is defined, JND is used instead.
  //
  // If we're already showing a fallback and it gets "retried", allowing us to show
  // another level, but there's still an inner boundary that would show a fallback,
  // then we suspend/restart for 500ms since the last time we showed a fallback
  // anywhere in the tree. This effectively throttles progressive loading into a
  // consistent train of commits. This also gives us an opportunity to restart to
  // get to the completed state slightly earlier.
  //
  // If there's ambiguity due to batching it's resolved in preference of:
  // 1) "delayed", 2) "initial render", 3) "retry".
  //
  // We want to ensure that a "busy" state doesn't get force committed. We want to
  // ensure that new initial loading states can commit as soon as possible.


  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
  // the begin phase to prevent an early bailout.

  suspenseBoundary.lanes = rootRenderLanes;
  return suspenseBoundary;
}

function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
  // The source fiber did not complete.
  sourceFiber.flags |= Incomplete;

  {
    if (isDevToolsPresent) {
      // If we have pending work still, restore the original updaters
      restorePendingUpdaters(root, rootRenderLanes);
    }
  }

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a wakeable. The component suspended.
    var wakeable = value;
    resetSuspendedComponent(sourceFiber);

    {
      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
        markDidThrowWhileHydratingDEV();
      }
    }


    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);

    if (suspenseBoundary !== null) {
      suspenseBoundary.flags &= ~ForceClientRender;
      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
      // commits fallbacks synchronously, so there are no pings.

      if (suspenseBoundary.mode & ConcurrentMode) {
        attachPingListener(root, wakeable, rootRenderLanes);
      }

      attachRetryListener(suspenseBoundary, root, wakeable);
      return;
    } else {
      // No boundary was found. Unless this is a sync update, this is OK.
      // We can suspend and wait for more data to arrive.
      if (!includesSyncLane(rootRenderLanes)) {
        // This is not a sync update. Suspend. Since we're not activating a
        // Suspense boundary, this will unwind all the way to the root without
        // performing a second pass to render a fallback. (This is arguably how
        // refresh transitions should work, too, since we're not going to commit
        // the fallbacks anyway.)
        //
        // This case also applies to initial hydration.
        attachPingListener(root, wakeable, rootRenderLanes);
        renderDidSuspendDelayIfPossible();
        return;
      } // This is a sync/discrete update. We treat this case like an error
      // because discrete renders are expected to produce a complete tree
      // synchronously to maintain consistency with external state.


      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.
      // The error will be caught by the nearest suspense boundary.

      value = uncaughtSuspenseError;
    }
  } else {
    // This is a regular error, not a Suspense wakeable.
    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
      markDidThrowWhileHydratingDEV();

      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
      // discarding the dehydrated content and switching to a client render.
      // Instead of surfacing the error, find the nearest Suspense boundary
      // and render it again without hydration.


      if (_suspenseBoundary !== null) {
        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
          // Set a flag to indicate that we should try rendering the normal
          // children again, not the fallback.
          _suspenseBoundary.flags |= ForceClientRender;
        }

        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
        // still log it so it can be fixed.

        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
        return;
      }
    }
  }

  value = createCapturedValueAtFiber(value, sourceFiber);
  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.

  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.flags |= ShouldCapture;
          var lane = pickArbitraryLane(rootRenderLanes);
          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
          enqueueCapturedUpdate(workInProgress, update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.flags |= ShouldCapture;

          var _lane = pickArbitraryLane(rootRenderLanes);

          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

function getSuspendedCache() {
  {
    return null;
  } // This function is called when a Suspense boundary suspends. It returns the
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
}

function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
  if (current === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
  }
}

function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their
  // identities match.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
}

function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(Component));
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  var hasId;
  prepareToReadContext(workInProgress, renderLanes);

  {
    markComponentRenderStarted(workInProgress);
  }

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
    hasId = checkDidRenderIdHook();

    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        hasId = checkDidRenderIdHook();
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }

    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderLanes);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  if (getIsHydrating() && hasId) {
    pushMaterializedTreeId(workInProgress);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
  if (current === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(type));
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentNameFromType(_type));
    }
  }

  var currentChild = current.child; // This is always exactly one child

  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

  if (!hasScheduledUpdateOrContext) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        var lazyComponent = outerMemoType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;

        try {
          outerMemoType = init(payload);
        } catch (x) {
          outerMemoType = null;
        } // Inner propTypes will be validated in the function component path.


        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

        if (outerPropTypes) {
          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
          'prop', getComponentNameFromType(outerMemoType));
        }
      }
    }
  }

  if (current !== null) {
    var prevProps = current.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
     workInProgress.type === current.type )) {
      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
      // would during a normal fiber bailout.
      //
      // We don't have strong guarantees that the props object is referentially
      // equal during updates where we can't bail out anyway — like if the props
      // are shallowly equal, but there's a local state or context update in the
      // same batch.
      //
      // However, as a principle, we should aim to make the behavior consistent
      // across different ways of memoizing a component. For example, React.memo
      // has a different internal Fiber layout if you pass a normal function
      // component (SimpleMemoComponent) versus if you pass a different type
      // like forwardRef (MemoComponent). But this is an implementation detail.
      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
      // affect whether the props object is reused during a bailout.

      workInProgress.pendingProps = nextProps = prevProps;

      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
        // The pending lanes were cleared at the beginning of beginWork. We're
        // about to bail out, but there might be other lanes that weren't
        // included in the current render. Usually, the priority level of the
        // remaining updates is accumulated during the evaluation of the
        // component (i.e. when processing the update queue). But since since
        // we're bailing out early *without* evaluating the component, we need
        // to account for it here, too. Reset to the value of the current fiber.
        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
        // because a MemoComponent fiber does not have hooks or an update queue;
        // rather, it wraps around an inner component, which may or may not
        // contains hooks.
        // TODO: Move the reset at in beginWork out of the common path so that
        // this is no longer necessary.
        workInProgress.lanes = current.lanes;
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
        // This is a special case that only exists for legacy mode.
        // See https://github.com/facebook/react/pull/19216.
        didReceiveUpdate = true;
      }
    }
  }

  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
}

function updateOffscreenComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  var prevState = current !== null ? current.memoizedState : null;

  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {
    // Rendering a hidden tree.
    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
      // In legacy sync mode, don't defer the subtree. Render it now.
      // TODO: Consider how Offscreen should work with transitions in the future
      var nextState = {
        baseLanes: NoLanes,
        cachePool: null,
        transitions: null
      };
      workInProgress.memoizedState = nextState;

      pushRenderLanes(workInProgress, renderLanes);
    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
      // and resume this tree later.

      var nextBaseLanes;

      if (prevState !== null) {
        var prevBaseLanes = prevState.baseLanes;
        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
      } else {
        nextBaseLanes = renderLanes;
      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
      var _nextState = {
        baseLanes: nextBaseLanes,
        cachePool: spawnedCachePool,
        transitions: null
      };
      workInProgress.memoizedState = _nextState;
      workInProgress.updateQueue = null;
      // to avoid a push/pop misalignment.


      pushRenderLanes(workInProgress, nextBaseLanes);

      return null;
    } else {
      // This is the second render. The surrounding visible content has already
      // committed. Now we resume rendering the hidden tree.
      // Rendering at offscreen, so we can clear the base lanes.
      var _nextState2 = {
        baseLanes: NoLanes,
        cachePool: null,
        transitions: null
      };
      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;

      pushRenderLanes(workInProgress, subtreeRenderLanes);
    }
  } else {
    // Rendering a visible tree.
    var _subtreeRenderLanes;

    if (prevState !== null) {
      // We're going from hidden -> visible.
      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);

      workInProgress.memoizedState = null;
    } else {
      // We weren't previously hidden, and we still aren't, so there's nothing
      // special to do. Need to push to the stack regardless, though, to avoid
      // a push/pop misalignment.
      _subtreeRenderLanes = renderLanes;
    }

    pushRenderLanes(workInProgress, _subtreeRenderLanes);
  }

  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
} // Note: These happen to have identical begin phases, for now. We shouldn't hold

function updateFragment(current, workInProgress, renderLanes) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateMode(current, workInProgress, renderLanes) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateProfiler(current, workInProgress, renderLanes) {
  {
    workInProgress.flags |= Update;

    {
      // Reset effect durations for the next eventual effect phase.
      // These are reset during render to allow the DevTools commit hook a chance to read them,
      var stateNode = workInProgress.stateNode;
      stateNode.effectDuration = 0;
      stateNode.passiveEffectDuration = 0;
    }
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function markRef(current, workInProgress) {
  var ref = workInProgress.ref;

  if (current === null && ref !== null || current !== null && current.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.flags |= Ref;

    {
      workInProgress.flags |= RefStatic;
    }
  }
}

function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(Component));
      }
    }
  }

  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  var hasId;
  prepareToReadContext(workInProgress, renderLanes);

  {
    markComponentRenderStarted(workInProgress);
  }

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
    hasId = checkDidRenderIdHook();

    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        hasId = checkDidRenderIdHook();
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }

    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderLanes);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  if (getIsHydrating() && hasId) {
    pushMaterializedTreeId(workInProgress);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
  {
    // This is used by DevTools to force a boundary to error.
    switch (shouldError(workInProgress)) {
      case false:
        {
          var _instance = workInProgress.stateNode;
          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
          // Is there a better way to do this?

          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
          var state = tempInstance.state;

          _instance.updater.enqueueSetState(_instance, state, null);

          break;
        }

      case true:
        {
          workInProgress.flags |= DidCapture;
          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes

          var error$1 = new Error('Simulated error coming from DevTools');
          var lane = pickArbitraryLane(renderLanes);
          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state

          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
          enqueueCapturedUpdate(workInProgress, update);
          break;
        }
    }

    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(Component));
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderLanes);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.

    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
    shouldUpdate = true;
  } else if (current === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
  } else {
    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
  }

  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

  {
    var inst = workInProgress.stateNode;

    if (shouldUpdate && inst.props !== nextProps) {
      if (!didWarnAboutReassigningProps) {
        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');
      }

      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current, workInProgress);
  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$1.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFromError is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    {
      stopProfilerTimerIfRunning();
    }
  } else {
    {
      markComponentRenderStarted(workInProgress);
    }

    {
      setIsRendering(true);
      nextChildren = instance.render();

      if ( workInProgress.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(true);

        try {
          instance.render();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }

      setIsRendering(false);
    }

    {
      markComponentRenderStopped();
    }
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;

  if (current !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current, workInProgress, renderLanes) {
  pushHostRootContext(workInProgress);

  if (current === null) {
    throw new Error('Should have a current fiber. This is a bug in React.');
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState.element;
  cloneUpdateQueue(current, workInProgress);
  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
  var nextState = workInProgress.memoizedState;
  var root = workInProgress.stateNode;
  // being called "element".


  var nextChildren = nextState.element;

  if ( prevState.isDehydrated) {
    // This is a hydration root whose shell has not yet hydrated. We should
    // attempt to hydrate.
    // Flip isDehydrated to false to indicate that when this render
    // finishes, the root will no longer be dehydrated.
    var overrideState = {
      element: nextChildren,
      isDehydrated: false,
      cache: nextState.cache,
      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
      transitions: nextState.transitions
    };
    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
    // have reducer functions so it doesn't need rebasing.

    updateQueue.baseState = overrideState;
    workInProgress.memoizedState = overrideState;

    if (workInProgress.flags & ForceClientRender) {
      // Something errored during a previous attempt to hydrate the shell, so we
      // forced a client render.
      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);
      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
    } else if (nextChildren !== prevChildren) {
      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);

      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
    } else {
      // The outermost shell has not hydrated yet. Start hydrating.
      enterHydrationState(workInProgress);

      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
      workInProgress.child = child;
      var node = child;

      while (node) {
        // Mark each child as hydrating. This is a fast path to know whether this
        // tree is part of a hydrating tree. This is used to determine if a child
        // node has fully mounted yet, and for scheduling event replaying.
        // Conceptually this is similar to Placement in that a new subtree is
        // inserted into the React tree here. It just happens to not need DOM
        // mutations because it already exists.
        node.flags = node.flags & ~Placement | Hydrating;
        node = node.sibling;
      }
    }
  } else {
    // Root is not dehydrated. Either this is a client-only root, or it
    // already hydrated.
    resetHydrationState();

    if (nextChildren === prevChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }

    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  }

  return workInProgress.child;
}

function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
  // Revert to client rendering.
  resetHydrationState();
  queueHydrationError(recoverableError);
  workInProgress.flags |= ForceClientRender;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateHostComponent(current, workInProgress, renderLanes) {
  pushHostContext(workInProgress);

  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current !== null ? current.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also has access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.flags |= ContentReset;
  }

  markRef(current, workInProgress);
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateHostText(current, workInProgress) {
  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
  var props = workInProgress.pendingProps;
  var lazyComponent = elementType;
  var payload = lazyComponent._payload;
  var init = lazyComponent._init;
  var Component = init(payload); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentNameFromType(Component));
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        renderLanes);
        return child;
      }
  }

  var hint = '';

  {
    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
      hint = ' Did you wrap a component in React.lazy() more than once?';
    }
  } // This message intentionally doesn't mention ForwardRef or MemoComponent
  // because the fact that it's a separate type of work is an
  // implementation detail.


  throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.

  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderLanes);
  constructClassInstance(workInProgress, Component, nextProps);
  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
  var props = workInProgress.pendingProps;
  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderLanes);
  var value;
  var hasId;

  {
    markComponentRenderStarted(workInProgress);
  }

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictLegacyMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    setIsRendering(true);
    ReactCurrentOwner$1.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
    hasId = checkDidRenderIdHook();
    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;

  {
    // Support for module components is deprecated and is removed behind a flag.
    // Whether or not it would crash later, we want to show a good message in DEV first.
    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
      var _componentName = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    }
  }

  if ( // Run these checks in production only if the flag is off.
  // Eventually we'll delete this branch altogether.
   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName2]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

        didWarnAboutModulePatternComponent[_componentName2] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    initializeUpdateQueue(workInProgress);
    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderLanes);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {

      if ( workInProgress.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(true);

        try {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
          hasId = checkDidRenderIdHook();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
    }

    if (getIsHydrating() && hasId) {
      pushMaterializedTreeId(workInProgress);
    }

    reconcileChildren(null, workInProgress, value, renderLanes);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  {
    if (Component) {
      if (Component.childContextTypes) {
        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
      }
    }

    if (workInProgress.ref !== null) {
      var info = '';
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }

      var warningKey = ownerName || '';
      var debugSource = workInProgress._debugSource;

      if (debugSource) {
        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
      }

      if (!didWarnAboutFunctionRefs[warningKey]) {
        didWarnAboutFunctionRefs[warningKey] = true;

        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
      }
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
      }
    }

    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
        error('%s: Function components do not support contextType.', _componentName4);

        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
      }
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  treeContext: null,
  retryLane: NoLane
};

function mountSuspenseOffscreenState(renderLanes) {
  return {
    baseLanes: renderLanes,
    cachePool: getSuspendedCache(),
    transitions: null
  };
}

function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
  var cachePool = null;

  return {
    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
    cachePool: cachePool,
    transitions: prevOffscreenState.transitions
  };
} // TODO: Probably should inline this back


function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
  // If we're already showing a fallback, there are cases where we need to
  // remain on that fallback regardless of whether the content has resolved.
  // For example, SuspenseList coordinates when nested content appears.
  if (current !== null) {
    var suspenseState = current.memoizedState;

    if (suspenseState === null) {
      // Currently showing content. Don't hide it, even if ForceSuspenseFallback
      // is true. More precise name might be "ForceRemainSuspenseFallback".
      // Note: This is a factoring smell. Can't remain on a fallback if there's
      // no fallback to remain on.
      return false;
    }
  } // Not currently showing content. Consult the Suspense context.


  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
}

function getRemainingWorkInPrimaryTree(current, renderLanes) {
  // TODO: Should not remove render lanes that were pinged during this render
  return removeLanes(current.childLanes, renderLanes);
}

function updateSuspenseComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.flags |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var showFallback = false;
  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    showFallback = true;
    workInProgress.flags &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current === null || current.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Avoided boundaries are not considered since they cannot handle preferred fallback states.
      {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
  // boundary's children. This involves some custom reconciliation logic. Two
  // main reasons this is so complicated.
  //
  // First, Legacy Mode has different semantics for backwards compatibility. The
  // primary tree will commit in an inconsistent state, so when we do the
  // second pass to render the fallback, we do some exceedingly, uh, clever
  // hacks to make that not totally break. Like transferring effects and
  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
  // because we bailout on the primary tree completely and leave it in its old
  // state, no effects. Same as what we do for Offscreen (except that
  // Offscreen doesn't have the first render pass).
  //
  // Second is hydration. During hydration, the Suspense fiber has a slightly
  // different layout, where the child points to a dehydrated fragment, which
  // contains the DOM rendered by the server.
  //
  // Third, even if you set all that aside, Suspense is like error boundaries in
  // that we first we try to render one tree, and if that fails, we render again
  // and switch to a different tree. Like a try/catch block. So we have to track
  // which branch we're currently rendering. Ideally we would model this using
  // a stack.

  if (current === null) {
    // Initial mount
    // Special path for hydration
    // If we're currently hydrating, try to hydrate this boundary.
    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

    var suspenseState = workInProgress.memoizedState;

    if (suspenseState !== null) {
      var dehydrated = suspenseState.dehydrated;

      if (dehydrated !== null) {
        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
      }
    }

    var nextPrimaryChildren = nextProps.children;
    var nextFallbackChildren = nextProps.fallback;

    if (showFallback) {
      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
      var primaryChildFragment = workInProgress.child;
      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;

      return fallbackFragment;
    } else {
      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
    }
  } else {
    // This is an update.
    // Special path for hydration
    var prevState = current.memoizedState;

    if (prevState !== null) {
      var _dehydrated = prevState.dehydrated;

      if (_dehydrated !== null) {
        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
      }
    }

    if (showFallback) {
      var _nextFallbackChildren = nextProps.fallback;
      var _nextPrimaryChildren = nextProps.children;
      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
      var _primaryChildFragment2 = workInProgress.child;
      var prevOffscreenState = current.child.memoizedState;
      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);

      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return fallbackChildFragment;
    } else {
      var _nextPrimaryChildren2 = nextProps.children;

      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);

      workInProgress.memoizedState = null;
      return _primaryChildFragment3;
    }
  }
}

function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
  var mode = workInProgress.mode;
  var primaryChildProps = {
    mode: 'visible',
    children: primaryChildren
  };
  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
  primaryChildFragment.return = workInProgress;
  workInProgress.child = primaryChildFragment;
  return primaryChildFragment;
}

function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var mode = workInProgress.mode;
  var progressedPrimaryFragment = workInProgress.child;
  var primaryChildProps = {
    mode: 'hidden',
    children: primaryChildren
  };
  var primaryChildFragment;
  var fallbackChildFragment;

  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
    // In legacy mode, we commit the primary tree as if it successfully
    // completed, even though it's in an inconsistent state.
    primaryChildFragment = progressedPrimaryFragment;
    primaryChildFragment.childLanes = NoLanes;
    primaryChildFragment.pendingProps = primaryChildProps;

    if ( workInProgress.mode & ProfileMode) {
      // Reset the durations from the first pass so they aren't included in the
      // final amounts. This seems counterintuitive, since we're intentionally
      // not measuring part of the render phase, but this makes it match what we
      // do in Concurrent Mode.
      primaryChildFragment.actualDuration = 0;
      primaryChildFragment.actualStartTime = -1;
      primaryChildFragment.selfBaseDuration = 0;
      primaryChildFragment.treeBaseDuration = 0;
    }

    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
  } else {
    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
  }

  primaryChildFragment.return = workInProgress;
  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;
  return fallbackChildFragment;
}

function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
  // this wrapper function to constrain it.
  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
}

function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
  // The props argument to `createWorkInProgress` is `any` typed, so we use this
  // wrapper function to constrain it.
  return createWorkInProgress(current, offscreenProps);
}

function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
  var currentPrimaryChildFragment = current.child;
  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
    mode: 'visible',
    children: primaryChildren
  });

  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    primaryChildFragment.lanes = renderLanes;
  }

  primaryChildFragment.return = workInProgress;
  primaryChildFragment.sibling = null;

  if (currentFallbackChildFragment !== null) {
    // Delete the fallback child fragment
    var deletions = workInProgress.deletions;

    if (deletions === null) {
      workInProgress.deletions = [currentFallbackChildFragment];
      workInProgress.flags |= ChildDeletion;
    } else {
      deletions.push(currentFallbackChildFragment);
    }
  }

  workInProgress.child = primaryChildFragment;
  return primaryChildFragment;
}

function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var mode = workInProgress.mode;
  var currentPrimaryChildFragment = current.child;
  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
  var primaryChildProps = {
    mode: 'hidden',
    children: primaryChildren
  };
  var primaryChildFragment;

  if ( // In legacy mode, we commit the primary tree as if it successfully
  // completed, even though it's in an inconsistent state.
  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
  // already cloned. In legacy mode, the only case where this isn't true is
  // when DevTools forces us to display a fallback; we skip the first render
  // pass entirely and go straight to rendering the fallback. (In Concurrent
  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
  // only codepath.)
  workInProgress.child !== currentPrimaryChildFragment) {
    var progressedPrimaryFragment = workInProgress.child;
    primaryChildFragment = progressedPrimaryFragment;
    primaryChildFragment.childLanes = NoLanes;
    primaryChildFragment.pendingProps = primaryChildProps;

    if ( workInProgress.mode & ProfileMode) {
      // Reset the durations from the first pass so they aren't included in the
      // final amounts. This seems counterintuitive, since we're intentionally
      // not measuring part of the render phase, but this makes it match what we
      // do in Concurrent Mode.
      primaryChildFragment.actualDuration = 0;
      primaryChildFragment.actualStartTime = -1;
      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
    } // The fallback fiber was added as a deletion during the first pass.
    // However, since we're going to remain on the fallback, we no longer want
    // to delete it.


    workInProgress.deletions = null;
  } else {
    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
    // (We don't do this in legacy mode, because in legacy mode we don't re-use
    // the current tree; see previous branch.)

    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
  }

  var fallbackChildFragment;

  if (currentFallbackChildFragment !== null) {
    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
  } else {
    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
    // mounted but this is a new fiber.

    fallbackChildFragment.flags |= Placement;
  }

  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;
  return fallbackChildFragment;
}

function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
  // Falling back to client rendering. Because this has performance
  // implications, it's considered a recoverable error, even though the user
  // likely won't observe anything wrong with the UI.
  //
  // The error is passed in as an argument to enforce that every caller provide
  // a custom message, or explicitly opt out (currently the only path that opts
  // out is legacy mode; every concurrent path provides an error).
  if (recoverableError !== null) {
    queueHydrationError(recoverableError);
  } // This will add the old fiber to the deletion list


  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.

  var nextProps = workInProgress.pendingProps;
  var primaryChildren = nextProps.children;
  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
  // mounted but this is a new fiber.

  primaryChildFragment.flags |= Placement;
  workInProgress.memoizedState = null;
  return primaryChildFragment;
}

function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var fiberMode = workInProgress.mode;
  var primaryChildProps = {
    mode: 'visible',
    children: primaryChildren
  };
  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
  // boundary) already mounted but this is a new fiber.

  fallbackChildFragment.flags |= Placement;
  primaryChildFragment.return = workInProgress;
  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;

  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
    // We will have dropped the effect list which contains the
    // deletion. We need to reconcile to delete the current child.
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
  }

  return fallbackChildFragment;
}

function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
  // During the first pass, we'll bail out and not drill into the children.
  // Instead, we'll leave the content in place and try to hydrate it later.
  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    {
      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');
    }

    workInProgress.lanes = laneToLanes(SyncLane);
  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
    // This is a client-only boundary. Since we won't get any content from the server
    // for this, we need to schedule that at a higher priority based on when it would
    // have timed out. In theory we could render it in this pass but it would have the
    // wrong priority associated with it and will prevent hydration of parent path.
    // Instead, we'll leave work left on it to render it in a separate commit.
    // TODO This time should be the time at which the server rendered response that is
    // a parent to this boundary was displayed. However, since we currently don't have
    // a protocol to transfer that time, we'll just estimate it by using the current
    // time. This will mean that Suspense timeouts are slightly shifted to later than
    // they should be.
    // Schedule a normal pri update to render this content.
    workInProgress.lanes = laneToLanes(DefaultHydrationLane);
  } else {
    // We'll continue hydrating the rest at offscreen priority since we'll already
    // be showing the right content coming from the server, it is no rush.
    workInProgress.lanes = laneToLanes(OffscreenLane);
  }

  return null;
}

function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
  if (!didSuspend) {
    // This is the first render pass. Attempt to hydrate.
    // We should never be hydrating at this point because it is the first pass,
    // but after we've already committed once.
    warnIfHydrating();

    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument
      // required — every concurrent mode path that causes hydration to
      // de-opt to client rendering should have an error message.
      null);
    }

    if (isSuspenseInstanceFallback(suspenseInstance)) {
      // This boundary is in a permanent fallback state. In this case, we'll never
      // get an update and we'll never be able to hydrate the final content. Let's just try the
      // client side render instead.
      var digest, message, stack;

      {
        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);

        digest = _getSuspenseInstanceF.digest;
        message = _getSuspenseInstanceF.message;
        stack = _getSuspenseInstanceF.stack;
      }

      var error;

      if (message) {
        // eslint-disable-next-line react-internal/prod-error-codes
        error = new Error(message);
      } else {
        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');
      }

      var capturedValue = createCapturedValue(error, digest, stack);
      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
    }
    // any context has changed, we need to treat is as if the input might have changed.


    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);

    if (didReceiveUpdate || hasContextChanged) {
      // This boundary has changed since the first render. This means that we are now unable to
      // hydrate it. We might still be able to hydrate it using a higher priority lane.
      var root = getWorkInProgressRoot();

      if (root !== null) {
        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);

        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
          // Intentionally mutating since this render will get interrupted. This
          // is one of the very rare times where we mutate the current tree
          // during the render phase.
          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render

          var eventTime = NoTimestamp;
          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
        }
      } // If we have scheduled higher pri work above, this will probably just abort the render
      // since we now have higher priority work, but in case it doesn't, we need to prepare to
      // render something, if we time out. Even if that requires us to delete everything and
      // skip hydration.
      // Delay having to do this as long as the suspense timeout allows us.


      renderDidSuspendDelayIfPossible();

      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));

      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
    } else if (isSuspenseInstancePending(suspenseInstance)) {
      // This component is still pending more data from the server, so we can't hydrate its
      // content. We treat it as if this component suspended itself. It might seem as if
      // we could just try to render it client-side instead. However, this will perform a
      // lot of unnecessary work and is unlikely to complete since it often will suspend
      // on missing data anyway. Additionally, the server might be able to render more
      // than we can on the client yet. In that case we'd end up with more fallback states
      // on the client than if we just leave it alone. If the server times out or errors
      // these should update this boundary to the permanent Fallback state instead.
      // Mark it as having captured (i.e. suspended).
      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.

      var retry = retryDehydratedSuspenseBoundary.bind(null, current);
      registerSuspenseInstanceRetry(suspenseInstance, retry);
      return null;
    } else {
      // This is the first attempt.
      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
      var primaryChildren = nextProps.children;
      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.

      primaryChildFragment.flags |= Hydrating;
      return primaryChildFragment;
    }
  } else {
    // This is the second render pass. We already attempted to hydrated, but
    // something either suspended or errored.
    if (workInProgress.flags & ForceClientRender) {
      // Something errored during hydration. Try again without hydrating.
      workInProgress.flags &= ~ForceClientRender;

      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));

      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
    } else if (workInProgress.memoizedState !== null) {
      // Something suspended and we should still be in dehydrated mode.
      // Leave the existing child in place.
      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
      // but the normal suspense pass doesn't.

      workInProgress.flags |= DidCapture;
      return null;
    } else {
      // Suspended but we should no longer be in dehydrated mode.
      // Therefore we now have to render the fallback.
      var nextPrimaryChildren = nextProps.children;
      var nextFallbackChildren = nextProps.fallback;
      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
      var _primaryChildFragment4 = workInProgress.child;
      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return fallbackChildFragment;
    }
  }
}

function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
  var alternate = fiber.alternate;

  if (alternate !== null) {
    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
  }

  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          case 'forward':
          case 'backward':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          default:
            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

            break;
        }
      } else {
        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;

        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;

        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isAnArray = isArray(childSlot);
    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';

    if (isAnArray || isIterable) {
      var type = isAnArray ? 'array' : 'iterable';

      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailMode: tailMode
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.renderingStartTime = 0;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailMode = tailMode;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.flags |= DidCapture;
  } else {
    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    // In legacy mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current, workInProgress, renderLanes) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  }

  return workInProgress.child;
}

var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

function updateContextProvider(current, workInProgress, renderLanes) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    if (!('value' in newProps)) {
      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
      }
    }

    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
    }
  }

  pushProvider(workInProgress, context, newValue);

  {
    if (oldProps !== null) {
      var oldValue = oldProps.value;

      if (objectIs(oldValue, newValue)) {
        // No change. Bailout early if children are the same.
        if (oldProps.children === newProps.children && !hasContextChanged()) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
      } else {
        // The context value changed. Search for matching consumers and schedule
        // them to update.
        propagateContextChange(workInProgress, context, renderLanes);
      }
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current, workInProgress, renderLanes) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;

          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    if (typeof render !== 'function') {
      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
    }
  }

  prepareToReadContext(workInProgress, renderLanes);
  var newValue = readContext(context);

  {
    markComponentRenderStarted(workInProgress);
  }

  var newChildren;

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    newChildren = render(newValue);
    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    if (current !== null) {
      // A lazy component only mounts if it suspended inside a non-
      // concurrent tree, in an inconsistent state. We want to treat it like
      // a new mount, even though an empty version of it already committed.
      // Disconnect the alternate pointers.
      current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.flags |= Placement;
    }
  }
}

function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
  if (current !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current.dependencies;
  }

  {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning();
  }

  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    {
      return null;
    }
  } // This fiber doesn't have work, but its subtree does. Clone the child
  // fibers and continue.


  cloneChildFibers(current, workInProgress);
  return workInProgress.child;
}

function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      // eslint-disable-next-line react-internal/prod-error-codes
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        // eslint-disable-next-line react-internal/prod-error-codes
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          // eslint-disable-next-line react-internal/prod-error-codes
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var deletions = returnFiber.deletions;

    if (deletions === null) {
      returnFiber.deletions = [current];
      returnFiber.flags |= ChildDeletion;
    } else {
      deletions.push(current);
    }

    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function checkScheduledUpdateOrContext(current, renderLanes) {
  // Before performing an early bailout, we must check if there are pending
  // updates or context.
  var updateLanes = current.lanes;

  if (includesSomeLane(updateLanes, renderLanes)) {
    return true;
  } // No pending update, but because context is propagated lazily, we need

  return false;
}

function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
  // This fiber does not have any pending work. Bailout without entering
  // the begin phase. There's still some bookkeeping we that needs to be done
  // in this optimized path, mostly pushing stuff onto the stack.
  switch (workInProgress.tag) {
    case HostRoot:
      pushHostRootContext(workInProgress);
      var root = workInProgress.stateNode;

      resetHydrationState();
      break;

    case HostComponent:
      pushHostContext(workInProgress);
      break;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          pushContextProvider(workInProgress);
        }

        break;
      }

    case HostPortal:
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      break;

    case ContextProvider:
      {
        var newValue = workInProgress.memoizedProps.value;
        var context = workInProgress.type._context;
        pushProvider(workInProgress, context, newValue);
        break;
      }

    case Profiler:
      {
        // Profiler should only call onRender when one of its descendants actually rendered.
        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

        if (hasChildWork) {
          workInProgress.flags |= Update;
        }

        {
          // Reset effect durations for the next eventual effect phase.
          // These are reset during render to allow the DevTools commit hook a chance to read them,
          var stateNode = workInProgress.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
      }

      break;

    case SuspenseComponent:
      {
        var state = workInProgress.memoizedState;

        if (state !== null) {
          if (state.dehydrated !== null) {
            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
            // been unsuspended it has committed as a resolved Suspense component.
            // If it needs to be retried, it should have work scheduled on it.

            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.

            return null;
          } // If this boundary is currently timed out, we need to decide
          // whether to retry the primary children, or to skip over it and
          // go straight to the fallback. Check the priority of the primary
          // child fragment.


          var primaryChildFragment = workInProgress.child;
          var primaryChildLanes = primaryChildFragment.childLanes;

          if (includesSomeLane(renderLanes, primaryChildLanes)) {
            // The primary children have pending work. Use the normal path
            // to attempt to render the primary children again.
            return updateSuspenseComponent(current, workInProgress, renderLanes);
          } else {
            // The primary child fragment does not have pending work marked
            // on it
            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
            // priority. Bailout.

            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

            if (child !== null) {
              // The fallback children have pending work. Skip over the
              // primary children and work on the fallback.
              return child.sibling;
            } else {
              // Note: We can return `null` here because we already checked
              // whether there were nested context consumers, via the call to
              // `bailoutOnAlreadyFinishedWork` above.
              return null;
            }
          }
        } else {
          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
        }

        break;
      }

    case SuspenseListComponent:
      {
        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

        if (didSuspendBefore) {
          if (_hasChildWork) {
            // If something was in fallback state last time, and we have all the
            // same children then we're still in progressive loading state.
            // Something might get unblocked by state updates or retries in the
            // tree which will affect the tail. So we need to use the normal
            // path to compute the correct tail.
            return updateSuspenseListComponent(current, workInProgress, renderLanes);
          } // If none of the children had any work, that means that none of
          // them got retried so they'll still be blocked in the same way
          // as before. We can fast bail out.


          workInProgress.flags |= DidCapture;
        } // If nothing suspended before and we're rendering the same children,
        // then the tail doesn't matter. Anything new that suspends will work
        // in the "together" mode, so we can continue from the state we had.


        var renderState = workInProgress.memoizedState;

        if (renderState !== null) {
          // Reset to the "together" mode in case we've started a different
          // update in the past but didn't complete it.
          renderState.rendering = null;
          renderState.tail = null;
          renderState.lastEffect = null;
        }

        pushSuspenseContext(workInProgress, suspenseStackCursor.current);

        if (_hasChildWork) {
          break;
        } else {
          // If none of the children had any work, that means that none of
          // them got retried so they'll still be blocked in the same way
          // as before. We can fast bail out.
          return null;
        }
      }

    case OffscreenComponent:
    case LegacyHiddenComponent:
      {
        // Need to check if the tree still needs to be deferred. This is
        // almost identical to the logic used in the normal update path,
        // so we'll just enter that. The only difference is we'll bail out
        // at the next level instead of this one, because the child props
        // have not changed. Which is fine.
        // TODO: Probably should refactor `beginWork` to split the bailout
        // path from the normal path. I'm tempted to do a labeled break here
        // but I won't :)
        workInProgress.lanes = NoLanes;
        return updateOffscreenComponent(current, workInProgress, renderLanes);
      }
  }

  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
}

function beginWork(current, workInProgress, renderLanes) {
  {
    if (workInProgress._debugNeedsRemount && current !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
    }
  }

  if (current !== null) {
    var oldProps = current.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
     workInProgress.type !== current.type )) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else {
      // Neither props nor legacy context changes. Check if there's a pending
      // update or context change.
      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
      // may not be work scheduled on `current`, so we check for this flag.
      (workInProgress.flags & DidCapture) === NoFlags) {
        // No pending updates or context. Bail out now.
        didReceiveUpdate = false;
        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
      }

      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
        // This is a special case that only exists for legacy mode.
        // See https://github.com/facebook/react/pull/19216.
        didReceiveUpdate = true;
      } else {
        // An update was scheduled on this fiber, but there are no new props
        // nor legacy context. Set this to false. If an update queue or context
        // consumer produces a changed value, it will set this to true. Otherwise,
        // the component will assume the children have not changed and bail out.
        didReceiveUpdate = false;
      }
    }
  } else {
    didReceiveUpdate = false;

    if (getIsHydrating() && isForkedChild(workInProgress)) {
      // Check if this child belongs to a list of muliple children in
      // its parent.
      //
      // In a true multi-threaded implementation, we would render children on
      // parallel threads. This would represent the beginning of a new render
      // thread for this subtree.
      //
      // We only use this for id generation during hydration, which is why the
      // logic is located in this special branch.
      var slotIndex = workInProgress.index;
      var numberOfForks = getForksAtLevel();
      pushTreeId(workInProgress, numberOfForks, slotIndex);
    }
  } // Before entering the begin phase, clear pending update priority.
  // TODO: This assumes that we're about to evaluate the component and process
  // the update queue. However, there's an exception: SimpleMemoComponent
  // sometimes bails out later in the begin phase. This indicates that we should
  // move this assignment out of the common path and into each branch.


  workInProgress.lanes = NoLanes;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current, workInProgress, elementType, renderLanes);
      }

    case FunctionComponent:
      {
        var Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
      }

    case ClassComponent:
      {
        var _Component = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);

        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
      }

    case HostRoot:
      return updateHostRoot(current, workInProgress, renderLanes);

    case HostComponent:
      return updateHostComponent(current, workInProgress, renderLanes);

    case HostText:
      return updateHostText(current, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current, workInProgress, renderLanes);

    case HostPortal:
      return updatePortalComponent(current, workInProgress, renderLanes);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
      }

    case Fragment:
      return updateFragment(current, workInProgress, renderLanes);

    case Mode:
      return updateMode(current, workInProgress, renderLanes);

    case Profiler:
      return updateProfiler(current, workInProgress, renderLanes);

    case ContextProvider:
      return updateContextProvider(current, workInProgress, renderLanes);

    case ContextConsumer:
      return updateContextConsumer(current, workInProgress, renderLanes);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentNameFromType(_type2));
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      }

    case IncompleteClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);

        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current, workInProgress, renderLanes);
      }

    case ScopeComponent:
      {

        break;
      }

    case OffscreenComponent:
      {
        return updateOffscreenComponent(current, workInProgress, renderLanes);
      }
  }

  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.flags |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.flags |= Ref;

  {
    workInProgress.flags |= RefStatic;
  }
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

{
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (current, workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  if (getIsHydrating()) {
    // If we're hydrating, we should consume as many items as we can
    // so we don't leave any behind.
    return;
  }

  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function bubbleProperties(completedWork) {
  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
  var newChildLanes = NoLanes;
  var subtreeFlags = NoFlags;

  if (!didBailout) {
    // Bubble up the earliest expiration time.
    if ( (completedWork.mode & ProfileMode) !== NoMode) {
      // In profiling mode, resetChildExpirationTime is also used to reset
      // profiler durations.
      var actualDuration = completedWork.actualDuration;
      var treeBaseDuration = completedWork.selfBaseDuration;
      var child = completedWork.child;

      while (child !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
        subtreeFlags |= child.subtreeFlags;
        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
        // only be updated if work is done on the fiber (i.e. it doesn't bailout).
        // When work is done, it should bubble to the parent's actualDuration. If
        // the fiber has not been cloned though, (meaning no work was done), then
        // this value will reflect the amount of time spent working on a previous
        // render. In that case it should not bubble. We determine whether it was
        // cloned by comparing the child pointer.

        actualDuration += child.actualDuration;
        treeBaseDuration += child.treeBaseDuration;
        child = child.sibling;
      }

      completedWork.actualDuration = actualDuration;
      completedWork.treeBaseDuration = treeBaseDuration;
    } else {
      var _child = completedWork.child;

      while (_child !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
        subtreeFlags |= _child.subtreeFlags;
        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
        // smell because it assumes the commit phase is never concurrent with
        // the render phase. Will address during refactor to alternate model.

        _child.return = completedWork;
        _child = _child.sibling;
      }
    }

    completedWork.subtreeFlags |= subtreeFlags;
  } else {
    // Bubble up the earliest expiration time.
    if ( (completedWork.mode & ProfileMode) !== NoMode) {
      // In profiling mode, resetChildExpirationTime is also used to reset
      // profiler durations.
      var _treeBaseDuration = completedWork.selfBaseDuration;
      var _child2 = completedWork.child;

      while (_child2 !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
        // so we should bubble those up even during a bailout. All the other
        // flags have a lifetime only of a single render + commit, so we should
        // ignore them.

        subtreeFlags |= _child2.subtreeFlags & StaticMask;
        subtreeFlags |= _child2.flags & StaticMask;
        _treeBaseDuration += _child2.treeBaseDuration;
        _child2 = _child2.sibling;
      }

      completedWork.treeBaseDuration = _treeBaseDuration;
    } else {
      var _child3 = completedWork.child;

      while (_child3 !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
        // so we should bubble those up even during a bailout. All the other
        // flags have a lifetime only of a single render + commit, so we should
        // ignore them.

        subtreeFlags |= _child3.subtreeFlags & StaticMask;
        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
        // smell because it assumes the commit phase is never concurrent with
        // the render phase. Will address during refactor to alternate model.

        _child3.return = completedWork;
        _child3 = _child3.sibling;
      }
    }

    completedWork.subtreeFlags |= subtreeFlags;
  }

  completedWork.childLanes = newChildLanes;
  return didBailout;
}

function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
    warnIfUnhydratedTailNodes(workInProgress);
    resetHydrationState();
    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
    return false;
  }

  var wasHydrated = popHydrationState(workInProgress);

  if (nextState !== null && nextState.dehydrated !== null) {
    // We might be inside a hydration state the first time we're picking up this
    // Suspense boundary, and also after we've reentered it for further hydration.
    if (current === null) {
      if (!wasHydrated) {
        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');
      }

      prepareToHydrateHostSuspenseInstance(workInProgress);
      bubbleProperties(workInProgress);

      {
        if ((workInProgress.mode & ProfileMode) !== NoMode) {
          var isTimedOutSuspense = nextState !== null;

          if (isTimedOutSuspense) {
            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
            var primaryChildFragment = workInProgress.child;

            if (primaryChildFragment !== null) {
              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
          }
        }
      }

      return false;
    } else {
      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
      // state since we're now exiting out of it. popHydrationState doesn't do that for us.
      resetHydrationState();

      if ((workInProgress.flags & DidCapture) === NoFlags) {
        // This boundary did not suspend so it's now hydrated and unsuspended.
        workInProgress.memoizedState = null;
      } // If nothing suspended, we need to schedule an effect to mark this boundary
      // as having hydrated so events know that they're free to be invoked.
      // It's also a signal to replay events and the suspense callback.
      // If something suspended, schedule an effect to attach retry listeners.
      // So we might as well always mark this.


      workInProgress.flags |= Update;
      bubbleProperties(workInProgress);

      {
        if ((workInProgress.mode & ProfileMode) !== NoMode) {
          var _isTimedOutSuspense = nextState !== null;

          if (_isTimedOutSuspense) {
            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
            var _primaryChildFragment = workInProgress.child;

            if (_primaryChildFragment !== null) {
              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
            }
          }
        }
      }

      return false;
    }
  } else {
    // Successfully completed this tree. If this was a forced client render,
    // there may have been recoverable errors during first hydration
    // attempt. If so, add them to a queue so we can log them in the
    // commit phase.
    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path

    return true;
  }
}

function completeWork(current, workInProgress, renderLanes) {
  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
  // to the current tree provider fiber is just as fast and less error-prone.
  // Ideally we would have a special version of the work loop only
  // for hydration.

  popTreeContext(workInProgress);

  switch (workInProgress.tag) {
    case IndeterminateComponent:
    case LazyComponent:
    case SimpleMemoComponent:
    case FunctionComponent:
    case ForwardRef:
    case Fragment:
    case Mode:
    case Profiler:
    case ContextConsumer:
    case MemoComponent:
      bubbleProperties(workInProgress);
      return null;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case HostRoot:
      {
        var fiberRoot = workInProgress.stateNode;
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        resetWorkInProgressVersions();

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          } else {
            if (current !== null) {
              var prevState = current.memoizedState;

              if ( // Check if this is a client root
              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
              (workInProgress.flags & ForceClientRender) !== NoFlags) {
                // Schedule an effect to clear this container at the start of the
                // next commit. This handles the case of React rendering into a
                // container with previous children. It's also safe to do for
                // updates too, because current.child would only be null if the
                // previous render was null (so the container would already
                // be empty).
                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
                // recoverable errors during first hydration attempt. If so, add
                // them to a queue so we can log them in the commit phase.

                upgradeHydrationErrorsToRecoverable();
              }
            }
          }
        }

        updateHostContainer(current, workInProgress);
        bubbleProperties(workInProgress);

        return null;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (workInProgress.stateNode === null) {
              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
            } // This can happen when we abort work.


            bubbleProperties(workInProgress);
            return null;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on whether we want to add them top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node need to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false);
            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.

            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (workInProgress.stateNode === null) {
              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
        // to its own fiber type so that we can add other kinds of hydration
        // boundaries that aren't associated with a Suspense tree. In anticipation
        // of such a refactor, all the hydration logic is contained in
        // this branch.

        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);

          if (!fallthroughToNormalSuspensePath) {
            if (workInProgress.flags & ShouldCapture) {
              // Special case. There were remaining unhydrated nodes. We treat
              // this as a mismatch. Revert to client rendering.
              return workInProgress;
            } else {
              // Did not finish hydrating, either because this is the initial
              // render or because something suspended.
              return null;
            }
          } // Continue with the normal Suspense path.

        }

        if ((workInProgress.flags & DidCapture) !== NoFlags) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.lanes = renderLanes; // Do not reset the effect list.

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          } // Don't bubble properties in this case.


          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = current !== null && current.memoizedState !== null;
        // a passive effect, which is when we process the transitions


        if (nextDidTimeout !== prevDidTimeout) {
          // an effect to toggle the subtree's visibility. When we switch from
          // fallback -> primary, the inner Offscreen fiber schedules this effect
          // as part of its normal complete phase. But when we switch from
          // primary -> fallback, the inner Offscreen fiber does not have a complete
          // phase. So we need to schedule its effect here.
          //
          // We also use this flag to connect/disconnect the effects, but the same
          // logic applies: when re-connecting, the Offscreen fiber's complete
          // phase will handle scheduling the effect. It's only when the fallback
          // is active that we have to do anything special.


          if (nextDidTimeout) {
            var _offscreenFiber2 = workInProgress.child;
            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
            // in the concurrent tree already suspended during this render.
            // This is a known bug.

            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
              // TODO: Move this back to throwException because this is too late
              // if this is a large tree which is common for initial loads. We
              // don't know if we should restart a render or not until we get
              // this marker, and this is too late.
              // If this render already had a ping or lower pri updates,
              // and this is the first time we know we're going to suspend we
              // should be able to immediately restart from within throwException.
              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);

              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                // If this was in an invisible tree or a new render, then showing
                // this boundary is ok.
                renderDidSuspend();
              } else {
                // Otherwise, we're going to have to hide content so we should
                // suspend for longer if possible.
                renderDidSuspendDelayIfPossible();
              }
            }
          }
        }

        var wakeables = workInProgress.updateQueue;

        if (wakeables !== null) {
          // Schedule an effect to attach a retry listener to the promise.
          // TODO: Move to passive phase
          workInProgress.flags |= Update;
        }

        bubbleProperties(workInProgress);

        {
          if ((workInProgress.mode & ProfileMode) !== NoMode) {
            if (nextDidTimeout) {
              // Don't count time spent in a timed out Suspense subtree as part of the base duration.
              var primaryChildFragment = workInProgress.child;

              if (primaryChildFragment !== null) {
                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
              }
            }
          }
        }

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(current, workInProgress);

      if (current === null) {
        preparePortalMount(workInProgress.stateNode.containerInfo);
      }

      bubbleProperties(workInProgress);
      return null;

    case ContextProvider:
      // Pop provider fiber
      var context = workInProgress.type._context;
      popProvider(context, workInProgress);
      bubbleProperties(workInProgress);
      return null;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode.
          // We don't do anything in this mode.
          bubbleProperties(workInProgress);
          return null;
        }

        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.flags |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thenables. Instead, we'll transfer its thenables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThenables = suspended.updateQueue;

                  if (newThenables !== null) {
                    workInProgress.updateQueue = newThenables;
                    workInProgress.flags |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect flags before doing the second pass since that's now invalid.
                  // Reset the child fibers to their original state.


                  workInProgress.subtreeFlags = NoFlags;
                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.

                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }

            if (renderState.tail !== null && now() > getRenderTargetTime()) {
              // We have already passed our CPU deadline but we still have rows
              // left in the tail. We'll just give up further attempts to render
              // the main content and only render fallbacks.
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. While in terms
              // of priority this work has the same priority as this current render,
              // it's not part of the same transition once the transition has
              // committed. If it's sync, we still want to yield so that it can be
              // painted. Conceptually, this is really the same as pinging.
              // We can use any RetryLane even if it's the one currently rendering
              // since we're leaving it behind on this node.

              workInProgress.lanes = SomeRetryLane;
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThenables = _suspended.updateQueue;

              if (_newThenables !== null) {
                workInProgress.updateQueue = _newThenables;
                workInProgress.flags |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
              ) {
                  // We're done.
                  bubbleProperties(workInProgress);
                  return null;
                }
            } else if ( // The time it took to render last row is greater than the remaining
            // time we have to render. So rendering one more row would likely
            // exceed it.
            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. While in terms
              // of priority this work has the same priority as this current render,
              // it's not part of the same transition once the transition has
              // committed. If it's sync, we still want to yield so that it can be
              // painted. Conceptually, this is really the same as pinging.
              // We can use any RetryLane even if it's the one currently rendering
              // since we're leaving it behind on this node.

              workInProgress.lanes = SomeRetryLane;
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          // Pop a row.
          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.renderingStartTime = now();
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
          // Don't bubble properties in this case.

          return next;
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case ScopeComponent:
      {

        break;
      }

    case OffscreenComponent:
    case LegacyHiddenComponent:
      {
        popRenderLanes(workInProgress);
        var _nextState = workInProgress.memoizedState;
        var nextIsHidden = _nextState !== null;

        if (current !== null) {
          var _prevState = current.memoizedState;
          var prevIsHidden = _prevState !== null;

          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.
          !enableLegacyHidden )) {
            workInProgress.flags |= Visibility;
          }
        }

        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {
          bubbleProperties(workInProgress);
        } else {
          // Don't bubble properties for hidden children unless we're rendering
          // at offscreen priority.
          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
            bubbleProperties(workInProgress);

            {
              // Check if there was an insertion or update in the hidden subtree.
              // If so, we need to hide those nodes in the commit phase, so
              // schedule a visibility effect.
              if ( workInProgress.subtreeFlags & (Placement | Update)) {
                workInProgress.flags |= Visibility;
              }
            }
          }
        }
        return null;
      }

    case CacheComponent:
      {

        return null;
      }

    case TracingMarkerComponent:
      {

        return null;
      }
  }

  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
}

function unwindWork(current, workInProgress, renderLanes) {
  // Note: This intentionally doesn't check if we're hydrating because comparing
  // to the current tree provider fiber is just as fast and less error-prone.
  // Ideally we would have a special version of the work loop only
  // for hydration.
  popTreeContext(workInProgress);

  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var flags = workInProgress.flags;

        if (flags & ShouldCapture) {
          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        var root = workInProgress.stateNode;
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        resetWorkInProgressVersions();
        var _flags = workInProgress.flags;

        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
          // There was an error during render that wasn't captured by a suspense
          // boundary. Do a second pass on the root to unmount the children.
          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
          return workInProgress;
        } // We unwound to the root without completing it. Exit.


        return null;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var suspenseState = workInProgress.memoizedState;

        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          if (workInProgress.alternate === null) {
            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');
          }

          resetHydrationState();
        }

        var _flags2 = workInProgress.flags;

        if (_flags2 & ShouldCapture) {
          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      var context = workInProgress.type._context;
      popProvider(context, workInProgress);
      return null;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      popRenderLanes(workInProgress);
      return null;

    case CacheComponent:

      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(current, interruptedWork, renderLanes) {
  // Note: This intentionally doesn't check if we're hydrating because comparing
  // to the current tree provider fiber is just as fast and less error-prone.
  // Ideally we would have a special version of the work loop only
  // for hydration.
  popTreeContext(interruptedWork);

  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        var root = interruptedWork.stateNode;
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        resetWorkInProgressVersions();
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      var context = interruptedWork.type._context;
      popProvider(context, interruptedWork);
      break;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      popRenderLanes(interruptedWork);
      break;
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
} // Used during the commit phase to track the state of the Offscreen component stack.
// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
// Only used when enableSuspenseLayoutEffectSemantics is enabled.


var offscreenSubtreeIsHidden = false;
var offscreenSubtreeWasHidden = false;
var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
var nextEffect = null; // Used for Profiling builds to track updaters.

var inProgressLanes = null;
var inProgressRoot = null;
function reportUncaughtErrorInDEV(error) {
  // Wrapping each small part of the commit phase into a guarded
  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).
  // But we rely on it to surface errors to DEV tools like overlays
  // (https://github.com/facebook/react/issues/21712).
  // As a compromise, rethrow only caught errors in a guard.
  {
    invokeGuardedCallback(null, function () {
      throw error;
    });
    clearCaughtError();
  }
}

var callComponentWillUnmountWithTimer = function (current, instance) {
  instance.props = current.memoizedProps;
  instance.state = current.memoizedState;

  if ( current.mode & ProfileMode) {
    try {
      startLayoutEffectTimer();
      instance.componentWillUnmount();
    } finally {
      recordLayoutEffectDuration(current);
    }
  } else {
    instance.componentWillUnmount();
  }
}; // Capture errors so they don't interrupt mounting.


function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
  try {
    commitHookEffectListMount(Layout, current);
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
} // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
  try {
    callComponentWillUnmountWithTimer(current, instance);
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
} // Capture errors so they don't interrupt mounting.


function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
  try {
    instance.componentDidMount();
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
} // Capture errors so they don't interrupt mounting.


function safelyAttachRef(current, nearestMountedAncestor) {
  try {
    commitAttachRef(current);
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
}

function safelyDetachRef(current, nearestMountedAncestor) {
  var ref = current.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      var retVal;

      try {
        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            retVal = ref(null);
          } finally {
            recordLayoutEffectDuration(current);
          }
        } else {
          retVal = ref(null);
        }
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      }

      {
        if (typeof retVal === 'function') {
          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
  try {
    destroy();
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
}

var focusedInstanceHandle = null;
var shouldFireAfterActiveInstanceBlur = false;
function commitBeforeMutationEffects(root, firstChild) {
  focusedInstanceHandle = prepareForCommit(root.containerInfo);
  nextEffect = firstChild;
  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber

  var shouldFire = shouldFireAfterActiveInstanceBlur;
  shouldFireAfterActiveInstanceBlur = false;
  focusedInstanceHandle = null;
  return shouldFire;
}

function commitBeforeMutationEffects_begin() {
  while (nextEffect !== null) {
    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.

    var child = fiber.child;

    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
      child.return = fiber;
      nextEffect = child;
    } else {
      commitBeforeMutationEffects_complete();
    }
  }
}

function commitBeforeMutationEffects_complete() {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    setCurrentFiber(fiber);

    try {
      commitBeforeMutationEffectsOnFiber(fiber);
    } catch (error) {
      captureCommitPhaseError(fiber, fiber.return, error);
    }

    resetCurrentFiber();
    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitBeforeMutationEffectsOnFiber(finishedWork) {
  var current = finishedWork.alternate;
  var flags = finishedWork.flags;

  if ((flags & Snapshot) !== NoFlags) {
    setCurrentFiber(finishedWork);

    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          break;
        }

      case ClassComponent:
        {
          if (current !== null) {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);

                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
          }

          break;
        }

      case HostRoot:
        {
          {
            var root = finishedWork.stateNode;
            clearContainer(root.containerInfo);
          }

          break;
        }

      case HostComponent:
      case HostText:
      case HostPortal:
      case IncompleteClassComponent:
        // Nothing to do for these component types
        break;

      default:
        {
          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
        }
    }

    resetCurrentFiber();
  }
}

function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & flags) === flags) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          {
            if ((flags & Passive$1) !== NoFlags$1) {
              markComponentPassiveEffectUnmountStarted(finishedWork);
            } else if ((flags & Layout) !== NoFlags$1) {
              markComponentLayoutEffectUnmountStarted(finishedWork);
            }
          }

          {
            if ((flags & Insertion) !== NoFlags$1) {
              setIsRunningInsertionEffect(true);
            }
          }

          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);

          {
            if ((flags & Insertion) !== NoFlags$1) {
              setIsRunningInsertionEffect(false);
            }
          }

          {
            if ((flags & Passive$1) !== NoFlags$1) {
              markComponentPassiveEffectUnmountStopped();
            } else if ((flags & Layout) !== NoFlags$1) {
              markComponentLayoutEffectUnmountStopped();
            }
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitHookEffectListMount(flags, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & flags) === flags) {
        {
          if ((flags & Passive$1) !== NoFlags$1) {
            markComponentPassiveEffectMountStarted(finishedWork);
          } else if ((flags & Layout) !== NoFlags$1) {
            markComponentLayoutEffectMountStarted(finishedWork);
          }
        } // Mount


        var create = effect.create;

        {
          if ((flags & Insertion) !== NoFlags$1) {
            setIsRunningInsertionEffect(true);
          }
        }

        effect.destroy = create();

        {
          if ((flags & Insertion) !== NoFlags$1) {
            setIsRunningInsertionEffect(false);
          }
        }

        {
          if ((flags & Passive$1) !== NoFlags$1) {
            markComponentPassiveEffectMountStopped();
          } else if ((flags & Layout) !== NoFlags$1) {
            markComponentLayoutEffectMountStopped();
          }
        }

        {
          var destroy = effect.destroy;

          if (destroy !== undefined && typeof destroy !== 'function') {
            var hookName = void 0;

            if ((effect.tag & Layout) !== NoFlags) {
              hookName = 'useLayoutEffect';
            } else if ((effect.tag & Insertion) !== NoFlags) {
              hookName = 'useInsertionEffect';
            } else {
              hookName = 'useEffect';
            }

            var addendum = void 0;

            if (destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + destroy;
            }

            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveEffectDurations(finishedRoot, finishedWork) {
  {
    // Only Profilers with work in their subtree will have an Update effect scheduled.
    if ((finishedWork.flags & Update) !== NoFlags) {
      switch (finishedWork.tag) {
        case Profiler:
          {
            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
            var _finishedWork$memoize = finishedWork.memoizedProps,
                id = _finishedWork$memoize.id,
                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
            // It does not get reset until the start of the next commit phase.

            var commitTime = getCommitTime();
            var phase = finishedWork.alternate === null ? 'mount' : 'update';

            {
              if (isCurrentUpdateNested()) {
                phase = 'nested-update';
              }
            }

            if (typeof onPostCommit === 'function') {
              onPostCommit(id, phase, passiveEffectDuration, commitTime);
            } // Bubble times to the next nearest ancestor Profiler.
            // After we process that Profiler, we'll bubble further up.


            var parentFiber = finishedWork.return;

            outer: while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root = parentFiber.stateNode;
                  root.passiveEffectDuration += passiveEffectDuration;
                  break outer;

                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.passiveEffectDuration += passiveEffectDuration;
                  break outer;
              }

              parentFiber = parentFiber.return;
            }

            break;
          }
      }
    }
  }
}

function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
  if ((finishedWork.flags & LayoutMask) !== NoFlags) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          if ( !offscreenSubtreeWasHidden) {
            // At this point layout effects have already been destroyed (during mutation phase).
            // This is done to prevent sibling component effects from interfering with each other,
            // e.g. a destroy function in one component should never override a ref set
            // by a create function in another component during the same commit.
            if ( finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              commitHookEffectListMount(Layout | HasEffect, finishedWork);
            }
          }

          break;
        }

      case ClassComponent:
        {
          var instance = finishedWork.stateNode;

          if (finishedWork.flags & Update) {
            if (!offscreenSubtreeWasHidden) {
              if (current === null) {
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }
                  }
                }

                if ( finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    instance.componentDidMount();
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  instance.componentDidMount();
                }
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                var prevState = current.memoizedState; // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }
                  }
                }

                if ( finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              }
            }
          } // TODO: I think this is now always non-null by the time it reaches the
          // commit phase. Consider removing the type check.


          var updateQueue = finishedWork.updateQueue;

          if (updateQueue !== null) {
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }
              }
            } // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.


            commitUpdateQueue(finishedWork, updateQueue, instance);
          }

          break;
        }

      case HostRoot:
        {
          // TODO: I think this is now always non-null by the time it reaches the
          // commit phase. Consider removing the type check.
          var _updateQueue = finishedWork.updateQueue;

          if (_updateQueue !== null) {
            var _instance = null;

            if (finishedWork.child !== null) {
              switch (finishedWork.child.tag) {
                case HostComponent:
                  _instance = getPublicInstance(finishedWork.child.stateNode);
                  break;

                case ClassComponent:
                  _instance = finishedWork.child.stateNode;
                  break;
              }
            }

            commitUpdateQueue(finishedWork, _updateQueue, _instance);
          }

          break;
        }

      case HostComponent:
        {
          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
          // These effects should only be committed when components are first mounted,
          // aka when there is no current/alternate.

          if (current === null && finishedWork.flags & Update) {
            var type = finishedWork.type;
            var props = finishedWork.memoizedProps;
            commitMount(_instance2, type, props);
          }

          break;
        }

      case HostText:
        {
          // We have no life-cycles associated with text.
          break;
        }

      case HostPortal:
        {
          // We have no life-cycles associated with portals.
          break;
        }

      case Profiler:
        {
          {
            var _finishedWork$memoize2 = finishedWork.memoizedProps,
                onCommit = _finishedWork$memoize2.onCommit,
                onRender = _finishedWork$memoize2.onRender;
            var effectDuration = finishedWork.stateNode.effectDuration;
            var commitTime = getCommitTime();
            var phase = current === null ? 'mount' : 'update';

            {
              if (isCurrentUpdateNested()) {
                phase = 'nested-update';
              }
            }

            if (typeof onRender === 'function') {
              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
            }

            {
              if (typeof onCommit === 'function') {
                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.
              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
              // because the effect is also where times bubble to parent Profilers.


              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
              // Do not reset these values until the next render so DevTools has a chance to read them first.

              var parentFiber = finishedWork.return;

              outer: while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root = parentFiber.stateNode;
                    root.effectDuration += effectDuration;
                    break outer;

                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += effectDuration;
                    break outer;
                }

                parentFiber = parentFiber.return;
              }
            }
          }

          break;
        }

      case SuspenseComponent:
        {
          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
          break;
        }

      case SuspenseListComponent:
      case IncompleteClassComponent:
      case ScopeComponent:
      case OffscreenComponent:
      case LegacyHiddenComponent:
      case TracingMarkerComponent:
        {
          break;
        }

      default:
        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
    }
  }

  if ( !offscreenSubtreeWasHidden) {
    {
      if (finishedWork.flags & Ref) {
        commitAttachRef(finishedWork);
      }
    }
  }
}

function reappearLayoutEffectsOnFiber(node) {
  // Turn on layout effects in a tree that previously disappeared.
  // TODO (Offscreen) Check: flags & LayoutStatic
  switch (node.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( node.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            safelyCallCommitHookLayoutEffectListMount(node, node.return);
          } finally {
            recordLayoutEffectDuration(node);
          }
        } else {
          safelyCallCommitHookLayoutEffectListMount(node, node.return);
        }

        break;
      }

    case ClassComponent:
      {
        var instance = node.stateNode;

        if (typeof instance.componentDidMount === 'function') {
          safelyCallComponentDidMount(node, node.return, instance);
        }

        safelyAttachRef(node, node.return);
        break;
      }

    case HostComponent:
      {
        safelyAttachRef(node, node.return);
        break;
      }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  // Only hide or unhide the top-most host nodes.
  var hostSubtreeRoot = null;

  {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        if (hostSubtreeRoot === null) {
          hostSubtreeRoot = node;

          try {
            var instance = node.stateNode;

            if (isHidden) {
              hideInstance(instance);
            } else {
              unhideInstance(node.stateNode, node.memoizedProps);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      } else if (node.tag === HostText) {
        if (hostSubtreeRoot === null) {
          try {
            var _instance3 = node.stateNode;

            if (isHidden) {
              hideTextInstance(_instance3);
            } else {
              unhideTextInstance(_instance3, node.memoizedProps);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        if (hostSubtreeRoot === node) {
          hostSubtreeRoot = null;
        }

        node = node.return;
      }

      if (hostSubtreeRoot === node) {
        hostSubtreeRoot = null;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag

    if (typeof ref === 'function') {
      var retVal;

      if ( finishedWork.mode & ProfileMode) {
        try {
          startLayoutEffectTimer();
          retVal = ref(instanceToUse);
        } finally {
          recordLayoutEffectDuration(finishedWork);
        }
      } else {
        retVal = ref(instanceToUse);
      }

      {
        if (typeof retVal === 'function') {
          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));
        }
      }
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function detachFiberMutation(fiber) {
  // Cut off the return pointer to disconnect it from the tree.
  // This enables us to detect and warn against state updates on an unmounted component.
  // It also prevents events from bubbling from within disconnected components.
  //
  // Ideally, we should also clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child.
  // This child itself will be GC:ed when the parent updates the next time.
  //
  // Note that we can't clear child or sibling pointers yet.
  // They're needed for passive effects and for findDOMNode.
  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
  //
  // Don't reset the alternate yet, either. We need that so we can detach the
  // alternate's fields in the passive phase. Clearing the return pointer is
  // sufficient for findDOMNode semantics.
  var alternate = fiber.alternate;

  if (alternate !== null) {
    alternate.return = null;
  }

  fiber.return = null;
}

function detachFiberAfterEffects(fiber) {
  var alternate = fiber.alternate;

  if (alternate !== null) {
    fiber.alternate = null;
    detachFiberAfterEffects(alternate);
  } // Note: Defensively using negation instead of < in case
  // `deletedTreeCleanUpLevel` is undefined.


  {
    // Clear cyclical Fiber fields. This level alone is designed to roughly
    // approximate the planned Fiber refactor. In that world, `setState` will be
    // bound to a special "instance" object instead of a Fiber. The Instance
    // object will not have any of these fields. It will only be connected to
    // the fiber tree via a single link at the root. So if this level alone is
    // sufficient to fix memory issues, that bodes well for our plans.
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
    // tree, which has its own pointers to children, parents, and siblings.
    // The other host nodes also point back to fibers, so we should detach that
    // one, too.

    if (fiber.tag === HostComponent) {
      var hostInstance = fiber.stateNode;

      if (hostInstance !== null) {
        detachDeletedInstance(hostInstance);
      }
    }

    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
    // already disconnect the `return` pointer at the root of the deleted
    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not
    // cyclical — it's only cyclical when combined with `child`, `sibling`, and
    // `alternate`. But we'll clear it in the next level anyway, just in case.

    {
      fiber._debugOwner = null;
    }

    {
      // Theoretically, nothing in here should be necessary, because we already
      // disconnected the fiber from the tree. So even if something leaks this
      // particular fiber, it won't leak anything else
      //
      // The purpose of this branch is to be super aggressive so we can measure
      // if there's any difference in memory impact. If there is, that could
      // indicate a React leak we don't know about.
      fiber.return = null;
      fiber.dependencies = null;
      fiber.memoizedProps = null;
      fiber.memoizedState = null;
      fiber.pendingProps = null;
      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.

      fiber.updateQueue = null;
    }
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.flags & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.flags & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  switch (parentFiber.tag) {
    case HostComponent:
      {
        var parent = parentFiber.stateNode;

        if (parentFiber.flags & ContentReset) {
          // Reset the text content of the parent before doing any insertions
          resetTextContent(parent); // Clear ContentReset from the effect tag

          parentFiber.flags &= ~ContentReset;
        }

        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.

        insertOrAppendPlacementNode(finishedWork, before, parent);
        break;
      }

    case HostRoot:
    case HostPortal:
      {
        var _parent = parentFiber.stateNode.containerInfo;

        var _before = getHostSibling(finishedWork);

        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
        break;
      }
    // eslint-disable-next-line-no-fallthrough

    default:
      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');
  }
}

function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost) {
    var stateNode = node.stateNode;

    if (before) {
      insertInContainerBefore(parent, stateNode, before);
    } else {
      appendChildToContainer(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost) {
    var stateNode = node.stateNode;

    if (before) {
      insertBefore(parent, stateNode, before);
    } else {
      appendChild(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNode(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNode(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
} // These are tracked on the stack as we recursively traverse a
// deleted subtree.
// TODO: Update these during the whole mutation phase, not just during
// a deletion.


var hostParent = null;
var hostParentIsContainer = false;

function commitDeletionEffects(root, returnFiber, deletedFiber) {
  {
    // We only have the top Fiber that was deleted but we need to recurse down its
    // children to find all the terminal nodes.
    // Recursively delete all host nodes from the parent, detach refs, clean
    // up mounted layout effects, and call componentWillUnmount.
    // We only need to remove the topmost host child in each branch. But then we
    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
    // could split this into two separate traversals functions, where the second
    // one doesn't include any removeChild logic. This is maybe the same
    // function as "disappearLayoutEffects" (or whatever that turns into after
    // the layout phase is refactored to use recursion).
    // Before starting, find the nearest host parent on the stack so we know
    // which instance/container to remove the children from.
    // TODO: Instead of searching up the fiber return path on every deletion, we
    // can track the nearest host component on the JS stack as we traverse the
    // tree during the commit phase. This would make insertions faster, too.
    var parent = returnFiber;

    findParent: while (parent !== null) {
      switch (parent.tag) {
        case HostComponent:
          {
            hostParent = parent.stateNode;
            hostParentIsContainer = false;
            break findParent;
          }

        case HostRoot:
          {
            hostParent = parent.stateNode.containerInfo;
            hostParentIsContainer = true;
            break findParent;
          }

        case HostPortal:
          {
            hostParent = parent.stateNode.containerInfo;
            hostParentIsContainer = true;
            break findParent;
          }
      }

      parent = parent.return;
    }

    if (hostParent === null) {
      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');
    }

    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
    hostParent = null;
    hostParentIsContainer = false;
  }

  detachFiberMutation(deletedFiber);
}

function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
  // TODO: Use a static flag to skip trees that don't have unmount effects
  var child = parent.child;

  while (child !== null) {
    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
    child = child.sibling;
  }
}

function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
  // into their subtree. There are simpler cases in the inner switch
  // that don't modify the stack.

  switch (deletedFiber.tag) {
    case HostComponent:
      {
        if (!offscreenSubtreeWasHidden) {
          safelyDetachRef(deletedFiber, nearestMountedAncestor);
        } // Intentional fallthrough to next branch

      }
    // eslint-disable-next-line-no-fallthrough

    case HostText:
      {
        // We only need to remove the nearest host child. Set the host parent
        // to `null` on the stack to indicate that nested children don't
        // need to be removed.
        {
          var prevHostParent = hostParent;
          var prevHostParentIsContainer = hostParentIsContainer;
          hostParent = null;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;

          if (hostParent !== null) {
            // Now that all the child effects have unmounted, we can remove the
            // node from the tree.
            if (hostParentIsContainer) {
              removeChildFromContainer(hostParent, deletedFiber.stateNode);
            } else {
              removeChild(hostParent, deletedFiber.stateNode);
            }
          }
        }

        return;
      }

    case DehydratedFragment:
      {
        // Delete the dehydrated suspense boundary and all of its content.


        {
          if (hostParent !== null) {
            if (hostParentIsContainer) {
              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
            } else {
              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
            }
          }
        }

        return;
      }

    case HostPortal:
      {
        {
          // When we go into a portal, it becomes the parent to remove from.
          var _prevHostParent = hostParent;
          var _prevHostParentIsContainer = hostParentIsContainer;
          hostParent = deletedFiber.stateNode.containerInfo;
          hostParentIsContainer = true;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          hostParent = _prevHostParent;
          hostParentIsContainer = _prevHostParentIsContainer;
        }

        return;
      }

    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        if (!offscreenSubtreeWasHidden) {
          var updateQueue = deletedFiber.updateQueue;

          if (updateQueue !== null) {
            var lastEffect = updateQueue.lastEffect;

            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;

              do {
                var _effect = effect,
                    destroy = _effect.destroy,
                    tag = _effect.tag;

                if (destroy !== undefined) {
                  if ((tag & Insertion) !== NoFlags$1) {
                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                  } else if ((tag & Layout) !== NoFlags$1) {
                    {
                      markComponentLayoutEffectUnmountStarted(deletedFiber);
                    }

                    if ( deletedFiber.mode & ProfileMode) {
                      startLayoutEffectTimer();
                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      recordLayoutEffectDuration(deletedFiber);
                    } else {
                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                    }

                    {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }

                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
        }

        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }

    case ClassComponent:
      {
        if (!offscreenSubtreeWasHidden) {
          safelyDetachRef(deletedFiber, nearestMountedAncestor);
          var instance = deletedFiber.stateNode;

          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
          }
        }

        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }

    case ScopeComponent:
      {

        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }

    case OffscreenComponent:
      {
        if ( // TODO: Remove this dead flag
         deletedFiber.mode & ConcurrentMode) {
          // If this offscreen component is hidden, we already unmounted it. Before
          // deleting the children, track that it's already unmounted so that we
          // don't attempt to unmount the effects again.
          // TODO: If the tree is hidden, in most cases we should be able to skip
          // over the nested children entirely. An exception is we haven't yet found
          // the topmost host node to delete, which we already track on the stack.
          // But the other case is portals, which need to be detached no matter how
          // deeply they are nested. We should use a subtree flag to track whether a
          // subtree includes a nested portal.
          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
        } else {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        }

        break;
      }

    default:
      {
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }
  }
}

function commitSuspenseCallback(finishedWork) {
  // TODO: Move this to passive phase
  var newState = finishedWork.memoizedState;
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current = finishedWork.alternate;

    if (current !== null) {
      var prevState = current.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of wakeables.
  // For each wakeable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var wakeables = finishedWork.updateQueue;

  if (wakeables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    wakeables.forEach(function (wakeable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

      if (!retryCache.has(wakeable)) {
        retryCache.add(wakeable);

        {
          if (isDevToolsPresent) {
            if (inProgressLanes !== null && inProgressRoot !== null) {
              // If we have pending work still, associate the original updaters with it.
              restorePendingUpdaters(inProgressRoot, inProgressLanes);
            } else {
              throw Error('Expected finished root and lanes to be set. This is a bug in React.');
            }
          }
        }

        wakeable.then(retry, retry);
      }
    });
  }
} // This function detects when a Suspense boundary goes from visible to hidden.
function commitMutationEffects(root, finishedWork, committedLanes) {
  inProgressLanes = committedLanes;
  inProgressRoot = root;
  setCurrentFiber(finishedWork);
  commitMutationEffectsOnFiber(finishedWork, root);
  setCurrentFiber(finishedWork);
  inProgressLanes = null;
  inProgressRoot = null;
}

function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
  // Deletions effects can be scheduled on any fiber type. They need to happen
  // before the children effects hae fired.
  var deletions = parentFiber.deletions;

  if (deletions !== null) {
    for (var i = 0; i < deletions.length; i++) {
      var childToDelete = deletions[i];

      try {
        commitDeletionEffects(root, parentFiber, childToDelete);
      } catch (error) {
        captureCommitPhaseError(childToDelete, parentFiber, error);
      }
    }
  }

  var prevDebugFiber = getCurrentFiber();

  if (parentFiber.subtreeFlags & MutationMask) {
    var child = parentFiber.child;

    while (child !== null) {
      setCurrentFiber(child);
      commitMutationEffectsOnFiber(child, root);
      child = child.sibling;
    }
  }

  setCurrentFiber(prevDebugFiber);
}

function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
  var current = finishedWork.alternate;
  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
  // because the fiber tag is more specific. An exception is any flag related
  // to reconcilation, because those can be set on all fiber types.

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          try {
            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
            commitHookEffectListMount(Insertion | HasEffect, finishedWork);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          } // Layout effects are destroyed during the mutation phase so that all
          // destroy functions for all fibers are called before any create functions.
          // This prevents sibling component effects from interfering with each other,
          // e.g. a destroy function in one component should never override a ref set
          // by a create function in another component during the same commit.


          if ( finishedWork.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }

            recordLayoutEffectDuration(finishedWork);
          } else {
            try {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }

        return;
      }

    case ClassComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Ref) {
          if (current !== null) {
            safelyDetachRef(current, current.return);
          }
        }

        return;
      }

    case HostComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Ref) {
          if (current !== null) {
            safelyDetachRef(current, current.return);
          }
        }

        {
          // TODO: ContentReset gets cleared by the children during the commit
          // phase. This is a refactor hazard because it means we must read
          // flags the flags after `commitReconciliationEffects` has already run;
          // the order matters. We should refactor so that ContentReset does not
          // rely on mutating the flag during commit. Like by setting a flag
          // during the render phase instead.
          if (finishedWork.flags & ContentReset) {
            var instance = finishedWork.stateNode;

            try {
              resetTextContent(instance);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }

          if (flags & Update) {
            var _instance4 = finishedWork.stateNode;

            if (_instance4 != null) {
              // Commit the work prepared earlier.
              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.

              var oldProps = current !== null ? current.memoizedProps : newProps;
              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;

              if (updatePayload !== null) {
                try {
                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
            }
          }
        }

        return;
      }

    case HostText:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          {
            if (finishedWork.stateNode === null) {
              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');
            }

            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.

            var oldText = current !== null ? current.memoizedProps : newText;

            try {
              commitTextUpdate(textInstance, oldText, newText);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }

        return;
      }

    case HostRoot:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          {
            if (current !== null) {
              var prevRootState = current.memoizedState;

              if (prevRootState.isDehydrated) {
                try {
                  commitHydratedContainer(root.containerInfo);
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
            }
          }
        }

        return;
      }

    case HostPortal:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        return;
      }

    case SuspenseComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        var offscreenFiber = finishedWork.child;

        if (offscreenFiber.flags & Visibility) {
          var offscreenInstance = offscreenFiber.stateNode;
          var newState = offscreenFiber.memoizedState;
          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
          // read it during an event

          offscreenInstance.isHidden = isHidden;

          if (isHidden) {
            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;

            if (!wasHidden) {
              // TODO: Move to passive phase
              markCommitTimeOfFallback();
            }
          }
        }

        if (flags & Update) {
          try {
            commitSuspenseCallback(finishedWork);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }

          attachSuspenseRetryListeners(finishedWork);
        }

        return;
      }

    case OffscreenComponent:
      {
        var _wasHidden = current !== null && current.memoizedState !== null;

        if ( // TODO: Remove this dead flag
         finishedWork.mode & ConcurrentMode) {
          // Before committing the children, track on the stack whether this
          // offscreen subtree was already hidden, so that we don't unmount the
          // effects again.
          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
          recursivelyTraverseMutationEffects(root, finishedWork);
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
        } else {
          recursivelyTraverseMutationEffects(root, finishedWork);
        }

        commitReconciliationEffects(finishedWork);

        if (flags & Visibility) {
          var _offscreenInstance = finishedWork.stateNode;
          var _newState = finishedWork.memoizedState;

          var _isHidden = _newState !== null;

          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
          // read it during an event

          _offscreenInstance.isHidden = _isHidden;

          {
            if (_isHidden) {
              if (!_wasHidden) {
                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                  nextEffect = offscreenBoundary;
                  var offscreenChild = offscreenBoundary.child;

                  while (offscreenChild !== null) {
                    nextEffect = offscreenChild;
                    disappearLayoutEffects_begin(offscreenChild);
                    offscreenChild = offscreenChild.sibling;
                  }
                }
              }
            }
          }

          {
            // TODO: This needs to run whenever there's an insertion or update
            // inside a hidden Offscreen tree.
            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
          }
        }

        return;
      }

    case SuspenseListComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          attachSuspenseRetryListeners(finishedWork);
        }

        return;
      }

    case ScopeComponent:
      {

        return;
      }

    default:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        return;
      }
  }
}

function commitReconciliationEffects(finishedWork) {
  // Placement effects (insertions, reorders) can be scheduled on any fiber
  // type. They needs to happen after the children effects have fired, but
  // before the effects on this fiber have fired.
  var flags = finishedWork.flags;

  if (flags & Placement) {
    try {
      commitPlacement(finishedWork);
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    } // Clear the "placement" from effect tag so that we know that this is
    // inserted, before any life-cycles like componentDidMount gets called.
    // TODO: findDOMNode doesn't rely on this any more but isMounted does
    // and isMounted is deprecated anyway so we should be able to kill this.


    finishedWork.flags &= ~Placement;
  }

  if (flags & Hydrating) {
    finishedWork.flags &= ~Hydrating;
  }
}

function commitLayoutEffects(finishedWork, root, committedLanes) {
  inProgressLanes = committedLanes;
  inProgressRoot = root;
  nextEffect = finishedWork;
  commitLayoutEffects_begin(finishedWork, root, committedLanes);
  inProgressLanes = null;
  inProgressRoot = null;
}

function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
  // Suspense layout effects semantics don't change for legacy roots.
  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;

  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child;

    if ( fiber.tag === OffscreenComponent && isModernRoot) {
      // Keep track of the current Offscreen stack's state.
      var isHidden = fiber.memoizedState !== null;
      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;

      if (newOffscreenSubtreeIsHidden) {
        // The Offscreen tree is hidden. Skip over its layout effects.
        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        continue;
      } else {
        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
        var current = fiber.alternate;
        var wasHidden = current !== null && current.memoizedState !== null;
        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.

        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;

        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
          // This is the root of a reappearing boundary. Turn its layout effects
          // back on.
          nextEffect = fiber;
          reappearLayoutEffects_begin(fiber);
        }

        var child = firstChild;

        while (child !== null) {
          nextEffect = child;
          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.
          root, committedLanes);
          child = child.sibling;
        } // Restore Offscreen state and resume in our-progress traversal.


        nextEffect = fiber;
        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        continue;
      }
    }

    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
    }
  }
}

function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if ((fiber.flags & LayoutMask) !== NoFlags) {
      var current = fiber.alternate;
      setCurrentFiber(fiber);

      try {
        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
      } catch (error) {
        captureCommitPhaseError(fiber, fiber.return, error);
      }

      resetCurrentFiber();
    }

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function disappearLayoutEffects_begin(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)

    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ( fiber.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              commitHookEffectListUnmount(Layout, fiber, fiber.return);
            } finally {
              recordLayoutEffectDuration(fiber);
            }
          } else {
            commitHookEffectListUnmount(Layout, fiber, fiber.return);
          }

          break;
        }

      case ClassComponent:
        {
          // TODO (Offscreen) Check: flags & RefStatic
          safelyDetachRef(fiber, fiber.return);
          var instance = fiber.stateNode;

          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
          }

          break;
        }

      case HostComponent:
        {
          safelyDetachRef(fiber, fiber.return);
          break;
        }

      case OffscreenComponent:
        {
          // Check if this is a
          var isHidden = fiber.memoizedState !== null;

          if (isHidden) {
            // Nested Offscreen tree is already hidden. Don't disappear
            // its effects.
            disappearLayoutEffects_complete(subtreeRoot);
            continue;
          }

          break;
        }
    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


    if (firstChild !== null) {
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      disappearLayoutEffects_complete(subtreeRoot);
    }
  }
}

function disappearLayoutEffects_complete(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function reappearLayoutEffects_begin(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child;

    if (fiber.tag === OffscreenComponent) {
      var isHidden = fiber.memoizedState !== null;

      if (isHidden) {
        // Nested Offscreen tree is still hidden. Don't re-appear its effects.
        reappearLayoutEffects_complete(subtreeRoot);
        continue;
      }
    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


    if (firstChild !== null) {
      // This node may have been reused from a previous render, so we can't
      // assume its return pointer is correct.
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      reappearLayoutEffects_complete(subtreeRoot);
    }
  }
}

function reappearLayoutEffects_complete(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic

    setCurrentFiber(fiber);

    try {
      reappearLayoutEffectsOnFiber(fiber);
    } catch (error) {
      captureCommitPhaseError(fiber, fiber.return, error);
    }

    resetCurrentFiber();

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      // This node may have been reused from a previous render, so we can't
      // assume its return pointer is correct.
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
  nextEffect = finishedWork;
  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
}

function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child;

    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
    }
  }
}

function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if ((fiber.flags & Passive) !== NoFlags) {
      setCurrentFiber(fiber);

      try {
        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
      } catch (error) {
        captureCommitPhaseError(fiber, fiber.return, error);
      }

      resetCurrentFiber();
    }

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( finishedWork.mode & ProfileMode) {
          startPassiveEffectTimer();

          try {
            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          } finally {
            recordPassiveEffectDuration(finishedWork);
          }
        } else {
          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
        }

        break;
      }
  }
}

function commitPassiveUnmountEffects(firstChild) {
  nextEffect = firstChild;
  commitPassiveUnmountEffects_begin();
}

function commitPassiveUnmountEffects_begin() {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var child = fiber.child;

    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
      var deletions = fiber.deletions;

      if (deletions !== null) {
        for (var i = 0; i < deletions.length; i++) {
          var fiberToDelete = deletions[i];
          nextEffect = fiberToDelete;
          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
        }

        {
          // A fiber was deleted from this parent fiber, but it's still part of
          // the previous (alternate) parent fiber's list of children. Because
          // children are a linked list, an earlier sibling that's still alive
          // will be connected to the deleted fiber via its `alternate`:
          //
          //   live fiber
          //   --alternate--> previous live fiber
          //   --sibling--> deleted fiber
          //
          // We can't disconnect `alternate` on nodes that haven't been deleted
          // yet, but we can disconnect the `sibling` and `child` pointers.
          var previousFiber = fiber.alternate;

          if (previousFiber !== null) {
            var detachedChild = previousFiber.child;

            if (detachedChild !== null) {
              previousFiber.child = null;

              do {
                var detachedSibling = detachedChild.sibling;
                detachedChild.sibling = null;
                detachedChild = detachedSibling;
              } while (detachedChild !== null);
            }
          }
        }

        nextEffect = fiber;
      }
    }

    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
      child.return = fiber;
      nextEffect = child;
    } else {
      commitPassiveUnmountEffects_complete();
    }
  }
}

function commitPassiveUnmountEffects_complete() {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if ((fiber.flags & Passive) !== NoFlags) {
      setCurrentFiber(fiber);
      commitPassiveUnmountOnFiber(fiber);
      resetCurrentFiber();
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitPassiveUnmountOnFiber(finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( finishedWork.mode & ProfileMode) {
          startPassiveEffectTimer();
          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
          recordPassiveEffectDuration(finishedWork);
        } else {
          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
        }

        break;
      }
  }
}

function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
  while (nextEffect !== null) {
    var fiber = nextEffect; // Deletion effects fire in parent -> child order
    // TODO: Check if fiber has a PassiveStatic flag

    setCurrentFiber(fiber);
    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
    resetCurrentFiber();
    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)

    if (child !== null) {
      child.return = fiber;
      nextEffect = child;
    } else {
      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
    }
  }
}

function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var sibling = fiber.sibling;
    var returnFiber = fiber.return;

    {
      // Recursively traverse the entire deleted tree and clean up fiber fields.
      // This is more aggressive than ideal, and the long term goal is to only
      // have to detach the deleted tree at the root.
      detachFiberAfterEffects(fiber);

      if (fiber === deletedSubtreeRoot) {
        nextEffect = null;
        return;
      }
    }

    if (sibling !== null) {
      sibling.return = returnFiber;
      nextEffect = sibling;
      return;
    }

    nextEffect = returnFiber;
  }
}

function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
  switch (current.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( current.mode & ProfileMode) {
          startPassiveEffectTimer();
          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
          recordPassiveEffectDuration(current);
        } else {
          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
        }

        break;
      }
  }
} // TODO: Reuse reappearLayoutEffects traversal here?


function invokeLayoutEffectMountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListMount(Layout | HasEffect, fiber);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }

      case ClassComponent:
        {
          var instance = fiber.stateNode;

          try {
            instance.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }
    }
  }
}

function invokePassiveEffectMountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListMount(Passive$1 | HasEffect, fiber);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }
    }
  }
}

function invokeLayoutEffectUnmountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }

      case ClassComponent:
        {
          var instance = fiber.stateNode;

          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
          }

          break;
        }
    }
  }
}

function invokePassiveEffectUnmountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }
        }
    }
  }
}

var COMPONENT_TYPE = 0;
var HAS_PSEUDO_CLASS_TYPE = 1;
var ROLE_TYPE = 2;
var TEST_NAME_TYPE = 3;
var TEXT_TYPE = 4;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  COMPONENT_TYPE = symbolFor('selector.component');
  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');
  ROLE_TYPE = symbolFor('selector.role');
  TEST_NAME_TYPE = symbolFor('selector.test_id');
  TEXT_TYPE = symbolFor('selector.text');
}
var commitHooks = [];
function onCommitRoot$1() {
  {
    commitHooks.forEach(function (commitHook) {
      return commitHook();
    });
  }
}

var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
function isLegacyActEnvironment(fiber) {
  {
    // Legacy mode. We preserve the behavior of React 17's act. It assumes an
    // act environment whenever `jest` is defined, but you can still turn off
    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
    // to false.
    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest

    var jestIsDefined = typeof jest !== 'undefined';
    return  jestIsDefined && isReactActEnvironmentGlobal !== false;
  }
}
function isConcurrentActEnvironment() {
  {
    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;

    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
      // TODO: Include link to relevant documentation page.
      error('The current testing environment is not configured to support ' + 'act(...)');
    }

    return isReactActEnvironmentGlobal;
  }
}

var ceil = Math.ceil;
var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig,
    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
var NoContext =
/*             */
0;
var BatchedContext =
/*               */
1;
var RenderContext =
/*                */
2;
var CommitContext =
/*                */
4;
var RootInProgress = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5;
var RootDidNotComplete = 6; // Describes where we are in the React execution stack

var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The lanes we're rendering

var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
// This is a superset of the lanes we started working on at the root. The only
// case where it's different from `workInProgressRootRenderLanes` is when we
// enter a subtree that is hidden and needs to be unhidden: Suspense and
// Offscreen component.
//
// Most things in the work loop should deal with workInProgressRootRenderLanes.
// Most things in begin/complete phases should deal with subtreeRenderLanes.

var subtreeRenderLanes = NoLanes;
var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
// slightly different than `renderLanes` because `renderLanes` can change as you
// enter and exit an Offscreen tree. This value is the combination of all render
// lanes for the entire render phase.

var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).

var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.

var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
// We will log them once the tree commits.

var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
// more and prefer CPU suspense heuristics instead.

var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
// suspense heuristics and opt out of rendering more content.

var RENDER_TIMEOUT_MS = 500;
var workInProgressTransitions = null;

function resetRenderTimer() {
  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
}

function getRenderTargetTime() {
  return workInProgressRootRenderTargetTime;
}
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsLanes = NoLanes;
var pendingPassiveProfilerEffects = [];
var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var isFlushingPassiveEffects = false;
var didScheduleUpdateDuringPassiveEffects = false;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0;
var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
// event times as simultaneous, even if the actual clock time has advanced
// between the first and second call.

var currentEventTime = NoTimestamp;
var currentEventTransitionLane = NoLanes;
var isRunningInsertionEffect = false;
function getWorkInProgressRoot() {
  return workInProgressRoot;
}
function requestEventTime() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return now();
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoTimestamp) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = now();
  return currentEventTime;
}
function requestUpdateLane(fiber) {
  // Special cases
  var mode = fiber.mode;

  if ((mode & ConcurrentMode) === NoMode) {
    return SyncLane;
  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
    // This is a render phase update. These are not officially supported. The
    // old behavior is to give this the same "thread" (lanes) as
    // whatever is currently rendering. So if you call `setState` on a component
    // that happens later in the same render, it will flush. Ideally, we want to
    // remove the special case and treat them as if they came from an
    // interleaved event. Regardless, this pattern is not officially supported.
    // This behavior is only a fallback. The flag only exists until we can roll
    // out the setState warning, since existing code might accidentally rely on
    // the current behavior.
    return pickArbitraryLane(workInProgressRootRenderLanes);
  }

  var isTransition = requestCurrentTransition() !== NoTransition;

  if (isTransition) {
    if ( ReactCurrentBatchConfig$3.transition !== null) {
      var transition = ReactCurrentBatchConfig$3.transition;

      if (!transition._updatedFibers) {
        transition._updatedFibers = new Set();
      }

      transition._updatedFibers.add(fiber);
    } // The algorithm for assigning an update to a lane should be stable for all
    // updates at the same priority within the same event. To do this, the
    // inputs to the algorithm must be the same.
    //
    // The trick we use is to cache the first of each of these inputs within an
    // event. Then reset the cached values once we can be sure the event is
    // over. Our heuristic for that is whenever we enter a concurrent work loop.


    if (currentEventTransitionLane === NoLane) {
      // All transitions within the same event are assigned the same lane.
      currentEventTransitionLane = claimNextTransitionLane();
    }

    return currentEventTransitionLane;
  } // Updates originating inside certain React methods, like flushSync, have
  // their priority set by tracking it with a context variable.
  //
  // The opaque type returned by the host config is internally a lane, so we can
  // use that directly.
  // TODO: Move this type conversion to the event priority module.


  var updateLane = getCurrentUpdatePriority();

  if (updateLane !== NoLane) {
    return updateLane;
  } // This update originated outside React. Ask the host environment for an
  // appropriate priority, based on the type of event.
  //
  // The opaque type returned by the host config is internally a lane, so we can
  // use that directly.
  // TODO: Move this type conversion to the event priority module.


  var eventLane = getCurrentEventPriority();
  return eventLane;
}

function requestRetryLane(fiber) {
  // This is a fork of `requestUpdateLane` designed specifically for Suspense
  // "retries" — a special update that attempts to flip a Suspense boundary
  // from its placeholder state to its primary/resolved state.
  // Special cases
  var mode = fiber.mode;

  if ((mode & ConcurrentMode) === NoMode) {
    return SyncLane;
  }

  return claimNextRetryLane();
}

function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
  checkForNestedUpdates();

  {
    if (isRunningInsertionEffect) {
      error('useInsertionEffect must not schedule updates.');
    }
  }

  {
    if (isFlushingPassiveEffects) {
      didScheduleUpdateDuringPassiveEffects = true;
    }
  } // Mark that the root has a pending update.


  markRootUpdated(root, lane, eventTime);

  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {
    // This update was dispatched during the render phase. This is a mistake
    // if the update originates from user space (with the exception of local
    // hook updates, which are handled differently and don't reach this
    // function), but there are some internal React features that use this as
    // an implementation detail, like selective hydration.
    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
  } else {
    // This is a normal update, scheduled from outside the render phase. For
    // example, during an input event.
    {
      if (isDevToolsPresent) {
        addFiberToLanesMap(root, fiber, lane);
      }
    }

    warnIfUpdatesNotWrappedWithActDEV(fiber);

    if (root === workInProgressRoot) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that there was an interleaved update work on this root. Unless the
      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
      // phase update. In that case, we don't treat render phase updates as if
      // they were interleaved, for backwards compat reasons.
      if ( (executionContext & RenderContext) === NoContext) {
        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
      }

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: Make sure this doesn't override pings that happen while we've
        // already started rendering.
        markRootSuspended$1(root, workInProgressRootRenderLanes);
      }
    }

    ensureRootIsScheduled(root, eventTime);

    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
      // Flush the synchronous work now, unless we're already working or inside
      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
      // scheduleCallbackForFiber to preserve the ability to schedule a callback
      // without immediately flushing it. We only do this for user-initiated
      // updates, to preserve historical behavior of legacy mode.
      resetRenderTimer();
      flushSyncCallbacksOnlyInLegacyMode();
    }
  }
}
function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
  // This is a special fork of scheduleUpdateOnFiber that is only used to
  // schedule the initial hydration of a root that has just been created. Most
  // of the stuff in scheduleUpdateOnFiber can be skipped.
  //
  // The main reason for this separate path, though, is to distinguish the
  // initial children from subsequent updates. In fully client-rendered roots
  // (createRoot instead of hydrateRoot), all top-level renders are modeled as
  // updates, but hydration roots are special because the initial render must
  // match what was rendered on the server.
  var current = root.current;
  current.lanes = lane;
  markRootUpdated(root, lane, eventTime);
  ensureRootIsScheduled(root, eventTime);
}
function isUnsafeClassRenderPhaseUpdate(fiber) {
  // Check if this is a render phase update. Only called by class components,
  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
    // decided not to enable it.
     (executionContext & RenderContext) !== NoContext
  );
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the priority
// of the existing task is the same as the priority of the next level that the
// root has work on. This function is called on every update, and right before
// exiting a task.

function ensureRootIsScheduled(root, currentTime) {
  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
  // expired so we know to work on those next.

  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

  if (nextLanes === NoLanes) {
    // Special case: There's nothing to work on.
    if (existingCallbackNode !== null) {
      cancelCallback$1(existingCallbackNode);
    }

    root.callbackNode = null;
    root.callbackPriority = NoLane;
    return;
  } // We use the highest priority lane to represent the priority of the callback.


  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.

  var existingCallbackPriority = root.callbackPriority;

  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
  // Scheduler task, rather than an `act` task, cancel it and re-scheduled
  // on the `act` queue.
  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
    {
      // If we're going to re-use an existing task, it needs to exist.
      // Assume that discrete update microtasks are non-cancellable and null.
      // TODO: Temporary until we confirm this warning is not fired.
      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
      }
    } // The priority hasn't changed. We can reuse the existing task. Exit.


    return;
  }

  if (existingCallbackNode != null) {
    // Cancel the existing callback. We'll schedule a new one below.
    cancelCallback$1(existingCallbackNode);
  } // Schedule a new callback.


  var newCallbackNode;

  if (newCallbackPriority === SyncLane) {
    // Special case: Sync React callbacks are scheduled on a special
    // internal queue
    if (root.tag === LegacyRoot) {
      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {
        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
      }

      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
    } else {
      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    }

    {
      // Flush the queue in a microtask.
      if ( ReactCurrentActQueue$1.current !== null) {
        // Inside `act`, use our internal `act` queue so that these get flushed
        // at the end of the current scope even when using the sync version
        // of `act`.
        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
      } else {
        scheduleMicrotask(function () {
          // In Safari, appending an iframe forces microtasks to run.
          // https://github.com/facebook/react/issues/22459
          // We don't support running callbacks in the middle of render
          // or commit so we need to check against that.
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            // Note that this would still prematurely flush the callbacks
            // if this happens outside render or commit phase (e.g. in an event).
            flushSyncCallbacks();
          }
        });
      }
    }

    newCallbackNode = null;
  } else {
    var schedulerPriorityLevel;

    switch (lanesToEventPriority(nextLanes)) {
      case DiscreteEventPriority:
        schedulerPriorityLevel = ImmediatePriority;
        break;

      case ContinuousEventPriority:
        schedulerPriorityLevel = UserBlockingPriority;
        break;

      case DefaultEventPriority:
        schedulerPriorityLevel = NormalPriority;
        break;

      case IdleEventPriority:
        schedulerPriorityLevel = IdlePriority;
        break;

      default:
        schedulerPriorityLevel = NormalPriority;
        break;
    }

    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
  }

  root.callbackPriority = newCallbackPriority;
  root.callbackNode = newCallbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root, didTimeout) {
  {
    resetNestedUpdateFlag();
  } // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.


  currentEventTime = NoTimestamp;
  currentEventTransitionLane = NoLanes;

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Should not already be working.');
  } // Flush any pending passive effects before deciding which lanes to work on,
  // in case they schedule additional work.


  var originalCallbackNode = root.callbackNode;
  var didFlushPassiveEffects = flushPassiveEffects();

  if (didFlushPassiveEffects) {
    // Something in the passive effect phase may have canceled the current task.
    // Check if the task node for this root was changed.
    if (root.callbackNode !== originalCallbackNode) {
      // The current task was canceled. Exit. We don't need to call
      // `ensureRootIsScheduled` because the check above implies either that
      // there's a new task, or that there's no remaining work on this root.
      return null;
    }
  } // Determine the next lanes to work on, using the fields stored
  // on the root.


  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

  if (lanes === NoLanes) {
    // Defensive coding. This is never expected to happen.
    return null;
  } // We disable time-slicing in some cases: if the work has been CPU-bound
  // for too long ("expired" work, to prevent starvation), or we're in
  // sync-updates-by-default mode.
  // TODO: We only check `didTimeout` defensively, to account for a Scheduler
  // bug we're still investigating. Once the bug in Scheduler is fixed,
  // we can remove this, since we track expiration ourselves.


  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);
  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);

  if (exitStatus !== RootInProgress) {
    if (exitStatus === RootErrored) {
      // If something threw an error, try rendering one more time. We'll
      // render synchronously to block concurrent data mutations, and we'll
      // includes all pending updates are included. If it still fails after
      // the second attempt, we'll give up and commit the resulting tree.
      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

      if (errorRetryLanes !== NoLanes) {
        lanes = errorRetryLanes;
        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
      }
    }

    if (exitStatus === RootFatalErrored) {
      var fatalError = workInProgressRootFatalError;
      prepareFreshStack(root, NoLanes);
      markRootSuspended$1(root, lanes);
      ensureRootIsScheduled(root, now());
      throw fatalError;
    }

    if (exitStatus === RootDidNotComplete) {
      // The render unwound without completing the tree. This happens in special
      // cases where need to exit the current render without producing a
      // consistent tree or committing.
      //
      // This should only happen during a concurrent render, not a discrete or
      // synchronous update. We should have already checked for this when we
      // unwound the stack.
      markRootSuspended$1(root, lanes);
    } else {
      // The render completed.
      // Check if this render may have yielded to a concurrent event, and if so,
      // confirm that any newly rendered stores are consistent.
      // TODO: It's possible that even a concurrent render may never have yielded
      // to the main thread, if it was fast enough, or if it expired. We could
      // skip the consistency check in that case, too.
      var renderWasConcurrent = !includesBlockingLane(root, lanes);
      var finishedWork = root.current.alternate;

      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
        // A store was mutated in an interleaved event. Render again,
        // synchronously, to block further mutations.
        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw

        if (exitStatus === RootErrored) {
          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

          if (_errorRetryLanes !== NoLanes) {
            lanes = _errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
            // concurrent events.
          }
        }

        if (exitStatus === RootFatalErrored) {
          var _fatalError = workInProgressRootFatalError;
          prepareFreshStack(root, NoLanes);
          markRootSuspended$1(root, lanes);
          ensureRootIsScheduled(root, now());
          throw _fatalError;
        }
      } // We now have a consistent tree. The next step is either to commit it,
      // or, if something suspended, wait to commit it after a timeout.


      root.finishedWork = finishedWork;
      root.finishedLanes = lanes;
      finishConcurrentRender(root, exitStatus, lanes);
    }
  }

  ensureRootIsScheduled(root, now());

  if (root.callbackNode === originalCallbackNode) {
    // The task node scheduled for this root is the same one that's
    // currently executed. Need to return a continuation.
    return performConcurrentWorkOnRoot.bind(null, root);
  }

  return null;
}

function recoverFromConcurrentError(root, errorRetryLanes) {
  // If an error occurred during hydration, discard server response and fall
  // back to client side render.
  // Before rendering again, save the errors from the previous attempt.
  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;

  if (isRootDehydrated(root)) {
    // The shell failed to hydrate. Set a flag to force a client rendering
    // during the next attempt. To do this, we call prepareFreshStack now
    // to create the root work-in-progress fiber. This is a bit weird in terms
    // of factoring, because it relies on renderRootSync not calling
    // prepareFreshStack again in the call below, which happens because the
    // root and lanes haven't changed.
    //
    // TODO: I think what we should do is set ForceClientRender inside
    // throwException, like we do for nested Suspense boundaries. The reason
    // it's here instead is so we can switch to the synchronous work loop, too.
    // Something to consider for a future refactor.
    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
    rootWorkInProgress.flags |= ForceClientRender;

    {
      errorHydratingContainer(root.containerInfo);
    }
  }

  var exitStatus = renderRootSync(root, errorRetryLanes);

  if (exitStatus !== RootErrored) {
    // Successfully finished rendering on retry
    // The errors from the failed first attempt have been recovered. Add
    // them to the collection of recoverable errors. We'll log them in the
    // commit phase.
    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
    // from the first attempt, to preserve the causal sequence.

    if (errorsFromSecondAttempt !== null) {
      queueRecoverableErrors(errorsFromSecondAttempt);
    }
  }

  return exitStatus;
}

function queueRecoverableErrors(errors) {
  if (workInProgressRootRecoverableErrors === null) {
    workInProgressRootRecoverableErrors = errors;
  } else {
    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
  }
}

function finishConcurrentRender(root, exitStatus, lanes) {
  switch (exitStatus) {
    case RootInProgress:
    case RootFatalErrored:
      {
        throw new Error('Root did not complete. This is a bug in React.');
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // We should have already attempted to retry this tree. If we reached
        // this point, it errored again. Commit it.
        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    case RootSuspended:
      {
        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.

        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
        !shouldForceFlushFallbacksInDEV()) {
          // This render only included retries, no updates. Throttle committing
          // retries so that we don't show too many loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            var nextLanes = getNextLanes(root, NoLanes);

            if (nextLanes !== NoLanes) {
              // There's additional work on this root.
              break;
            }

            var suspendedLanes = root.suspendedLanes;

            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              // FIXME: What if the suspended lanes are Idle? Should not restart.
              var eventTime = requestEventTime();
              markRootPinged(root, suspendedLanes);
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspended$1(root, lanes);

        if (includesOnlyTransitions(lanes)) {
          // This is a transition, so we should exit without committing a
          // placeholder and without scheduling a timeout. Delay indefinitely
          // until we receive more data.
          break;
        }

        if (!shouldForceFlushFallbacksInDEV()) {
          // This is not a transition, but we did trigger an avoided state.
          // Schedule a placeholder to display after a short delay, using the Just
          // Noticeable Difference.
          // TODO: Is the JND optimization worth the added complexity? If this is
          // the only reason we track the event time, then probably not.
          // Consider removing.
          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
          var eventTimeMs = mostRecentEventTime;
          var timeElapsedMs = now() - eventTimeMs;

          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // Instead of committing the fallback immediately, wait for more data
            // to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
            break;
          }
        } // Commit the placeholder.


        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    default:
      {
        throw new Error('Unknown root exit status.');
      }
  }
}

function isRenderConsistentWithExternalStores(finishedWork) {
  // Search the rendered tree for external store reads, and check whether the
  // stores were mutated in a concurrent event. Intentionally using an iterative
  // loop instead of recursion so we can exit early.
  var node = finishedWork;

  while (true) {
    if (node.flags & StoreConsistency) {
      var updateQueue = node.updateQueue;

      if (updateQueue !== null) {
        var checks = updateQueue.stores;

        if (checks !== null) {
          for (var i = 0; i < checks.length; i++) {
            var check = checks[i];
            var getSnapshot = check.getSnapshot;
            var renderedValue = check.value;

            try {
              if (!objectIs(getSnapshot(), renderedValue)) {
                // Found an inconsistent store.
                return false;
              }
            } catch (error) {
              // If `getSnapshot` throws, return `false`. This will schedule
              // a re-render, and the error will be rethrown during render.
              return false;
            }
          }
        }
      }
    }

    var child = node.child;

    if (node.subtreeFlags & StoreConsistency && child !== null) {
      child.return = node;
      node = child;
      continue;
    }

    if (node === finishedWork) {
      return true;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === finishedWork) {
        return true;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow doesn't know this is unreachable, but eslint does
  // eslint-disable-next-line no-unreachable


  return true;
}

function markRootSuspended$1(root, suspendedLanes) {
  // When suspending, we should always exclude lanes that were pinged or (more
  // rarely, since we try to avoid it) updated during the render phase.
  // TODO: Lol maybe there's a better way to factor this besides this
  // obnoxiously named function :)
  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
  markRootSuspended(root, suspendedLanes);
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  {
    syncNestedUpdateFlag();
  }

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Should not already be working.');
  }

  flushPassiveEffects();
  var lanes = getNextLanes(root, NoLanes);

  if (!includesSomeLane(lanes, SyncLane)) {
    // There's no remaining sync work left.
    ensureRootIsScheduled(root, now());
    return null;
  }

  var exitStatus = renderRootSync(root, lanes);

  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
    // If something threw an error, try rendering one more time. We'll render
    // synchronously to block concurrent data mutations, and we'll includes
    // all pending updates are included. If it still fails after the second
    // attempt, we'll give up and commit the resulting tree.
    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

    if (errorRetryLanes !== NoLanes) {
      lanes = errorRetryLanes;
      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
    }
  }

  if (exitStatus === RootFatalErrored) {
    var fatalError = workInProgressRootFatalError;
    prepareFreshStack(root, NoLanes);
    markRootSuspended$1(root, lanes);
    ensureRootIsScheduled(root, now());
    throw fatalError;
  }

  if (exitStatus === RootDidNotComplete) {
    throw new Error('Root did not complete. This is a bug in React.');
  } // We now have a consistent tree. Because this is a sync render, we
  // will commit it even if something suspended.


  var finishedWork = root.current.alternate;
  root.finishedWork = finishedWork;
  root.finishedLanes = lanes;
  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
  // pending level.

  ensureRootIsScheduled(root, now());
  return null;
}

function flushRoot(root, lanes) {
  if (lanes !== NoLanes) {
    markRootEntangled(root, mergeLanes(lanes, SyncLane));
    ensureRootIsScheduled(root, now());

    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
      resetRenderTimer();
      flushSyncCallbacks();
    }
  }
}
function batchedUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
    // most batchedUpdates-like method.

    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
      resetRenderTimer();
      flushSyncCallbacksOnlyInLegacyMode();
    }
  }
}
function discreteUpdates(fn, a, b, c, d) {
  var previousPriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig$3.transition;

  try {
    ReactCurrentBatchConfig$3.transition = null;
    setCurrentUpdatePriority(DiscreteEventPriority);
    return fn(a, b, c, d);
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$3.transition = prevTransition;

    if (executionContext === NoContext) {
      resetRenderTimer();
    }
  }
} // Overload the definition to the two valid signatures.
// Warning, this opts-out of checking the function body.

// eslint-disable-next-line no-redeclare
function flushSync(fn) {
  // In legacy mode, we flush pending passive effects at the beginning of the
  // next event, not at the end of the previous one.
  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
    flushPassiveEffects();
  }

  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;
  var prevTransition = ReactCurrentBatchConfig$3.transition;
  var previousPriority = getCurrentUpdatePriority();

  try {
    ReactCurrentBatchConfig$3.transition = null;
    setCurrentUpdatePriority(DiscreteEventPriority);

    if (fn) {
      return fn();
    } else {
      return undefined;
    }
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$3.transition = prevTransition;
    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
    // Note that this will happen even if batchedUpdates is higher up
    // the stack.

    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
      flushSyncCallbacks();
    }
  }
}
function isAlreadyRendering() {
  // Used by the renderer to print a warning if certain APIs are called from
  // the wrong context.
  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;
}
function pushRenderLanes(fiber, lanes) {
  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
}
function popRenderLanes(fiber) {
  subtreeRenderLanes = subtreeRenderLanesCursor.current;
  pop(subtreeRenderLanesCursor, fiber);
}

function prepareFreshStack(root, lanes) {
  root.finishedWork = null;
  root.finishedLanes = NoLanes;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      var current = interruptedWork.alternate;
      unwindInterruptedWork(current, interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  var rootWorkInProgress = createWorkInProgress(root.current, null);
  workInProgress = rootWorkInProgress;
  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
  workInProgressRootExitStatus = RootInProgress;
  workInProgressRootFatalError = null;
  workInProgressRootSkippedLanes = NoLanes;
  workInProgressRootInterleavedUpdatedLanes = NoLanes;
  workInProgressRootPingedLanes = NoLanes;
  workInProgressRootConcurrentErrors = null;
  workInProgressRootRecoverableErrors = null;
  finishQueueingConcurrentUpdates();

  {
    ReactStrictModeWarnings.discardPendingWarnings();
  }

  return rootWorkInProgress;
}

function handleError(root, thrownValue) {
  do {
    var erroredWork = workInProgress;

    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooksAfterThrow();
      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
      // separate issue. Write a regression test using string refs.

      ReactCurrentOwner$2.current = null;

      if (erroredWork === null || erroredWork.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
        // sibling, or the parent if there are no siblings. But since the root
        // has no siblings nor a parent, we set it to null. Usually this is
        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
        // intentionally not calling those, we need set it here.
        // TODO: Consider calling `unwindWork` to pop the contexts.

        workInProgress = null;
        return;
      }

      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
      }

      if (enableSchedulingProfiler) {
        markComponentRenderStopped();

        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
          var wakeable = thrownValue;
          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
        } else {
          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
        }
      }

      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
      completeUnitOfWork(erroredWork);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;

      if (workInProgress === erroredWork && erroredWork !== null) {
        // If this boundary has already errored, then we had trouble processing
        // the error. Bubble it to the next boundary.
        erroredWork = erroredWork.return;
        workInProgress = erroredWork;
      } else {
        erroredWork = workInProgress;
      }

      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher() {
  var prevDispatcher = ReactCurrentDispatcher$2.current;
  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher$2.current = prevDispatcher;
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now();
}
function markSkippedUpdateLanes(lane) {
  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootInProgress) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there are updates that we skipped tree that might have unblocked
  // this render.


  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
    // Mark the current render as suspended so that we switch to working on
    // the updates that were skipped. Usually we only suspend at the end of
    // the render phase.
    // TODO: We should probably always mark the root as suspended immediately
    // (inside this function), since by suspending at the end of the render
    // phase introduces a potential mistake where we suspend lanes that were
    // pinged or updated while we were rendering.
    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
  }
}
function renderDidError(error) {
  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
    workInProgressRootExitStatus = RootErrored;
  }

  if (workInProgressRootConcurrentErrors === null) {
    workInProgressRootConcurrentErrors = [error];
  } else {
    workInProgressRootConcurrentErrors.push(error);
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootInProgress;
}

function renderRootSync(root, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= RenderContext;
  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
    {
      if (isDevToolsPresent) {
        var memoizedUpdaters = root.memoizedUpdaters;

        if (memoizedUpdaters.size > 0) {
          restorePendingUpdaters(root, workInProgressRootRenderLanes);
          memoizedUpdaters.clear();
        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
        // If we bailout on this work, we'll move them back (like above).
        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
        // That way we can keep the current update and future updates separate.


        movePendingFibersToMemoized(root, lanes);
      }
    }

    workInProgressTransitions = getTransitionsForLanes();
    prepareFreshStack(root, lanes);
  }

  {
    markRenderStarted(lanes);
  }

  do {
    try {
      workLoopSync();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    }
  } while (true);

  resetContextDependencies();
  executionContext = prevExecutionContext;
  popDispatcher(prevDispatcher);

  if (workInProgress !== null) {
    // This is a sync render, so we should have finished the whole tree.
    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');
  }

  {
    markRenderStopped();
  } // Set this to null to indicate there's no in-progress render.


  workInProgressRoot = null;
  workInProgressRootRenderLanes = NoLanes;
  return workInProgressRootExitStatus;
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    performUnitOfWork(workInProgress);
  }
}

function renderRootConcurrent(root, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= RenderContext;
  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
    {
      if (isDevToolsPresent) {
        var memoizedUpdaters = root.memoizedUpdaters;

        if (memoizedUpdaters.size > 0) {
          restorePendingUpdaters(root, workInProgressRootRenderLanes);
          memoizedUpdaters.clear();
        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
        // If we bailout on this work, we'll move them back (like above).
        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
        // That way we can keep the current update and future updates separate.


        movePendingFibersToMemoized(root, lanes);
      }
    }

    workInProgressTransitions = getTransitionsForLanes();
    resetRenderTimer();
    prepareFreshStack(root, lanes);
  }

  {
    markRenderStarted(lanes);
  }

  do {
    try {
      workLoopConcurrent();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    }
  } while (true);

  resetContextDependencies();
  popDispatcher(prevDispatcher);
  executionContext = prevExecutionContext;


  if (workInProgress !== null) {
    // Still work remaining.
    {
      markRenderYielded();
    }

    return RootInProgress;
  } else {
    // Completed the tree.
    {
      markRenderStopped();
    } // Set this to null to indicate there's no in-progress render.


    workInProgressRoot = null;
    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

    return workInProgressRootExitStatus;
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current = unitOfWork.alternate;
  setCurrentFiber(unitOfWork);
  var next;

  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    completeUnitOfWork(unitOfWork);
  } else {
    workInProgress = next;
  }

  ReactCurrentOwner$2.current = null;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  var completedWork = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current = completedWork.alternate;
    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

    if ((completedWork.flags & Incomplete) === NoFlags) {
      setCurrentFiber(completedWork);
      var next = void 0;

      if ( (completedWork.mode & ProfileMode) === NoMode) {
        next = completeWork(current, completedWork, subtreeRenderLanes);
      } else {
        startProfilerTimer(completedWork);
        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
      }

      resetCurrentFiber();

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        workInProgress = next;
        return;
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.


      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        _next.flags &= HostEffectMask;
        workInProgress = _next;
        return;
      }

      if ( (completedWork.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

        var actualDuration = completedWork.actualDuration;
        var child = completedWork.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        completedWork.actualDuration = actualDuration;
      }

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its subtree flags.
        returnFiber.flags |= Incomplete;
        returnFiber.subtreeFlags = NoFlags;
        returnFiber.deletions = null;
      } else {
        // We've unwound all the way to the root.
        workInProgressRootExitStatus = RootDidNotComplete;
        workInProgress = null;
        return;
      }
    }

    var siblingFiber = completedWork.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      workInProgress = siblingFiber;
      return;
    } // Otherwise, return to the parent


    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

    workInProgress = completedWork;
  } while (completedWork !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootInProgress) {
    workInProgressRootExitStatus = RootCompleted;
  }
}

function commitRoot(root, recoverableErrors, transitions) {
  // TODO: This no longer makes any sense. We already wrap the mutation and
  // layout phases. Should be able to remove.
  var previousUpdateLanePriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig$3.transition;

  try {
    ReactCurrentBatchConfig$3.transition = null;
    setCurrentUpdatePriority(DiscreteEventPriority);
    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
  } finally {
    ReactCurrentBatchConfig$3.transition = prevTransition;
    setCurrentUpdatePriority(previousUpdateLanePriority);
  }

  return null;
}

function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
  do {
    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
    // means `flushPassiveEffects` will sometimes result in additional
    // passive effects. So we need to keep flushing in a loop until there are
    // no more pending effects.
    // TODO: Might be better if `flushPassiveEffects` did not automatically
    // flush synchronous work at the end, to avoid factoring hazards like this.
    flushPassiveEffects();
  } while (rootWithPendingPassiveEffects !== null);

  flushRenderPhaseStrictModeWarningsInDEV();

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Should not already be working.');
  }

  var finishedWork = root.finishedWork;
  var lanes = root.finishedLanes;

  {
    markCommitStarted(lanes);
  }

  if (finishedWork === null) {

    {
      markCommitStopped();
    }

    return null;
  } else {
    {
      if (lanes === NoLanes) {
        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');
      }
    }
  }

  root.finishedWork = null;
  root.finishedLanes = NoLanes;

  if (finishedWork === root.current) {
    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null;
  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
  markRootFinished(root, remainingLanes);

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    workInProgressRootRenderLanes = NoLanes;
  } // If there are pending passive effects, schedule a callback to process them.
  // Do this as early as possible, so it is queued before anything else that
  // might get scheduled in the commit phase. (See #16714.)
  // TODO: Delete all other places that schedule the passive effect callback
  // They're redundant.


  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
    if (!rootDoesHavePassiveEffects) {
      rootDoesHavePassiveEffects = true;
      // to store it in pendingPassiveTransitions until they get processed
      // We need to pass this through as an argument to commitRoot
      // because workInProgressTransitions might have changed between
      // the previous render and commit if we throttle the commit
      // with setTimeout

      pendingPassiveTransitions = transitions;
      scheduleCallback$1(NormalPriority, function () {
        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
        // *after* passive effects fire to avoid freeing a cache pool that may
        // be referenced by a node in the tree (HostRoot, Cache boundary etc)

        return null;
      });
    }
  } // Check if there are any effects in the whole tree.
  // TODO: This is left over from the effect list implementation, where we had
  // to check for the existence of `firstEffect` to satisfy Flow. I think the
  // only other reason this optimization exists is because it affects profiling.
  // Reconsider whether this is necessary.


  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;

  if (subtreeHasEffects || rootHasEffect) {
    var prevTransition = ReactCurrentBatchConfig$3.transition;
    ReactCurrentBatchConfig$3.transition = null;
    var previousPriority = getCurrentUpdatePriority();
    setCurrentUpdatePriority(DiscreteEventPriority);
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext; // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);

    {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    }


    commitMutationEffects(root, finishedWork, lanes);

    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read

    {
      markLayoutEffectsStarted(lanes);
    }

    commitLayoutEffects(finishedWork, root, lanes);

    {
      markLayoutEffectsStopped();
    }
    // opportunity to paint.


    requestPaint();
    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.

    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$3.transition = prevTransition;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    {
      recordCommitTime();
    }
  }

  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsLanes = lanes;
  } else {

    {
      nestedPassiveUpdateCount = 0;
      rootWithPassiveNestedUpdates = null;
    }
  } // Read this again, since an effect might have updated it


  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
  // TODO: This is part of the `componentDidCatch` implementation. Its purpose
  // is to detect whether something might have called setState inside
  // `componentDidCatch`. The mechanism is known to be flawed because `setState`
  // inside `componentDidCatch` is itself flawed — that's why we recommend
  // `getDerivedStateFromError` instead. However, it could be improved by
  // checking if remainingLanes includes Sync work, instead of whether there's
  // any work remaining at all (which would also include stuff like Suspense
  // retries or transitions). It's been like this for a while, though, so fixing
  // it probably isn't that urgent.

  if (remainingLanes === NoLanes) {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  {
    if (!rootDidHavePassiveEffects) {
      commitDoubleInvokeEffectsInDEV(root.current, false);
    }
  }

  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

  {
    if (isDevToolsPresent) {
      root.memoizedUpdaters.clear();
    }
  }

  {
    onCommitRoot$1();
  } // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.


  ensureRootIsScheduled(root, now());

  if (recoverableErrors !== null) {
    // There were errors during this render, but recovered from them without
    // needing to surface it to the UI. We log them here.
    var onRecoverableError = root.onRecoverableError;

    for (var i = 0; i < recoverableErrors.length; i++) {
      var recoverableError = recoverableErrors[i];
      var componentStack = recoverableError.stack;
      var digest = recoverableError.digest;
      onRecoverableError(recoverableError.value, {
        componentStack: componentStack,
        digest: digest
      });
    }
  }

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var error$1 = firstUncaughtError;
    firstUncaughtError = null;
    throw error$1;
  } // If the passive effects are the result of a discrete render, flush them
  // synchronously at the end of the current task so that the result is
  // immediately observable. Otherwise, we assume that they are not
  // order-dependent and do not need to be observed by external systems, so we
  // can wait until after paint.
  // TODO: We can optimize this by not scheduling the callback earlier. Since we
  // currently schedule the callback in multiple places, will wait until those
  // are consolidated.


  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {
    flushPassiveEffects();
  } // Read this again, since a passive effect might have updated it


  remainingLanes = root.pendingLanes;

  if (includesSomeLane(remainingLanes, SyncLane)) {
    {
      markNestedUpdateScheduled();
    } // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.


    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbacks();

  {
    markCommitStopped();
  }

  return null;
}

function flushPassiveEffects() {
  // Returns whether passive effects were flushed.
  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
  // probably just combine the two functions. I believe they were only separate
  // in the first place because we used to wrap it with
  // `Scheduler.runWithPriority`, which accepts a function. But now we track the
  // priority within React itself, so we can mutate the variable directly.
  if (rootWithPendingPassiveEffects !== null) {
    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
    var prevTransition = ReactCurrentBatchConfig$3.transition;
    var previousPriority = getCurrentUpdatePriority();

    try {
      ReactCurrentBatchConfig$3.transition = null;
      setCurrentUpdatePriority(priority);
      return flushPassiveEffectsImpl();
    } finally {
      setCurrentUpdatePriority(previousPriority);
      ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
    }
  }

  return false;
}
function enqueuePendingPassiveProfilerEffect(fiber) {
  {
    pendingPassiveProfilerEffects.push(fiber);

    if (!rootDoesHavePassiveEffects) {
      rootDoesHavePassiveEffects = true;
      scheduleCallback$1(NormalPriority, function () {
        flushPassiveEffects();
        return null;
      });
    }
  }
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  } // Cache and clear the transitions flag


  var transitions = pendingPassiveTransitions;
  pendingPassiveTransitions = null;
  var root = rootWithPendingPassiveEffects;
  var lanes = pendingPassiveEffectsLanes;
  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
  // Figure out why and fix it. It's not causing any known issues (probably
  // because it's only used for profiling), but it's a refactor hazard.

  pendingPassiveEffectsLanes = NoLanes;

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Cannot flush passive effects while already rendering.');
  }

  {
    isFlushingPassiveEffects = true;
    didScheduleUpdateDuringPassiveEffects = false;
  }

  {
    markPassiveEffectsStarted(lanes);
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  commitPassiveUnmountEffects(root.current);
  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects

  {
    var profilerEffects = pendingPassiveProfilerEffects;
    pendingPassiveProfilerEffects = [];

    for (var i = 0; i < profilerEffects.length; i++) {
      var _fiber = profilerEffects[i];
      commitPassiveEffectDurations(root, _fiber);
    }
  }

  {
    markPassiveEffectsStopped();
  }

  {
    commitDoubleInvokeEffectsInDEV(root.current, true);
  }

  executionContext = prevExecutionContext;
  flushSyncCallbacks();

  {
    // If additional passive effects were scheduled, increment a counter. If this
    // exceeds the limit, we'll fire a warning.
    if (didScheduleUpdateDuringPassiveEffects) {
      if (root === rootWithPassiveNestedUpdates) {
        nestedPassiveUpdateCount++;
      } else {
        nestedPassiveUpdateCount = 0;
        rootWithPassiveNestedUpdates = root;
      }
    } else {
      nestedPassiveUpdateCount = 0;
    }

    isFlushingPassiveEffects = false;
    didScheduleUpdateDuringPassiveEffects = false;
  } // TODO: Move to commitPassiveMountEffects


  onPostCommitRoot(root);

  {
    var stateNode = root.current.stateNode;
    stateNode.effectDuration = 0;
    stateNode.passiveEffectDuration = 0;
  }

  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
  var root = enqueueUpdate(rootFiber, update, SyncLane);
  var eventTime = requestEventTime();

  if (root !== null) {
    markRootUpdated(root, SyncLane, eventTime);
    ensureRootIsScheduled(root, eventTime);
  }
}

function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
  {
    reportUncaughtErrorInDEV(error$1);
    setIsRunningInsertionEffect(false);
  }

  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
    return;
  }

  var fiber = null;

  {
    fiber = nearestMountedAncestor;
  }

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
        var root = enqueueUpdate(fiber, update, SyncLane);
        var eventTime = requestEventTime();

        if (root !== null) {
          markRootUpdated(root, SyncLane, eventTime);
          ensureRootIsScheduled(root, eventTime);
        }

        return;
      }
    }

    fiber = fiber.return;
  }

  {
    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
    // will fire for errors that are thrown by destroy functions inside deleted
    // trees. What it should instead do is propagate the error to the parent of
    // the deleted tree. In the meantime, do not add this warning to the
    // allowlist; this is only for our internal use.
    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\n\n' + 'Error message:\n\n%s', error$1);
  }
}
function pingSuspendedRoot(root, wakeable, pingedLanes) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The wakeable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(wakeable);
  }

  var eventTime = requestEventTime();
  markRootPinged(root, pingedLanes);
  warnIfSuspenseResolutionNotWrappedWithActDEV(root);

  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, or if it's a retry, we'll always suspend
    // so we can always restart.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root.
      prepareFreshStack(root, NoLanes);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
    }
  }

  ensureRootIsScheduled(root, eventTime);
}

function retryTimedOutBoundary(boundaryFiber, retryLane) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new lanes.
  if (retryLane === NoLane) {
    // TODO: Assign this to `suspenseState.retryLane`? to avoid
    // unnecessary entanglement?
    retryLane = requestRetryLane(boundaryFiber);
  } // TODO: Special case idle priority?


  var eventTime = requestEventTime();
  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);

  if (root !== null) {
    markRootUpdated(root, retryLane, eventTime);
    ensureRootIsScheduled(root, eventTime);
  }
}

function retryDehydratedSuspenseBoundary(boundaryFiber) {
  var suspenseState = boundaryFiber.memoizedState;
  var retryLane = NoLane;

  if (suspenseState !== null) {
    retryLane = suspenseState.retryLane;
  }

  retryTimedOutBoundary(boundaryFiber, retryLane);
}
function resolveRetryWakeable(boundaryFiber, wakeable) {
  var retryLane = NoLane; // Default

  var retryCache;

  switch (boundaryFiber.tag) {
    case SuspenseComponent:
      retryCache = boundaryFiber.stateNode;
      var suspenseState = boundaryFiber.memoizedState;

      if (suspenseState !== null) {
        retryLane = suspenseState.retryLane;
      }

      break;

    case SuspenseListComponent:
      retryCache = boundaryFiber.stateNode;
      break;

    default:
      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');
  }

  if (retryCache !== null) {
    // The wakeable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(wakeable);
  }

  retryTimedOutBoundary(boundaryFiber, retryLane);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;
    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;
      rootWithPassiveNestedUpdates = null;

      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
  {
    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
    // Maybe not a big deal since this is DEV only behavior.
    setCurrentFiber(fiber);
    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);

    if (hasPassiveEffects) {
      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
    }

    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);

    if (hasPassiveEffects) {
      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
    }

    resetCurrentFiber();
  }
}

function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    var current = firstChild;
    var subtreeRoot = null;

    while (current !== null) {
      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;

      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {
        current = current.child;
      } else {
        if ((current.flags & fiberFlags) !== NoFlags) {
          invokeEffectFn(current);
        }

        if (current.sibling !== null) {
          current = current.sibling;
        } else {
          current = subtreeRoot = current.return;
        }
      }
    }
  }
}

var didWarnStateUpdateForNotYetMountedComponent = null;
function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
  {
    if ((executionContext & RenderContext) !== NoContext) {
      // We let the other warning about render phase updates deal with this one.
      return;
    }

    if (!(fiber.mode & ConcurrentMode)) {
      return;
    }

    var tag = fiber.tag;

    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    } // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.


    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';

    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
    }

    var previousFiber = current;

    try {
      setCurrentFiber(fiber);

      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
    } finally {
      if (previousFiber) {
        setCurrentFiber(fiber);
      } else {
        resetCurrentFiber();
      }
    }
  }
}
var beginWork$1;

{
  var dummyFiber = null;

  beginWork$1 = function (current, unitOfWork, lanes) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork(current, unitOfWork, lanes);
    } catch (originalError) {
      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises.
        // Don't replay errors if we are hydrating and have already suspended or handled an error
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if ( unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

      if (hasCaughtError()) {
        var replayError = clearCaughtError();

        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {
          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
          originalError._suppressLogging = true;
        }
      } // We always throw the original error in case the second render pass is not idempotent.
      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.


      throw originalError;
    }
  };
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInRenderForAnotherComponent;

{
  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
}

function warnAboutRenderPhaseUpdatesInDEV(fiber) {
  {
    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

            var dedupeKey = renderingComponentName;

            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';

              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
            }

            break;
          }

        case ClassComponent:
          {
            if (!didWarnAboutUpdateInRender) {
              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

              didWarnAboutUpdateInRender = true;
            }

            break;
          }
      }
    }
  }
}

function restorePendingUpdaters(root, lanes) {
  {
    if (isDevToolsPresent) {
      var memoizedUpdaters = root.memoizedUpdaters;
      memoizedUpdaters.forEach(function (schedulingFiber) {
        addFiberToLanesMap(root, schedulingFiber, lanes);
      }); // This function intentionally does not clear memoized updaters.
      // Those may still be relevant to the current commit
      // and a future one (e.g. Suspense).
    }
  }
}
var fakeActCallbackNode = {};

function scheduleCallback$1(priorityLevel, callback) {
  {
    // If we're currently inside an `act` scope, bypass Scheduler and push to
    // the `act` queue instead.
    var actQueue = ReactCurrentActQueue$1.current;

    if (actQueue !== null) {
      actQueue.push(callback);
      return fakeActCallbackNode;
    } else {
      return scheduleCallback(priorityLevel, callback);
    }
  }
}

function cancelCallback$1(callbackNode) {
  if ( callbackNode === fakeActCallbackNode) {
    return;
  } // In production, always call Scheduler. This function will be stripped out.


  return cancelCallback(callbackNode);
}

function shouldForceFlushFallbacksInDEV() {
  // Never force flush in production. This function should get stripped out.
  return  ReactCurrentActQueue$1.current !== null;
}

function warnIfUpdatesNotWrappedWithActDEV(fiber) {
  {
    if (fiber.mode & ConcurrentMode) {
      if (!isConcurrentActEnvironment()) {
        // Not in an act environment. No need to warn.
        return;
      }
    } else {
      // Legacy mode has additional cases where we suppress a warning.
      if (!isLegacyActEnvironment()) {
        // Not in an act environment. No need to warn.
        return;
      }

      if (executionContext !== NoContext) {
        // Legacy mode doesn't warn if the update is batched, i.e.
        // batchedUpdates or flushSync.
        return;
      }

      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
        // For backwards compatibility with pre-hooks code, legacy mode only
        // warns for updates that originate from a hook.
        return;
      }
    }

    if (ReactCurrentActQueue$1.current === null) {
      var previousFiber = current;

      try {
        setCurrentFiber(fiber);

        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));
      } finally {
        if (previousFiber) {
          setCurrentFiber(fiber);
        } else {
          resetCurrentFiber();
        }
      }
    }
  }
}

function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
  {
    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\n\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\n\n' + 'act(() => {\n' + '  /* finish loading suspended data */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');
    }
  }
}

function setIsRunningInsertionEffect(isRunning) {
  {
    isRunningInsertionEffect = isRunning;
  }
}

/* eslint-disable react-internal/prod-error-codes */
var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    flushSync(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (_root !== null) {
        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
      }
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    /* eslint-disable no-new */

    new Map([[nonExtensibleObject, null]]);
    new Set([nonExtensibleObject]);
    /* eslint-enable no-new */
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.flags = NoFlags;
  this.subtreeFlags = NoFlags;
  this.deletions = null;
  this.lanes = NoLanes;
  this.childLanes = NoLanes;
  this.alternate = null;

  {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  }

  {
    // This isn't directly used but is handy for debugging internals:
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct$1(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

    workInProgress.type = current.type; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.flags = NoFlags; // The effects are no longer valid.

    workInProgress.subtreeFlags = NoFlags;
    workInProgress.deletions = null;

    {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  } // Reset all effects except static ones.
  // Static effects are not specific to a render.


  workInProgress.flags = current.flags & StaticMask;
  workInProgress.childLanes = current.childLanes;
  workInProgress.lanes = current.lanes;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    lanes: currentDependencies.lanes,
    firstContext: currentDependencies.firstContext
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderLanes) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect flags but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.

  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childLanes = NoLanes;
    workInProgress.lanes = renderLanes;
    workInProgress.child = null;
    workInProgress.subtreeFlags = NoFlags;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;
    workInProgress.stateNode = null;

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.subtreeFlags = NoFlags;
    workInProgress.deletions = null;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      lanes: currentDependencies.lanes,
      firstContext: currentDependencies.firstContext
    };

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode;

    if (isStrictMode === true) {
      mode |= StrictLegacyMode;

      {
        mode |= StrictEffectsMode;
      }
    }
  } else {
    mode = NoMode;
  }

  if ( isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, lanes) {
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct$1(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictLegacyMode;

        if ( (mode & ConcurrentMode) !== NoMode) {
          // Strict effects should never run on legacy roots
          mode |= StrictEffectsMode;
        }

        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, lanes, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, lanes, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

      case REACT_LEGACY_HIDDEN_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_SCOPE_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_CACHE_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_TRACING_MARKER_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_DEBUG_TRACING_MODE_TYPE:

      // eslint-disable-next-line no-fallthrough

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;
            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentNameFromFiber(owner) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
    }
  }

  var fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.lanes = lanes;

  {
    fiber._debugOwner = owner;
  }

  return fiber;
}
function createFiberFromElement(element, mode, lanes) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, lanes, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.lanes = lanes;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, lanes, key) {
  {
    if (typeof pendingProps.id !== 'string') {
      error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.lanes = lanes;

  {
    fiber.stateNode = {
      effectDuration: 0,
      passiveEffectDuration: 0
    };
  }

  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, lanes, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
  fiber.elementType = REACT_OFFSCREEN_TYPE;
  fiber.lanes = lanes;
  var primaryChildInstance = {
    isHidden: false
  };
  fiber.stateNode = primaryChildInstance;
  return fiber;
}
function createFiberFromText(content, mode, lanes) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode);
  fiber.elementType = 'DELETED';
  return fiber;
}
function createFiberFromDehydratedFragment(dehydratedNode) {
  var fiber = createFiber(DehydratedFragment, null, null, NoMode);
  fiber.stateNode = dehydratedNode;
  return fiber;
}
function createFiberFromPortal(portal, mode, lanes) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.lanes = lanes;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.flags = source.flags;
  target.subtreeFlags = source.subtreeFlags;
  target.deletions = source.deletions;
  target.lanes = source.lanes;
  target.childLanes = source.childLanes;
  target.alternate = source.alternate;

  {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
  this.tag = tag;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.current = null;
  this.pingCache = null;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.callbackNode = null;
  this.callbackPriority = NoLane;
  this.eventTimes = createLaneMap(NoLanes);
  this.expirationTimes = createLaneMap(NoTimestamp);
  this.pendingLanes = NoLanes;
  this.suspendedLanes = NoLanes;
  this.pingedLanes = NoLanes;
  this.expiredLanes = NoLanes;
  this.mutableReadLanes = NoLanes;
  this.finishedLanes = NoLanes;
  this.entangledLanes = NoLanes;
  this.entanglements = createLaneMap(NoLanes);
  this.identifierPrefix = identifierPrefix;
  this.onRecoverableError = onRecoverableError;

  {
    this.mutableSourceEagerHydrationData = null;
  }

  {
    this.effectDuration = 0;
    this.passiveEffectDuration = 0;
  }

  {
    this.memoizedUpdaters = new Set();
    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];

    for (var _i = 0; _i < TotalLanes; _i++) {
      pendingUpdatersLaneMap.push(new Set());
    }
  }

  {
    switch (tag) {
      case ConcurrentRoot:
        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
        break;

      case LegacyRoot:
        this._debugRootType = hydrate ? 'hydrate()' : 'render()';
        break;
    }
  }
}

function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the
// host config, but because they are passed in at runtime, we have to thread
// them through the root constructor. Perhaps we should put them all into a
// single type, like a DynamicHostConfig that is defined by the renderer.
identifierPrefix, onRecoverableError, transitionCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;

  {
    var _initialState = {
      element: initialChildren,
      isDehydrated: hydrate,
      cache: null,
      // not enabled yet
      transitions: null,
      pendingSuspenseBoundaries: null
    };
    uninitializedFiber.memoizedState = _initialState;
  }

  initializeUpdateQueue(uninitializedFiber);
  return root;
}

var ReactVersion = '18.2.0';

function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  {
    checkKeyStringCoercion(key);
  }

  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        throw new Error('Unable to find node on an unmounted component.');
      } else {
        var keys = Object.keys(component).join(',');
        throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictLegacyMode) {
      var componentName = getComponentNameFromFiber(fiber) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;
        var previousFiber = current;

        try {
          setCurrentFiber(hostFiber);

          if (fiber.mode & StrictLegacyMode) {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
          } else {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
          }
        } finally {
          // Ideally this should reset to previous but this shouldn't be called in
          // render and there's another warning for that anyway.
          if (previousFiber) {
            setCurrentFiber(previousFiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }

    return hostFiber.stateNode;
  }
}

function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
  var hydrate = false;
  var initialChildren = null;
  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
}
function createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.
callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
  var hydrate = true;
  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor

  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
  // a regular update because the initial render must match was was rendered
  // on the server.
  // NOTE: This update intentionally doesn't have a payload. We're only using
  // the update to schedule work on the root fiber (and, for legacy roots, to
  // enqueue the callback if one is provided).

  var current = root.current;
  var eventTime = requestEventTime();
  var lane = requestUpdateLane(current);
  var update = createUpdate(eventTime, lane);
  update.callback = callback !== undefined && callback !== null ? callback : null;
  enqueueUpdate(current, update, lane);
  scheduleInitialHydrationOnRoot(root, lane, eventTime);
  return root;
}
function updateContainer(element, container, parentComponent, callback) {
  {
    onScheduleRoot(container, element);
  }

  var current$1 = container.current;
  var eventTime = requestEventTime();
  var lane = requestUpdateLane(current$1);

  {
    markRenderScheduled(lane);
  }

  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;

      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');
    }
  }

  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    {
      if (typeof callback !== 'function') {
        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
      }
    }

    update.callback = callback;
  }

  var root = enqueueUpdate(current$1, update, lane);

  if (root !== null) {
    scheduleUpdateOnFiber(root, current$1, lane, eventTime);
    entangleTransitions(root, current$1, lane);
  }

  return lane;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}
function attemptSynchronousHydration$1(fiber) {
  switch (fiber.tag) {
    case HostRoot:
      {
        var root = fiber.stateNode;

        if (isRootDehydrated(root)) {
          // Flush the first scheduled "update".
          var lanes = getHighestPriorityPendingLanes(root);
          flushRoot(root, lanes);
        }

        break;
      }

    case SuspenseComponent:
      {
        flushSync(function () {
          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

          if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
          }
        }); // If we're still blocked after this, we need to increase
        // the priority of any promises resolving within this
        // boundary so that they next attempt also has higher pri.

        var retryLane = SyncLane;
        markRetryLaneIfNotHydrated(fiber, retryLane);
        break;
      }
  }
}

function markRetryLaneImpl(fiber, retryLane) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
  }
} // Increases the priority of thenables when they resolve within this boundary.


function markRetryLaneIfNotHydrated(fiber, retryLane) {
  markRetryLaneImpl(fiber, retryLane);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryLaneImpl(alternate, retryLane);
  }
}
function attemptContinuousHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var lane = SelectiveHydrationLane;
  var root = enqueueConcurrentRenderForLane(fiber, lane);

  if (root !== null) {
    var eventTime = requestEventTime();
    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
  }

  markRetryLaneIfNotHydrated(fiber, lane);
}
function attemptHydrationAtCurrentPriority$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var lane = requestUpdateLane(fiber);
  var root = enqueueConcurrentRenderForLane(fiber, lane);

  if (root !== null) {
    var eventTime = requestEventTime();
    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
  }

  markRetryLaneIfNotHydrated(fiber, lane);
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

var shouldErrorImpl = function (fiber) {
  return null;
};

function shouldError(fiber) {
  return shouldErrorImpl(fiber);
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideHookStateDeletePath = null;
var overrideHookStateRenamePath = null;
var overrideProps = null;
var overridePropsDeletePath = null;
var overridePropsRenamePath = null;
var scheduleUpdate = null;
var setErrorHandler = null;
var setSuspenseHandler = null;

{
  var copyWithDeleteImpl = function (obj, path, index) {
    var key = path[index];
    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

    if (index + 1 === path.length) {
      if (isArray(updated)) {
        updated.splice(key, 1);
      } else {
        delete updated[key];
      }

      return updated;
    } // $FlowFixMe number or string is fine here


    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
    return updated;
  };

  var copyWithDelete = function (obj, path) {
    return copyWithDeleteImpl(obj, path, 0);
  };

  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
    var oldKey = oldPath[index];
    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

    if (index + 1 === oldPath.length) {
      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

      updated[newKey] = updated[oldKey];

      if (isArray(updated)) {
        updated.splice(oldKey, 1);
      } else {
        delete updated[oldKey];
      }
    } else {
      // $FlowFixMe number or string is fine here
      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
      obj[oldKey], oldPath, newPath, index + 1);
    }

    return updated;
  };

  var copyWithRename = function (obj, oldPath, newPath) {
    if (oldPath.length !== newPath.length) {
      warn('copyWithRename() expects paths of the same length');

      return;
    } else {
      for (var i = 0; i < newPath.length - 1; i++) {
        if (oldPath[i] !== newPath[i]) {
          warn('copyWithRename() expects paths to be the same except for the deepest key');

          return;
        }
      }
    }

    return copyWithRenameImpl(obj, oldPath, newPath, 0);
  };

  var copyWithSetImpl = function (obj, path, index, value) {
    if (index >= path.length) {
      return value;
    }

    var key = path[index];
    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  };

  var findHook = function (fiber, id) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    return currentHook;
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithSet(hook.memoizedState, path, value);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = assign({}, fiber.memoizedProps);
      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (root !== null) {
        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
      }
    }
  };

  overrideHookStateDeletePath = function (fiber, id, path) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithDelete(hook.memoizedState, path);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = assign({}, fiber.memoizedProps);
      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (root !== null) {
        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
      }
    }
  };

  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = assign({}, fiber.memoizedProps);
      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (root !== null) {
        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
      }
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  overridePropsDeletePath = function (fiber, path) {
    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  overridePropsRenamePath = function (fiber, oldPath, newPath) {
    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  scheduleUpdate = function (fiber) {
    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  setErrorHandler = function (newShouldErrorImpl) {
    shouldErrorImpl = newShouldErrorImpl;
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function findHostInstanceByFiber(fiber) {
  var hostFiber = findCurrentHostFiber(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

function emptyFindFiberByHostInstance(instance) {
  return null;
}

function getCurrentFiberForDevTools() {
  return current;
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals({
    bundleType: devToolsConfig.bundleType,
    version: devToolsConfig.version,
    rendererPackageName: devToolsConfig.rendererPackageName,
    rendererConfig: devToolsConfig.rendererConfig,
    overrideHookState: overrideHookState,
    overrideHookStateDeletePath: overrideHookStateDeletePath,
    overrideHookStateRenamePath: overrideHookStateRenamePath,
    overrideProps: overrideProps,
    overridePropsDeletePath: overridePropsDeletePath,
    overridePropsRenamePath: overridePropsRenamePath,
    setErrorHandler: setErrorHandler,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: findHostInstanceByFiber,
    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
    // React Refresh
    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
    scheduleRefresh:  scheduleRefresh ,
    scheduleRoot:  scheduleRoot ,
    setRefreshHandler:  setRefreshHandler ,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber:  getCurrentFiberForDevTools ,
    // Enables DevTools to detect reconciler version rather than renderer version
    // which may not match for third party renderers.
    reconcilerVersion: ReactVersion
  });
}

/* global reportError */

var defaultOnRecoverableError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,
// emulating an uncaught JavaScript error.
reportError : function (error) {
  // In older browsers and test environments, fallback to console.error.
  // eslint-disable-next-line react-internal/no-production-logging
  console['error'](error);
};

function ReactDOMRoot(internalRoot) {
  this._internalRoot = internalRoot;
}

ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (children) {
  var root = this._internalRoot;

  if (root === null) {
    throw new Error('Cannot update an unmounted root.');
  }

  {
    if (typeof arguments[1] === 'function') {
      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    } else if (isValidContainer(arguments[1])) {
      error('You passed a container to the second argument of root.render(...). ' + "You don't need to pass it again since you already passed it to create the root.");
    } else if (typeof arguments[1] !== 'undefined') {
      error('You passed a second argument to root.render(...) but it only accepts ' + 'one argument.');
    }

    var container = root.containerInfo;

    if (container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(root.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
        }
      }
    }
  }

  updateContainer(children, root, null, null);
};

ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function () {
  {
    if (typeof arguments[0] === 'function') {
      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }
  }

  var root = this._internalRoot;

  if (root !== null) {
    this._internalRoot = null;
    var container = root.containerInfo;

    {
      if (isAlreadyRendering()) {
        error('Attempted to synchronously unmount a root while React was already ' + 'rendering. React cannot finish unmounting the root until the ' + 'current render has completed, which may lead to a race condition.');
      }
    }

    flushSync(function () {
      updateContainer(null, root, null, null);
    });
    unmarkContainerAsRoot(container);
  }
};

function createRoot(container, options) {
  if (!isValidContainer(container)) {
    throw new Error('createRoot(...): Target container is not a DOM element.');
  }

  warnIfReactDOMContainerInDEV(container);
  var isStrictMode = false;
  var concurrentUpdatesByDefaultOverride = false;
  var identifierPrefix = '';
  var onRecoverableError = defaultOnRecoverableError;
  var transitionCallbacks = null;

  if (options !== null && options !== undefined) {
    {
      if (options.hydrate) {
        warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');
      } else {
        if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) {
          error('You passed a JSX element to createRoot. You probably meant to ' + 'call root.render instead. ' + 'Example usage:\n\n' + '  let root = createRoot(domContainer);\n' + '  root.render(<App />);');
        }
      }
    }

    if (options.unstable_strictMode === true) {
      isStrictMode = true;
    }

    if (options.identifierPrefix !== undefined) {
      identifierPrefix = options.identifierPrefix;
    }

    if (options.onRecoverableError !== undefined) {
      onRecoverableError = options.onRecoverableError;
    }

    if (options.transitionCallbacks !== undefined) {
      transitionCallbacks = options.transitionCallbacks;
    }
  }

  var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
  markContainerAsRoot(root.current, container);
  var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
  listenToAllSupportedEvents(rootContainerElement);
  return new ReactDOMRoot(root);
}

function ReactDOMHydrationRoot(internalRoot) {
  this._internalRoot = internalRoot;
}

function scheduleHydration(target) {
  if (target) {
    queueExplicitHydrationTarget(target);
  }
}

ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
function hydrateRoot(container, initialChildren, options) {
  if (!isValidContainer(container)) {
    throw new Error('hydrateRoot(...): Target container is not a DOM element.');
  }

  warnIfReactDOMContainerInDEV(container);

  {
    if (initialChildren === undefined) {
      error('Must provide initial children as second argument to hydrateRoot. ' + 'Example usage: hydrateRoot(domContainer, <App />)');
    }
  } // For now we reuse the whole bag of options since they contain
  // the hydration callbacks.


  var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option

  var mutableSources = options != null && options.hydratedSources || null;
  var isStrictMode = false;
  var concurrentUpdatesByDefaultOverride = false;
  var identifierPrefix = '';
  var onRecoverableError = defaultOnRecoverableError;

  if (options !== null && options !== undefined) {
    if (options.unstable_strictMode === true) {
      isStrictMode = true;
    }

    if (options.identifierPrefix !== undefined) {
      identifierPrefix = options.identifierPrefix;
    }

    if (options.onRecoverableError !== undefined) {
      onRecoverableError = options.onRecoverableError;
    }
  }

  var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
  markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.

  listenToAllSupportedEvents(container);

  if (mutableSources) {
    for (var i = 0; i < mutableSources.length; i++) {
      var mutableSource = mutableSources[i];
      registerMutableSourceForHydration(root, mutableSource);
    }
  }

  return new ReactDOMHydrationRoot(root);
}
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers  ));
} // TODO: Remove this function which also includes comment nodes.
// We only use it in places that are currently more relaxed.

function isValidContainerLegacy(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

function warnIfReactDOMContainerInDEV(container) {
  {
    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('createRoot(): Creating roots directly with document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try using a container element created ' + 'for your app.');
    }

    if (isContainerMarkedAsRoot(container)) {
      if (container._reactRootContainer) {
        error('You are calling ReactDOMClient.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');
      } else {
        error('You are calling ReactDOMClient.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');
      }
    }
  }
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
var topLevelUpdateWarnings;

{
  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
        }
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
    }

    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
    }
  };
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function noopOnRecoverableError() {// This isn't reachable because onRecoverableError isn't called in the
  // legacy API.
}

function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
  if (isHydrationContainer) {
    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(root);
        originalCallback.call(instance);
      };
    }

    var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks
    false, // isStrictMode
    false, // concurrentUpdatesByDefaultOverride,
    '', // identifierPrefix
    noopOnRecoverableError);
    container._reactRootContainer = root;
    markContainerAsRoot(root.current, container);
    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
    listenToAllSupportedEvents(rootContainerElement);
    flushSync();
    return root;
  } else {
    // First clear any existing content.
    var rootSibling;

    while (rootSibling = container.lastChild) {
      container.removeChild(rootSibling);
    }

    if (typeof callback === 'function') {
      var _originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(_root);

        _originalCallback.call(instance);
      };
    }

    var _root = createContainer(container, LegacyRoot, null, // hydrationCallbacks
    false, // isStrictMode
    false, // concurrentUpdatesByDefaultOverride,
    '', // identifierPrefix
    noopOnRecoverableError);

    container._reactRootContainer = _root;
    markContainerAsRoot(_root.current, container);

    var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;

    listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.

    flushSync(function () {
      updateContainer(initialChildren, _root, parentComponent, callback);
    });
    return _root;
  }
}

function warnOnInvalidCallback$1(callback, callerName) {
  {
    if (callback !== null && typeof callback !== 'function') {
      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  }
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
  }

  var maybeRoot = container._reactRootContainer;
  var root;

  if (!maybeRoot) {
    // Initial mount
    root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
  } else {
    root = maybeRoot;

    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(root);
        originalCallback.call(instance);
      };
    } // Update


    updateContainer(children, root, parentComponent, callback);
  }

  return getPublicRootInstance(root);
}

function findDOMNode(componentOrElement) {
  {
    var owner = ReactCurrentOwner$3.current;

    if (owner !== null && owner.stateNode !== null) {
      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

      if (!warnedAboutRefsInRender) {
        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromType(owner.type) || 'A component');
      }

      owner.stateNode._warnedAboutRefsInRender = true;
    }
  }

  if (componentOrElement == null) {
    return null;
  }

  if (componentOrElement.nodeType === ELEMENT_NODE) {
    return componentOrElement;
  }

  {
    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
  }
}
function hydrate(element, container, callback) {
  {
    error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
  }

  if (!isValidContainerLegacy(container)) {
    throw new Error('Target container is not a DOM element.');
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call hydrateRoot(container, element)?');
    }
  } // TODO: throw or warn if we couldn't hydrate?


  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
}
function render(element, container, callback) {
  {
    error('ReactDOM.render is no longer supported in React 18. Use createRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
  }

  if (!isValidContainerLegacy(container)) {
    throw new Error('Target container is not a DOM element.');
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
    }
  }

  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
}
function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  {
    error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported ' + 'in React 18. Consider using a portal instead. Until you switch to ' + "the createRoot API, your app will behave as if it's running React " + '17. Learn more: https://reactjs.org/link/switch-to-createroot');
  }

  if (!isValidContainerLegacy(containerNode)) {
    throw new Error('Target container is not a DOM element.');
  }

  if (parentComponent == null || !has(parentComponent)) {
    throw new Error('parentComponent must be a valid React Component');
  }

  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
}
function unmountComponentAtNode(container) {
  if (!isValidContainerLegacy(container)) {
    throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');
    }
  }

  if (container._reactRootContainer) {
    {
      var rootEl = getReactRootElementInContainer(container);
      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

      if (renderedByDifferentReact) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }
    } // Unmount should not be batched.


    flushSync(function () {
      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
        // $FlowFixMe This should probably use `delete container._reactRootContainer`
        container._reactRootContainer = null;
        unmarkContainerAsRoot(container);
      });
    }); // If you call unmountComponentAtNode twice in quick succession, you'll
    // get `true` twice. That's probably fine?

    return true;
  } else {
    {
      var _rootEl = getReactRootElementInContainer(container);

      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;

      if (hasNonRootReactChild) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }
    }

    return false;
  }
}

setAttemptSynchronousHydration(attemptSynchronousHydration$1);
setAttemptContinuousHydration(attemptContinuousHydration$1);
setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
setGetCurrentUpdatePriority(getCurrentUpdatePriority);
setAttemptHydrationAtPriority(runWithPriority);

{
  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
  }
}

setRestoreImplementation(restoreControlledState$3);
setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);

function createPortal$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!isValidContainer(container)) {
    throw new Error('Target container is not a DOM element.');
  } // TODO: pass ReactDOM portal implementation as third argument
  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


  return createPortal(children, container, null, key);
}

function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
}

var Internals = {
  usingClientEntryPoint: false,
  // Keep in sync with ReactTestUtils.js.
  // This is an array for better minification.
  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
};

function createRoot$1(container, options) {
  {
    if (!Internals.usingClientEntryPoint && !false) {
      error('You are importing createRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
    }
  }

  return createRoot(container, options);
}

function hydrateRoot$1(container, initialChildren, options) {
  {
    if (!Internals.usingClientEntryPoint && !false) {
      error('You are importing hydrateRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
    }
  }

  return hydrateRoot(container, initialChildren, options);
} // Overload the definition to the two valid signatures.
// Warning, this opts-out of checking the function body.


// eslint-disable-next-line no-redeclare
function flushSync$1(fn) {
  {
    if (isAlreadyRendering()) {
      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
    }
  }

  return flushSync(fn);
}
var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType:  1 ,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

      if (/^(https?|file):$/.test(protocol)) {
        // eslint-disable-next-line react-internal/no-production-logging
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}

exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
exports.createPortal = createPortal$1;
exports.createRoot = createRoot$1;
exports.findDOMNode = findDOMNode;
exports.flushSync = flushSync$1;
exports.hydrate = hydrate;
exports.hydrateRoot = hydrateRoot$1;
exports.render = render;
exports.unmountComponentAtNode = unmountComponentAtNode;
exports.unstable_batchedUpdates = batchedUpdates$1;
exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
exports.version = ReactVersion;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
}
        
  })();
}


/***/ }),

/***/ "./node_modules/react-dom/client.js":
/*!******************************************!*\
  !*** ./node_modules/react-dom/client.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var m = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
if (false) {} else {
  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  exports.createRoot = function(c, o) {
    i.usingClientEntryPoint = true;
    try {
      return m.createRoot(c, o);
    } finally {
      i.usingClientEntryPoint = false;
    }
  };
  exports.hydrateRoot = function(c, h, o) {
    i.usingClientEntryPoint = true;
    try {
      return m.hydrateRoot(c, h, o);
    } finally {
      i.usingClientEntryPoint = false;
    }
  };
}


/***/ }),

/***/ "./node_modules/react-dom/index.js":
/*!*****************************************!*\
  !*** ./node_modules/react-dom/index.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (true) {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ "./node_modules/react-dom/cjs/react-dom.development.js");
}


/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}


/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/react-is/cjs/react-is.development.js");
}


/***/ }),

/***/ "./node_modules/react-router-dom/esm/react-router-dom.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-router-dom/esm/react-router-dom.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserRouter": function() { return /* binding */ BrowserRouter; },
/* harmony export */   "HashRouter": function() { return /* binding */ HashRouter; },
/* harmony export */   "Link": function() { return /* binding */ Link; },
/* harmony export */   "MemoryRouter": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.MemoryRouter; },
/* harmony export */   "NavLink": function() { return /* binding */ NavLink; },
/* harmony export */   "Prompt": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.Prompt; },
/* harmony export */   "Redirect": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.Redirect; },
/* harmony export */   "Route": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.Route; },
/* harmony export */   "Router": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.Router; },
/* harmony export */   "StaticRouter": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.StaticRouter; },
/* harmony export */   "Switch": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.Switch; },
/* harmony export */   "generatePath": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.generatePath; },
/* harmony export */   "matchPath": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.matchPath; },
/* harmony export */   "useHistory": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.useHistory; },
/* harmony export */   "useLocation": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.useLocation; },
/* harmony export */   "useParams": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.useParams; },
/* harmony export */   "useRouteMatch": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.useRouteMatch; },
/* harmony export */   "withRouter": function() { return /* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.withRouter; }
/* harmony export */ });
/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-router */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! history */ "./node_modules/history/esm/history.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/esm/tiny-invariant.js");











/**
 * The public API for a <Router> that uses HTML5 history.
 */

var BrowserRouter = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(BrowserRouter, _React$Component);

  function BrowserRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = (0,history__WEBPACK_IMPORTED_MODULE_6__.createBrowserHistory)(_this.props);
    return _this;
  }

  var _proto = BrowserRouter.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default().createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return BrowserRouter;
}((react__WEBPACK_IMPORTED_MODULE_2___default().Component));

if (true) {
  BrowserRouter.propTypes = {
    basename: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),
    children: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().node),
    forceRefresh: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),
    getUserConfirmation: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),
    keyLength: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number)
  };

  BrowserRouter.prototype.componentDidMount = function () {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_8__["default"])(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.") : 0;
  };
}

/**
 * The public API for a <Router> that uses window.location.hash.
 */

var HashRouter = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(HashRouter, _React$Component);

  function HashRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = (0,history__WEBPACK_IMPORTED_MODULE_6__.createHashHistory)(_this.props);
    return _this;
  }

  var _proto = HashRouter.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default().createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return HashRouter;
}((react__WEBPACK_IMPORTED_MODULE_2___default().Component));

if (true) {
  HashRouter.propTypes = {
    basename: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),
    children: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().node),
    getUserConfirmation: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),
    hashType: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOf(["hashbang", "noslash", "slash"])
  };

  HashRouter.prototype.componentDidMount = function () {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_8__["default"])(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.") : 0;
  };
}

var resolveToLocation = function resolveToLocation(to, currentLocation) {
  return typeof to === "function" ? to(currentLocation) : to;
};
var normalizeToLocation = function normalizeToLocation(to, currentLocation) {
  return typeof to === "string" ? (0,history__WEBPACK_IMPORTED_MODULE_6__.createLocation)(to, null, null, currentLocation) : to;
};

var forwardRefShim = function forwardRefShim(C) {
  return C;
};

var forwardRef = (react__WEBPACK_IMPORTED_MODULE_2___default().forwardRef);

if (typeof forwardRef === "undefined") {
  forwardRef = forwardRefShim;
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

var LinkAnchor = forwardRef(function (_ref, forwardedRef) {
  var innerRef = _ref.innerRef,
      navigate = _ref.navigate,
      _onClick = _ref.onClick,
      rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(_ref, ["innerRef", "navigate", "onClick"]);

  var target = rest.target;

  var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__["default"])({}, rest, {
    onClick: function onClick(event) {
      try {
        if (_onClick) _onClick(event);
      } catch (ex) {
        event.preventDefault();
        throw ex;
      }

      if (!event.defaultPrevented && // onClick prevented default
      event.button === 0 && ( // ignore everything but left clicks
      !target || target === "_self") && // let browser handle "target=_blank" etc.
      !isModifiedEvent(event) // ignore clicks with modifier keys
      ) {
          event.preventDefault();
          navigate();
        }
    }
  }); // React 15 compat


  if (forwardRefShim !== forwardRef) {
    props.ref = forwardedRef || innerRef;
  } else {
    props.ref = innerRef;
  }
  /* eslint-disable-next-line jsx-a11y/anchor-has-content */


  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default().createElement("a", props);
});

if (true) {
  LinkAnchor.displayName = "LinkAnchor";
}
/**
 * The public API for rendering a history-aware <a>.
 */


var Link = forwardRef(function (_ref2, forwardedRef) {
  var _ref2$component = _ref2.component,
      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,
      replace = _ref2.replace,
      to = _ref2.to,
      innerRef = _ref2.innerRef,
      rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(_ref2, ["component", "replace", "to", "innerRef"]);

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default().createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.__RouterContext.Consumer, null, function (context) {
    !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_5__["default"])(false, "You should not use <Link> outside a <Router>") : 0 : void 0;
    var history = context.history;
    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
    var href = location ? history.createHref(location) : "";

    var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__["default"])({}, rest, {
      href: href,
      navigate: function navigate() {
        var location = resolveToLocation(to, context.location);
        var isDuplicateNavigation = (0,history__WEBPACK_IMPORTED_MODULE_6__.createPath)(context.location) === (0,history__WEBPACK_IMPORTED_MODULE_6__.createPath)(normalizeToLocation(location));
        var method = replace || isDuplicateNavigation ? history.replace : history.push;
        method(location);
      }
    }); // React 15 compat


    if (forwardRefShim !== forwardRef) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.innerRef = innerRef;
    }

    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default().createElement(component, props);
  });
});

if (true) {
  var toType = prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_7___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object), (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func)]);
  var refType = prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_7___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func), prop_types__WEBPACK_IMPORTED_MODULE_7___default().shape({
    current: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().any)
  })]);
  Link.displayName = "Link";
  Link.propTypes = {
    innerRef: refType,
    onClick: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),
    replace: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),
    target: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),
    to: toType.isRequired
  };
}

var forwardRefShim$1 = function forwardRefShim(C) {
  return C;
};

var forwardRef$1 = (react__WEBPACK_IMPORTED_MODULE_2___default().forwardRef);

if (typeof forwardRef$1 === "undefined") {
  forwardRef$1 = forwardRefShim$1;
}

function joinClassnames() {
  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
    classnames[_key] = arguments[_key];
  }

  return classnames.filter(function (i) {
    return i;
  }).join(" ");
}
/**
 * A <Link> wrapper that knows if it's "active" or not.
 */


var NavLink = forwardRef$1(function (_ref, forwardedRef) {
  var _ref$ariaCurrent = _ref["aria-current"],
      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,
      _ref$activeClassName = _ref.activeClassName,
      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,
      activeStyle = _ref.activeStyle,
      classNameProp = _ref.className,
      exact = _ref.exact,
      isActiveProp = _ref.isActive,
      locationProp = _ref.location,
      sensitive = _ref.sensitive,
      strict = _ref.strict,
      styleProp = _ref.style,
      to = _ref.to,
      innerRef = _ref.innerRef,
      rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default().createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.__RouterContext.Consumer, null, function (context) {
    !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_5__["default"])(false, "You should not use <NavLink> outside a <Router>") : 0 : void 0;
    var currentLocation = locationProp || context.location;
    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
    var match = escapedPath ? (0,react_router__WEBPACK_IMPORTED_MODULE_0__.matchPath)(currentLocation.pathname, {
      path: escapedPath,
      exact: exact,
      sensitive: sensitive,
      strict: strict
    }) : null;
    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
    var className = typeof classNameProp === "function" ? classNameProp(isActive) : classNameProp;
    var style = typeof styleProp === "function" ? styleProp(isActive) : styleProp;

    if (isActive) {
      className = joinClassnames(className, activeClassName);
      style = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__["default"])({}, style, activeStyle);
    }

    var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__["default"])({
      "aria-current": isActive && ariaCurrent || null,
      className: className,
      style: style,
      to: toLocation
    }, rest); // React 15 compat


    if (forwardRefShim$1 !== forwardRef$1) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.innerRef = innerRef;
    }

    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default().createElement(Link, props);
  });
});

if (true) {
  NavLink.displayName = "NavLink";
  var ariaCurrentType = prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOf(["page", "step", "location", "date", "time", "true", "false"]);
  NavLink.propTypes = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__["default"])({}, Link.propTypes, {
    "aria-current": ariaCurrentType,
    activeClassName: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),
    activeStyle: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object),
    className: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_7___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func)]),
    exact: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),
    isActive: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),
    location: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object),
    sensitive: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),
    strict: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),
    style: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_7___default().object), (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func)])
  });
}




/***/ }),

/***/ "./node_modules/react-router/esm/react-router.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-router/esm/react-router.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MemoryRouter": function() { return /* binding */ MemoryRouter; },
/* harmony export */   "Prompt": function() { return /* binding */ Prompt; },
/* harmony export */   "Redirect": function() { return /* binding */ Redirect; },
/* harmony export */   "Route": function() { return /* binding */ Route; },
/* harmony export */   "Router": function() { return /* binding */ Router; },
/* harmony export */   "StaticRouter": function() { return /* binding */ StaticRouter; },
/* harmony export */   "Switch": function() { return /* binding */ Switch; },
/* harmony export */   "__HistoryContext": function() { return /* binding */ historyContext; },
/* harmony export */   "__RouterContext": function() { return /* binding */ context; },
/* harmony export */   "generatePath": function() { return /* binding */ generatePath; },
/* harmony export */   "matchPath": function() { return /* binding */ matchPath; },
/* harmony export */   "useHistory": function() { return /* binding */ useHistory; },
/* harmony export */   "useLocation": function() { return /* binding */ useLocation; },
/* harmony export */   "useParams": function() { return /* binding */ useParams; },
/* harmony export */   "useRouteMatch": function() { return /* binding */ useRouteMatch; },
/* harmony export */   "withRouter": function() { return /* binding */ withRouter; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! history */ "./node_modules/history/esm/history.js");
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");
/* harmony import */ var mini_create_react_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mini-create-react-context */ "./node_modules/mini-create-react-context/dist/esm/index.js");
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/esm/tiny-invariant.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! path-to-regexp */ "./node_modules/path-to-regexp/index.js");
/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(path_to_regexp__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! hoist-non-react-statics */ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8__);













// TODO: Replace with React.createContext once we can assume React 16+

var createNamedContext = function createNamedContext(name) {
  var context = (0,mini_create_react_context__WEBPACK_IMPORTED_MODULE_2__["default"])();
  context.displayName = name;
  return context;
};

var historyContext = /*#__PURE__*/createNamedContext("Router-History");

var context = /*#__PURE__*/createNamedContext("Router");

/**
 * The public API for putting history on context.
 */

var Router = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(Router, _React$Component);

  Router.computeRootMatch = function computeRootMatch(pathname) {
    return {
      path: "/",
      url: "/",
      params: {},
      isExact: pathname === "/"
    };
  };

  function Router(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      location: props.history.location
    }; // This is a bit of a hack. We have to start listening for location
    // changes here in the constructor in case there are any <Redirect>s
    // on the initial render. If there are, they will replace/push when
    // they mount and since cDM fires in children before parents, we may
    // get a new location before the <Router> is mounted.

    _this._isMounted = false;
    _this._pendingLocation = null;

    if (!props.staticContext) {
      _this.unlisten = props.history.listen(function (location) {
        if (_this._isMounted) {
          _this.setState({
            location: location
          });
        } else {
          _this._pendingLocation = location;
        }
      });
    }

    return _this;
  }

  var _proto = Router.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this._isMounted = true;

    if (this._pendingLocation) {
      this.setState({
        location: this._pendingLocation
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.unlisten) {
      this.unlisten();
      this._isMounted = false;
      this._pendingLocation = null;
    }
  };

  _proto.render = function render() {
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(context.Provider, {
      value: {
        history: this.props.history,
        location: this.state.location,
        match: Router.computeRootMatch(this.state.location.pathname),
        staticContext: this.props.staticContext
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(historyContext.Provider, {
      children: this.props.children || null,
      value: this.props.history
    }));
  };

  return Router;
}((react__WEBPACK_IMPORTED_MODULE_1___default().Component));

if (true) {
  Router.propTypes = {
    children: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().node),
    history: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().object.isRequired),
    staticContext: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().object)
  };

  Router.prototype.componentDidUpdate = function (prevProps) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_10__["default"])(prevProps.history === this.props.history, "You cannot change <Router history>") : 0;
  };
}

/**
 * The public API for a <Router> that stores location in memory.
 */

var MemoryRouter = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(MemoryRouter, _React$Component);

  function MemoryRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = (0,history__WEBPACK_IMPORTED_MODULE_11__.createMemoryHistory)(_this.props);
    return _this;
  }

  var _proto = MemoryRouter.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return MemoryRouter;
}((react__WEBPACK_IMPORTED_MODULE_1___default().Component));

if (true) {
  MemoryRouter.propTypes = {
    initialEntries: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().array),
    initialIndex: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),
    getUserConfirmation: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().func),
    keyLength: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),
    children: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().node)
  };

  MemoryRouter.prototype.componentDidMount = function () {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_10__["default"])(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.") : 0;
  };
}

var Lifecycle = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(Lifecycle, _React$Component);

  function Lifecycle() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Lifecycle.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.onMount) this.props.onMount.call(this, this);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.props.onUnmount) this.props.onUnmount.call(this, this);
  };

  _proto.render = function render() {
    return null;
  };

  return Lifecycle;
}((react__WEBPACK_IMPORTED_MODULE_1___default().Component));

/**
 * The public API for prompting the user before navigating away from a screen.
 */

function Prompt(_ref) {
  var message = _ref.message,
      _ref$when = _ref.when,
      when = _ref$when === void 0 ? true : _ref$when;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(context.Consumer, null, function (context) {
    !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, "You should not use <Prompt> outside a <Router>") : 0 : void 0;
    if (!when || context.staticContext) return null;
    var method = context.history.block;
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Lifecycle, {
      onMount: function onMount(self) {
        self.release = method(message);
      },
      onUpdate: function onUpdate(self, prevProps) {
        if (prevProps.message !== message) {
          self.release();
          self.release = method(message);
        }
      },
      onUnmount: function onUnmount(self) {
        self.release();
      },
      message: message
    });
  });
}

if (true) {
  var messageType = prop_types__WEBPACK_IMPORTED_MODULE_9___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_9___default().func), (prop_types__WEBPACK_IMPORTED_MODULE_9___default().string)]);
  Prompt.propTypes = {
    when: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().bool),
    message: messageType.isRequired
  };
}

var cache = {};
var cacheLimit = 10000;
var cacheCount = 0;

function compilePath(path) {
  if (cache[path]) return cache[path];
  var generator = path_to_regexp__WEBPACK_IMPORTED_MODULE_5___default().compile(path);

  if (cacheCount < cacheLimit) {
    cache[path] = generator;
    cacheCount++;
  }

  return generator;
}
/**
 * Public API for generating a URL pathname from a path and parameters.
 */


function generatePath(path, params) {
  if (path === void 0) {
    path = "/";
  }

  if (params === void 0) {
    params = {};
  }

  return path === "/" ? path : compilePath(path)(params, {
    pretty: true
  });
}

/**
 * The public API for navigating programmatically with a component.
 */

function Redirect(_ref) {
  var computedMatch = _ref.computedMatch,
      to = _ref.to,
      _ref$push = _ref.push,
      push = _ref$push === void 0 ? false : _ref$push;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(context.Consumer, null, function (context) {
    !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, "You should not use <Redirect> outside a <Router>") : 0 : void 0;
    var history = context.history,
        staticContext = context.staticContext;
    var method = push ? history.push : history.replace;
    var location = (0,history__WEBPACK_IMPORTED_MODULE_11__.createLocation)(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__["default"])({}, to, {
      pathname: generatePath(to.pathname, computedMatch.params)
    }) : to); // When rendering in a static context,
    // set the new location immediately.

    if (staticContext) {
      method(location);
      return null;
    }

    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Lifecycle, {
      onMount: function onMount() {
        method(location);
      },
      onUpdate: function onUpdate(self, prevProps) {
        var prevLocation = (0,history__WEBPACK_IMPORTED_MODULE_11__.createLocation)(prevProps.to);

        if (!(0,history__WEBPACK_IMPORTED_MODULE_11__.locationsAreEqual)(prevLocation, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__["default"])({}, location, {
          key: prevLocation.key
        }))) {
          method(location);
        }
      },
      to: to
    });
  });
}

if (true) {
  Redirect.propTypes = {
    push: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().bool),
    from: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().string),
    to: prop_types__WEBPACK_IMPORTED_MODULE_9___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_9___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_9___default().object)]).isRequired
  };
}

var cache$1 = {};
var cacheLimit$1 = 10000;
var cacheCount$1 = 0;

function compilePath$1(path, options) {
  var cacheKey = "" + options.end + options.strict + options.sensitive;
  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
  if (pathCache[path]) return pathCache[path];
  var keys = [];
  var regexp = path_to_regexp__WEBPACK_IMPORTED_MODULE_5___default()(path, keys, options);
  var result = {
    regexp: regexp,
    keys: keys
  };

  if (cacheCount$1 < cacheLimit$1) {
    pathCache[path] = result;
    cacheCount$1++;
  }

  return result;
}
/**
 * Public API for matching a URL pathname to a path.
 */


function matchPath(pathname, options) {
  if (options === void 0) {
    options = {};
  }

  if (typeof options === "string" || Array.isArray(options)) {
    options = {
      path: options
    };
  }

  var _options = options,
      path = _options.path,
      _options$exact = _options.exact,
      exact = _options$exact === void 0 ? false : _options$exact,
      _options$strict = _options.strict,
      strict = _options$strict === void 0 ? false : _options$strict,
      _options$sensitive = _options.sensitive,
      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
  var paths = [].concat(path);
  return paths.reduce(function (matched, path) {
    if (!path && path !== "") return null;
    if (matched) return matched;

    var _compilePath = compilePath$1(path, {
      end: exact,
      strict: strict,
      sensitive: sensitive
    }),
        regexp = _compilePath.regexp,
        keys = _compilePath.keys;

    var match = regexp.exec(pathname);
    if (!match) return null;
    var url = match[0],
        values = match.slice(1);
    var isExact = pathname === url;
    if (exact && !isExact) return null;
    return {
      path: path,
      // the path used to match
      url: path === "/" && url === "" ? "/" : url,
      // the matched portion of the URL
      isExact: isExact,
      // whether or not we matched exactly
      params: keys.reduce(function (memo, key, index) {
        memo[key.name] = values[index];
        return memo;
      }, {})
    };
  }, null);
}

function isEmptyChildren(children) {
  return react__WEBPACK_IMPORTED_MODULE_1___default().Children.count(children) === 0;
}

function evalChildrenDev(children, props, path) {
  var value = children(props);
   true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_10__["default"])(value !== undefined, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`") : 0;
  return value || null;
}
/**
 * The public API for matching a single path and rendering.
 */


var Route = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(Route, _React$Component);

  function Route() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Route.prototype;

  _proto.render = function render() {
    var _this = this;

    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(context.Consumer, null, function (context$1) {
      !context$1 ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, "You should not use <Route> outside a <Router>") : 0 : void 0;
      var location = _this.props.location || context$1.location;
      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;

      var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__["default"])({}, context$1, {
        location: location,
        match: match
      });

      var _this$props = _this.props,
          children = _this$props.children,
          component = _this$props.component,
          render = _this$props.render; // Preact uses an empty array as children by
      // default, so use null if that's the case.

      if (Array.isArray(children) && isEmptyChildren(children)) {
        children = null;
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(context.Provider, {
        value: props
      }, props.match ? children ? typeof children === "function" ?  true ? evalChildrenDev(children, props, _this.props.path) : 0 : children : component ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  true ? evalChildrenDev(children, props, _this.props.path) : 0 : null);
    });
  };

  return Route;
}((react__WEBPACK_IMPORTED_MODULE_1___default().Component));

if (true) {
  Route.propTypes = {
    children: prop_types__WEBPACK_IMPORTED_MODULE_9___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_9___default().func), (prop_types__WEBPACK_IMPORTED_MODULE_9___default().node)]),
    component: function component(props, propName) {
      if (props[propName] && !(0,react_is__WEBPACK_IMPORTED_MODULE_6__.isValidElementType)(props[propName])) {
        return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
      }
    },
    exact: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().bool),
    location: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().object),
    path: prop_types__WEBPACK_IMPORTED_MODULE_9___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_9___default().string), prop_types__WEBPACK_IMPORTED_MODULE_9___default().arrayOf((prop_types__WEBPACK_IMPORTED_MODULE_9___default().string))]),
    render: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().func),
    sensitive: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().bool),
    strict: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().bool)
  };

  Route.prototype.componentDidMount = function () {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_10__["default"])(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") : 0;
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_10__["default"])(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") : 0;
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_10__["default"])(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") : 0;
  };

  Route.prototype.componentDidUpdate = function (prevProps) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_10__["default"])(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : 0;
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_10__["default"])(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : 0;
  };
}

function addLeadingSlash(path) {
  return path.charAt(0) === "/" ? path : "/" + path;
}

function addBasename(basename, location) {
  if (!basename) return location;
  return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__["default"])({}, location, {
    pathname: addLeadingSlash(basename) + location.pathname
  });
}

function stripBasename(basename, location) {
  if (!basename) return location;
  var base = addLeadingSlash(basename);
  if (location.pathname.indexOf(base) !== 0) return location;
  return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__["default"])({}, location, {
    pathname: location.pathname.substr(base.length)
  });
}

function createURL(location) {
  return typeof location === "string" ? location : (0,history__WEBPACK_IMPORTED_MODULE_11__.createPath)(location);
}

function staticHandler(methodName) {
  return function () {
      true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, "You cannot %s with <StaticRouter>", methodName) : 0 ;
  };
}

function noop() {}
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */


var StaticRouter = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(StaticRouter, _React$Component);

  function StaticRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.handlePush = function (location) {
      return _this.navigateTo(location, "PUSH");
    };

    _this.handleReplace = function (location) {
      return _this.navigateTo(location, "REPLACE");
    };

    _this.handleListen = function () {
      return noop;
    };

    _this.handleBlock = function () {
      return noop;
    };

    return _this;
  }

  var _proto = StaticRouter.prototype;

  _proto.navigateTo = function navigateTo(location, action) {
    var _this$props = this.props,
        _this$props$basename = _this$props.basename,
        basename = _this$props$basename === void 0 ? "" : _this$props$basename,
        _this$props$context = _this$props.context,
        context = _this$props$context === void 0 ? {} : _this$props$context;
    context.action = action;
    context.location = addBasename(basename, (0,history__WEBPACK_IMPORTED_MODULE_11__.createLocation)(location));
    context.url = createURL(context.location);
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        _this$props2$basename = _this$props2.basename,
        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,
        _this$props2$context = _this$props2.context,
        context = _this$props2$context === void 0 ? {} : _this$props2$context,
        _this$props2$location = _this$props2.location,
        location = _this$props2$location === void 0 ? "/" : _this$props2$location,
        rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__["default"])(_this$props2, ["basename", "context", "location"]);

    var history = {
      createHref: function createHref(path) {
        return addLeadingSlash(basename + createURL(path));
      },
      action: "POP",
      location: stripBasename(basename, (0,history__WEBPACK_IMPORTED_MODULE_11__.createLocation)(location)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler("go"),
      goBack: staticHandler("goBack"),
      goForward: staticHandler("goForward"),
      listen: this.handleListen,
      block: this.handleBlock
    };
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Router, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__["default"])({}, rest, {
      history: history,
      staticContext: context
    }));
  };

  return StaticRouter;
}((react__WEBPACK_IMPORTED_MODULE_1___default().Component));

if (true) {
  StaticRouter.propTypes = {
    basename: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().string),
    context: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().object),
    location: prop_types__WEBPACK_IMPORTED_MODULE_9___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_9___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_9___default().object)])
  };

  StaticRouter.prototype.componentDidMount = function () {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_10__["default"])(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.") : 0;
  };
}

/**
 * The public API for rendering the first <Route> that matches.
 */

var Switch = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(Switch, _React$Component);

  function Switch() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Switch.prototype;

  _proto.render = function render() {
    var _this = this;

    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(context.Consumer, null, function (context) {
      !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, "You should not use <Switch> outside a <Router>") : 0 : void 0;
      var location = _this.props.location || context.location;
      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
      // here because toArray adds keys to all child elements and we do not want
      // to trigger an unmount/remount for two <Route>s that render the same
      // component at different URLs.

      react__WEBPACK_IMPORTED_MODULE_1___default().Children.forEach(_this.props.children, function (child) {
        if (match == null && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().isValidElement(child)) {
          element = child;
          var path = child.props.path || child.props.from;
          match = path ? matchPath(location.pathname, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__["default"])({}, child.props, {
            path: path
          })) : context.match;
        }
      });
      return match ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().cloneElement(element, {
        location: location,
        computedMatch: match
      }) : null;
    });
  };

  return Switch;
}((react__WEBPACK_IMPORTED_MODULE_1___default().Component));

if (true) {
  Switch.propTypes = {
    children: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().node),
    location: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().object)
  };

  Switch.prototype.componentDidUpdate = function (prevProps) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_10__["default"])(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : 0;
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_10__["default"])(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : 0;
  };
}

/**
 * A public higher-order component to access the imperative API
 */

function withRouter(Component) {
  var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";

  var C = function C(props) {
    var wrappedComponentRef = props.wrappedComponentRef,
        remainingProps = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__["default"])(props, ["wrappedComponentRef"]);

    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(context.Consumer, null, function (context) {
      !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, "You should not use <" + displayName + " /> outside a <Router>") : 0 : void 0;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Component, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__["default"])({}, remainingProps, context, {
        ref: wrappedComponentRef
      }));
    });
  };

  C.displayName = displayName;
  C.WrappedComponent = Component;

  if (true) {
    C.propTypes = {
      wrappedComponentRef: prop_types__WEBPACK_IMPORTED_MODULE_9___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_9___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_9___default().func), (prop_types__WEBPACK_IMPORTED_MODULE_9___default().object)])
    };
  }

  return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8___default()(C, Component);
}

var useContext = (react__WEBPACK_IMPORTED_MODULE_1___default().useContext);
function useHistory() {
  if (true) {
    !(typeof useContext === "function") ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, "You must use React >= 16.8 in order to use useHistory()") : 0 : void 0;
  }

  return useContext(historyContext);
}
function useLocation() {
  if (true) {
    !(typeof useContext === "function") ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, "You must use React >= 16.8 in order to use useLocation()") : 0 : void 0;
  }

  return useContext(context).location;
}
function useParams() {
  if (true) {
    !(typeof useContext === "function") ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, "You must use React >= 16.8 in order to use useParams()") : 0 : void 0;
  }

  var match = useContext(context).match;
  return match ? match.params : {};
}
function useRouteMatch(path) {
  if (true) {
    !(typeof useContext === "function") ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__["default"])(false, "You must use React >= 16.8 in order to use useRouteMatch()") : 0 : void 0;
  }

  var location = useLocation();
  var match = useContext(context).match;
  return path ? matchPath(location.pathname, path) : match;
}

if (true) {
  if (typeof window !== "undefined") {
    var global = window;
    var key = "__react_router_build__";
    var buildNames = {
      cjs: "CommonJS",
      esm: "ES modules",
      umd: "UMD"
    };

    if (global[key] && global[key] !== "esm") {
      var initialBuildName = buildNames[global[key]];
      var secondaryBuildName = buildNames["esm"]; // TODO: Add link to article that explains in detail how to avoid
      // loading 2 different builds.

      throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
    }

    global[key] = "esm";
  }
}




/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types.
var REACT_ELEMENT_TYPE = Symbol.for('react.element');
var REACT_PORTAL_TYPE = Symbol.for('react.portal');
var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
var REACT_CONTEXT_TYPE = Symbol.for('react.context');
var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
var REACT_MEMO_TYPE = Symbol.for('react.memo');
var REACT_LAZY_TYPE = Symbol.for('react.lazy');
var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

function error(format) {
  {
    {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      printWarning('error', format, args);
    }
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    } // eslint-disable-next-line react-internal/safe-string-coercion


    var argsWithFormat = args.map(function (item) {
      return String(item);
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

// -----------------------------------------------------------------------------

var enableScopeAPI = false; // Experimental Create Event Handle API.
var enableCacheElement = false;
var enableTransitionTracing = false; // No known bugs, but needs performance testing

var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
// stuff. Intended to enable React core members to more easily debug scheduling
// issues in DEV builds.

var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

var REACT_MODULE_REFERENCE;

{
  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
}

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
    // types supported by any Flight configuration anywhere since
    // we don't know which Flight build this will end up being used
    // with.
    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
      return true;
    }
  }

  return false;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var displayName = outerType.displayName;

  if (displayName) {
    return displayName;
  }

  var functionName = innerType.displayName || innerType.name || '';
  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
} // Keep in sync with react-reconciler/getComponentNameFromFiber


function getContextName(type) {
  return type.displayName || 'Context';
} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


function getComponentNameFromType(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';

  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        var outerName = type.displayName || null;

        if (outerName !== null) {
          return outerName;
        }

        return getComponentNameFromType(type.type) || 'Memo';

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentNameFromType(init(payload));
          } catch (x) {
            return null;
          }
        }

      // eslint-disable-next-line no-fallthrough
    }
  }

  return null;
}

var assign = Object.assign;

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: assign({}, props, {
          value: prevLog
        }),
        info: assign({}, props, {
          value: prevInfo
        }),
        warn: assign({}, props, {
          value: prevWarn
        }),
        error: assign({}, props, {
          value: prevError
        }),
        group: assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if ( !fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                // but we have a user-provided "displayName"
                // splice it in to make the stack more readable.


                if (fn.displayName && _frame.includes('<anonymous>')) {
                  _frame = _frame.replace('<anonymous>', fn.displayName);
                }

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var hasOwnProperty = Object.prototype.hasOwnProperty;

var loggedTypeFailures = {};
var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            // eslint-disable-next-line react-internal/prod-error-codes
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

function isArray(a) {
  return isArrayImpl(a);
}

/*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */
// $FlowFixMe only called in DEV, so void return is not possible.
function typeName(value) {
  {
    // toStringTag is needed for namespaced types like Temporal.Instant
    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
    return type;
  }
} // $FlowFixMe only called in DEV, so void return is not possible.


function willCoercionThrow(value) {
  {
    try {
      testStringCoercion(value);
      return false;
    } catch (e) {
      return true;
    }
  }
}

function testStringCoercion(value) {
  // If you ended up here by following an exception call stack, here's what's
  // happened: you supplied an object or symbol value to React (as a prop, key,
  // DOM attribute, CSS property, string ref, etc.) and when React tried to
  // coerce it to a string using `'' + value`, an exception was thrown.
  //
  // The most common types that will cause this exception are `Symbol` instances
  // and Temporal objects like `Temporal.Instant`. But any object that has a
  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
  // exception. (Library authors do this to prevent users from using built-in
  // numeric operators like `+` or comparison operators like `>=` because custom
  // methods are needed to perform accurate arithmetic or comparison.)
  //
  // To fix the problem, coerce this object or symbol value to a string before
  // passing it to React. The most reliable way is usually `String(value)`.
  //
  // To find which value is throwing, check the browser or debugger console.
  // Before this exception was thrown, there should be `console.error` output
  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
  // problem and how that type was used: key, atrribute, input value prop, etc.
  // In most cases, this console output also shows the component and its
  // ancestor components where the exception happened.
  //
  // eslint-disable-next-line react-internal/safe-string-coercion
  return '' + value;
}
function checkKeyStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown;
var specialPropRefWarningShown;
var didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function warnIfStringRefCannotBeAutoConverted(config, self) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}

function defineKeyPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingKey = function () {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingKey.isReactWarning = true;
    Object.defineProperty(props, 'key', {
      get: warnAboutAccessingKey,
      configurable: true
    });
  }
}

function defineRefPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingRef = function () {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingRef.isReactWarning = true;
    Object.defineProperty(props, 'ref', {
      get: warnAboutAccessingRef,
      configurable: true
    });
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */

function jsxDEV(type, config, maybeKey, source, self) {
  {
    var propName; // Reserved names are extracted

    var props = {};
    var key = null;
    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
    // but as an intermediary step, we will use jsxDEV for everything except
    // <div {...props} key="Hi" />, because we aren't currently able to tell if
    // key is explicitly declared to be undefined or not.

    if (maybeKey !== undefined) {
      {
        checkKeyStringCoercion(maybeKey);
      }

      key = '' + maybeKey;
    }

    if (hasValidKey(config)) {
      {
        checkKeyStringCoercion(config.key);
      }

      key = '' + config.key;
    }

    if (hasValidRef(config)) {
      ref = config.ref;
      warnIfStringRefCannotBeAutoConverted(config, self);
    } // Remaining properties are added to a new props object


    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    } // Resolve default props


    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;

      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
    }

    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }

    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
  }
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */


function isValidElement(object) {
  {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
}

function getDeclarationErrorAddendum() {
  {
    if (ReactCurrentOwner$1.current) {
      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);

      if (name) {
        return '\n\nCheck the render method of `' + name + '`.';
      }
    }

    return '';
  }
}

function getSourceInfoErrorAddendum(source) {
  {
    if (source !== undefined) {
      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
      var lineNumber = source.lineNumber;
      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
    }

    return '';
  }
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  {
    var info = getDeclarationErrorAddendum();

    if (!info) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

      if (parentName) {
        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
      }
    }

    return info;
  }
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }

    element._store.validated = true;
    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
    // property, it may be the creator of the child that's responsible for
    // assigning it a key.

    var childOwner = '';

    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
      // Give the component that originally created this child.
      childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
    }

    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  {
    if (typeof node !== 'object') {
      return;
    }

    if (isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];

        if (isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (isValidElement(node)) {
      // This element was passed in a valid location.
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn(node);

      if (typeof iteratorFn === 'function') {
        // Entry iterators used to provide implicit keys,
        // but now we print a separate warning for them later.
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;

          while (!(step = iterator.next()).done) {
            if (isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentNameFromType(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentNameFromType(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}

function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
  {
    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.

    if (!validType) {
      var info = '';

      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
      }

      var sourceInfo = getSourceInfoErrorAddendum(source);

      if (sourceInfo) {
        info += sourceInfo;
      } else {
        info += getDeclarationErrorAddendum();
      }

      var typeString;

      if (type === null) {
        typeString = 'null';
      } else if (isArray(type)) {
        typeString = 'array';
      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
        typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
        info = ' Did you accidentally export a JSX literal instead of a component?';
      } else {
        typeString = typeof type;
      }

      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }

    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.

    if (element == null) {
      return element;
    } // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)


    if (validType) {
      var children = props.children;

      if (children !== undefined) {
        if (isStaticChildren) {
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              validateChildKeys(children[i], type);
            }

            if (Object.freeze) {
              Object.freeze(children);
            }
          } else {
            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
          }
        } else {
          validateChildKeys(children, type);
        }
      }
    }

    if (type === REACT_FRAGMENT_TYPE) {
      validateFragmentProps(element);
    } else {
      validatePropTypes(element);
    }

    return element;
  }
} // These two functions exist to still get child warnings in dev

var jsxDEV$1 =  jsxWithValidation ;

exports.Fragment = REACT_FRAGMENT_TYPE;
exports.jsxDEV = jsxDEV$1;
  })();
}


/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-runtime.development.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-runtime.development.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types.
var REACT_ELEMENT_TYPE = Symbol.for('react.element');
var REACT_PORTAL_TYPE = Symbol.for('react.portal');
var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
var REACT_CONTEXT_TYPE = Symbol.for('react.context');
var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
var REACT_MEMO_TYPE = Symbol.for('react.memo');
var REACT_LAZY_TYPE = Symbol.for('react.lazy');
var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

function error(format) {
  {
    {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      printWarning('error', format, args);
    }
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    } // eslint-disable-next-line react-internal/safe-string-coercion


    var argsWithFormat = args.map(function (item) {
      return String(item);
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

// -----------------------------------------------------------------------------

var enableScopeAPI = false; // Experimental Create Event Handle API.
var enableCacheElement = false;
var enableTransitionTracing = false; // No known bugs, but needs performance testing

var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
// stuff. Intended to enable React core members to more easily debug scheduling
// issues in DEV builds.

var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

var REACT_MODULE_REFERENCE;

{
  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
}

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
    // types supported by any Flight configuration anywhere since
    // we don't know which Flight build this will end up being used
    // with.
    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
      return true;
    }
  }

  return false;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var displayName = outerType.displayName;

  if (displayName) {
    return displayName;
  }

  var functionName = innerType.displayName || innerType.name || '';
  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
} // Keep in sync with react-reconciler/getComponentNameFromFiber


function getContextName(type) {
  return type.displayName || 'Context';
} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


function getComponentNameFromType(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';

  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        var outerName = type.displayName || null;

        if (outerName !== null) {
          return outerName;
        }

        return getComponentNameFromType(type.type) || 'Memo';

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentNameFromType(init(payload));
          } catch (x) {
            return null;
          }
        }

      // eslint-disable-next-line no-fallthrough
    }
  }

  return null;
}

var assign = Object.assign;

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: assign({}, props, {
          value: prevLog
        }),
        info: assign({}, props, {
          value: prevInfo
        }),
        warn: assign({}, props, {
          value: prevWarn
        }),
        error: assign({}, props, {
          value: prevError
        }),
        group: assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if ( !fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                // but we have a user-provided "displayName"
                // splice it in to make the stack more readable.


                if (fn.displayName && _frame.includes('<anonymous>')) {
                  _frame = _frame.replace('<anonymous>', fn.displayName);
                }

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var hasOwnProperty = Object.prototype.hasOwnProperty;

var loggedTypeFailures = {};
var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            // eslint-disable-next-line react-internal/prod-error-codes
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

function isArray(a) {
  return isArrayImpl(a);
}

/*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */
// $FlowFixMe only called in DEV, so void return is not possible.
function typeName(value) {
  {
    // toStringTag is needed for namespaced types like Temporal.Instant
    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
    return type;
  }
} // $FlowFixMe only called in DEV, so void return is not possible.


function willCoercionThrow(value) {
  {
    try {
      testStringCoercion(value);
      return false;
    } catch (e) {
      return true;
    }
  }
}

function testStringCoercion(value) {
  // If you ended up here by following an exception call stack, here's what's
  // happened: you supplied an object or symbol value to React (as a prop, key,
  // DOM attribute, CSS property, string ref, etc.) and when React tried to
  // coerce it to a string using `'' + value`, an exception was thrown.
  //
  // The most common types that will cause this exception are `Symbol` instances
  // and Temporal objects like `Temporal.Instant`. But any object that has a
  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
  // exception. (Library authors do this to prevent users from using built-in
  // numeric operators like `+` or comparison operators like `>=` because custom
  // methods are needed to perform accurate arithmetic or comparison.)
  //
  // To fix the problem, coerce this object or symbol value to a string before
  // passing it to React. The most reliable way is usually `String(value)`.
  //
  // To find which value is throwing, check the browser or debugger console.
  // Before this exception was thrown, there should be `console.error` output
  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
  // problem and how that type was used: key, atrribute, input value prop, etc.
  // In most cases, this console output also shows the component and its
  // ancestor components where the exception happened.
  //
  // eslint-disable-next-line react-internal/safe-string-coercion
  return '' + value;
}
function checkKeyStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown;
var specialPropRefWarningShown;
var didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function warnIfStringRefCannotBeAutoConverted(config, self) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}

function defineKeyPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingKey = function () {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingKey.isReactWarning = true;
    Object.defineProperty(props, 'key', {
      get: warnAboutAccessingKey,
      configurable: true
    });
  }
}

function defineRefPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingRef = function () {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingRef.isReactWarning = true;
    Object.defineProperty(props, 'ref', {
      get: warnAboutAccessingRef,
      configurable: true
    });
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */

function jsxDEV(type, config, maybeKey, source, self) {
  {
    var propName; // Reserved names are extracted

    var props = {};
    var key = null;
    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
    // but as an intermediary step, we will use jsxDEV for everything except
    // <div {...props} key="Hi" />, because we aren't currently able to tell if
    // key is explicitly declared to be undefined or not.

    if (maybeKey !== undefined) {
      {
        checkKeyStringCoercion(maybeKey);
      }

      key = '' + maybeKey;
    }

    if (hasValidKey(config)) {
      {
        checkKeyStringCoercion(config.key);
      }

      key = '' + config.key;
    }

    if (hasValidRef(config)) {
      ref = config.ref;
      warnIfStringRefCannotBeAutoConverted(config, self);
    } // Remaining properties are added to a new props object


    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    } // Resolve default props


    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;

      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
    }

    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }

    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
  }
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */


function isValidElement(object) {
  {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
}

function getDeclarationErrorAddendum() {
  {
    if (ReactCurrentOwner$1.current) {
      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);

      if (name) {
        return '\n\nCheck the render method of `' + name + '`.';
      }
    }

    return '';
  }
}

function getSourceInfoErrorAddendum(source) {
  {
    if (source !== undefined) {
      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
      var lineNumber = source.lineNumber;
      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
    }

    return '';
  }
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  {
    var info = getDeclarationErrorAddendum();

    if (!info) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

      if (parentName) {
        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
      }
    }

    return info;
  }
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }

    element._store.validated = true;
    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
    // property, it may be the creator of the child that's responsible for
    // assigning it a key.

    var childOwner = '';

    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
      // Give the component that originally created this child.
      childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
    }

    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  {
    if (typeof node !== 'object') {
      return;
    }

    if (isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];

        if (isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (isValidElement(node)) {
      // This element was passed in a valid location.
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn(node);

      if (typeof iteratorFn === 'function') {
        // Entry iterators used to provide implicit keys,
        // but now we print a separate warning for them later.
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;

          while (!(step = iterator.next()).done) {
            if (isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentNameFromType(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentNameFromType(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}

function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
  {
    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.

    if (!validType) {
      var info = '';

      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
      }

      var sourceInfo = getSourceInfoErrorAddendum(source);

      if (sourceInfo) {
        info += sourceInfo;
      } else {
        info += getDeclarationErrorAddendum();
      }

      var typeString;

      if (type === null) {
        typeString = 'null';
      } else if (isArray(type)) {
        typeString = 'array';
      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
        typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
        info = ' Did you accidentally export a JSX literal instead of a component?';
      } else {
        typeString = typeof type;
      }

      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }

    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.

    if (element == null) {
      return element;
    } // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)


    if (validType) {
      var children = props.children;

      if (children !== undefined) {
        if (isStaticChildren) {
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              validateChildKeys(children[i], type);
            }

            if (Object.freeze) {
              Object.freeze(children);
            }
          } else {
            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
          }
        } else {
          validateChildKeys(children, type);
        }
      }
    }

    if (type === REACT_FRAGMENT_TYPE) {
      validateFragmentProps(element);
    } else {
      validatePropTypes(element);
    }

    return element;
  }
} // These two functions exist to still get child warnings in dev
// even with the prod transform. This means that jsxDEV is purely
// opt-in behavior for better messages but that we won't stop
// giving you warnings if you use production apis.

function jsxWithValidationStatic(type, props, key) {
  {
    return jsxWithValidation(type, props, key, true);
  }
}
function jsxWithValidationDynamic(type, props, key) {
  {
    return jsxWithValidation(type, props, key, false);
  }
}

var jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.
// for now we can ship identical prod functions

var jsxs =  jsxWithValidationStatic ;

exports.Fragment = REACT_FRAGMENT_TYPE;
exports.jsx = jsx;
exports.jsxs = jsxs;
  })();
}


/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {

          'use strict';

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
}
          var ReactVersion = '18.2.0';

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types.
var REACT_ELEMENT_TYPE = Symbol.for('react.element');
var REACT_PORTAL_TYPE = Symbol.for('react.portal');
var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
var REACT_CONTEXT_TYPE = Symbol.for('react.context');
var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
var REACT_MEMO_TYPE = Symbol.for('react.memo');
var REACT_LAZY_TYPE = Symbol.for('react.lazy');
var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  transition: null
};

var ReactCurrentActQueue = {
  current: null,
  // Used to reproduce behavior of `batchedUpdates` in legacy mode.
  isBatchingLegacy: false,
  didScheduleLegacyUpdate: false
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var ReactDebugCurrentFrame = {};
var currentExtraStackFrame = null;
function setExtraStackFrame(stack) {
  {
    currentExtraStackFrame = stack;
  }
}

{
  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
    {
      currentExtraStackFrame = stack;
    }
  }; // Stack implementation injected by the current renderer.


  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentExtraStackFrame) {
      stack += currentExtraStackFrame;
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

// -----------------------------------------------------------------------------

var enableScopeAPI = false; // Experimental Create Event Handle API.
var enableCacheElement = false;
var enableTransitionTracing = false; // No known bugs, but needs performance testing

var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
// stuff. Intended to enable React core members to more easily debug scheduling
// issues in DEV builds.

var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner
};

{
  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      printWarning('warn', format, args);
    }
  }
}
function error(format) {
  {
    {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      printWarning('error', format, args);
    }
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    } // eslint-disable-next-line react-internal/safe-string-coercion


    var argsWithFormat = args.map(function (item) {
      return String(item);
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var assign = Object.assign;

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

assign(pureComponentPrototype, Component.prototype);
pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

function isArray(a) {
  return isArrayImpl(a);
}

/*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */
// $FlowFixMe only called in DEV, so void return is not possible.
function typeName(value) {
  {
    // toStringTag is needed for namespaced types like Temporal.Instant
    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
    return type;
  }
} // $FlowFixMe only called in DEV, so void return is not possible.


function willCoercionThrow(value) {
  {
    try {
      testStringCoercion(value);
      return false;
    } catch (e) {
      return true;
    }
  }
}

function testStringCoercion(value) {
  // If you ended up here by following an exception call stack, here's what's
  // happened: you supplied an object or symbol value to React (as a prop, key,
  // DOM attribute, CSS property, string ref, etc.) and when React tried to
  // coerce it to a string using `'' + value`, an exception was thrown.
  //
  // The most common types that will cause this exception are `Symbol` instances
  // and Temporal objects like `Temporal.Instant`. But any object that has a
  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
  // exception. (Library authors do this to prevent users from using built-in
  // numeric operators like `+` or comparison operators like `>=` because custom
  // methods are needed to perform accurate arithmetic or comparison.)
  //
  // To fix the problem, coerce this object or symbol value to a string before
  // passing it to React. The most reliable way is usually `String(value)`.
  //
  // To find which value is throwing, check the browser or debugger console.
  // Before this exception was thrown, there should be `console.error` output
  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
  // problem and how that type was used: key, atrribute, input value prop, etc.
  // In most cases, this console output also shows the component and its
  // ancestor components where the exception happened.
  //
  // eslint-disable-next-line react-internal/safe-string-coercion
  return '' + value;
}
function checkKeyStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var displayName = outerType.displayName;

  if (displayName) {
    return displayName;
  }

  var functionName = innerType.displayName || innerType.name || '';
  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
} // Keep in sync with react-reconciler/getComponentNameFromFiber


function getContextName(type) {
  return type.displayName || 'Context';
} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


function getComponentNameFromType(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';

  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        var outerName = type.displayName || null;

        if (outerName !== null) {
          return outerName;
        }

        return getComponentNameFromType(type.type) || 'Memo';

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentNameFromType(init(payload));
          } catch (x) {
            return null;
          }
        }

      // eslint-disable-next-line no-fallthrough
    }
  }

  return null;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      {
        checkKeyStringCoercion(config.key);
      }

      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (element === null || element === undefined) {
    throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
  }

  var propName; // Original props are copied

  var props = assign({}, element.props); // Reserved names are extracted

  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      {
        checkKeyStringCoercion(config.key);
      }

      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = key.replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return text.replace(userProvidedKeyEscapeRegex, '$&/');
}
/**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getElementKey(element, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof element === 'object' && element !== null && element.key != null) {
    // Explicit key
    {
      checkKeyStringCoercion(element.key);
    }

    return escape('' + element.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    var _child = children;
    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows:

    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

    if (isArray(mappedChild)) {
      var escapedChildKey = '';

      if (childKey != null) {
        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
      }

      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
        return c;
      });
    } else if (mappedChild != null) {
      if (isValidElement(mappedChild)) {
        {
          // The `if` statement here prevents auto-disabling of the safe
          // coercion ESLint rule, so we must manually disable it below.
          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
            checkKeyStringCoercion(mappedChild.key);
          }
        }

        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
        // eslint-disable-next-line react-internal/safe-string-coercion
        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
      }

      array.push(mappedChild);
    }

    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getElementKey(child, i);
      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {
      var iterableChildren = children;

      {
        // Warn about using Maps as children
        if (iteratorFn === iterableChildren.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(iterableChildren);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getElementKey(child, ii++);
        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
      }
    } else if (type === 'object') {
      // eslint-disable-next-line react-internal/safe-string-coercion
      var childrenString = String(children);
      throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
    }
  }

  return subtreeCount;
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  var count = 0;
  mapIntoArray(children, result, '', '', function (child) {
    return func.call(context, child, count++);
  });
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  var n = 0;
  mapChildren(children, function () {
    n++; // Don't return anything
  });
  return n;
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  mapChildren(children, function () {
    forEachFunc.apply(this, arguments); // Don't return anything.
  }, forEachContext);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  return mapChildren(children, function (child) {
    return child;
  }) || [];
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    throw new Error('React.Children.only expected to receive a single React element child.');
  }

  return children;
}

function createContext(defaultValue) {
  // TODO: Second argument used to be an optional `calculateChangedBits`
  // function. Warn to reserve for future use?
  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null,
    // Add these to use same hidden class in VM as ServerContext
    _defaultValue: null,
    _globalName: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;
  var hasWarnedAboutDisplayNameOnConsumer = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      },
      displayName: {
        get: function () {
          return context.displayName;
        },
        set: function (displayName) {
          if (!hasWarnedAboutDisplayNameOnConsumer) {
            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

            hasWarnedAboutDisplayNameOnConsumer = true;
          }
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;

function lazyInitializer(payload) {
  if (payload._status === Uninitialized) {
    var ctor = payload._result;
    var thenable = ctor(); // Transition to the next state.
    // This might throw either because it's missing or throws. If so, we treat it
    // as still uninitialized and try again next time. Which is the same as what
    // happens if the ctor or any wrappers processing the ctor throws. This might
    // end up fixing it if the resolution was a concurrency bug.

    thenable.then(function (moduleObject) {
      if (payload._status === Pending || payload._status === Uninitialized) {
        // Transition to the next state.
        var resolved = payload;
        resolved._status = Resolved;
        resolved._result = moduleObject;
      }
    }, function (error) {
      if (payload._status === Pending || payload._status === Uninitialized) {
        // Transition to the next state.
        var rejected = payload;
        rejected._status = Rejected;
        rejected._result = error;
      }
    });

    if (payload._status === Uninitialized) {
      // In case, we're still uninitialized, then we're waiting for the thenable
      // to resolve. Set it as pending in the meantime.
      var pending = payload;
      pending._status = Pending;
      pending._result = thenable;
    }
  }

  if (payload._status === Resolved) {
    var moduleObject = payload._result;

    {
      if (moduleObject === undefined) {
        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
      }
    }

    {
      if (!('default' in moduleObject)) {
        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
      }
    }

    return moduleObject.default;
  } else {
    throw payload._result;
  }
}

function lazy(ctor) {
  var payload = {
    // We use these fields to store the result.
    _status: Uninitialized,
    _result: ctor
  };
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _payload: payload,
    _init: lazyInitializer
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes; // $FlowFixMe

    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  var elementType = {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name; // The inner component shouldn't inherit this display name in most cases,
        // because the component may be used elsewhere.
        // But it's nice for anonymous functions to inherit the name,
        // so that our component-stack generation logic will display their frames.
        // An anonymous function generally suggests a pattern like:
        //   React.forwardRef((props, ref) => {...});
        // This kind of inner function is not used elsewhere so the side effect is okay.

        if (!render.name && !render.displayName) {
          render.displayName = name;
        }
      }
    });
  }

  return elementType;
}

var REACT_MODULE_REFERENCE;

{
  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
}

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
    // types supported by any Flight configuration anywhere since
    // we don't know which Flight build this will end up being used
    // with.
    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
      return true;
    }
  }

  return false;
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  var elementType = {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name; // The inner component shouldn't inherit this display name in most cases,
        // because the component may be used elsewhere.
        // But it's nice for anonymous functions to inherit the name,
        // so that our component-stack generation logic will display their frames.
        // An anonymous function generally suggests a pattern like:
        //   React.memo((props) => {...});
        // This kind of inner function is not used elsewhere so the side effect is okay.

        if (!type.name && !type.displayName) {
          type.displayName = name;
        }
      }
    });
  }

  return elementType;
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  {
    if (dispatcher === null) {
      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
    }
  } // Will result in a null access error if accessed outside render phase. We
  // intentionally don't throw our own error because this is in a hot path.
  // Also helps ensure this is inlined.


  return dispatcher;
}
function useContext(Context) {
  var dispatcher = resolveDispatcher();

  {
    // TODO: add a more generic warning for invalid values.
    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useInsertionEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useInsertionEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}
function useTransition() {
  var dispatcher = resolveDispatcher();
  return dispatcher.useTransition();
}
function useDeferredValue(value) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useDeferredValue(value);
}
function useId() {
  var dispatcher = resolveDispatcher();
  return dispatcher.useId();
}
function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: assign({}, props, {
          value: prevLog
        }),
        info: assign({}, props, {
          value: prevInfo
        }),
        warn: assign({}, props, {
          value: prevWarn
        }),
        error: assign({}, props, {
          value: prevError
        }),
        group: assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if ( !fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher$1.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                // but we have a user-provided "displayName"
                // splice it in to make the stack more readable.


                if (fn.displayName && _frame.includes('<anonymous>')) {
                  _frame = _frame.replace('<anonymous>', fn.displayName);
                }

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher$1.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            // eslint-disable-next-line react-internal/prod-error-codes
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      setExtraStackFrame(stack);
    } else {
      setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentNameFromType(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
  }

  {
    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentNameFromType(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentNameFromType(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

function startTransition(scope, options) {
  var prevTransition = ReactCurrentBatchConfig.transition;
  ReactCurrentBatchConfig.transition = {};
  var currentTransition = ReactCurrentBatchConfig.transition;

  {
    ReactCurrentBatchConfig.transition._updatedFibers = new Set();
  }

  try {
    scope();
  } finally {
    ReactCurrentBatchConfig.transition = prevTransition;

    {
      if (prevTransition === null && currentTransition._updatedFibers) {
        var updatedFibersCount = currentTransition._updatedFibers.size;

        if (updatedFibersCount > 10) {
          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
        }

        currentTransition._updatedFibers.clear();
      }
    }
  }
}

var didWarnAboutMessageChannel = false;
var enqueueTaskImpl = null;
function enqueueTask(task) {
  if (enqueueTaskImpl === null) {
    try {
      // read require off the module object to get around the bundlers.
      // we don't want them to detect a require and bundle a Node polyfill.
      var requireString = ('require' + Math.random()).slice(0, 7);
      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
      // version of setImmediate, bypassing fake timers if any.

      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
    } catch (_err) {
      // we're in a browser
      // we can't use regular timers because they may still be faked
      // so we try MessageChannel+postMessage instead
      enqueueTaskImpl = function (callback) {
        {
          if (didWarnAboutMessageChannel === false) {
            didWarnAboutMessageChannel = true;

            if (typeof MessageChannel === 'undefined') {
              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
            }
          }
        }

        var channel = new MessageChannel();
        channel.port1.onmessage = callback;
        channel.port2.postMessage(undefined);
      };
    }
  }

  return enqueueTaskImpl(task);
}

var actScopeDepth = 0;
var didWarnNoAwaitAct = false;
function act(callback) {
  {
    // `act` calls can be nested, so we track the depth. This represents the
    // number of `act` scopes on the stack.
    var prevActScopeDepth = actScopeDepth;
    actScopeDepth++;

    if (ReactCurrentActQueue.current === null) {
      // This is the outermost `act` scope. Initialize the queue. The reconciler
      // will detect the queue and use it instead of Scheduler.
      ReactCurrentActQueue.current = [];
    }

    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
    var result;

    try {
      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
      // set to `true` while the given callback is executed, not for updates
      // triggered during an async event, because this is how the legacy
      // implementation of `act` behaved.
      ReactCurrentActQueue.isBatchingLegacy = true;
      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
      // which flushed updates immediately after the scope function exits, even
      // if it's an async function.

      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
        var queue = ReactCurrentActQueue.current;

        if (queue !== null) {
          ReactCurrentActQueue.didScheduleLegacyUpdate = false;
          flushActQueue(queue);
        }
      }
    } catch (error) {
      popActScope(prevActScopeDepth);
      throw error;
    } finally {
      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
    }

    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
      // for it to resolve before exiting the current scope.

      var wasAwaited = false;
      var thenable = {
        then: function (resolve, reject) {
          wasAwaited = true;
          thenableResult.then(function (returnValue) {
            popActScope(prevActScopeDepth);

            if (actScopeDepth === 0) {
              // We've exited the outermost act scope. Recursively flush the
              // queue until there's no remaining work.
              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            } else {
              resolve(returnValue);
            }
          }, function (error) {
            // The callback threw an error.
            popActScope(prevActScopeDepth);
            reject(error);
          });
        }
      };

      {
        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
          // eslint-disable-next-line no-undef
          Promise.resolve().then(function () {}).then(function () {
            if (!wasAwaited) {
              didWarnNoAwaitAct = true;

              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
            }
          });
        }
      }

      return thenable;
    } else {
      var returnValue = result; // The callback is not an async function. Exit the current scope
      // immediately, without awaiting.

      popActScope(prevActScopeDepth);

      if (actScopeDepth === 0) {
        // Exiting the outermost act scope. Flush the queue.
        var _queue = ReactCurrentActQueue.current;

        if (_queue !== null) {
          flushActQueue(_queue);
          ReactCurrentActQueue.current = null;
        } // Return a thenable. If the user awaits it, we'll flush again in
        // case additional work was scheduled by a microtask.


        var _thenable = {
          then: function (resolve, reject) {
            // Confirm we haven't re-entered another `act` scope, in case
            // the user does something weird like await the thenable
            // multiple times.
            if (ReactCurrentActQueue.current === null) {
              // Recursively flush the queue until there's no remaining work.
              ReactCurrentActQueue.current = [];
              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            } else {
              resolve(returnValue);
            }
          }
        };
        return _thenable;
      } else {
        // Since we're inside a nested `act` scope, the returned thenable
        // immediately resolves. The outer scope will flush the queue.
        var _thenable2 = {
          then: function (resolve, reject) {
            resolve(returnValue);
          }
        };
        return _thenable2;
      }
    }
  }
}

function popActScope(prevActScopeDepth) {
  {
    if (prevActScopeDepth !== actScopeDepth - 1) {
      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
    }

    actScopeDepth = prevActScopeDepth;
  }
}

function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
  {
    var queue = ReactCurrentActQueue.current;

    if (queue !== null) {
      try {
        flushActQueue(queue);
        enqueueTask(function () {
          if (queue.length === 0) {
            // No additional work was scheduled. Finish.
            ReactCurrentActQueue.current = null;
            resolve(returnValue);
          } else {
            // Keep flushing work until there's none left.
            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
          }
        });
      } catch (error) {
        reject(error);
      }
    } else {
      resolve(returnValue);
    }
  }
}

var isFlushing = false;

function flushActQueue(queue) {
  {
    if (!isFlushing) {
      // Prevent re-entrance.
      isFlushing = true;
      var i = 0;

      try {
        for (; i < queue.length; i++) {
          var callback = queue[i];

          do {
            callback = callback(true);
          } while (callback !== null);
        }

        queue.length = 0;
      } catch (error) {
        // If something throws, leave the remaining callbacks on the queue.
        queue = queue.slice(i + 1);
        throw error;
      } finally {
        isFlushing = false;
      }
    }
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.Profiler = REACT_PROFILER_TYPE;
exports.PureComponent = PureComponent;
exports.StrictMode = REACT_STRICT_MODE_TYPE;
exports.Suspense = REACT_SUSPENSE_TYPE;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.startTransition = startTransition;
exports.unstable_act = act;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useDeferredValue = useDeferredValue;
exports.useEffect = useEffect;
exports.useId = useId;
exports.useImperativeHandle = useImperativeHandle;
exports.useInsertionEffect = useInsertionEffect;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.useSyncExternalStore = useSyncExternalStore;
exports.useTransition = useTransition;
exports.version = ReactVersion;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
}
        
  })();
}


/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");
}


/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js");
}


/***/ }),

/***/ "./node_modules/react/jsx-runtime.js":
/*!*******************************************!*\
  !*** ./node_modules/react/jsx-runtime.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-jsx-runtime.development.js */ "./node_modules/react/cjs/react-jsx-runtime.development.js");
}


/***/ }),

/***/ "./node_modules/resolve-pathname/esm/resolve-pathname.js":
/*!***************************************************************!*\
  !*** ./node_modules/resolve-pathname/esm/resolve-pathname.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
}

// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
}

// This implementation is based heavily on node's url.parse
function resolvePathname(to, from) {
  if (from === undefined) from = '';

  var toParts = (to && to.split('/')) || [];
  var fromParts = (from && from.split('/')) || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');

  if (
    mustEndAbs &&
    fromParts[0] !== '' &&
    (!fromParts[0] || !isAbsolute(fromParts[0]))
  )
    fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (resolvePathname);


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {

          'use strict';

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
}
          var enableSchedulerDebugging = false;
var enableProfiling = false;
var frameYieldMs = 5;

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  return heap.length === 0 ? null : heap[0];
}
function pop(heap) {
  if (heap.length === 0) {
    return null;
  }

  var first = heap[0];
  var last = heap.pop();

  if (last !== first) {
    heap[0] = last;
    siftDown(heap, last, 0);
  }

  return first;
}

function siftUp(heap, node, i) {
  var index = i;

  while (index > 0) {
    var parentIndex = index - 1 >>> 1;
    var parent = heap[parentIndex];

    if (compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;
  var halfLength = length >>> 1;

  while (index < halfLength) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (compare(left, node) < 0) {
      if (rightIndex < length && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (rightIndex < length && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

function markTaskErrored(task, ms) {
}

/* eslint-disable no-var */

var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

if (hasPerformanceNow) {
  var localPerformance = performance;

  exports.unstable_now = function () {
    return localPerformance.now();
  };
} else {
  var localDate = Date;
  var initialTime = localDate.now();

  exports.unstable_now = function () {
    return localDate.now() - initialTime;
  };
} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111


var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.

var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom

var isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod code path.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging )) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (typeof callback === 'function') {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
      } else {

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }
  } else {
    startTime = currentTime;
  }

  var timeout;

  switch (priorityLevel) {
    case ImmediatePriority:
      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
      break;

    case UserBlockingPriority:
      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
      break;

    case IdlePriority:
      timeout = IDLE_PRIORITY_TIMEOUT;
      break;

    case LowPriority:
      timeout = LOW_PRIORITY_TIMEOUT;
      break;

    case NormalPriority:
    default:
      timeout = NORMAL_PRIORITY_TIMEOUT;
      break;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
}

function unstable_continueExecution() {

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

var isMessageLoopRunning = false;
var scheduledHostCallback = null;
var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
// thread, like user events. By default, it yields multiple times per frame.
// It does not attempt to align with frame boundaries, since most tasks don't
// need to be frame aligned; for those that do, use requestAnimationFrame.

var frameInterval = frameYieldMs;
var startTime = -1;

function shouldYieldToHost() {
  var timeElapsed = exports.unstable_now() - startTime;

  if (timeElapsed < frameInterval) {
    // The main thread has only been blocked for a really short amount of time;
    // smaller than a single frame. Don't yield yet.
    return false;
  } // The main thread has been blocked for a non-negligible amount of time. We


  return true;
}

function requestPaint() {

}

function forceFrameRate(fps) {
  if (fps < 0 || fps > 125) {
    // Using console['error'] to evade Babel and ESLint
    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
    return;
  }

  if (fps > 0) {
    frameInterval = Math.floor(1000 / fps);
  } else {
    // reset the framerate
    frameInterval = frameYieldMs;
  }
}

var performWorkUntilDeadline = function () {
  if (scheduledHostCallback !== null) {
    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
    // has been blocked.

    startTime = currentTime;
    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
    // error can be observed.
    //
    // Intentionally not using a try-catch, since that makes some debugging
    // techniques harder. Instead, if `scheduledHostCallback` errors, then
    // `hasMoreWork` will remain true, and we'll continue the work loop.

    var hasMoreWork = true;

    try {
      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
    } finally {
      if (hasMoreWork) {
        // If there's more work, schedule the next message event at the end
        // of the preceding one.
        schedulePerformWorkUntilDeadline();
      } else {
        isMessageLoopRunning = false;
        scheduledHostCallback = null;
      }
    }
  } else {
    isMessageLoopRunning = false;
  } // Yielding to the browser will give it a chance to paint, so we can
};

var schedulePerformWorkUntilDeadline;

if (typeof localSetImmediate === 'function') {
  // Node.js and old IE.
  // There's a few reasons for why we prefer setImmediate.
  //
  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
  // (Even though this is a DOM fork of the Scheduler, you could get here
  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
  // https://github.com/facebook/react/issues/20756
  //
  // But also, it runs earlier which is the semantic we want.
  // If other browsers ever implement it, it's better to use it.
  // Although both of these would be inferior to native scheduling.
  schedulePerformWorkUntilDeadline = function () {
    localSetImmediate(performWorkUntilDeadline);
  };
} else if (typeof MessageChannel !== 'undefined') {
  // DOM and Worker environments.
  // We prefer MessageChannel because of the 4ms setTimeout clamping.
  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  schedulePerformWorkUntilDeadline = function () {
    port.postMessage(null);
  };
} else {
  // We should only fallback here in non-browser environments.
  schedulePerformWorkUntilDeadline = function () {
    localSetTimeout(performWorkUntilDeadline, 0);
  };
}

function requestHostCallback(callback) {
  scheduledHostCallback = callback;

  if (!isMessageLoopRunning) {
    isMessageLoopRunning = true;
    schedulePerformWorkUntilDeadline();
  }
}

function requestHostTimeout(callback, ms) {
  taskTimeoutID = localSetTimeout(function () {
    callback(exports.unstable_now());
  }, ms);
}

function cancelHostTimeout() {
  localClearTimeout(taskTimeoutID);
  taskTimeoutID = -1;
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling =  null;

exports.unstable_IdlePriority = IdlePriority;
exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_Profiling = unstable_Profiling;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_forceFrameRate = forceFrameRate;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_next = unstable_next;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_shouldYield = shouldYieldToHost;
exports.unstable_wrapCallback = unstable_wrapCallback;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
}
        
  })();
}


/***/ }),

/***/ "./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "./node_modules/scheduler/cjs/scheduler.development.js");
}


/***/ }),

/***/ "./node_modules/shallowequal/index.js":
/*!********************************************!*\
  !*** ./node_modules/shallowequal/index.js ***!
  \********************************************/
/***/ (function(module) {

//

module.exports = function shallowEqual(objA, objB, compare, compareContext) {
  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

  if (ret !== void 0) {
    return !!ret;
  }

  if (objA === objB) {
    return true;
  }

  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

  // Test for A's keys different from B.
  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];

    if (!bHasOwnProperty(key)) {
      return false;
    }

    var valueA = objA[key];
    var valueB = objB[key];

    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

    if (ret === false || (ret === void 0 && valueA !== valueB)) {
      return false;
    }
  }

  return true;
};


/***/ }),

/***/ "./node_modules/styled-components/dist/styled-components.browser.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/styled-components/dist/styled-components.browser.esm.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServerStyleSheet": function() { return /* binding */ Je; },
/* harmony export */   "StyleSheetConsumer": function() { return /* binding */ le; },
/* harmony export */   "StyleSheetContext": function() { return /* binding */ ue; },
/* harmony export */   "StyleSheetManager": function() { return /* binding */ ye; },
/* harmony export */   "ThemeConsumer": function() { return /* binding */ Le; },
/* harmony export */   "ThemeContext": function() { return /* binding */ Ge; },
/* harmony export */   "ThemeProvider": function() { return /* binding */ Fe; },
/* harmony export */   "__PRIVATE__": function() { return /* binding */ Ke; },
/* harmony export */   "createGlobalStyle": function() { return /* binding */ We; },
/* harmony export */   "css": function() { return /* binding */ Ce; },
/* harmony export */   "isStyledComponent": function() { return /* binding */ N; },
/* harmony export */   "keyframes": function() { return /* binding */ Ue; },
/* harmony export */   "useTheme": function() { return /* binding */ Ze; },
/* harmony export */   "version": function() { return /* binding */ C; },
/* harmony export */   "withTheme": function() { return /* binding */ Xe; }
/* harmony export */ });
/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shallowequal */ "./node_modules/shallowequal/index.js");
/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(shallowequal__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/stylis */ "./node_modules/@emotion/stylis/dist/stylis.browser.esm.js");
/* harmony import */ var _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/unitless */ "./node_modules/@emotion/unitless/dist/unitless.browser.esm.js");
/* harmony import */ var _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/is-prop-valid */ "./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! hoist-non-react-statics */ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__);
/* provided dependency */ var process = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
function v(){return(v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var g=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},S=function(t){return null!==t&&"object"==typeof t&&"[object Object]"===(t.toString?t.toString():Object.prototype.toString.call(t))&&!(0,react_is__WEBPACK_IMPORTED_MODULE_0__.typeOf)(t)},w=Object.freeze([]),E=Object.freeze({});function b(e){return"function"==typeof e}function _(e){return true&&"string"==typeof e&&e||e.displayName||e.name||"Component"}function N(e){return e&&"string"==typeof e.styledComponentId}var A="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",C="5.3.6",I="undefined"!=typeof window&&"HTMLElement"in window,P=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY?"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY:"production"!=="development"),O={},R= true?{1:"Cannot create styled-component for component: %s.\n\n",2:"Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",3:"Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",4:"The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",5:"The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",6:"Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",7:'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n',8:'ThemeProvider: Please make your "theme" prop an object.\n\n',9:"Missing document `<head>`\n\n",10:"Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",11:"_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",12:"It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",13:"%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",14:'ThemeProvider: "theme" prop is required.\n\n',15:"A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",16:"Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",17:"CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n"}:0;function D(){for(var e=arguments.length<=0?void 0:arguments[0],t=[],n=1,r=arguments.length;n<r;n+=1)t.push(n<0||arguments.length<=n?void 0:arguments[n]);return t.forEach((function(t){e=e.replace(/%[a-z]/,t)})),e}function j(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw false?0:new Error(D.apply(void 0,[R[e]].concat(n)).trim())}var T=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&j(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var s=r;s<o;s++)this.groupSizes[s]=0}for(var i=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(i,t[a])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,s=r;s<o;s++)t+=this.tag.getRule(s)+"/*!sc*/\n";return t},e}(),x=new Map,k=new Map,V=1,B=function(e){if(x.has(e))return x.get(e);for(;k.has(V);)V++;var t=V++;return true&&((0|t)<0||t>1<<30)&&j(16,""+t),x.set(e,t),k.set(t,e),t},z=function(e){return k.get(e)},M=function(e,t){t>=V&&(V=t+1),x.set(e,t),k.set(t,e)},G="style["+A+'][data-styled-version="5.3.6"]',L=new RegExp("^"+A+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),F=function(e,t,n){for(var r,o=n.split(","),s=0,i=o.length;s<i;s++)(r=o[s])&&e.registerName(t,r)},Y=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,s=n.length;o<s;o++){var i=n[o].trim();if(i){var a=i.match(L);if(a){var c=0|parseInt(a[1],10),u=a[2];0!==c&&(M(u,c),F(e,u,a[3]),e.getTag().insertRules(c,r)),r.length=0}else r.push(i)}}},q=function(){return true?__webpack_require__.nc:0},H=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(A))return r}}(n),s=void 0!==o?o.nextSibling:null;r.setAttribute(A,"active"),r.setAttribute("data-styled-version","5.3.6");var i=q();return i&&r.setAttribute("nonce",i),n.insertBefore(r,s),r},$=function(){function e(e){var t=this.element=H(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}j(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),W=function(){function e(e){var t=this.element=H(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),U=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),J=I,X={isServer:!I,useCSSOMInjection:!P},Z=function(){function e(e,t,n){void 0===e&&(e=E),void 0===t&&(t={}),this.options=v({},X,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&I&&J&&(J=!1,function(e){for(var t=document.querySelectorAll(G),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(A)&&(Y(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return B(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(v({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new U(o):r?new $(o):new W(o),new T(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(B(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(B(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(B(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var s=z(o);if(void 0!==s){var i=e.names.get(s),a=t.getGroup(o);if(i&&a&&i.size){var c=A+".g"+o+'[id="'+s+'"]',u="";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+",")})),r+=""+a+c+'{content:"'+u+'"}/*!sc*/\n'}}}return r}(this)},e}(),K=/(a)(d)/gi,Q=function(e){return String.fromCharCode(e+(e>25?39:97))};function ee(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Q(t%52)+n;return(Q(t%52)+n).replace(K,"$1-$2")}var te=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},ne=function(e){return te(5381,e)};function re(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(b(n)&&!N(n))return!1}return!0}var oe=ne("5.3.6"),se=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic= false&&0,this.componentId=t,this.baseHash=te(oe,t),this.baseStyle=n,Z.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var s=Ne(this.rules,e,t,n).join(""),i=ee(te(this.baseHash,s)>>>0);if(!t.hasNameForId(r,i)){var a=n(s,"."+i,void 0,r);t.insertRules(r,i,a)}o.push(i),this.staticRulesId=i}else{for(var c=this.rules.length,u=te(this.baseHash,n.hash),l="",d=0;d<c;d++){var h=this.rules[d];if("string"==typeof h)l+=h, true&&(u=te(u,h+d));else if(h){var p=Ne(h,e,t,n),f=Array.isArray(p)?p.join(""):p;u=te(u,f+d),l+=f}}if(l){var m=ee(u>>>0);if(!t.hasNameForId(r,m)){var y=n(l,"."+m,void 0,r);t.insertRules(r,m,y)}o.push(m)}}return o.join(" ")},e}(),ie=/^\s*\/\/.*$/gm,ae=[":","[",".","#"];function ce(e){var t,n,r,o,s=void 0===e?E:e,i=s.options,a=void 0===i?E:i,c=s.plugins,u=void 0===c?w:c,l=new _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__["default"](a),d=[],h=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,s,i,a,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){d.push(e)})),f=function(e,r,s){return 0===r&&-1!==ae.indexOf(s[n.length])||s.match(o)?e:"."+t};function m(e,s,i,a){void 0===a&&(a="&");var c=e.replace(ie,""),u=s&&i?i+" "+s+" { "+c+" }":c;return t=a,n=s,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),l(i||!s?"":s,u)}return l.use([].concat(u,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,f))},h,function(e){if(-2===e){var t=d;return d=[],t}}])),m.hash=u.length?u.reduce((function(e,t){return t.name||j(15),te(e,t.name)}),5381).toString():"",m}var ue=react__WEBPACK_IMPORTED_MODULE_1___default().createContext(),le=ue.Consumer,de=react__WEBPACK_IMPORTED_MODULE_1___default().createContext(),he=(de.Consumer,new Z),pe=ce();function fe(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ue)||he}function me(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(de)||pe}function ye(e){var t=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(e.stylisPlugins),n=t[0],s=t[1],c=fe(),u=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){var t=c;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){return ce({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)((function(){shallowequal__WEBPACK_IMPORTED_MODULE_2___default()(n,e.stylisPlugins)||s(e.stylisPlugins)}),[e.stylisPlugins]),react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ue.Provider,{value:u},react__WEBPACK_IMPORTED_MODULE_1___default().createElement(de.Provider,{value:l}, true?react__WEBPACK_IMPORTED_MODULE_1___default().Children.only(e.children):0))}var ve=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=pe);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return j(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=pe),this.name+e.hash},e}(),ge=/([A-Z])/,Se=/([A-Z])/g,we=/^ms-/,Ee=function(e){return"-"+e.toLowerCase()};function be(e){return ge.test(e)?e.replace(Se,Ee).replace(we,"-ms-"):e}var _e=function(e){return null==e||!1===e||""===e};function Ne(e,n,r,o){if(Array.isArray(e)){for(var s,i=[],a=0,c=e.length;a<c;a+=1)""!==(s=Ne(e[a],n,r,o))&&(Array.isArray(s)?i.push.apply(i,s):i.push(s));return i}if(_e(e))return"";if(N(e))return"."+e.styledComponentId;if(b(e)){if("function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!n)return e;var u=e(n);return true&&(0,react_is__WEBPACK_IMPORTED_MODULE_0__.isElement)(u)&&console.warn(_(e)+" is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."),Ne(u,n,r,o)}var l;return e instanceof ve?r?(e.inject(r,o),e.getName(o)):e:S(e)?function e(t,n){var r,o,s=[];for(var i in t)t.hasOwnProperty(i)&&!_e(t[i])&&(Array.isArray(t[i])&&t[i].isCss||b(t[i])?s.push(be(i)+":",t[i],";"):S(t[i])?s.push.apply(s,e(t[i],i)):s.push(be(i)+": "+(r=i,null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__["default"]?String(o).trim():o+"px")+";"));return n?[n+" {"].concat(s,["}"]):s}(e):e.toString()}var Ae=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Ce(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return b(e)||S(e)?Ae(Ne(g(w,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Ae(Ne(g(e,n)))}var Ie=/invalid hook call/i,Pe=new Set,Oe=function(e,t){if(true){var n="The component "+e+(t?' with the id of "'+t+'"':"")+" has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.",r=console.error;try{var o=!0;console.error=function(e){if(Ie.test(e))o=!1,Pe.delete(n);else{for(var t=arguments.length,s=new Array(t>1?t-1:0),i=1;i<t;i++)s[i-1]=arguments[i];r.apply(void 0,[e].concat(s))}},(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(),o&&!Pe.has(n)&&(console.warn(n),Pe.add(n))}catch(e){Ie.test(e.message)&&Pe.delete(n)}finally{console.error=r}}},Re=function(e,t,n){return void 0===n&&(n=E),e.theme!==n.theme&&e.theme||t||n.theme},De=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,je=/(^-|-$)/g;function Te(e){return e.replace(De,"-").replace(je,"")}var xe=function(e){return ee(ne(e)>>>0)};function ke(e){return"string"==typeof e&&( false||e.charAt(0)===e.charAt(0).toLowerCase())}var Ve=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Be=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function ze(e,t,n){var r=e[n];Ve(t)&&Ve(r)?Me(r,t):e[n]=t}function Me(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,s=n;o<s.length;o++){var i=s[o];if(Ve(i))for(var a in i)Be(a)&&ze(e,i[a],a)}return e}var Ge=react__WEBPACK_IMPORTED_MODULE_1___default().createContext(),Le=Ge.Consumer;function Fe(e){var t=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Ge),n=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){return function(e,t){if(!e)return j(14);if(b(e)){var n=e(t);return false||null!==n&&!Array.isArray(n)&&"object"==typeof n?n:j(7)}return Array.isArray(e)||"object"!=typeof e?j(8):t?v({},t,{},e):e}(e.theme,t)}),[e.theme,t]);return e.children?react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Ge.Provider,{value:n},e.children):null}var Ye={};function qe(e,t,n){var o=N(e),i=!ke(e),a=t.attrs,c=void 0===a?w:a,d=t.componentId,h=void 0===d?function(e,t){var n="string"!=typeof e?"sc":Te(e);Ye[n]=(Ye[n]||0)+1;var r=n+"-"+xe("5.3.6"+n+Ye[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):d,p=t.displayName,f=void 0===p?function(e){return ke(e)?"styled."+e:"Styled("+_(e)+")"}(e):p,g=t.displayName&&t.componentId?Te(t.displayName)+"-"+t.componentId:t.componentId||h,S=o&&e.attrs?Array.prototype.concat(e.attrs,c).filter(Boolean):c,A=t.shouldForwardProp;o&&e.shouldForwardProp&&(A=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var C,I=new se(n,g,o?e.componentStyle:void 0),P=I.isStatic&&0===c.length,O=function(e,t){return function(e,t,n,r){var o=e.attrs,i=e.componentStyle,a=e.defaultProps,c=e.foldedComponentIds,d=e.shouldForwardProp,h=e.styledComponentId,p=e.target; true&&(0,react__WEBPACK_IMPORTED_MODULE_1__.useDebugValue)(h);var f=function(e,t,n){void 0===e&&(e=E);var r=v({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,s,i=e;for(t in b(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],s=i[t],n&&s?n+" "+s:n||s):i[t]})),[r,o]}(Re(t,(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Ge),a)||E,t,o),y=f[0],g=f[1],S=function(e,t,n,r){var o=fe(),s=me(),i=t?e.generateAndInjectStyles(E,o,s):e.generateAndInjectStyles(n,o,s);return true&&(0,react__WEBPACK_IMPORTED_MODULE_1__.useDebugValue)(i), true&&!t&&r&&r(i),i}(i,r,y, true?e.warnTooManyClasses:0),w=n,_=g.$as||t.$as||g.as||t.as||p,N=ke(_),A=g!==t?v({},t,{},g):t,C={};for(var I in A)"$"!==I[0]&&"as"!==I&&("forwardedAs"===I?C.as=A[I]:(d?d(I,_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__["default"],_):!N||(0,_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__["default"])(I))&&(C[I]=A[I]));return t.style&&g.style!==t.style&&(C.style=v({},t.style,{},g.style)),C.className=Array.prototype.concat(c,h,S!==h?S:null,t.className,g.className).filter(Boolean).join(" "),C.ref=w,(0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(_,C)}(C,e,t,P)};return O.displayName=f,(C=react__WEBPACK_IMPORTED_MODULE_1___default().forwardRef(O)).attrs=S,C.componentStyle=I,C.displayName=f,C.shouldForwardProp=A,C.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):w,C.styledComponentId=g,C.target=o?e.target:e,C.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),s=r&&r+"-"+(ke(e)?e:Te(_(e)));return qe(e,v({},o,{attrs:S,componentId:s}),n)},Object.defineProperty(C,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Me({},e.defaultProps,t):t}}), true&&(Oe(f,g),C.warnTooManyClasses=function(e,t){var n={},r=!1;return function(o){if(!r&&(n[o]=!0,Object.keys(n).length>=200)){var s=t?' with the id of "'+t+'"':"";console.warn("Over 200 classes were generated for component "+e+s+".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"),r=!0,n={}}}}(f,g)),C.toString=function(){return"."+C.styledComponentId},i&&hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(C,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),C}var He=function(e){return function e(t,r,o){if(void 0===o&&(o=E),!(0,react_is__WEBPACK_IMPORTED_MODULE_0__.isValidElementType)(r))return j(1,String(r));var s=function(){return t(r,o,Ce.apply(void 0,arguments))};return s.withConfig=function(n){return e(t,r,v({},o,{},n))},s.attrs=function(n){return e(t,r,v({},o,{attrs:Array.prototype.concat(o.attrs,n).filter(Boolean)}))},s}(qe,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){He[e]=He(e)}));var $e=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=re(e),Z.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Ne(this.rules,t,n,r).join(""),""),s=this.componentId+e;n.insertRules(s,s,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&Z.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();function We(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];var i=Ce.apply(void 0,[e].concat(n)),a="sc-global-"+xe(JSON.stringify(i)),u=new $e(i,a);function l(e){var t=fe(),n=me(),o=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Ge),l=(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(t.allocateGSInstance(a)).current;return true&&react__WEBPACK_IMPORTED_MODULE_1___default().Children.count(e.children)&&console.warn("The global style component "+a+" was given child JSX. createGlobalStyle does not render children."), true&&i.some((function(e){return"string"==typeof e&&-1!==e.indexOf("@import")}))&&console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app."),t.server&&h(l,e,t,o,n),(0,react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)((function(){if(!t.server)return h(l,e,t,o,n),function(){return u.removeStyles(l,t)}}),[l,e,t,o,n]),null}function h(e,t,n,r,o){if(u.isStatic)u.renderStyles(e,O,n,o);else{var s=v({},t,{theme:Re(t,r,l.defaultProps)});u.renderStyles(e,s,n,o)}}return true&&Oe(a),react__WEBPACK_IMPORTED_MODULE_1___default().memo(l)}function Ue(e){ true&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.");for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Ce.apply(void 0,[e].concat(n)).join(""),s=xe(o);return new ve(s,o)}var Je=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=q();return"<style "+[n&&'nonce="'+n+'"',A+'="true"','data-styled-version="5.3.6"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?j(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return j(2);var n=((t={})[A]="",t["data-styled-version"]="5.3.6",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),o=q();return o&&(n.nonce=o),[react__WEBPACK_IMPORTED_MODULE_1___default().createElement("style",v({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new Z({isServer:!0}),this.sealed=!1}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?j(2):react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ye,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return j(3)},e}(),Xe=function(e){var t=react__WEBPACK_IMPORTED_MODULE_1___default().forwardRef((function(t,n){var o=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Ge),i=e.defaultProps,a=Re(t,o,i);return true&&void 0===a&&console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class "'+_(e)+'"'),react__WEBPACK_IMPORTED_MODULE_1___default().createElement(e,v({},t,{theme:a,ref:n}))}));return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(t,e),t.displayName="WithTheme("+_(e)+")",t},Ze=function(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Ge)},Ke={StyleSheet:Z,masterSheet:he}; true&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"), true&&"undefined"!=typeof window&&(window["__styled-components-init__"]=window["__styled-components-init__"]||0,1===window["__styled-components-init__"]&&console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."),window["__styled-components-init__"]+=1);/* harmony default export */ __webpack_exports__["default"] = (He);


/***/ }),

/***/ "./node_modules/tiny-warning/dist/tiny-warning.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/tiny-warning/dist/tiny-warning.esm.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
var isProduction = "development" === 'production';
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }

    var text = "Warning: " + message;

    if (typeof console !== 'undefined') {
      console.warn(text);
    }

    try {
      throw Error(text);
    } catch (x) {}
  }
}

/* harmony default export */ __webpack_exports__["default"] = (warning);


/***/ }),

/***/ "./node_modules/value-equal/esm/value-equal.js":
/*!*****************************************************!*\
  !*** ./node_modules/value-equal/esm/value-equal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function valueOf(obj) {
  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
}

function valueEqual(a, b) {
  // Test for strict equality first.
  if (a === b) return true;

  // Otherwise, if either of them == null they are not equal.
  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return (
      Array.isArray(b) &&
      a.length === b.length &&
      a.every(function(item, index) {
        return valueEqual(item, b[index]);
      })
    );
  }

  if (typeof a === 'object' || typeof b === 'object') {
    var aValue = valueOf(a);
    var bValue = valueOf(b);

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    return Object.keys(Object.assign({}, a, b)).every(function(key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
}

/* harmony default export */ __webpack_exports__["default"] = (valueEqual);


/***/ }),

/***/ "./node_modules/warning/warning.js":
/*!*****************************************!*\
  !*** ./node_modules/warning/warning.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/console-browserify/index.js");
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var __DEV__ = "development" !== 'production';

var warning = function() {};

if (__DEV__) {
  var printWarning = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);
    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }
    var argIndex = 0;
    var message = 'Warning: ' +
      format.replace(/%s/g, function() {
        return args[argIndex++];
      });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  }

  warning = function(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error(
          '`warning(condition, format, ...args)` requires a warning ' +
          'message argument'
      );
    }
    if (!condition) {
      printWarning.apply(null, [format].concat(args));
    }
  };
}

module.exports = warning;


/***/ }),

/***/ "./node_modules/xhr/index.js":
/*!***********************************!*\
  !*** ./node_modules/xhr/index.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var window = __webpack_require__(/*! global/window */ "./node_modules/global/window.js")
var isFunction = __webpack_require__(/*! is-function */ "./node_modules/is-function/index.js")
var parseHeaders = __webpack_require__(/*! parse-headers */ "./node_modules/parse-headers/parse-headers.js")
var xtend = __webpack_require__(/*! xtend */ "./node_modules/xtend/immutable.js")

module.exports = createXHR
// Allow use of default import syntax in TypeScript
module.exports["default"] = createXHR;
createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
        options = initParams(uri, options, callback)
        options.method = method.toUpperCase()
        return _createXHR(options)
    }
})

function forEachArray(array, iterator) {
    for (var i = 0; i < array.length; i++) {
        iterator(array[i])
    }
}

function isEmpty(obj){
    for(var i in obj){
        if(obj.hasOwnProperty(i)) return false
    }
    return true
}

function initParams(uri, options, callback) {
    var params = uri

    if (isFunction(options)) {
        callback = options
        if (typeof uri === "string") {
            params = {uri:uri}
        }
    } else {
        params = xtend(options, {uri: uri})
    }

    params.callback = callback
    return params
}

function createXHR(uri, options, callback) {
    options = initParams(uri, options, callback)
    return _createXHR(options)
}

function _createXHR(options) {
    if(typeof options.callback === "undefined"){
        throw new Error("callback argument missing")
    }

    var called = false
    var callback = function cbOnce(err, response, body){
        if(!called){
            called = true
            options.callback(err, response, body)
        }
    }

    function readystatechange() {
        if (xhr.readyState === 4) {
            setTimeout(loadFunc, 0)
        }
    }

    function getBody() {
        // Chrome with requestType=blob throws errors arround when even testing access to responseText
        var body = undefined

        if (xhr.response) {
            body = xhr.response
        } else {
            body = xhr.responseText || getXml(xhr)
        }

        if (isJson) {
            try {
                body = JSON.parse(body)
            } catch (e) {}
        }

        return body
    }

    function errorFunc(evt) {
        clearTimeout(timeoutTimer)
        if(!(evt instanceof Error)){
            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
        }
        evt.statusCode = 0
        return callback(evt, failureResponse)
    }

    // will load the data & process the response in a special response object
    function loadFunc() {
        if (aborted) return
        var status
        clearTimeout(timeoutTimer)
        if(options.useXDR && xhr.status===undefined) {
            //IE8 CORS GET successful response doesn't have a status field, but body is fine
            status = 200
        } else {
            status = (xhr.status === 1223 ? 204 : xhr.status)
        }
        var response = failureResponse
        var err = null

        if (status !== 0){
            response = {
                body: getBody(),
                statusCode: status,
                method: method,
                headers: {},
                url: uri,
                rawRequest: xhr
            }
            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                response.headers = parseHeaders(xhr.getAllResponseHeaders())
            }
        } else {
            err = new Error("Internal XMLHttpRequest Error")
        }
        return callback(err, response, response.body)
    }

    var xhr = options.xhr || null

    if (!xhr) {
        if (options.cors || options.useXDR) {
            xhr = new createXHR.XDomainRequest()
        }else{
            xhr = new createXHR.XMLHttpRequest()
        }
    }

    var key
    var aborted
    var uri = xhr.url = options.uri || options.url
    var method = xhr.method = options.method || "GET"
    var body = options.body || options.data
    var headers = xhr.headers = options.headers || {}
    var sync = !!options.sync
    var isJson = false
    var timeoutTimer
    var failureResponse = {
        body: undefined,
        headers: {},
        statusCode: 0,
        method: method,
        url: uri,
        rawRequest: xhr
    }

    if ("json" in options && options.json !== false) {
        isJson = true
        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
        if (method !== "GET" && method !== "HEAD") {
            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
            body = JSON.stringify(options.json === true ? body : options.json)
        }
    }

    xhr.onreadystatechange = readystatechange
    xhr.onload = loadFunc
    xhr.onerror = errorFunc
    // IE9 must have onprogress be set to a unique function.
    xhr.onprogress = function () {
        // IE must die
    }
    xhr.onabort = function(){
        aborted = true;
    }
    xhr.ontimeout = errorFunc
    xhr.open(method, uri, !sync, options.username, options.password)
    //has to be after open
    if(!sync) {
        xhr.withCredentials = !!options.withCredentials
    }
    // Cannot set timeout with sync request
    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
    if (!sync && options.timeout > 0 ) {
        timeoutTimer = setTimeout(function(){
            if (aborted) return
            aborted = true//IE9 may still call readystatechange
            xhr.abort("timeout")
            var e = new Error("XMLHttpRequest timeout")
            e.code = "ETIMEDOUT"
            errorFunc(e)
        }, options.timeout )
    }

    if (xhr.setRequestHeader) {
        for(key in headers){
            if(headers.hasOwnProperty(key)){
                xhr.setRequestHeader(key, headers[key])
            }
        }
    } else if (options.headers && !isEmpty(options.headers)) {
        throw new Error("Headers cannot be set on an XDomainRequest object")
    }

    if ("responseType" in options) {
        xhr.responseType = options.responseType
    }

    if ("beforeSend" in options &&
        typeof options.beforeSend === "function"
    ) {
        options.beforeSend(xhr)
    }

    // Microsoft Edge browser sends "undefined" when send is called with undefined value.
    // XMLHttpRequest spec says to pass null as body to indicate no body
    // See https://github.com/naugtur/xhr/issues/100.
    xhr.send(body || null)

    return xhr


}

function getXml(xhr) {
    // xhr.responseXML will throw Exception "InvalidStateError" or "DOMException"
    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.
    try {
        if (xhr.responseType === "document") {
            return xhr.responseXML
        }
        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror"
        if (xhr.responseType === "" && !firefoxBugTakenEffect) {
            return xhr.responseXML
        }
    } catch (e) {}

    return null
}

function noop() {}


/***/ }),

/***/ "./node_modules/xtend/immutable.js":
/*!*****************************************!*\
  !*** ./node_modules/xtend/immutable.js ***!
  \*****************************************/
/***/ (function(module) {

module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}


/***/ }),

/***/ "./node_modules/ilib/lib sync recursive ^$":
/*!****************************************!*\
  !*** ./node_modules/ilib/lib/ sync ^$ ***!
  \****************************************/
/***/ (function(module) {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "./node_modules/ilib/lib sync recursive ^$";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "./src/gif/spinner.gif":
/*!*****************************!*\
  !*** ./src/gif/spinner.gif ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "src/gif/spinner.gif";

/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/available-typed-arrays/index.js":
/*!******************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/available-typed-arrays/index.js ***!
  \******************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};


/***/ }),

/***/ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js":
/*!**********************************************************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js ***!
  \**********************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/node_modules/get-intrinsic/index.js");

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ "./node_modules/tiny-invariant/dist/esm/tiny-invariant.js":
/*!****************************************************************!*\
  !*** ./node_modules/tiny-invariant/dist/esm/tiny-invariant.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ invariant; }
/* harmony export */ });
var isProduction = "development" === 'production';
var prefix = 'Invariant failed';
function invariant(condition, message) {
    if (condition) {
        return;
    }
    if (isProduction) {
        throw new Error(prefix);
    }
    var provided = typeof message === 'function' ? message() : message;
    var value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
    throw new Error(value);
}




/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/extends.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _extends; }
/* harmony export */ });
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _inheritsLoose; }
/* harmony export */ });
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(subClass, superClass);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _objectWithoutPropertiesLoose; }
/* harmony export */ });
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _setPrototypeOf; }
/* harmony export */ });
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

/***/ }),

/***/ "./node_modules/@enact/sandstone/ThemeDecorator/screenTypes.json":
/*!***********************************************************************!*\
  !*** ./node_modules/@enact/sandstone/ThemeDecorator/screenTypes.json ***!
  \***********************************************************************/
/***/ (function(module) {

"use strict";
module.exports = JSON.parse('[{"name":"hd","pxPerRem":16,"width":1280,"height":720,"aspectRatioName":"hdtv"},{"name":"fhd","pxPerRem":24,"width":1920,"height":1080,"aspectRatioName":"hdtv"},{"name":"uw-uxga","pxPerRem":24,"width":2560,"height":1080,"aspectRatioName":"cinema"},{"name":"uhd","pxPerRem":48,"width":3840,"height":2160,"aspectRatioName":"hdtv","base":true},{"name":"uhd2","pxPerRem":96,"width":7680,"height":4320,"aspectRatioName":"hdtv"}]');

/***/ }),

/***/ "./node_modules/ilib/package.json":
/*!****************************************!*\
  !*** ./node_modules/ilib/package.json ***!
  \****************************************/
/***/ (function(module) {

"use strict";
module.exports = JSON.parse('{"name":"ilib-webos","version":"14.14.0-webos2","description":"iLib project for enact","main":"index.js","devDependencies":{"grunt":"^1.4.1","grunt-contrib-clean":"^2.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.1.0","grunt-mkdir":"^1.1.0","grunt-shell":"^4.0.0","http-server":"^14.1.0","ilib-webpack-loader":"^1.3.1","ilib-webpack-plugin":"^1.3.0","jit-grunt":"^0.10.0","nodeunit":"^0.11.3","uglifyjs-webpack-plugin":"^2.2.0","webpack":"^4.46.0","webpack-cli":"^3.3.12"},"scripts":{"test":"node test/testSuite.js","clean":"git clean -f -d *"},"repository":{"type":"git","url":"git+https://github.com/enyojs/iLib.git"},"author":{"name":"Goun Lee","email":"goun.lee@lge.com"},"license":"Apache-2.0","bugs":{"url":"https://github.com/enyojs/iLib/issues"},"homepage":"https://github.com/enyojs/iLib#readme"}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	!function() {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = function(chunkId) {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	!function() {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = function(chunkId) {
/******/ 			// return url for filenames based on template
/******/ 			return "chunk." + chunkId + ".js";
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/get mini-css chunk filename */
/******/ 	!function() {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.miniCssF = function(chunkId) {
/******/ 			// return url for filenames based on template
/******/ 			return undefined;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	!function() {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "exer:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = function(url, done, key, chunkId) {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = function(prev, event) {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach(function(fn) { return fn(event); });
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	!function() {
/******/ 		__webpack_require__.nmd = function(module) {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	!function() {
/******/ 		__webpack_require__.p = "";
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	
/******/ 	__webpack_require__.ilib_cache_id = "1667991100987";
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = function(chunkId, promises) {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = function(event) {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkexer"] = self["webpackChunkexer"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	!function() {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
!function() {
/*!*****************************************************************************************!*\
  !*** ../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/config/polyfills.js ***!
  \*****************************************************************************************/
/* eslint no-var: off, no-extend-native: off */

/*
 *  polyfills.js
 *
 *  Any polyfills or code required prior to loading the app.
 */
if (!__webpack_require__.g.skipPolyfills && !__webpack_require__.g._babelPolyfill) {
  // Temporarily remap [Array].toLocaleString to [Array].toString.
  // Fixes an issue with loading the polyfills within the v8 snapshot environment
  // where toLocaleString() within the TypedArray polyfills causes snapshot failure.
  var origToLocaleString = Array.prototype.toLocaleString,
      origTypedToLocaleString;
  Array.prototype.toLocaleString = Array.prototype.toString;

  if (__webpack_require__.g.Int8Array && Int8Array.prototype.toLocaleString) {
    origTypedToLocaleString = Int8Array.prototype.toLocaleString;
    Int8Array.prototype.toLocaleString = Int8Array.prototype.toString;
  } // Apply core-js polyfills


  __webpack_require__(/*! ./corejs-proxy */ "../../../../../../AppData/Roaming/npm/node_modules/@enact/cli/config/corejs-proxy.js"); // Restore real [Array].toLocaleString for runtime usage.


  if (origToLocaleString) Array.prototype.toLocaleString = origToLocaleString;
  if (origTypedToLocaleString) Int8Array.prototype.toLocaleString = origTypedToLocaleString;
}
}();
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_dom_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom/client */ "./node_modules/react-dom/client.js");
/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./App */ "./src/App/App.js");
/* harmony import */ var _reportWebVitals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reportWebVitals */ "./src/reportWebVitals.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
var _jsxFileName = "C:\\Users\\jjunh\\esw\\2022ESWContest_webOS_3013\\main-HomeTraining\\wallpad\\exercise\\exercise_app\\src\\index.js";

/* global ENACT_PACK_ISOMORPHIC */





const appElement = /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(_App__WEBPACK_IMPORTED_MODULE_1__["default"], {}, void 0, false, {
  fileName: _jsxFileName,
  lineNumber: 11,
  columnNumber: 21
}, undefined); // In a browser environment, render instead of exporting


if (typeof window !== 'undefined') {
  if (false) {} else {
    (0,react_dom_client__WEBPACK_IMPORTED_MODULE_0__.createRoot)(document.getElementById('root')).render(appElement);
  }
}

/* harmony default export */ __webpack_exports__["default"] = (appElement); // If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint.
// Learn more: https://github.com/enactjs/cli/blob/master/docs/measuring-performance.md

(0,_reportWebVitals__WEBPACK_IMPORTED_MODULE_2__["default"])();
}();
/******/ })()
;
//# sourceMappingURL=main.js.map
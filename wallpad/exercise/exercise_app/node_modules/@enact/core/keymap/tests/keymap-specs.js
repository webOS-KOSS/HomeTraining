"use strict";

var keymap = _interopRequireWildcard(require("../"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('keymap', function () {
  test('should support adding single keyCodes for a name', function () {
    keymap.add('testEnter', 13);
    var expected = true;
    var actual = keymap.is('testEnter', 13);
    keymap.remove('testEnter', 13);
    expect(actual).toBe(expected);
  });
  test('should support removing a single keyCode for a name', function () {
    keymap.add('testEnter', 13);
    keymap.remove('testEnter', 13);
    var expected = false;
    var actual = keymap.is('testEnter', 13);
    expect(actual).toBe(expected);
  });
  test('should support adding an array of keyCodes for a name', function () {
    keymap.add('testEnter', [13, 16777221]);
    var expected = true;
    var actual = keymap.is('testEnter', 13) && keymap.is('testEnter', 16777221);
    keymap.remove('testEnter', [13, 16777221]);
    expect(actual).toBe(expected);
  });
  test('should support removing an array of keyCodes for a name', function () {
    keymap.add('testEnter', [13, 16777221]);
    keymap.remove('testEnter', [13, 16777221]);
    var expected = false;
    var actual = keymap.is('testEnter', 13) || keymap.is('testEnter', 16777221);
    expect(actual).toBe(expected);
  });
  test('should support adding an map of keyCodes', function () {
    var map = {
      testEnter: [13, 16777221],
      testUp: 38,
      testDown: 40
    };
    keymap.addAll(map);
    var expected = true;
    var actual = keymap.is('testEnter', 13) && keymap.is('testEnter', 16777221) && keymap.is('testUp', 38) && keymap.is('testDown', 40);
    keymap.removeAll(map);
    expect(actual).toBe(expected);
  });
  test('should removing an map of keyCodes', function () {
    var map = {
      testEnter: [13, 16777221],
      testUp: 38,
      testDown: 40
    };
    keymap.addAll(map);
    keymap.removeAll(map);
    var expected = false;
    var actual = keymap.is('testEnter', 13) || keymap.is('testEnter', 16777221) || keymap.is('testUp', 38) || keymap.is('testDown', 40);
    expect(actual).toBe(expected);
  });
  test('should use case-insensitive names', function () {
    keymap.add('testEnter', 13);
    var expected = true;
    var actual = keymap.is('TeStEnTeR', 13);
    keymap.remove('testEnter', 13);
    expect(actual).toBe(expected);
  });
  test('should not add entry with a falsy name', function () {
    keymap.add('', 13);
    var expected = false;
    var actual = keymap.is('', 13);
    expect(actual).toBe(expected);
  });
});
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.useClass = useClass;

var _react = require("react");

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Creates one instance of the class, `Ctor` with the provided `args`, for the life of the
 * component.
 *
 * ```
 * class MyClass {
 *   constructor ({value}) {
 *     this.value = value;
 *   }
 *
 *   handleEvent = (ev) => {
 *     if (ev.key === 'Enter') {
 *       // do something with this.value
 *     }
 *   }
 * }
 *
 * function Component (props) {
 *   const inst = useClass(MyClass, props.value);
 *   return <div onClick={inst.handleEvent} />
 * }
 * ```
 *
 * @param {Function} Ctor Class constructor
 * @param  {...any}  args Arguments to pass to the constructor
 * @returns {Object}      An instance of `Ctor`
 * @private
 */
function useClass(Ctor) {
  var ref = (0, _react.useRef)(null);

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  ref.current = ref.current || _construct(Ctor, args);
  return ref.current;
}

var _default = useClass;
exports["default"] = _default;
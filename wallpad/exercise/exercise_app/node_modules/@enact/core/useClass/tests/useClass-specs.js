"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _useClass = _interopRequireDefault(require("../useClass"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

describe('useClass', function () {
  var Class = /*#__PURE__*/_createClass(function Class(arg) {
    _classCallCheck(this, Class);

    this.arg = arg;
  });

  function Component(props) {
    var instance = (0, _useClass["default"])(Class, props.arg);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "data-testid": "div",
      "data-fromclass": instance.arg,
      "data-fromprops": props.arg
    });
  }

  test('should pass arg to Class', function () {
    var arg = 'arg';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      arg: arg
    }));

    var div = _react.screen.getByTestId('div');

    expect(div).toHaveAttribute('data-fromclass', arg);
  });
  test('should use the same instance of Class across renders', function () {
    var arg = 'arg';

    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      arg: arg
    })),
        rerender = _render.rerender;

    var div = _react.screen.getByTestId('div');

    expect(div).toHaveAttribute('data-fromprops', arg);
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      arg: "changed"
    })); // verify that the children still reflects the class value set at construction but the prop
    // value was updated when props were updated

    expect(div).toHaveAttribute('data-fromclass', arg);
    expect(div).toHaveAttribute('data-fromprops', 'changed');
  });
});
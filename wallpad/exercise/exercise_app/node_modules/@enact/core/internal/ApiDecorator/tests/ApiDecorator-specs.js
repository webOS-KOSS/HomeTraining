"use strict";

var _react = require("@testing-library/react");

var _react2 = require("react");

var _ApiDecorator = _interopRequireDefault(require("../ApiDecorator"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

describe('ApiDecorator', function () {
  var _class;

  var data = [];
  var ApiProvider = (_class = /*#__PURE__*/function (_ReactComponent) {
    _inherits(ApiProvider, _ReactComponent);

    var _super = _createSuper(ApiProvider);

    function ApiProvider(props) {
      var _this;

      _classCallCheck(this, ApiProvider);

      _this = _super.call(this);

      _this.arrowFunction = function () {
        return 'arrow';
      };

      _this.instanceProperty = 'property';
      props.setApiProvider(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(ApiProvider, [{
      key: "instanceFunction",
      value: function instanceFunction() {
        return 'instance';
      }
    }, {
      key: "render",
      value: function render() {
        data = {
          arrowFunction: this.arrowFunction,
          instanceFunction: this.instanceFunction,
          instanceProperty: this.instanceProperty
        };
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {});
      }
    }]);

    return ApiProvider;
  }(_react2.Component), _class.displayName = 'ApiProvider', _class);
  test('should invoke arrow function on wrapped component', function () {
    var Component = (0, _ApiDecorator["default"])({
      api: ['arrowFunction']
    }, ApiProvider);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = 'arrow';
    var actual = data.arrowFunction();
    expect(actual).toBe(expected);
  });
  test('should invoke instance function on wrapped component', function () {
    var Component = (0, _ApiDecorator["default"])({
      api: ['instanceFunction']
    }, ApiProvider);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = 'instance';
    var actual = data.instanceFunction();
    expect(actual).toBe(expected);
  });
  test('should get an instance property on wrapped component', function () {
    var Component = (0, _ApiDecorator["default"])({
      api: ['instanceProperty']
    }, ApiProvider);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = 'property';
    var actual = data.instanceProperty;
    expect(actual).toBe(expected);
  });
  test('should set an instance property on wrapped component', function () {
    var Component = (0, _ApiDecorator["default"])({
      api: ['instanceProperty']
    }, ApiProvider);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    data.instanceProperty = 'updated';
    var expected = 'updated';
    var actual = data.instanceProperty;
    expect(actual).toBe(expected);
  });
});
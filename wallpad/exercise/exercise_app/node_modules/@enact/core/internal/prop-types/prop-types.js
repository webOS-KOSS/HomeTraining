"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _util = require("../../util");

var _deprecate = _interopRequireDefault(require("../deprecate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var isRequired = function isRequired(fn) {
  fn.isRequired = function (props, key, componentName, location, propFullName) {
    var propValue = props[key];

    if (typeof propValue === 'undefined') {
      return new Error("'".concat(propFullName, "' is required for '").concat(componentName, "' but was undefined."));
    }

    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }

    return fn.apply(void 0, [propValue, key, componentName, location, propFullName].concat(rest));
  };

  return fn;
};

var renderable = isRequired(function (props, key, componentName) {
  var propValue = props[key];

  if (propValue && !(0, _util.isRenderable)(propValue)) {
    return new Error("Invalid prop '".concat(key, "' supplied to '").concat(componentName, "'. ") + "Expected a renderable value but received '".concat(typeof propValue, "' instead."));
  }
});
var component = isRequired(function (props, key, componentName) {
  var propValue = props[key];

  if (propValue && (typeof propValue === 'string' || !(0, _util.isRenderable)(propValue))) {
    return new Error("Invalid prop '".concat(key, "' supplied to '").concat(componentName, "'. ") + "Expected a function but received '".concat(typeof propValue, "' instead."));
  }
});

var renderableOverride = _propTypes["default"].oneOfType([_propTypes["default"].element, renderable]);

var componentOverride = _propTypes["default"].oneOfType([_propTypes["default"].element, component]);

var ref = _propTypes["default"].oneOfType([_propTypes["default"].shape({
  current: _propTypes["default"].any
}), _propTypes["default"].func]);
/*
 * Wrap a prop type validator with a deprecation warning when the prop has a non-null value
 *
 * @param {Function} base Prop type validator
 * @param {Object} config deprecatioon configuration
 */


var deprecated = function deprecated(base, config) {
  // Wrap in a no-op so deprecate only warns once
  var warn = (0, _deprecate["default"])(function () {
    return true;
  }, config);
  return function (props, key) {
    // Warn on a non-null value for the prop
    if (props[key] != null) warn(); // Pass on to the prop type validator

    for (var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      rest[_key2 - 2] = arguments[_key2];
    }

    return base.apply(void 0, [props, key].concat(rest));
  };
};

var EnactPropTypes = {
  component: component,
  componentOverride: componentOverride,
  ref: ref,
  deprecated: deprecated,
  renderable: renderable,
  renderableOverride: renderableOverride
};
var _default = EnactPropTypes;
exports["default"] = _default;
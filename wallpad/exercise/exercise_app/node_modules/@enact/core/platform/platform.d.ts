// Type definitions for core/platform

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface PlatformDescription {
  /**
   * Additional information about the detected platform
   */
  extra?: object
  /**
   * `true`  if the platform has native double-finger events
   */;
  gesture: boolean
  /**
   * `true`  only if  `window`  is  `undefined`
   */;
  node: boolean
  /**
   * The name of the platform, if detected
   */;
  platformName?: string
  /**
   * `true`  if the platform has native single-finger events
   */;
  touch: boolean
  /**
   * `true`  if the platform has a touch screen
   */;
  touchscreen: boolean
  /**
   * `true`  for any unknown system
   */;
  unknown: boolean;
}
/**
 * Returns the    object.
 */
export function detect(): PlatformDescription;
/**
 * Provides basic information about the running platform.
 */
export declare const platform: PlatformDescription;

export default platform;

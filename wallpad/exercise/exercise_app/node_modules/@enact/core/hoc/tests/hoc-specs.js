"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _hoc = _interopRequireDefault(require("../hoc"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('hoc', function () {
  var data;
  var testID = 'test-HoC';
  var defaultConfig = {
    color: 'blue'
  };
  var HoC = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
    data = Wrapped;
    return function (props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread(_objectSpread({}, props), config), {}, {
        "data-testid": testID
      }));
    };
  });
  var NullHoC = (0, _hoc["default"])(null, function (config, Wrapped) {
    return function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, config), {}, {
        "data-testid": testID
      }));
    };
  });
  test('should support HoC factory function as first argument to hoc()', function () {
    var ImplicitNullHoC = (0, _hoc["default"])(function (config, Wrapped) {
      return function () {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, config), {}, {
          "data-testid": testID
        }));
      };
    });
    var Component = ImplicitNullHoC('span');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));

    var component = _react.screen.getByTestId(testID);

    var expected = 'SPAN';
    var actual = component.nodeName;
    expect(actual).toBe(expected);
  });
  test('should support DOM node name as first argument to HoC', function () {
    var Component = HoC('span');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));

    var component = _react.screen.getByTestId(testID);

    var expected = 'SPAN';
    var actual = component.nodeName;
    expect(actual).toBe(expected);
  });
  test('should support React component as first argument to HoC', function () {
    function Thing() {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        "data-testid": testID
      });
    }

    var Component = HoC(Thing);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));

    var component = _react.screen.getByTestId(testID);

    var expected = 'DIV';
    var actual = component.nodeName;
    var actualWrapped = data;
    expect(actual).toBe(expected);
    expect(actualWrapped).toBe(Thing);
  });
  test('should use default config when instance config is omitted', function () {
    var Component = HoC('span');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));

    var component = _react.screen.getByTestId(testID);

    var expectedAttribute = 'color';
    var expectedValue = defaultConfig.color;
    expect(component).toHaveAttribute(expectedAttribute, expectedValue);
  });
  test('should overwrite default config with instance config', function () {
    var instanceConfig = {
      color: 'green'
    };
    var Component = HoC(instanceConfig, 'div');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));

    var component = _react.screen.getByTestId(testID);

    var expectedAttribute = 'color';
    var expectedValue = instanceConfig.color;
    expect(component).toHaveAttribute(expectedAttribute, expectedValue);
  });
  test('should allow construction without default or instance configs', function () {
    var Component = NullHoC('input');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));

    var component = _react.screen.getByTestId(testID);

    var expected = 'INPUT';
    var actual = component.nodeName;
    expect(actual).toBe(expected);
    expect(component).toBeInTheDocument();
  });
  test('should allow construction without default config', function () {
    var instanceConfig = {
      color: 'green'
    };
    var Component = NullHoC(instanceConfig, 'div');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));

    var component = _react.screen.getByTestId(testID);

    var expectedAttribute = 'color';
    var expectedValue = instanceConfig.color;
    expect(component).toHaveAttribute(expectedAttribute, expectedValue);
  });
});
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.kind = exports["default"] = void 0;

var _react = require("react");

var _useHandlers = _interopRequireDefault(require("../useHandlers"));

var _Handlers = _interopRequireDefault(require("../useHandlers/Handlers"));

var _computed = _interopRequireDefault(require("./computed"));

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Because contextType is optional and hooks must be called in the same order, we need a fallback
// context when none is specified. This likely has some overhead so we may want to deprecate and
// remove contextType support for 4.0 since the context APIs have improved since this was added.
var NoContext = /*#__PURE__*/(0, _react.createContext)(null);
/**
 * @callback RenderFunction
 * @memberof core/kind
 * @param {Object<string, any>} props
 * @param {Object<string, any>} context
 * @returns React.Element|null
 */

/**
 * @callback ComputedPropFunction
 * @memberof core/kind
 * @param {Object<string, any>} props
 * @param {Object<string, any>} context
 * @returns any
 */

/**
 * @callback HandlerFunction
 * @memberof core/kind
 * @param {any} event
 * @param {Object<string, any>} props
 * @param {Object<string, any>} context
 */

/**
 * Configuration for CSS class name mapping
 *
 * @typedef {Object} StylesBlock
 * @memberof core/kind
 * @property {Object.<string, string>} css
 * @property {String} [className]
 * @property {Boolean|String|String[]} [publicClassNames]
 */

/**
 * @typedef {Object} KindConfig
 * @memberof core/kind
 * @property {String} [name]
 * @property {Boolean} [functional]
 * @property {Object.<string, Function>} [propTypes]
 * @property {Object.<string, any>} [defaultProps]
 * @property {Object} [contextType]
 * @property {StylesBlock} [styles]
 * @property {Object.<string, HandlerFunction>} [handlers]
 * @property {Object.<string, ComputedPropFunction>} [computed]
 * @property {RenderFunction} render
 */

/**
 * Creates a new component with some helpful declarative syntactic sugar.
 *
 * Example:
 * ```
 *	import css from './Button.module.less';
 *	const Button = kind({
 *		name: 'Button',
 *		// Return a functional component suitable for use with React hooks
 *		functional: true,
 *		// expect color and onClick properties but neither required
 *		propTypes: {
 *			color: PropTypes.string
 *		},
 *		// if no color is provided, it'll be green
 *		defaultProps: {
 *			color: 'green'
 *		},
 *		// expect backgroundColor via context
 *		contextType: React.createContext({ backgroundColor }),
 *		// configure styles with the static className to merge with user className
 *		styles: {
 *			// include the CSS modules map so 'button' can be resolved to the local name
 *			css,
 *			className: 'button'
 *		},
 *		// add event handlers that are cached between calls to prevent recreating each call. Any
 *		// handlers are added to the props passed to `render()`.  See core/handle.
 *		handlers: {
 *			onKeyDown: (evt, props) => { .... }
 *		},
 *		// add some computed properties, these are added to props passed to `render()`
 *		computed: {
 *			// border color will be the color prepended by 'light'
 *			borderColor: ({color}) => 'light' + color,
 *			// background color will be the contextual background color if specified
 *			color: ({color}, context) => context.backgroundColor || color
 *		},
 *		// Render the thing, already!
 *		render: ({color, borderColor, children, ...rest}) => (
 *			<button
 *				{...rest}
 *				style={{backgroundColor: color, borderColor}}
 *			>
 *				{children}
 *			</button>
 *		)
 *	});
 * ```
 *
 * @function
 * @template Props
 * @param  {KindConfig}    config    Component configuration
 *
 * @returns {Component<Props>}           Component
 * @memberof core/kind
 * @see {@link core/handle}
 * @public
 */

var kind = function kind(config) {
  var cfgComputed = config.computed,
      _config$contextType = config.contextType,
      contextType = _config$contextType === void 0 ? NoContext : _config$contextType,
      defaultProps = config.defaultProps,
      functional = config.functional,
      handlers = config.handlers,
      name = config.name,
      propTypes = config.propTypes,
      render = config.render,
      cfgStyles = config.styles;
  var renderStyles = cfgStyles ? (0, _styles["default"])(cfgStyles) : false;
  var renderComputed = cfgComputed ? (0, _computed["default"])(cfgComputed) : false;

  var renderKind = function renderKind(props, context) {
    if (renderStyles) props = renderStyles(props, context);
    if (renderComputed) props = renderComputed(props, context);
    return render(props, context);
  };

  var Component; // In 4.x, this branch will become the only supported version and the class branch will be
  // removed.

  if (functional) {
    Component = function Component(props) {
      var ctx = (0, _react.useContext)(contextType);
      var boundHandlers = (0, _useHandlers["default"])(handlers, props, ctx);

      var merged = _objectSpread(_objectSpread({}, props), boundHandlers);

      return renderKind(merged, ctx);
    };
  } else {
    var _class;

    Component = (_class = /*#__PURE__*/function (_ReactComponent) {
      _inherits(Component, _ReactComponent);

      var _super = _createSuper(Component);

      function Component() {
        var _this;

        _classCallCheck(this, Component);

        _this = _super.call(this);
        _this.handlers = new _Handlers["default"](handlers);
        return _this;
      }

      _createClass(Component, [{
        key: "render",
        value: function render() {
          this.handlers.setContext(this.props, this.context);

          var merged = _objectSpread(_objectSpread({}, this.props), this.handlers.handlers);

          return renderKind(merged, this.context);
        }
      }]);

      return Component;
    }(_react.Component), _class.contextType = contextType, _class);
  }

  if (name) Component.displayName = name;
  if (propTypes) Component.propTypes = propTypes;
  if (defaultProps) Component.defaultProps = defaultProps; // Decorate the Component with the computed property object in DEV for easier testability

  if (process.env.NODE_ENV !== "production" && cfgComputed) Component.computed = cfgComputed;
  var defaultPropKeys = defaultProps ? Object.keys(defaultProps) : null;
  var handlerKeys = handlers ? Object.keys(handlers) : null;

  Component.inline = function (props, context) {
    var updated = _objectSpread({}, props);

    if (defaultPropKeys && defaultPropKeys.length > 0) {
      defaultPropKeys.forEach(function (key) {
        // eslint-disable-next-line no-undefined
        if (props == null || props[key] === undefined) {
          updated[key] = defaultProps[key];
        }
      });
    }

    if (handlerKeys && handlerKeys.length > 0) {
      // generate a handler with a clone of updated to ensure each handler receives the same
      // props without the kind.handlers injected.
      updated = handlerKeys.reduce(function (_props, key) {
        _props[key] = function (ev) {
          return handlers[key](ev, updated, context);
        };

        return _props;
      }, _objectSpread({}, updated));
    }

    return renderKind(updated, context);
  };

  return Component;
};

exports.kind = kind;
var _default = kind;
exports["default"] = _default;
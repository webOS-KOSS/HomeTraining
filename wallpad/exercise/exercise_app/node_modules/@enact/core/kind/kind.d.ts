// Type definitions for core/kind

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface RenderFunction {
  (props: { [key: string]: any }, context: { [key: string]: any }): any;
}
export interface ComputedPropFunction {
  (props: { [key: string]: any }, context: { [key: string]: any }): any;
}
export interface HandlerFunction {
  (
    event: any,
    props: { [key: string]: any },
    context: { [key: string]: any }
  ): void;
}
/**
 * Configuration for CSS class name mapping
 */
export interface StylesBlock {
  css: { [key: string]: string };
  className?: string;
  publicClassNames?: boolean | string | string[];
}
export interface KindConfig {
  name?: string;
  functional?: boolean;
  propTypes?: { [key: string]: Function };
  defaultProps?: { [key: string]: any };
  contextType?: object;
  styles?: StylesBlock;
  handlers?: { [key: string]: HandlerFunction };
  computed?: { [key: string]: ComputedPropFunction };
  render: RenderFunction;
}
/**
 * Creates a new component with some helpful declarative syntactic sugar.
 * 
 * Example:
 * ```
import css from './Button.module.less';
const Button = kind({
	name: 'Button',
	// Return a functional component suitable for use with React hooks
	functional: true,
	// expect color and onClick properties but neither required
	propTypes: {
		color: PropTypes.string
	},
	// if no color is provided, it'll be green
	defaultProps: {
		color: 'green'
	},
	// expect backgroundColor via context
	contextType: React.createContext({ backgroundColor }),
	// configure styles with the static className to merge with user className
	styles: {
		// include the CSS modules map so 'button' can be resolved to the local name
		css,
		className: 'button'
	},
	// add event handlers that are cached between calls to prevent recreating each call. Any
	// handlers are added to the props passed to `render()`.  See core/handle.
	handlers: {
		onKeyDown: (evt, props) => { .... }
	},
	// add some computed properties, these are added to props passed to `render()`
	computed: {
		// border color will be the color prepended by 'light'
		borderColor: ({color}) => 'light' + color,
		// background color will be the contextual background color if specified
		color: ({color}, context) => context.backgroundColor || color
	},
	// Render the thing, already!
	render: ({color, borderColor, children, ...rest}) => (
		<button
			{...rest}
			style={{backgroundColor: color, borderColor}}
		>
			{children}
		</button>
	)
});
```
 */
export function kind<Props>(config: KindConfig): React.ComponentType<Props>;

export default kind;

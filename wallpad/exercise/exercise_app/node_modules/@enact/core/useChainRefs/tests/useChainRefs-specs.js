"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _react2 = require("react");

var _useChainRefs = _interopRequireDefault(require("../useChainRefs"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

describe('useChainRefs', function () {
  function Component(props) {
    var ref = _useChainRefs["default"].apply(void 0, _toConsumableArray(props.refs));

    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: ref
    });
  }

  test('should call a single functional ref', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      refs: [ref]
    }));
    expect(ref).toHaveBeenCalledTimes(1);
  });
  test('should call a single object ref', function () {
    var ref = /*#__PURE__*/(0, _react2.createRef)();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      refs: [ref]
    }));
    var expected = 'DIV';
    var actual = ref.current.nodeName;
    expect(actual).toBe(expected);
  });
  test('should ignore invalid refs', function () {
    var invalid = {};
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      refs: [invalid, ref]
    }));
    expect(ref).toHaveBeenCalledTimes(1);
  });
});
"use strict";

var _LS2Request = _interopRequireDefault(require("../LS2Request"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('LS2Request', function () {
  var nop = function nop() {};

  describe('callback', function () {
    var invalidResponse = '{invalid: json';
    var failedResponse = '{"errorCode": 101}';
    var successfulResponse = '{"returnValue": true}';
    it('should return an error for a null msg', function () {
      var request = new _LS2Request["default"]();
      var onFailure = jest.fn();
      request.callback(nop, onFailure, nop, null);
      var expected = {
        errorCode: -1
      };
      var actual = onFailure.mock.calls[0][0];
      expect(actual).toMatchObject(expected);
    });
    it('should return an error for invalid JSON', function () {
      var request = new _LS2Request["default"]();
      var onFailure = jest.fn();
      request.callback(nop, onFailure, nop);
      var expected = {
        errorCode: -1
      };
      var actual = onFailure.mock.calls[0][0];
      expect(actual).toMatchObject(expected);
    });
    it('should invoke onFailure for a valid, failed request', function () {
      var request = new _LS2Request["default"]();
      var onFailure = jest.fn();
      request.callback(nop, onFailure, nop, failedResponse);
      var expected = {
        errorCode: 101
      };
      var actual = onFailure.mock.calls[0][0];
      expect(actual).toMatchObject(expected);
    });
    it('should invoke onSuccess for a valid request', function () {
      var request = new _LS2Request["default"]();
      var onSuccess = jest.fn();
      request.callback(onSuccess, nop, nop, successfulResponse);
      var expected = {
        returnValue: true
      };
      var actual = onSuccess.mock.calls[0][0];
      expect(actual).toMatchObject(expected);
    });
    it('should invoke onComplete for a valid request', function () {
      var request = new _LS2Request["default"]();
      var onComplete = jest.fn();
      request.callback(nop, nop, onComplete, successfulResponse);
      var expected = {
        returnValue: true
      };
      var actual = onComplete.mock.calls[0][0];
      expect(actual).toMatchObject(expected);
    });
    it('should invoke onComplete for an invalid request', function () {
      var request = new _LS2Request["default"]();
      var onComplete = jest.fn();
      request.callback(nop, nop, onComplete, invalidResponse);
      var expected = {
        errorCode: -1
      };
      var actual = onComplete.mock.calls[0][0];
      expect(actual).toMatchObject(expected);
    });
    it('should invoke onComplete for a valid, failed request', function () {
      var request = new _LS2Request["default"]();
      var onComplete = jest.fn();
      request.callback(nop, nop, onComplete, failedResponse);
      var expected = {
        errorCode: 101
      };
      var actual = onComplete.mock.calls[0][0];
      expect(actual).toMatchObject(expected);
    });
  });
});
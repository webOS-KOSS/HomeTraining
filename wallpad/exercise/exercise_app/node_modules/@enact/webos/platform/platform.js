"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.detect = detect;
exports.platform = void 0;

/**
 * Utilities for webOS platform detection.
 *
 * @module webos/platform
 * @exports detect
 * @exports platform
 */
function is(type) {
  return window.navigator.userAgent.indexOf(type) > -1;
}

var _platform;
/**
 * Returns the {@link webos/platform.platform} object.
 *
 * @function
 * @returns {Object} The {@link webos/platform.platform} object
 * @memberof webos/platform
 * @public
 */


function detect() {
  if (_platform) {
    // if we've already determined the platform, we'll use that determination
    return _platform;
  } else if (typeof window === 'undefined' || !window.PalmSystem) {
    // if window isn't available (in prerendering or snapshot runs), bail out early
    return {
      unknown: true
    };
  } // build out our cached platform determination for future usage


  _platform = {};

  if (is('SmartWatch')) {
    _platform.watch = true;
  } else if (is('SmartTV') || is('Large Screen')) {
    _platform.tv = true;
  } else {
    try {
      var legacyInfo = JSON.parse(window.PalmSystem.deviceInfo || '{}');

      if (legacyInfo.platformVersionMajor && legacyInfo.platformVersionMinor) {
        var major = parseInt(legacyInfo.platformVersionMajor);
        var minor = parseInt(legacyInfo.platformVersionMinor);

        if (major < 3 || major === 3 && minor <= 0) {
          _platform.legacy = true;
        } else {
          _platform.open = true;
        }
      } else {
        _platform.unknown = true;
      }
    } catch (e) {
      _platform.open = true;
    } // TODO: clean these up. They shouldn't be here


    window.Mojo = window.Mojo || {
      relaunch: function relaunch() {}
    };
    if (window.PalmSystem.stageReady) window.PalmSystem.stageReady();
  }

  return _platform;
}
/**
 * Provides identification of webOS variants.
 *
 * @readonly
 * @type {Object}
 * @property {Boolean} [tv] `true` for LG webOS SmartTV
 * @property {Boolean} [watch] `true` for LG webOS SmartWatch
 * @property {Boolean} [open] `true` for Open webOS
 * @property {Boolean} [legacy] `true` for legacy webOS (Palm and HP hardware)
 * @property {Boolean} [unknown] `true` for any unknown system
 * @memberof webos/platform
 * @public
 */


var platform = {};
exports.platform = platform;
['tv', 'watch', 'open', 'legacy', 'unknown'].forEach(function (name) {
  Object.defineProperty(platform, name, {
    enumerable: true,
    get: function get() {
      var p = detect();
      return p[name];
    }
  });
});
var _default = platform;
exports["default"] = _default;
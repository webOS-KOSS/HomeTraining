"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Scroller = void 0;
Object.defineProperty(exports, "ScrollerBase", {
  enumerable: true,
  get: function get() {
    return _UiScrollerBase["default"];
  }
});
Object.defineProperty(exports, "ScrollerBasic", {
  enumerable: true,
  get: function get() {
    return _ScrollerBasic["default"];
  }
});
exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Resizable = require("../Resizable");

var _useScroll2 = _interopRequireDefault(require("../useScroll"));

var _Scrollbar = _interopRequireDefault(require("../useScroll/Scrollbar"));

var _ScrollerBasic = _interopRequireDefault(require("./ScrollerBasic"));

var _UiScrollerBase = _interopRequireDefault(require("./UiScrollerBase"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var nop = function nop() {};
/**
 * An unstyled scroller.
 *
 * Example:
 * ```
 * <Scroller>Scroll me.</Scroller>
 * ```
 *
 * @class Scroller
 * @memberof ui/Scroller
 * @extends ui/Scroller.ScrollerBasic
 * @ui
 * @public
 */


var Scroller = function Scroller(props) {
  // Hooks
  var _useScroll = (0, _useScroll2["default"])(props),
      scrollContentHandle = _useScroll.scrollContentHandle,
      ScrollContentWrapper = _useScroll.scrollContentWrapper,
      isHorizontalScrollbarVisible = _useScroll.isHorizontalScrollbarVisible,
      isVerticalScrollbarVisible = _useScroll.isVerticalScrollbarVisible,
      resizeContextProps = _useScroll.resizeContextProps,
      scrollContainerProps = _useScroll.scrollContainerProps,
      scrollInnerContainerProps = _useScroll.scrollInnerContainerProps,
      scrollContentWrapperProps = _useScroll.scrollContentWrapperProps,
      scrollContentProps = _useScroll.scrollContentProps,
      verticalScrollbarProps = _useScroll.verticalScrollbarProps,
      horizontalScrollbarProps = _useScroll.horizontalScrollbarProps; // Return


  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Resizable.ResizeContext.Provider, _objectSpread(_objectSpread({}, resizeContextProps), {}, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, scrollContainerProps), {}, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, scrollInnerContainerProps), {}, {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(ScrollContentWrapper, _objectSpread(_objectSpread({}, scrollContentWrapperProps), {}, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ScrollerBasic["default"], _objectSpread(_objectSpread({}, scrollContentProps), {}, {
            ref: scrollContentHandle
          }))
        })), isVerticalScrollbarVisible ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Scrollbar["default"], _objectSpread({}, verticalScrollbarProps)) : null]
      })), isHorizontalScrollbarVisible ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Scrollbar["default"], _objectSpread({}, horizontalScrollbarProps)) : null]
    }))
  }));
};

exports.Scroller = Scroller;
Scroller.displayName = 'ui:Scroller';
Scroller.propTypes =
/** @lends ui/Scroller.Scroller.prototype */
{
  /**
   * A callback function that receives a reference to the `scrollTo` feature.
   *
   * Once received, the `scrollTo` method can be called as an imperative interface.
   *
   * - {position: {x, y}} - Pixel value for x and/or y position
   * - {align} - Where the scroll area should be aligned. Values are:
   *   `'left'`, `'right'`, `'top'`, `'bottom'`,
   *   `'topleft'`, `'topright'`, `'bottomleft'`, and `'bottomright'`.
   * - {node} - Node to scroll into view
   * - {animate} - When `true`, scroll occurs with animation. When `false`, no
   *   animation occurs.
   * - {focus} - When `true`, attempts to focus item after scroll. Only valid when scrolling
   *   by `node`.
   * > Note: Only specify one of: `position`, `align`, `node`
   *
   * Example:
   * ```
   *	// If you set cbScrollTo prop like below;
   *	cbScrollTo: (fn) => {this.scrollTo = fn;}
   *	// You can simply call like below;
   *	this.scrollTo({align: 'top'}); // scroll to the top
   * ```
   *
   * @type {Function}
   * @public
   */
  cbScrollTo: _propTypes["default"].func,

  /**
   * Direction of the scroller.
   *
   * Valid values are:
   * * `'both'`,
   * * `'horizontal'`, and
   * * `'vertical'`.
   *
   * @type {String}
   * @default 'both'
   * @public
   */
  direction: _propTypes["default"].string,

  /**
   * Specifies how to show horizontal scrollbar.
   *
   * Valid values are:
   * * `'auto'`,
   * * `'visible'`, and
   * * `'hidden'`.
   *
   * @type {String}
   * @default 'auto'
   * @public
   */
  horizontalScrollbar: _propTypes["default"].oneOf(['auto', 'visible', 'hidden']),

  /**
   * Prevents scroll by dragging or flicking on the scroller.
   *
   * @type {Boolean}
   * @default false
   * @private
   */
  noScrollByDrag: _propTypes["default"].bool,

  /**
   * Prevents scroll by wheeling on the scroller.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  noScrollByWheel: _propTypes["default"].bool,

  /**
   * Called when scrolling.
   *
   * Passes `scrollLeft`, `scrollTop`.
   * It is not recommended to set this prop since it can cause performance degradation.
   * Use `onScrollStart` or `onScrollStop` instead.
   *
   * @type {Function}
   * @param {Object} event
   * @param {Number} event.scrollLeft Scroll left value.
   * @param {Number} event.scrollTop Scroll top value.
   * @public
   */
  onScroll: _propTypes["default"].func,

  /**
   * Called when scroll starts.
   *
   * Passes `scrollLeft` and `scrollTop`.
   *
   * Example:
   * ```
   * onScrollStart = ({scrollLeft, scrollTop}) => {
   *     // do something with scrollLeft and scrollTop
   * }
   *
   * render = () => (
   *     <Scroller
   *         ...
   *         onScrollStart={this.onScrollStart}
   *         ...
   *     />
   * )
   * ```
   *
   * @type {Function}
   * @param {Object} event
   * @param {Number} event.scrollLeft Scroll left value.
   * @param {Number} event.scrollTop Scroll top value.
   * @public
   */
  onScrollStart: _propTypes["default"].func,

  /**
   * Called when scroll stops.
   *
   * Passes `scrollLeft` and `scrollTop`.
   *
   * Example:
   * ```
   * onScrollStop = ({scrollLeft, scrollTop}) => {
   *     // do something with scrollLeft and scrollTop
   * }
   *
   * render = () => (
   *     <Scroller
   *         ...
   *         onScrollStop={this.onScrollStop}
   *         ...
   *     />
   * )
   * ```
   *
   * @type {Function}
   * @param {Object} event
   * @param {Number} event.scrollLeft Scroll left value.
   * @param {Number} event.scrollTop Scroll top value.
   * @public
   */
  onScrollStop: _propTypes["default"].func,

  /**
   * Specifies overscroll effects shows on which type of inputs.
   *
   * @type {Object}
   * @default {drag: false, pageKey: false, wheel: false}
   * @private
   */
  overscrollEffectOn: _propTypes["default"].shape({
    drag: _propTypes["default"].bool,
    pageKey: _propTypes["default"].bool,
    wheel: _propTypes["default"].bool
  }),

  /**
   * Specifies how to scroll.
   *
   * Valid values are:
   * * `'translate'`,
   * * `'native'`.
   *
   * @type {String}
   * @default 'translate'
   * @public
   */
  scrollMode: _propTypes["default"].string,

  /**
   * Specifies how to show vertical scrollbar.
   *
   * Valid values are:
   * * `'auto'`,
   * * `'visible'`, and
   * * `'hidden'`.
   *
   * @type {String}
   * @default 'auto'
   * @public
   */
  verticalScrollbar: _propTypes["default"].oneOf(['auto', 'visible', 'hidden'])
};
Scroller.defaultProps = {
  cbScrollTo: nop,
  direction: 'both',
  horizontalScrollbar: 'auto',
  noScrollByDrag: false,
  noScrollByWheel: false,
  onScroll: nop,
  onScrollStart: nop,
  onScrollStop: nop,
  overscrollEffectOn: {
    drag: false,
    pageKey: false,
    wheel: false
  },
  scrollMode: 'translate',
  verticalScrollbar: 'auto'
};
var _default = Scroller;
exports["default"] = _default;
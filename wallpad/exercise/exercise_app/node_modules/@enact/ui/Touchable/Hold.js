"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.holdConfigPropType = exports.defaultHoldConfig = exports["default"] = exports.Hold = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Hold = /*#__PURE__*/function () {
  function Hold() {
    var _this = this;

    _classCallCheck(this, Hold);

    this.isHolding = function () {
      return _this.holdConfig != null;
    };

    this.isWithinTolerance = function (_ref) {
      var x = _ref.x,
          y = _ref.y;
      var moveTolerance = _this.holdConfig.moveTolerance;
      var dx = _this.startX - x;
      var dy = _this.startY - y;
      return Math.sqrt(dx * dx + dy * dy) < moveTolerance;
    };

    this.begin = function (defaultConfig, _ref2, _ref3) {
      var holdConfig = _ref2.holdConfig,
          noResume = _ref2.noResume,
          onHoldStart = _ref2.onHoldStart,
          onHoldEnd = _ref2.onHoldEnd,
          onHold = _ref2.onHold;
      var x = _ref3.x,
          y = _ref3.y;
      if (!onHoldStart && !onHold) return;
      _this.startX = x;
      _this.startY = y;
      _this.holdConfig = _objectSpread(_objectSpread(_objectSpread({}, defaultConfig), holdConfig), {}, {
        resume: !noResume
      });
      _this.onHold = onHold;
      _this.onHoldStart = onHoldStart;
      _this.onHoldEnd = onHoldEnd; // copy the events array since it is mutated for each hold

      _this.holdConfig.events = _this.holdConfig.events.slice();

      _this.holdConfig.events.sort(function (a, b) {
        if (a.time < b.time) return -1;
        if (a.time > b.time) return 1;
        return 0;
      });

      _this.pulsing = false;
      _this.next = _this.holdConfig.events.shift();

      if (_this.next) {
        _this.holdStart = window.performance.now();

        _this.startJob();
      }
    };

    this.updateProps = function (_ref4) {
      var onHoldStart = _ref4.onHoldStart,
          onHoldEnd = _ref4.onHoldEnd,
          onHold = _ref4.onHold;
      // check `isHolding` gesture is not in progress. Check if gesture exists before updating the references to the `holdConfig`
      if (!_this.isHolding()) return; // Update the original values with new values of the gestures

      _this.onHold = onHold;
      _this.onHoldStart = onHoldStart;
      _this.onHoldEnd = onHoldEnd;
    };

    this.move = function (coords) {
      if (!_this.isHolding()) return;
      var _this$holdConfig = _this.holdConfig,
          cancelOnMove = _this$holdConfig.cancelOnMove,
          resume = _this$holdConfig.resume;

      if (cancelOnMove) {
        var shouldEnd = !_this.isWithinTolerance(coords);

        if (shouldEnd) {
          if (resume) {
            _this.suspend();
          } else {
            _this.end();
          }
        } else if (resume && !shouldEnd) {
          _this.resume();
        }
      }
    };

    this.blur = function () {
      if (!_this.isHolding()) return;

      if (!_this.holdConfig.global) {
        _this.end();
      }
    };

    this.end = function () {
      if (!_this.isHolding()) return;

      if (_this.pulsing && _this.onHoldEnd) {
        var time = window.performance.now() - _this.holdStart;

        _this.onHoldEnd({
          type: 'onHoldEnd',
          time: time
        });
      }

      _this.suspend();

      _this.pulsing = false;
      _this.holdConfig = null;
    };

    this.enter = function () {
      if (!_this.isHolding()) return;
      var _this$holdConfig2 = _this.holdConfig,
          cancelOnMove = _this$holdConfig2.cancelOnMove,
          resume = _this$holdConfig2.resume;

      if (resume && !cancelOnMove) {
        _this.resume();
      }
    };

    this.leave = function () {
      if (!_this.isHolding()) return;
      var _this$holdConfig3 = _this.holdConfig,
          isGlobal = _this$holdConfig3.global,
          resume = _this$holdConfig3.resume;
      if (isGlobal) return;

      if (resume) {
        _this.suspend();
      } else {
        _this.end();
      }
    };

    this.suspend = function () {
      clearInterval(_this.holdJob);
      _this.holdJob = null;
    };

    this.resume = function () {
      if (_this.holdJob !== null) return;

      _this.handlePulse();

      _this.startJob();
    };

    this.handlePulse = function () {
      var holdTime = window.performance.now() - _this.holdStart;

      var n = _this.next;

      while (n && n.time <= holdTime) {
        var events = _this.holdConfig.events;
        _this.pulsing = true;

        if (_this.onHoldStart) {
          _this.onHoldStart(_objectSpread({
            type: 'onHoldStart'
          }, n));
        } // if the hold is canceled from the onHoldStart handler, we should bail early and prevent
        // additional hold/pulse events


        if (!_this.isHolding()) {
          _this.pulsing = false;
          break;
        }

        n = _this.next = events && events.shift();
      }

      if (_this.pulsing) {
        if (_this.onHold) {
          _this.onHold({
            type: 'onHold',
            time: holdTime
          });
        }
      }
    };

    this.holdJob = null;
    this.holdStart = null;
    this.pulsing = false;
    this.next = null;
  }

  _createClass(Hold, [{
    key: "startJob",
    value: function startJob() {
      var frequency = this.holdConfig.frequency;

      if (!this.holdJob) {
        this.holdJob = setInterval(this.handlePulse, frequency);
      }
    }
  }]);

  return Hold;
}();

exports.Hold = Hold;
var defaultHoldConfig = {
  cancelOnMove: false,
  events: [{
    name: 'hold',
    time: 200
  }],
  frequency: 200,
  global: false,
  moveTolerance: 16
};
exports.defaultHoldConfig = defaultHoldConfig;

var holdConfigPropType = _propTypes["default"].shape({
  cancelOnMove: _propTypes["default"].bool,
  events: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    name: _propTypes["default"].string,
    time: _propTypes["default"].number
  })),
  frequency: _propTypes["default"].number,
  global: _propTypes["default"].bool,
  moveTolerance: _propTypes["default"].number
});

exports.holdConfigPropType = holdConfigPropType;
var _default = Hold;
exports["default"] = _default;
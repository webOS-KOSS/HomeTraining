"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.useTouch = useTouch;

var _useClass = _interopRequireDefault(require("@enact/core/useClass"));

var _react = require("react");

var _state = require("./state");

var _Touch = _interopRequireDefault(require("./Touch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Configuration for `useTouch`
 *
 * @typedef {Object} useTouchConfig
 * @memberof ui/Touchable
 * @property {Object}    dragConfig      Instance-specific overrides of the drag configuration
 * @property {Object}    flickConfig     Instance-specific overrides of the flick configuration
 * @property {Object}    holdConfig      Instance-specific overrides of the hold configuration
 * @property {Boolean}   getActive       Enables active state management
 * @property {Boolean}   disabled        Disables a hook
 * @property {Boolean}   noResume        Prevents resuming the touch events and gestures when re-entering the component
 * @property {Function}  onBlur          Event handler for a blur event
 * @property {Function}  onClick         Event handler for a click event
 * @property {Function}  onMouseDown     Event handler for a mousedown event
 * @property {Function}  onMouseEnter    Event handler for a mouseenter event
 * @property {Function}  onMouseLeave    Event handler for a mouseleave event
 * @property {Function}  onMouseMove     Event handler for a mousemove event
 * @property {Function}  onMouseUp       Event handler for a mouseup event
 * @property {Function}  onTouchEnd      Event handler for a touchend event
 * @property {Function}  onTouchMove     Event handler for a touchmove event
 * @property {Function}  onTouchStart    Event handler for a touchstart event
 * @property {Function}  onDown          Event handler for 'down' pointer events
 * @property {Function}  onDrag          Event handler for a drag gesture
 * @property {Function}  onDragEnd       Event handler for the end of a drag gesture
 * @property {Function}  onDragStart     Event handler for the start of a drag gesture
 * @property {Function}  onFlick         Event handler for a flick gesture
 * @property {Function}  onHold          Event handler for hold pulse events
 * @property {Function}  onHoldEnd       Event handler for the end of hold events
 * @property {Function}  onHoldStart     Event handler for hold events
 * @property {Function}  onMove          Event handler for a pointer moving
 * @property {Function}  onTap           Event handler for 'tap' pointer events
 * @property {Function}  onUp            Event handler for 'up' pointer events
 * @see {@link ui/Touchable.configure}
 * @private
 */

/**
 * Object returned by `useTouch`
 *
 * @typedef {Object} useTouchInterface
 * @memberof ui/Touchable
 * @property {Boolean} active   The active state
 * @property {Object}  handlers Event handlers that need to be passed to DOM node
 * @private
 */

/**
 * Provides a consistent set of pointer events -- `onDown`, `onUp`, and `onTap` --
 * across mouse and touch interfaces along with support for common gestures including
 * `onFlick`, `onDrag`, `onHoldStart`, `onHold`, and `onHoldEnd`.
 * @param {useTouchConfig} config Configuration options
 * @returns {useTouchInterface}
 * @private
 */
function useTouch() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _config$getActive = config.getActive,
      getActive = _config$getActive === void 0 ? false : _config$getActive,
      disabled = config.disabled,
      dragConfig = config.dragConfig,
      flickConfig = config.flickConfig,
      holdConfig = config.holdConfig,
      onDrag = config.onDrag,
      onDragEnd = config.onDragEnd,
      onDragStart = config.onDragStart,
      onHold = config.onHold,
      onHoldEnd = config.onHoldEnd,
      onHoldStart = config.onHoldStart,
      onFlick = config.onFlick;
  var touch = (0, _useClass["default"])(_Touch["default"]);

  var _useState = (0, _react.useState)(_state.States.Inactive),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  touch.setPropsAndContext(_objectSpread(_objectSpread({}, config), {}, {
    disabled: !!disabled
  }), state, setState); // componentDidMount and componentWillUnmount

  (0, _react.useEffect)(function () {
    touch.addGlobalHandlers();
    return function () {
      touch.disable();
      touch.removeGlobalHandlers();
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useEffect)(function () {
    touch.updateGestureConfig(dragConfig, flickConfig, holdConfig);
  }, [dragConfig, flickConfig, holdConfig]); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useEffect)(function () {
    touch.updateProps(config);
  }, [onDrag, onDragEnd, onDragStart, onHold, onHoldEnd, onHoldStart, onFlick]); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useEffect)(function () {
    if (disabled) {
      touch.disable();
    }
  }, [disabled]); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useEffect)(function () {
    setState(function (prevState) {
      return !getActive || disabled ? _state.States.Inactive : prevState;
    });
  }, [getActive, disabled]);
  return {
    active: state !== _state.States.Inactive,
    handlers: touch.getHandlers()
  };
}

var _default = useTouch;
exports["default"] = _default;
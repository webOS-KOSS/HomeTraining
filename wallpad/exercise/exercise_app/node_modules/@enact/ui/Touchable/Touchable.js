"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Touchable = void 0;
Object.defineProperty(exports, "configure", {
  enumerable: true,
  get: function get() {
    return _config.configure;
  }
});
exports["default"] = void 0;
Object.defineProperty(exports, "useTouch", {
  enumerable: true,
  get: function get() {
    return _useTouch["default"];
  }
});

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = require("react");

var _config = require("./config");

var _Drag = require("./Drag");

var _Flick = require("./Flick");

var _Hold = require("./Hold");

var _useTouch = _interopRequireDefault(require("./useTouch"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["dragConfig", "flickConfig", "holdConfig", "disabled", "noResume", "onBlur", "onClick", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDown", "onDrag", "onDragEnd", "onDragStart", "onFlick", "onHold", "onHoldEnd", "onHoldStart", "onMove", "onTap", "onUp"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var selectProps = function selectProps(props) {
  var dragConfig = props.dragConfig,
      flickConfig = props.flickConfig,
      holdConfig = props.holdConfig,
      disabled = props.disabled,
      noResume = props.noResume,
      onBlur = props.onBlur,
      onClick = props.onClick,
      onMouseDown = props.onMouseDown,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      onMouseMove = props.onMouseMove,
      onMouseUp = props.onMouseUp,
      onTouchEnd = props.onTouchEnd,
      onTouchMove = props.onTouchMove,
      onTouchStart = props.onTouchStart,
      onDown = props.onDown,
      onDrag = props.onDrag,
      onDragEnd = props.onDragEnd,
      onDragStart = props.onDragStart,
      onFlick = props.onFlick,
      onHold = props.onHold,
      onHoldEnd = props.onHoldEnd,
      onHoldStart = props.onHoldStart,
      onMove = props.onMove,
      onTap = props.onTap,
      onUp = props.onUp,
      rest = _objectWithoutProperties(props, _excluded);

  return {
    configForHook: {
      /* configs */
      dragConfig: dragConfig,
      flickConfig: flickConfig,
      holdConfig: holdConfig,

      /* general props */
      disabled: disabled,
      noResume: noResume,

      /* events to be captured and forwarded by useTouch hook */
      onBlur: onBlur,
      onClick: onClick,
      onMouseDown: onMouseDown,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onMouseMove: onMouseMove,
      onMouseUp: onMouseUp,
      onTouchEnd: onTouchEnd,
      onTouchMove: onTouchMove,
      onTouchStart: onTouchStart,

      /* custom events to be forwarded by useTouch hook */
      onDown: onDown,
      onDrag: onDrag,
      onDragEnd: onDragEnd,
      onDragStart: onDragStart,
      onFlick: onFlick,
      onHold: onHold,
      onHoldEnd: onHoldEnd,
      onHoldStart: onHoldStart,
      onMove: onMove,
      onTap: onTap,
      onUp: onUp
    },
    propsForWrapped: _objectSpread({
      disabled: disabled
    }, rest)
  };
};
/**
 * Default config for `Touchable`.
 *
 * @memberof ui/Touchable.Touchable
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Configures the prop name to pass the active state to the wrapped component
   *
   * @type {String}
   * @default null
   * @memberof ui/Touchable.Touchable.defaultConfig
   */
  activeProp: null
};
/**
 * A higher-order component that provides a consistent set of pointer events -- `onDown`, `onUp`,
 * and `onTap` -- across mouse and touch interfaces along with support for common gestures including
 * `onFlick`, `onDrag`, `onHoldStart`, `onHold`, and `onHoldEnd`.
 *
 * Note: This HoC passes a number of props to the wrapped component that should be passed to the
 * main DOM node or consumed by the wrapped component.
 *
 * @class Touchable
 * @memberof ui/Touchable
 * @hoc
 * @public
 */

var Touchable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var activeProp = config.activeProp; // eslint-disable-next-line no-shadow

  var Touchable = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
    var _selectProps = selectProps(props),
        configForHook = _selectProps.configForHook,
        propsForWrapped = _selectProps.propsForWrapped;

    var hook = (0, _useTouch["default"])(_objectSpread({
      getActive: !!activeProp
    }, configForHook));
    Object.assign(propsForWrapped, hook.handlers);

    if (activeProp) {
      propsForWrapped[activeProp] = hook.active;
    }

    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, propsForWrapped), {}, {
      ref: ref
    }));
  });
  Touchable.propTypes = {
    /**
     * Disables the component.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes["default"].bool,

    /**
     * Instance-specific overrides of the drag configuration.
     *
     * @see {@link ui/Touchable.configure}
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Object}
     * @public
     */
    dragConfig: _Drag.dragConfigPropType,

    /**
     * Instance-specific overrides of the flick configuration.
     *
     * @see {@link ui/Touchable.configure}
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Object}
     * @public
     */
    flickConfig: _Flick.flickConfigPropType,

    /**
     * Instance-specific overrides of the hold configuration.
     *
     * @see {@link ui/Touchable.configure}
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Object}
     * @public
     */
    holdConfig: _Hold.holdConfigPropType,

    /**
     * Prevents resuming the touch events and gestures when re-entering the component.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Boolean}
     * @default false
     * @public
     */
    noResume: _propTypes["default"].bool,

    /**
     * Event handler for 'down' pointer events.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onDown: _propTypes["default"].func,

    /**
     * Event handler for a drag gesture.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onDrag'`
     * * `x` - Horizontal position of the drag, relative to the viewport
     * * `y` - Vertical position of the drag, relative to the viewport
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onDrag: _propTypes["default"].func,

    /**
     * Event handler for the end of a drag gesture.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onDragEnd'`
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onDragEnd: _propTypes["default"].func,

    /**
     * Event handler for the start of a drag gesture.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onDragStart'`
     * * `x` - Horizontal position of the drag, relative to the viewport
     * * `y` - Vertical position of the drag, relative to the viewport
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onDragStart: _propTypes["default"].func,

    /**
     * Event handler for a flick gesture.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onFlick'`
     * * `direction` - Primary direction of the flick, either `'horizontal'` or `'vertical'`
     * * `velocity` - Velocity of flick
     * * `velocityX` - Velocity of flick along te horizontal axis
     * * `velocityY` - Velocity of flick along te vertical axis
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onFlick: _propTypes["default"].func,

    /**
     * Event handler for hold pulse events.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onHold'`
     * * `time` - Time, in milliseconds, since the hold began
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onHold: _propTypes["default"].func,

    /**
     * Event handler for the end of hold events.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onHoldEnd'`
     * * `time` - Time, in milliseconds, since the hold began
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onHoldEnd: _propTypes["default"].func,

    /**
     * Event handler for hold events.
     *
     * Event payload includes:
     *
     * * `type` - Type of event, `'onHoldStart'`
     * * `name` - The name of the hold as configured in the events list
     * * `time` - Time, in milliseconds, configured for this hold which may vary slightly
     *            from time since the hold began
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onHoldStart: _propTypes["default"].func,

    /**
     * Event handler for 'move' pointer events.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onMove: _propTypes["default"].func,

    /**
     * Event handler for 'tap' pointer events.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onTap: _propTypes["default"].func,

    /**
     * Event handler for 'up' pointer events.
     *
     * @memberof ui/Touchable.Touchable.prototype
     * @type {Function}
     * @public
     */
    onUp: _propTypes["default"].func
  };
  Touchable.defaultProps = {
    disabled: false,
    noResume: false
  };
  Touchable.displayName = 'Touchable';
  return Touchable;
});
exports.Touchable = Touchable;
var _default = Touchable;
exports["default"] = _default;
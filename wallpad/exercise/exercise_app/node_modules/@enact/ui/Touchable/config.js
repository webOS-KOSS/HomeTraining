"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetDefaultConfig = exports.mergeConfig = exports.getConfig = exports["default"] = exports.configure = void 0;

var _Drag = require("./Drag.js");

var _Flick = require("./Flick.js");

var _Hold = require("./Hold.js");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var allowedDragKeys = Object.keys(_Drag.defaultDragConfig);
var allowedFlickKeys = Object.keys(_Flick.defaultFlickConfig);
var allowedHoldKeys = Object.keys(_Hold.defaultHoldConfig);
/**
 * The Global Gesture Configuration Object
 *
 * @private
 * @memberof ui/Touchable
 */

var config = {}; // map-friendly clone method

var clone = function clone(o) {
  return Object.assign({}, o);
}; // Merges two configuation objects while retaining only the allowed keys


var mergeGestureConfig = function mergeGestureConfig(current, update, allowed) {
  var cfg = _objectSpread(_objectSpread({}, current), update);

  Object.keys(cfg).forEach(function (key) {
    if (allowed.indexOf(key) === -1) {
      delete cfg[key];
    }
  });
  return cfg;
}; // Merges the current global config with the provided `cfg` and returns the result


var mergeConfig = function mergeConfig(cfg) {
  var merged = {
    drag: mergeGestureConfig(config.drag, cfg.drag, allowedDragKeys),
    flick: mergeGestureConfig(config.flick, cfg.flick, allowedFlickKeys),
    hold: mergeGestureConfig(config.hold, cfg.hold, allowedHoldKeys)
  };
  merged.hold.events = merged.hold.events.map(clone);
  return merged;
};
/**
 * Configures the global gesture configuration for the application.
 *
 * Example:
 * ```
 * // Updates the `maxMoves`, `moveTolerance`, and `frequency` configurations while retaining the
 * // current value of all other configurations
 * configure({
 *     flick: {
 *         maxMoves: 10
 *     },
 *     hold: {
 *         moveTolerance: 32,
 *         frequency: 400
 *     }
 * });
 * ```
 *
 * Each type of gesture has its own set of configuration properties grouped within a separate object
 * keyed by the name of the gesture. Partial configurations may be passed and will be merged with
 * the current configuration.
 *
 * `drag`
 *
 *   * `boxSizing` - The part of the component's box model is used as the bounds of the constraint.
 *     Only applies when `global` is `false`.
 *     * `'border-box'` - the default, includes the padding and border but excludes the margin.
 *     * `'content-box'` - excludes the padding, border, and margin.
 *   * `global` - When `true`, drag gestures will continue when leaving the bounds of the component
 *      or blurring the component.
 *   * `moveTolerance` - The number of pixels from the start position of the drag that the pointer
 *     may move before cancelling the drag. Defaults to `16`.
 *
 * `flick`
 *
 *   * `maxDuration` - The amount of time, in milliseconds, to complete a flick gesture before it
 *     is cancelled. Defaults to 250.
 *   * `maxMoves` - The number of moves tracked to determine if a flick occurred. Defaults to `5`.
 *   * `minVelocity` - The minimum threshold, measured as the change in pixels over the change in
 *     time per move, that must be exceeded to generate a `onFlick` event.
 *
 * `hold`
 *
 *   * `cancelOnMove` - When `true`, the hold is cancelled when moving beyond the `moveTolerance`.
 *     Defaults to `false`
 *   * `global` - When `true`, hold gestures will continue when leaving the bounds of the component
 *      or blurring the component.
 *   * `moveTolerance` - The number of pixels from the start position of the hold that the pointer
 *     may move before cancelling the hold. Ignored when `cancelOnMove` is `false`. Defaults to
 *     `16`.
 *   * `frequency` - The time, in milliseconds, to poll for hold events. Defaults to `200`.
 *   * `events` - An array of `onHoldStart` events which each contain a `name` and `time`. The `time`
 *     controls the amount of time that must pass before this `onHoldStart` event is fired and should
 *     be a multiple of `frequency`.
 *
 * @function
 * @param   {Object}     cfg  A partial or complete configuration object
 *
 * @returns {undefined}
 * @public
 * @memberof ui/Touchable
 */


exports.mergeConfig = mergeConfig;

var configure = function configure(cfg) {
  config = mergeConfig(cfg);
};

exports.configure = configure;

var getConfig = function getConfig() {
  return config;
};

exports.getConfig = getConfig;

var resetDefaultConfig = function resetDefaultConfig() {
  return configure({
    drag: _Drag.defaultDragConfig,
    hold: _Hold.defaultHoldConfig,
    flick: _Flick.defaultFlickConfig
  });
};

exports.resetDefaultConfig = resetDefaultConfig;
resetDefaultConfig();
var _default = configure;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "RadioControllerDecorator", {
  enumerable: true,
  get: function get() {
    return _RadioControllerDecorator.RadioControllerDecorator;
  }
});
exports["default"] = exports.RadioDecorator = void 0;

var _handle = require("@enact/core/handle");

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _react = require("react");

var _RadioControllerDecorator = require("./RadioControllerDecorator");

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Default config for `RadioDecorator`.
 *
 * @memberof ui/RadioDecorator.RadioDecorator
 * @hocconfig
 */
var defaultConfig = {
  /**
   * The event indicating the wrapped component is activated
   *
   * @type {String}
   * @default null
   * @memberof ui/RadioDecorator.RadioDecorator.defaultConfig
   */
  activate: null,

  /**
   * The event indicating the wrapped component is deactivated
   *
   * @type {String}
   * @default null
   * @memberof ui/RadioDecorator.RadioDecorator.defaultConfig
   */
  deactivate: null,

  /**
   * The name of a boolean prop that activates the wrapped component when it is true.
   *
   * @type {String}
   * @default 'active'
   * @memberof ui/RadioDecorator.RadioDecorator.defaultConfig
   */
  prop: 'active'
};
/**
 * A higher-order component (HOC) that allows another component to have a mutually exclusive
 * relationship with other descendants of the same {@link ui/RadioDecorator.RadioControllerDecorator}.
 *
 * When the `activate` event for the wrapped component is called, the component is activated and the
 * previously activated component, if any, is deactivated by invoking the `deactivate` event.
 *
 * @class RadioDecorator
 * @memberof ui/RadioDecorator
 * @hoc
 * @public
 */

var RadioDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var activate = config.activate,
      deactivate = config.deactivate,
      prop = config.prop;
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class() {
      var _this;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _this.deactivate = function () {
        if (_this.props[prop]) {
          (0, _handle.forwardCustom)(deactivate)(null, _this.props);
        }
      };

      _this.handleActivate = function () {
        if (_this.controller) {
          _this.controller.notify({
            action: 'activate'
          });
        }

        (0, _handle.forwardCustom)(activate)(null, _this.props);
      };

      _this.handleDeactivate = function () {
        if (_this.controller) {
          _this.controller.notify({
            action: 'deactivate'
          });
        }

        (0, _handle.forwardCustom)(deactivate)(null, _this.props);
      };

      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.context && typeof this.context === 'function') {
          this.controller = this.context(this.handleDeactivate);
          this.notifyController();
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.notifyController();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.controller) {
          this.controller.unregister();
        }
      }
    }, {
      key: "notifyController",
      value: function notifyController() {
        if (this.controller && prop && this.props[prop]) {
          this.controller.notify({
            action: 'activate'
          });
        }
      }
      /*
       * Invoked by a `RadioControllerDecorator` when the wrapped component should be deactivated
       *
       * @returns {undefined}
       */

    }, {
      key: "render",
      value: function render() {
        var props = this.props;

        if (activate || deactivate) {
          props = Object.assign({}, this.props);
          if (activate) props[activate] = this.handleActivate;
          if (deactivate) props[deactivate] = this.handleDeactivate;
        }

        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'RadioDecorator', _class.contextType = _RadioControllerDecorator.RadioContext, _class;
});
exports.RadioDecorator = RadioDecorator;
var _default = RadioDecorator;
exports["default"] = _default;
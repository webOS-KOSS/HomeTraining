"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _Group = _interopRequireWildcard(require("../Group"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Group', function () {
  var stringItems = ['One', 'Two', 'Three'];
  test('should call handler with selected on select', function () {
    var handleClick = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group.GroupBase, {
      childComponent: "div",
      onSelect: handleClick,
      children: stringItems
    }));

    var selected = _react.screen.getByText('Two');

    _userEvent["default"].click(selected);

    var expected = 1;
    var actual = handleClick.mock.calls[0][0].selected;
    expect(actual).toBe(expected);
  });
  test('should call handler with data on select', function () {
    var handleClick = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group.GroupBase, {
      childComponent: "div",
      onSelect: handleClick,
      children: stringItems
    }));

    var selected = _react.screen.getByText('Two');

    _userEvent["default"].click(selected);

    var expected = stringItems[1];
    var actual = handleClick.mock.calls[0][0].data;
    expect(actual).toBe(expected);
  });
  test('should call handler with data on select stored in the key specified by `selectedEventProp`', function () {
    var handleClick = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group.GroupBase, {
      childComponent: "div",
      onSelect: handleClick,
      selectedEventProp: "value",
      children: stringItems
    }));

    var selected = _react.screen.getByText('Two');

    _userEvent["default"].click(selected);

    var expected = stringItems[1];
    var actual = handleClick.mock.calls[0][0].value;
    expect(actual).toBe(expected);
  });
  test('should call handler on move when childSelect="onMouseMove"', function () {
    var handleClick = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group.GroupBase, {
      childComponent: "div",
      childSelect: "onMouseMove",
      onSelect: handleClick,
      children: stringItems
    }));

    var selected = _react.screen.getByText('Two');

    _react.fireEvent.mouseMove(selected);

    var expected = 1;
    var actual = handleClick.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should select the third item with selected=2', function () {
    var selected = 2;
    var handleClick = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group.GroupBase, {
      childComponent: "div",
      onSelect: handleClick,
      selected: selected,
      children: stringItems
    }));
    var expected = 'true';

    var actual = _react.screen.getByText('Three');

    expect(actual).toHaveAttribute('data-selected', expected);
  });
  test('should set {data-active} on the first item', function () {
    var selected = 0;
    var handleClick = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group.GroupBase, {
      childComponent: "div",
      onSelect: handleClick,
      selected: selected,
      selectedProp: "data-active",
      children: stringItems
    }));
    var expected = 'true';

    var actual = _react.screen.getByText('One');

    expect(actual).toHaveAttribute('data-active', expected);
  });
  test('should set {children} to be the item by default', function () {
    var selected = 0;
    var handleClick = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group.GroupBase, {
      childComponent: "div",
      onSelect: handleClick,
      children: stringItems
    }));
    var expected = stringItems[selected];

    var actual = _react.screen.getByText('One');

    expect(actual).toHaveTextContent(expected);
  });
  test('should set {data-child} to be the item', function () {
    var selected = 0;
    var handleClick = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group.GroupBase, {
      childComponent: "div",
      childProp: "data-child",
      onSelect: handleClick,
      children: stringItems
    }));
    var expected = stringItems[selected];

    var actual = _react.screen.getByRole('group').firstChild;

    expect(actual).toHaveAttribute('data-child', expected);
  });
  test('should set aria-multiselectable when select="multiple"', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group.GroupBase, {
      childComponent: "div",
      select: "multiple",
      children: stringItems
    }));
    var expected = 'true';

    var actual = _react.screen.getByRole('group');

    expect(actual).toHaveAttribute('aria-multiselectable', expected);
  });
  test('should set role to group', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group.GroupBase, {
      childComponent: "div",
      select: "multiple",
      children: stringItems
    }));

    var actual = _react.screen.getByRole('group');

    expect(actual).toBeInTheDocument();
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group["default"], {
      childComponent: "div",
      ref: ref,
      children: stringItems
    }));
    var expected = 'SPAN';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});
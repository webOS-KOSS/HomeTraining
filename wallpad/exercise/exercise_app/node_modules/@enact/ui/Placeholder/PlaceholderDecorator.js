"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.PlaceholderDecorator = void 0;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _react = require("react");

var _PlaceholderControllerDecorator = require("./PlaceholderControllerDecorator");

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Default config for PlaceholderDecorator.
 *
 * @memberof ui/Placeholder.PlaceholderDecorator
 * @hocconfig
 * @public
 */
var defaultConfig = {
  /**
   * Configures the style of the placeholder element
   *
   * @type {Object}
   * @default {height: 0, width: 'auto'}
   * @memberof ui/Placeholder.PlaceholderDecorator.defaultConfig
   */
  style: {
    height: 0,
    width: 'auto'
  },

  /**
   * The component to use as a placeholder.
   *
   * @type {String}
   * @default 'div'
   * @memberof ui/Placeholder.PlaceholderDecorator.defaultConfig
   */
  placeholderComponent: 'div'
};
/**
 * A higher-order component that enables a container to notify the wrapped component when scrolling.
 *
 * Containers must provide `registerPlaceholder`, `unregisterPlaceholder`, and `invalidateBounds`
 * methods via React's context for `PlaceholderDecorator` instances.
 *
 * No additional properties are passed to the wrapped component.
 *
 * @class PlaceholderDecorator
 * @memberof ui/Placeholder
 * @hoc
 * @public
 */

var PlaceholderDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var PlaceholderComponent = config.placeholderComponent,
      style = config.style;
  var placeholderStyle = Object.assign({}, defaultConfig.style, style);
  return _class = /*#__PURE__*/function (_PureComponent) {
    _inherits(_class, _PureComponent);

    var _super = _createSuper(_class);

    function _class() {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this);

      _this.initPlaceholderRef = function (ref) {
        _this.placeholderRef = ref;
      };

      _this.state = {
        visible: false
      };
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (!this.state.visible && this.context) {
          this.controller = this.context(this.update.bind(this));
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (this.controller && this.state.visible && prevState.visible !== this.state.visible) {
          // also need invalidateBounds() for scroller :(
          this.controller.unregister();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.controller && !this.state.visible) {
          this.controller.unregister();
        }
      }
    }, {
      key: "update",
      value: function update(_ref) {
        var leftThreshold = _ref.leftThreshold,
            topThreshold = _ref.topThreshold;
        var _this$placeholderRef = this.placeholderRef,
            offsetLeft = _this$placeholderRef.offsetLeft,
            offsetTop = _this$placeholderRef.offsetTop,
            offsetHeight = _this$placeholderRef.offsetHeight,
            offsetWidth = _this$placeholderRef.offsetWidth;

        if (offsetTop < topThreshold + offsetHeight && offsetLeft < leftThreshold + offsetWidth) {
          this.setState(function (state) {
            return state.visible ? null : {
              visible: true
            };
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var visible = this.state.visible;

        if (visible) {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, this.props), {}, {
            ref: this.initPlaceholderRef
          }));
        } else {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(PlaceholderComponent, {
            ref: this.initPlaceholderRef,
            style: placeholderStyle
          });
        }
      }
    }]);

    return _class;
  }(_react.PureComponent), _class.displayName = 'PlaceholderDecorator', _class.contextType = _PlaceholderControllerDecorator.PlaceholderContext, _class;
});
exports.PlaceholderDecorator = PlaceholderDecorator;
var _default = PlaceholderDecorator;
exports["default"] = _default;
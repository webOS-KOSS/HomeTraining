"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ItemDecorator = exports.ItemBase = exports.Item = void 0;

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _compose = _interopRequireDefault(require("ramda/src/compose"));

var _Touchable = _interopRequireDefault(require("../Touchable"));

var _ForwardRef = _interopRequireDefault(require("../ForwardRef"));

var _ItemModule = _interopRequireDefault(require("./Item.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["component", "componentRef", "disabled", "children"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A basic list item component structure without any behaviors applied to it.
 *
 * It also has support for overlay to place things before and after the main content.
 *
 * @class ItemBase
 * @memberof ui/Item
 * @ui
 * @public
 */
var ItemBase = (0, _kind["default"])({
  name: 'ui:Item',
  propTypes:
  /** @lends ui/Item.ItemBase.prototype */
  {
    /**
     * The node to be displayed as the main content of the item.
     *
     * @type {Node}
     * @public
     */
    children: _propTypes2["default"].node,

    /**
     * The type of component to use to render the item. May be a DOM node name (e.g 'div',
     * 'span', etc.) or a custom component.
     *
     * @type {String|Component}
     * @default 'div'
     * @public
     */
    component: _propTypes["default"].renderable,

    /**
     * Called with a reference to [component]{@link ui/Item.ItemBase#component}
     *
     * @type {Object|Function}
     * @private
     */
    componentRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `item` - The root class name
     * * `inline` - Applied when `inline` prop is true
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Applies a disabled state to the item.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes2["default"].bool,

    /**
     * Applies inline styling to the item.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    inline: _propTypes2["default"].bool
  },
  defaultProps: {
    component: 'div',
    inline: false
  },
  styles: {
    css: _ItemModule["default"],
    className: 'item',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref) {
      var inline = _ref.inline,
          styler = _ref.styler;
      return styler.append({
        inline: inline
      });
    }
  },
  render: function render(_ref2) {
    var Component = _ref2.component,
        componentRef = _ref2.componentRef,
        disabled = _ref2.disabled,
        children = _ref2.children,
        rest = _objectWithoutProperties(_ref2, _excluded);

    delete rest.inline;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, _objectSpread(_objectSpread({
      ref: componentRef
    }, rest), {}, {
      "aria-disabled": disabled,
      disabled: disabled,
      children: children
    }));
  }
});
/**
 * A higher-order component that adds touch support to the component it wraps.
 *
 * @hoc
 * @memberof ui/Item
 * @mixes ui/ForwardRef.ForwardRef
 * @mixes ui/Touchable.Touchable
 * @public
 */

exports.ItemBase = ItemBase;
var ItemDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'componentRef'
}), _Touchable["default"]);
/**
 * A minimally-styled ready-to-use list item component with touch support.
 *
 * @class Item
 * @memberof ui/Item
 * @extends ui/Item.ItemBase
 * @mixes ui/Item.ItemDecorator
 * @omit componentRef
 * @ui
 * @public
 */

exports.ItemDecorator = ItemDecorator;
var Item = ItemDecorator(ItemBase);
exports.Item = Item;
var _default = Item;
exports["default"] = _default;
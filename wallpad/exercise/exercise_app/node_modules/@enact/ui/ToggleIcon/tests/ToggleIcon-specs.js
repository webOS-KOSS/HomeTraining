"use strict";

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _ToggleIcon = _interopRequireDefault(require("../ToggleIcon"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var tap = function tap(node) {
  _react.fireEvent.mouseDown(node);

  _react.fireEvent.mouseUp(node);
};

describe('ToggleIcon Specs', function () {
  test('should call onToggle when tapped', function () {
    var handleToggle = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], {
      onToggle: handleToggle,
      children: "star"
    }));

    var toggleIcon = _react.screen.getByText('star');

    tap(toggleIcon);
    var expected = 1;
    expect(handleToggle).toHaveBeenCalledTimes(expected);
  });
  test('should call onClick when clicked', function () {
    var handleClick = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], {
      onClick: handleClick,
      children: "star"
    }));

    var toggleIcon = _react.screen.getByText('star');

    _userEvent["default"].click(toggleIcon);

    var expected = 1;
    expect(handleClick).toHaveBeenCalledTimes(expected);
  });
  test('should call onTap when tapped', function () {
    var handleTap = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], {
      onTap: handleTap,
      children: "star"
    }));

    var toggleIcon = _react.screen.getByText('star');

    tap(toggleIcon);
    var expected = 1;
    expect(handleTap).toHaveBeenCalledTimes(expected);
  });
  test('should call both onToggle and onTap when tapped', function () {
    var handleBoth = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], {
      onTap: handleBoth,
      onToggle: handleBoth,
      children: "star"
    }));

    var toggleIcon = _react.screen.getByText('star');

    tap(toggleIcon);
    var expected = 2;
    expect(handleBoth).toHaveBeenCalledTimes(expected);
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], {
      ref: ref,
      children: "star"
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});
"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _Button = require("../Button");

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Button', function () {
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.Button, {
      ref: ref
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
  test('should have \'disabled\' HTML attribute when \'disabled\' prop is provided', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.Button, {
      disabled: true,
      children: "I am a disabled Button"
    }));

    var button = _react.screen.getByRole('button');

    expect(button).toHaveAttribute('disabled');
  });
  test('should have default minWidth class', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {}));

    var button = _react.screen.getByRole('button');

    var expected = 'minWidth';
    expect(button).toHaveClass(expected);
  });
  test('should have selected class when selected prop is set to true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
      selected: true
    }));

    var button = _react.screen.getByRole('button');

    var expected = 'selected';
    expect(button).toHaveClass(expected);
  });
  test('should have pressed class when pressed prop is set to true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
      pressed: true
    }));

    var button = _react.screen.getByRole('button');

    var expected = 'pressed';
    expect(button).toHaveClass(expected);
  });
  test('should have large class when size prop is set to large', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
      size: "large"
    }));

    var button = _react.screen.getByRole('button');

    var expected = 'large';
    expect(button).toHaveClass(expected);
  });
  test('should have small class when size prop is set to small', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
      size: "small"
    }));

    var button = _react.screen.getByRole('button');

    var expected = 'small';
    expect(button).toHaveClass(expected);
  });
  test('should have hasIcon class when icon prop is defined', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.Button, {
      icon: true,
      children: "Hello Button!"
    }));

    var button = _react.screen.getByRole('button');

    var expected = 'hasIcon';
    expect(button).toHaveClass(expected);
  });
  test('should call onClick', function () {
    var handleCLick = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.Button, {
      onClick: handleCLick,
      children: "Hello Button!"
    }));

    var button = _react.screen.getByRole('button');

    _userEvent["default"].click(button);

    var expected = 1;
    expect(handleCLick).toHaveBeenCalledTimes(expected);
  });
  test('should not call onClick when button is disabled', function () {
    var handleClick = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.Button, {
      disabled: true,
      onClick: handleClick,
      children: "Hello Button!"
    }));

    var button = _react.screen.getByRole('button');

    _userEvent["default"].click(button);

    expect(handleClick).not.toHaveBeenCalled();
  });
});
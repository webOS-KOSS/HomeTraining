"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _Skinnable = _interopRequireDefault(require("../Skinnable"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('Skinnable Specs', function () {
  test('should do nothing when nothing is specified', function () {
    var config = {};
    var data;

    var Component = function Component(props) {
      data = props;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {}));
    expect(data).toMatchObject({});
  });
  test('should add a default skin class when no skin prop is specified', function () {
    var config = {
      defaultSkin: 'dark',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      }
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      "data-testid": "skinnableComponent"
    }));
    var expected = 'darkSkin';

    var component = _react.screen.getByTestId('skinnableComponent');

    expect(component).toHaveClass(expected);
  });
  test('should add the preferred skin class when the skin prop is specified', function () {
    var config = {
      defaultSkin: 'dark',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      }
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      "data-testid": "skinnableComponent",
      skin: "light"
    }));
    var expected = 'lightSkin';

    var component = _react.screen.getByTestId('skinnableComponent');

    expect(component).toHaveClass(expected);
  });
  test('should ignore the preferred skin prop if it\'s not one of the available skins', function () {
    var config = {
      defaultSkin: 'dark',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      }
    };
    var data;

    var Component = function Component(props) {
      data = props;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      "data-testid": "skinnableComponent",
      skin: "potato"
    }));
    expect(data).toMatchObject({});
  });
  test('should ignore the preferred skin prop if it\'s not one of the available skins and not interfere with the className prop', function () {
    var config = {
      defaultSkin: 'dark',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      }
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      className: "cheatingComponent",
      "data-testid": "skinnableComponent",
      skin: "potato"
    }));
    var expected = 'cheatingComponent';

    var component = _react.screen.getByTestId('skinnableComponent');

    expect(component).toHaveClass(expected);
  });
  test('should ignore the skinVariants prop if there are no defined allowedVariants', function () {
    var config = {
      defaultSkin: 'dark',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      }
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      "data-testid": "skinnableComponent",
      skinVariants: "potato"
    }));
    var expected = 'darkSkin';

    var component = _react.screen.getByTestId('skinnableComponent');

    expect(component).toHaveClass(expected);
  });
  test('should only apply allowed variants assigned by the skinVariants prop', function () {
    var config = {
      defaultSkin: 'dark',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      allowedVariants: ['normal', 'smallCaps', 'unicase']
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      "data-testid": "skinnableComponent",
      skinVariants: "normal potato unicase"
    }));
    var expected = 'darkSkin normal unicase';

    var component = _react.screen.getByTestId('skinnableComponent');

    expect(component).toHaveClass(expected);
  });
  test('should apply default variants even if the skinVariants prop is explicitly empty', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      allowedVariants: ['normal', 'smallCaps', 'unicase']
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      "data-testid": "skinnableComponent",
      skinVariants: ""
    }));
    var expected = 'darkSkin normal';

    var component = _react.screen.getByTestId('skinnableComponent');

    expect(component).toHaveClass(expected);
  });
  test('should apply default variants and the skinVariants if both are defined', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      allowedVariants: ['normal', 'smallCaps', 'unicase']
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      "data-testid": "skinnableComponent",
      skinVariants: "unicase"
    }));
    var expected = 'darkSkin normal unicase';

    var component = _react.screen.getByTestId('skinnableComponent');

    expect(component).toHaveClass(expected);
  });
  test('should apply variants supplied via an array or a string in the same way', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      allowedVariants: ['normal', 'smallCaps', 'unicase']
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      "data-testid": "skinnableComponent1",
      skinVariants: "normal unicase"
    }));

    var component1ClassNames = _react.screen.getByTestId('skinnableComponent1').className;

    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      "data-testid": "skinnableComponent2",
      skinVariants: ['normal', 'unicase']
    }));

    var component2ClassNames = _react.screen.getByTestId('skinnableComponent2').className;

    expect(component1ClassNames).toEqual(component2ClassNames);
  });
  test('should allow opting out of the default variants if an object is supplied to skinVariants with false as variant-key values', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      allowedVariants: ['normal', 'smallCaps', 'unicase']
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      "data-testid": "skinnableComponent",
      skinVariants: {
        normal: false,
        unicase: true
      }
    }));
    var expected = 'darkSkin unicase';

    var component = _react.screen.getByTestId('skinnableComponent');

    expect(component).toHaveClass(expected);
  });
  test('should ignore variants, sent by an object, equaling null, undefined, or empty string', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      allowedVariants: ['normal', 'smallCaps', 'unicase']
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableComponent = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableComponent, {
      "data-testid": "skinnableComponent",
      skinVariants: {
        normal: null,
        smallCaps: void 0,
        unicase: ''
      }
    }));
    var expected = 'darkSkin normal';

    var component = _react.screen.getByTestId('skinnableComponent');

    expect(component).toHaveClass(expected);
  });
  test('should apply parent variants', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      allowedVariants: ['normal', 'smallCaps', 'unicase']
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableParent = (0, _Skinnable["default"])(config, Component);
    var SkinnableChild = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableParent, {
      skinVariants: "unicase",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableChild, {
        "data-testid": "skinnableChild",
        skinVariants: "smallCaps"
      })
    }));
    var expected = 'darkSkin normal unicase smallCaps';

    var component = _react.screen.getByTestId('skinnableChild');

    expect(component).toHaveClass(expected);
  });
  test('should be able to override a parent\'s variants by assigning a false skinVariant', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      allowedVariants: ['normal', 'smallCaps', 'unicase']
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableParent = (0, _Skinnable["default"])(config, Component);
    var SkinnableChild = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableParent, {
      skinVariants: "smallCaps unicase",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableChild, {
        "data-testid": "skinnableChild",
        skinVariants: {
          unicase: false
        }
      })
    }));
    var expected = 'darkSkin normal smallCaps';

    var component = _react.screen.getByTestId('skinnableChild');

    expect(component).toHaveClass(expected);
  });
  test('should inherit an overridden default variant', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      allowedVariants: ['normal', 'smallCaps', 'unicase']
    };

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var SkinnableParent = (0, _Skinnable["default"])(config, Component);
    var SkinnableChild = (0, _Skinnable["default"])(config, Component);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableParent, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableChild, {
        skinVariants: {
          normal: false
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableChild, {
          "data-testid": "innerChild"
        })
      })
    }));
    var expected = 'darkSkin';

    var component = _react.screen.getByTestId('innerChild');

    expect(component).toHaveClass(expected);
  });
  test('should not force re-render of child if child unaffected', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      allowedVariants: ['normal', 'smallCaps', 'unicase']
    };
    var wasRendered = jest.fn();

    var Component = function Component(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
    };

    var ChildComponent = function ChildComponent() {
      wasRendered();
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        children: "Hello"
      });
    };

    var SkinnableParent = (0, _Skinnable["default"])(config, Component);
    var SkinnableChild = (0, _Skinnable["default"])(config, ChildComponent);
    var childrenProp = /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableChild, {});

    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableParent, {
      children: childrenProp
    })),
        rerender = _render.rerender;

    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableParent, {
      className: "foo",
      children: childrenProp
    }));
    var expected1 = 1;
    var actual1 = wasRendered.mock.calls.length;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinnableParent, {
      className: "foo",
      skin: "light",
      children: childrenProp
    }));
    var expected2 = 2;
    var actual2 = wasRendered.mock.calls.length;
    expect(actual1).toEqual(expected1);
    expect(actual2).toEqual(expected2);
  });
});
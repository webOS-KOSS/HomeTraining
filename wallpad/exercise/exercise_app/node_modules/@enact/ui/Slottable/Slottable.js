"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Slottable = void 0;
Object.defineProperty(exports, "useSlots", {
  enumerable: true,
  get: function get() {
    return _useSlots["default"];
  }
});

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _useSlots = _interopRequireDefault(require("./useSlots"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Default config for `Slottable`.
 *
 * @memberof ui/Slottable.Slottable
 * @hocconfig
 * @public
 */
var defaultConfig = {
  /**
   * Array of slot names which will be extracted from `children` and distributed to props.
   *
   * @type {String[]}
   * @memberof ui/Slottable.Slottable.defaultConfig
   */
  slots: null
};
/**
 * A higher-order component that allows wrapped components to separate children into pre-designated 'slots'.
 *
 * To use `Slottable`, you must configure it by passing in a config object with the `slots` member set to an
 * array of slot names.  Any children whose `slot` or `defaultSlot` property matches a named slot or whose
 * type matches a named slot will be placed into a property of the same name on the wrapped component.
 *
 * @class Slottable
 * @memberof ui/Slottable
 * @hoc
 * @public
 */

var Slottable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var slots = config.slots; // eslint-disable-next-line no-shadow

  return function Slottable(props) {
    // extract the slots into a new object but populating the default value to be undefined so
    // the key exists in order to allow the current "harmful" behavior below. Must be undefined
    // in order to trigger defaultProps on downstream components.
    var slotProps = {
      children: props.children
    };
    slots.forEach(function (k) {
      return slotProps[k] = undefined;
    }); // eslint-disable-line no-undefined
    // Slottable allows there to be other values in the destination slot and merges them.
    // However, consumers can't avoid key warnings when merging the two lists so we should
    // "consider this harmful" and not continue to support this with the hook and instead
    // encourage using the slot as the default with the prop as a fallback as implemented by the
    // hook.

    var distributed = (0, _useSlots["default"])(slotProps);
    slots.forEach(function (slot) {
      var dist = distributed[slot];
      var prop = props[slot];

      if (prop != null && dist != null) {
        distributed[slot] = [].concat(prop, dist);
      } else if (prop != null) {
        distributed[slot] = prop;
      }
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, props), distributed));
  };
});
exports.Slottable = Slottable;
var _default = Slottable;
exports["default"] = _default;
"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _useId = _interopRequireDefault(require("../useId"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('useId', function () {
  var data = [];

  function Base(props) {
    data.push(props);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      id: data.id,
      generateid: data.generateId
    });
  }

  function Component(_ref) {
    var key = _ref.key,
        prefix = _ref.prefix,
        onUnmount = _ref.onUnmount;
    var provider = (0, _useId["default"])({
      prefix: prefix
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Base, _objectSpread(_objectSpread({}, provider), {}, {
      id: provider.generateId(key, prefix, onUnmount)
    }));
  }

  afterEach(function () {
    return data.splice(0, data.length);
  });
  test('should provide a generateId method', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = 'function';
    var actual = typeof data[0].generateId;
    expect(actual).toBe(expected);
  });
  test('should generate different ids for different instances of the same component', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {})]
    }));
    var firstID = data[0].id;
    var lastID = data[1].id;
    expect(firstID).not.toBe(lastID);
  });
  test('should maintain the same id across renders', function () {
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {})),
        rerender = _render.rerender;

    var expected = data[0].id;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var actual = data[1].id;
    expect(actual).toBe(expected);
  });
  test('should prefix the id with the provided value', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      prefix: "my-id"
    }));
    var id = data[0].id;
    var expected = 'my-id';
    var actual = id.substring(0, 5);
    expect(actual).toBe(expected);
  });
  test('should call onUnmount callback', function () {
    var spy = jest.fn();

    var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      onUnmount: spy
    })),
        unmount = _render2.unmount;

    unmount();
    expect(spy).toHaveBeenCalledTimes(1);
  });
});
"use strict";

var _resolution = require("../resolution.js");

describe('Resolution Specs', function () {
  var screenTypes = [{
    name: 'vga',
    pxPerRem: 8,
    width: 640,
    height: 480,
    aspectRatioName: 'standard'
  }, {
    name: 'xga',
    pxPerRem: 16,
    width: 1024,
    height: 768,
    aspectRatioName: 'standard'
  }, {
    name: 'hd',
    pxPerRem: 16,
    width: 1280,
    height: 720,
    aspectRatioName: 'hdtv'
  }, {
    name: 'fhd',
    pxPerRem: 24,
    width: 1920,
    height: 1080,
    aspectRatioName: 'hdtv',
    base: true
  }, {
    name: 'uw-uxga',
    pxPerRem: 24,
    width: 2560,
    height: 1080,
    aspectRatioName: 'cinema'
  }, {
    name: 'uhd',
    pxPerRem: 48,
    width: 3840,
    height: 2160,
    aspectRatioName: 'hdtv'
  }];
  test('should select screen type whose dimensions are greater than but nearest to the screen', function () {
    var overHD = {
      height: 721,
      width: 1281
    };
    (0, _resolution.defineScreenTypes)(screenTypes);
    var expected = 'fhd';
    var actual = (0, _resolution.getScreenType)(overHD);
    expect(actual).toBe(expected);
  });
  test('should detect portrait orientation', function () {
    var fhdPortrait = {
      height: 1920,
      width: 1080
    };
    (0, _resolution.defineScreenTypes)(screenTypes);
    var expected = 'fhd';
    var actual = (0, _resolution.getScreenType)(fhdPortrait);
    expect(actual).toBe(expected);
  });
  test('should calculate the base font size for the given screen type', function () {
    var expectedFHD = '24px';
    var actualFHD = (0, _resolution.calculateFontSize)('fhd');
    var expectedHD = '16px';
    var actualHD = (0, _resolution.calculateFontSize)('hd');
    expect(actualFHD).toBe(expectedFHD);
    expect(actualHD).toBe(expectedHD);
  });
  test('should scale pixel measurements for the current screen', function () {
    var expectedFHD = 24 / 3;
    var actualFHD = (0, _resolution.scale)(24);
    var expectedHD = 16 / 3;
    var actualHD = (0, _resolution.scale)(16);
    expect(actualFHD).toBe(expectedFHD);
    expect(actualHD).toBe(expectedHD);
  });
  test('should convert pixels to units', function () {
    var expectedFHD = '3rem';
    var actualFHD = (0, _resolution.unit)(24, 'rem');
    var expectedHD = '2rem';
    var actualHD = (0, _resolution.unit)(16, 'rem');
    expect(actualFHD).toBe(expectedFHD);
    expect(actualHD).toBe(expectedHD);
  }); // NOTE: Currently tough to test selectSrc because it relies on a global variable for screenType

  test.skip('should select source for the current screen type', function () {});
});
"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _ImageItem = _interopRequireWildcard(require("../ImageItem"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var src = {
  'hd': 'http://lorempixel.com/64/64/city/1/',
  'fhd': 'http://lorempixel.com/128/128/city/1/',
  'uhd': 'http://lorempixel.com/256/256/city/1/'
};
describe('ImageItem', function () {
  var data;

  var Img = function Img(props) {
    data = props;
    return null;
  };

  test('should support `children` prop', function () {
    var children = 'children';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      "data-testid": "imageItem",
      src: src.hd,
      children: children
    }));
    var expected = children;

    var imageItem = _react.screen.getByTestId('imageItem');

    expect(imageItem).toHaveTextContent(expected);
  });
  test('should omit caption node when `children` is unset', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      "data-testid": "imageItem",
      src: src
    }));
    var expected = 1;

    var imageItemChildren = _react.screen.getByTestId('imageItem').children;

    expect(imageItemChildren).toHaveLength(expected);
  });
  test('should apply `.horizontal` when `orientation="horizontal"`', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem["default"], {
      "data-testid": "imageItem",
      orientation: "horizontal",
      src: src
    }));
    var expected = 'horizontal';

    var imageItem = _react.screen.getByTestId('imageItem');

    expect(imageItem).toHaveClass(expected);
  });
  test('should apply `.vertical` when `orientation="vertical"`', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      "data-testid": "imageItem",
      orientation: "vertical",
      src: src
    }));
    var expected = 'vertical';

    var imageItem = _react.screen.getByTestId('imageItem');

    expect(imageItem).toHaveClass(expected);
  });
  test('should apply `.selected` when `selected`', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      "data-testid": "imageItem",
      selected: true,
      src: src
    }));
    var expected = 'selected';

    var imageItem = _react.screen.getByTestId('imageItem');

    expect(imageItem).toHaveClass(expected);
  });
  test('should pass `src` and `placeholder` to `imageComponent` as component', function () {
    var props = {
      src: 'img.png',
      placeholder: 'place.png'
    };
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, _objectSpread({
      imageComponent: Img
    }, props)));
    expect(data).toMatchObject(props);
  });
  test('should pass `src` and `placeholder` to `imageComponent` as element', function () {
    var props = {
      src: 'img.png',
      placeholder: 'place.png'
    };
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, _objectSpread({
      imageComponent: /*#__PURE__*/(0, _jsxRuntime.jsx)(Img, {})
    }, props)));
    expect(data).toMatchObject(props);
  });
  test('should override `src` and `placeholder` when passing `imageComponent` as element', function () {
    var props = {
      src: 'img.png',
      placeholder: 'place.png'
    };
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, _objectSpread({
      imageComponent: /*#__PURE__*/(0, _jsxRuntime.jsx)(Img, {
        placeholder: "my-place.png",
        src: "my-src.png"
      })
    }, props)));
    expect(data).toMatchObject(props);
  });
  test('should support string for `src` prop', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      src: src.hd
    }));
    var expected = src.hd;

    var imgElement = _react.screen.getAllByRole('img')[1];

    expect(imgElement).toHaveAttribute('src', expected);
  });
  test('should support object for `src` prop', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      src: src
    }));

    var imgElementSrc = _react.screen.getAllByRole('img')[1];

    expect(imgElementSrc).not.toBeNull();
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem["default"], {
      ref: ref,
      src: src
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});
"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _Layout = require("../../Layout");

var _BodyText = _interopRequireWildcard(require("../BodyText"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('BodyText Specs', function () {
  test('should render a single <p> tag', function () {
    var msg = 'Hello BodyText!';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText["default"], {
      children: msg
    }));
    var expected = 'P';

    var actual = _react.screen.getByText(msg).nodeName;

    expect(actual).toBe(expected);
  });
  test('should render BodyText with content', function () {
    var content = 'Hello BodyText!';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText["default"], {
      children: content
    }));

    var bodyText = _react.screen.getByText(content);

    expect(bodyText).toBeInTheDocument();
  });
  test('should not include the centered class by default', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText.BodyTextBase, {
      "data-testid": "bodyText"
    }));

    var bodyText = _react.screen.getByTestId('bodyText');

    var expected = 'centered';
    expect(bodyText).not.toHaveClass(expected);
  });
  test('should include the centered class if `centered` is true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText["default"], {
      centered: true,
      "data-testid": "bodyText"
    }));

    var bodyText = _react.screen.getByTestId('bodyText');

    var expected = 'centered';
    expect(bodyText).toHaveClass(expected);
  });
  test('should support changing the component element to a functional component', function () {
    var component = _Layout.Cell;
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText.BodyTextBase, {
      component: component,
      "data-testid": "bodyText"
    }));

    var bodyText = _react.screen.getByTestId('bodyText');

    var expected = 'cell';
    expect(bodyText).toHaveClass(expected);
  });
  test('should support changing the component element to a different DOM node', function () {
    var componentTag = 'address';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText.BodyTextBase, {
      component: componentTag,
      "data-testid": "bodyText"
    }));

    var bodyText = _react.screen.getByTestId('bodyText');

    var expected = 'ADDRESS';
    var actual = bodyText.nodeName;
    expect(actual).toBe(expected);
  });
});
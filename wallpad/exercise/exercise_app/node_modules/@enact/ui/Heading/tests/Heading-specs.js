"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _Heading = _interopRequireDefault(require("../Heading"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Heading Specs', function () {
  test('should render a Heading with content', function () {
    var content = 'Hello Heading!';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Heading["default"], {
      children: content
    }));

    var actual = _react.screen.getByText('Hello Heading!');

    expect(actual).toBeInTheDocument();
  });
  test('should apply a size class when defining a size', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Heading["default"], {
      size: "large",
      children: "Heading Text"
    }));
    var expected = 'large';

    var actual = _react.screen.getByText('Heading Text');

    expect(actual).toHaveClass(expected);
  });
  test('should apply a matching spacing class to its defined size', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Heading["default"], {
      size: "large",
      children: "Heading Text"
    }));
    var expected = 'largeSpacing';

    var actual = _react.screen.getByText('Heading Text');

    expect(actual).toHaveClass(expected);
  });
  test('should apply an alternate spacing class to its defined size if the two differ', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Heading["default"], {
      size: "large",
      spacing: "small",
      children: "Heading Text"
    }));
    var expected = 'smallSpacing';

    var actual = _react.screen.getByText('Heading Text');

    expect(actual).toHaveClass(expected);
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Heading["default"], {
      size: "large",
      ref: ref
    }));
    var expected = 'H3';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});
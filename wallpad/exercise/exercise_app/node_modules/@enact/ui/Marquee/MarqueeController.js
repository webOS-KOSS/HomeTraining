"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.MarqueeControllerContext = exports.MarqueeController = void 0;

var _handle = require("@enact/core/handle");

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _util = require("@enact/core/util");

var _react = require("react");

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var STATE = {
  inactive: 0,
  // Marquee is not necessary (render or focus not happened)
  active: 1,
  // Marquee in progress, awaiting complete
  ready: 2 // Marquee completed or not needed, but state is active

};
var MarqueeControllerContext = /*#__PURE__*/(0, _react.createContext)(null);
/**
 * Default configuration parameters for {@link ui/Marquee.MarqueeController}.
 *
 * @type {Object}
 * @memberof ui/Marquee.MarqueeController
 * @hocconfig
 */

exports.MarqueeControllerContext = MarqueeControllerContext;
var defaultConfig = {
  /**
   * When `true`, any `onFocus` events that bubble to the controller will start the contained
   * `Marquee` instances. This is useful when a component contains `Marquee` instances that need to be
   * started when sibling components are focused.
   *
   * @type {Boolean}
   * @default false
   * @memberof ui/Marquee.MarqueeController.defaultConfig
   */
  marqueeOnFocus: false
};
/**
 * A higher-order component that synchronizes contained `Marquee`s.
 *
 * @memberof ui/Marquee
 * @hoc
 * @public
 */

var MarqueeController = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var marqueeOnFocus = config.marqueeOnFocus;
  var forwardBlur = (0, _handle.forward)('onBlur');
  var forwardFocus = (0, _handle.forward)('onFocus');
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);
      _this.cancelJob = new _util.Job(function () {
        return _this.doCancel();
      }, 30);

      _this.handleRegister = function (component, handlers) {
        var needsStart = !_this.allInactive() || _this.isFocused;

        _this.controlled.push(_objectSpread(_objectSpread({}, handlers), {}, {
          state: STATE.inactive,
          component: component
        }));

        if (needsStart) {
          _this.dispatch('start');
        }
      };

      _this.handleUnregister = function (component) {
        var wasRunning = false;

        for (var i = 0; i < _this.controlled.length; i++) {
          if (_this.controlled[i].component === component) {
            wasRunning = _this.controlled[i].state === STATE.active;

            _this.controlled.splice(i, 1);

            break;
          }
        }

        if (wasRunning && !_this.anyRunning()) {
          _this.dispatch('start');
        }
      };

      _this.handleStart = function (component) {
        _this.cancelJob.stop();

        if (!_this.anyRunning()) {
          _this.markAll(STATE.ready);

          _this.dispatch('start', component);
        }
      };

      _this.handleCancel = function () {
        if (_this.anyRunning()) {
          _this.cancelJob.start();
        }
      };

      _this.doCancel = function () {
        if (_this.isHovered || _this.isFocused) {
          return;
        }

        _this.markAll(STATE.inactive);

        _this.dispatch('stop');
      };

      _this.handleComplete = function (component) {
        var complete = _this.markReady(component);

        if (complete) {
          _this.markAll(STATE.ready);

          _this.dispatch('start');
        }
      };

      _this.handleEnter = function () {
        _this.isHovered = true;

        if (!_this.anyRunning()) {
          _this.dispatch('start');
        }

        _this.cancelJob.stop();
      };

      _this.handleLeave = function () {
        _this.isHovered = false;

        _this.cancelJob.start();
      };

      _this.handleFocus = function (ev) {
        _this.isFocused = true;

        if (!_this.anyRunning()) {
          _this.dispatch('start');
        }

        _this.cancelJob.stop();

        forwardFocus(ev, _this.props);
      };

      _this.handleBlur = function (ev) {
        _this.isFocused = false;

        if (_this.anyRunning()) {
          _this.cancelJob.start();
        }

        forwardBlur(ev, _this.props);
      };

      _this.controlled = [];
      _this.isFocused = false;
      _this.childContext = {
        cancel: _this.handleCancel,
        complete: _this.handleComplete,
        enter: _this.handleEnter,
        leave: _this.handleLeave,
        register: _this.handleRegister,
        start: _this.handleStart,
        unregister: _this.handleUnregister
      };
      return _this;
    }

    _createClass(_class, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.cancelJob.stop();
      }
    }, {
      key: "dispatch",
      value:
      /*
       * Invokes the `action` handler for each synchronized component except the invoking
       * `component`.
       *
       * @param	{String}	action		`'start'` or `'stop'`
       * @param	{Object}	component	A previously registered component
       *
       * @returns	{undefined}
       */
      function dispatch(action, component) {
        this.controlled.forEach(function (controlled) {
          var controlledComponent = controlled.component,
              handler = controlled[action];

          if (component !== controlledComponent && typeof handler === 'function') {
            var complete = handler.call(controlledComponent); // Returning `true` from a start request means that the marqueeing is
            // unnecessary and is therefore not awaiting a finish

            if (action === 'start' && complete) {
              controlled.state = STATE.ready;
            } else if (action === 'start') {
              controlled.state = STATE.active;
            }
          } else if (action === 'start' && component === controlledComponent) {
            controlled.state = STATE.active;
          }
        });
      }
      /*
       * Marks all components with the passed-in state
       *
       * @param	{Enum}	state	The state to set
       *
       * @returns	{undefined}
       */

    }, {
      key: "markAll",
      value: function markAll(state) {
        this.controlled.forEach(function (c) {
          c.state = state;
        });
      }
      /*
       * Marks `component` as ready for next marquee action
       *
       * @param	{Object}	component	A previously registered component
       *
       * @returns	{Boolean}				`true` if no components are STATE.active
       */

    }, {
      key: "markReady",
      value: function markReady(component) {
        var complete = true;
        this.controlled.forEach(function (c) {
          if (c.component === component) {
            c.state = STATE.ready;
          }

          complete = complete && c.state !== STATE.active;
        });
        return complete;
      }
      /*
       * Checks that all components are inactive
       *
       * @returns {Boolean} `true` if any components should be running
       */

    }, {
      key: "allInactive",
      value: function allInactive() {
        var activeOrReady = this.controlled.reduce(function (res, component) {
          return res || !(component.state === STATE.inactive);
        }, false);
        return !activeOrReady;
      }
      /*
       * Checks for any components currently marqueeing
       *
       * @returns {Boolean} `true` if any component is marqueeing
       */

    }, {
      key: "anyRunning",
      value: function anyRunning() {
        return this.controlled.reduce(function (res, component) {
          return res || component.state === STATE.active;
        }, false);
      }
    }, {
      key: "render",
      value: function render() {
        var props = this.props;

        if (marqueeOnFocus) {
          props = _objectSpread(_objectSpread({}, this.props), {}, {
            onBlur: this.handleBlur,
            onFocus: this.handleFocus
          });
        }

        return /*#__PURE__*/(0, _jsxRuntime.jsx)(MarqueeControllerContext.Provider, {
          value: this.childContext,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props))
        });
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'MarqueeController', _class;
});
exports.MarqueeController = MarqueeController;
var _default = MarqueeController;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ImageDecorator = exports.ImageBase = exports.Image = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _compose = _interopRequireDefault(require("ramda/src/compose"));

var _warning = _interopRequireDefault(require("warning"));

var _resolution = require("../resolution");

var _ForwardRef = _interopRequireDefault(require("../ForwardRef"));

var _ImageModule = _interopRequireDefault(require("./Image.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["alt", "aria-label", "bgImage", "children", "componentRef", "css", "imgSrc", "onError", "onLoad", "style"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A basic image component designed to display images conditionally based on screen size.
 *
 * This component does not have a default size, therefore the image will not show unless a size is
 * specified using a CSS `className` or inline `style`.
 *
 * Example:
 * ```
 * const src = {
 *   'hd': 'http://lorempixel.com/64/64/city/1/',
 *   'fhd': 'http://lorempixel.com/128/128/city/1/',
 *   'uhd': 'http://lorempixel.com/256/256/city/1/'
 * };
 *
 * <Image className={css.myImage} src={src} sizing="fill" />
 * ```
 *
 * `ui/Image` is based on the `div` element, but it uses `img` to provide `onError` and `onLoad`
 * events. The image that you see on screen is a `background-image` from the `div` element, not the
 * `img` element.
 *
 * > If you need a naturally sized image, you can use the native `<img>` element instead.
 *
 * @class ImageBase
 * @memberof ui/Image
 * @ui
 * @public
 */
var ImageBase = (0, _kind["default"])({
  name: 'ui:Image',
  propTypes:
  /** @lends ui/Image.ImageBase.prototype */
  {
    /**
     * String value for the alt attribute of the image.
     *
     * @type {String}
     * @public
     */
    alt: _propTypes2["default"].string,

    /**
     * The aria-label for the image.
     *
     * If unset, it defaults to the value of `alt`.
     *
     * @type {String}
     * @public
     * @memberof ui/Image.Image.prototype
     */
    'aria-label': _propTypes2["default"].string,

    /**
     * Node for the children of an `Image`. Useful for overlays.
     *
     * @type {Node}
     * @public
     */
    children: _propTypes2["default"].node,

    /**
     * Called with a reference to the root component.
     *
     * When using {@link ui/Image.Image}, the `ref` prop is forwarded to this component
     * as `componentRef`.
     *
     * @type {Object|Function}
     * @public
     */
    componentRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `image` - The root component class
     * * `fit` - Applied when `sizing` prop is `fit`
     * * `fill` - Applied when `sizing` prop is `fill`
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Called if the image has an error.
     *
     * @type {Function}
     * @public
     */
    onError: _propTypes2["default"].func,

    /**
     * Called once the image is loaded.
     *
     * @type {Function}
     * @public
     */
    onLoad: _propTypes2["default"].func,

    /**
     * A placeholder image to be displayed before the image is loaded.
     *
     * For performance purposes, it should be pre-loaded or be a data url. If `src` is
     * unset, this value will be used as the `background-image`.
     *
     * @type {String}
     * @default ''
     * @public
     */
    placeholder: _propTypes2["default"].string,

    /**
     * Used to set the `background-size` of an `Image`.
     *
     * * `'fill'` - sets `background-size: cover`
     * * `'fit'` - sets `background-size: contain`
     * * `'none'` - uses the image's natural size
     *
     * @type {String}
     * @default 'fill'
     * @public
     */
    sizing: _propTypes2["default"].oneOf(['fit', 'fill', 'none']),

    /**
     * String value or Object of values used to determine which image will appear on
     * a specific screenSize.
     *
     * @type {String|Object}
     * @public
     */
    src: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object])
  },
  defaultProps: {
    placeholder: '',
    sizing: 'fill'
  },
  styles: {
    css: _ImageModule["default"],
    className: 'image',
    publicClassNames: true
  },
  computed: {
    bgImage: function bgImage(_ref) {
      var placeholder = _ref.placeholder,
          src = _ref.src;
      var imageSrc = (0, _resolution.selectSrc)(src) || placeholder;
      process.env.NODE_ENV !== "production" ? (0, _warning["default"])(imageSrc, 'Image requires that either the "placeholder" or "src" props be specified.') : void 0;
      if (!imageSrc) return null;
      return placeholder && imageSrc !== placeholder ? "url(\"".concat(imageSrc, "\"), url(\"").concat(placeholder, "\")") : "url(\"".concat(imageSrc, "\")");
    },
    className: function className(_ref2) {
      var _className = _ref2.className,
          sizing = _ref2.sizing,
          styler = _ref2.styler;
      return sizing !== 'none' ? styler.append(sizing) : _className;
    },
    imgSrc: function imgSrc(_ref3) {
      var src = _ref3.src;
      return (0, _resolution.selectSrc)(src) || null;
    }
  },
  render: function render(_ref4) {
    var alt = _ref4.alt,
        ariaLabel = _ref4['aria-label'],
        bgImage = _ref4.bgImage,
        children = _ref4.children,
        componentRef = _ref4.componentRef,
        css = _ref4.css,
        imgSrc = _ref4.imgSrc,
        onError = _ref4.onError,
        onLoad = _ref4.onLoad,
        style = _ref4.style,
        rest = _objectWithoutProperties(_ref4, _excluded);

    delete rest.placeholder;
    delete rest.sizing;
    delete rest.src;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({
      role: "img"
    }, rest), {}, {
      "aria-label": ariaLabel || alt,
      ref: componentRef,
      style: _objectSpread(_objectSpread({}, style), {}, {
        backgroundImage: bgImage
      }),
      children: [children, /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
        className: css.img,
        src: imgSrc,
        alt: alt,
        onLoad: onLoad,
        onError: onError
      })]
    }));
  }
});
/**
 * A higher-order component that adds behaviors to an [ImageBase]{@link ui/Image.ImageBase}.
 *
 * @hoc
 * @memberof ui/Image
 * @mixes ui/ForwardRef.ForwardRef
 * @public
 */

exports.ImageBase = ImageBase;
var ImageDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'componentRef'
}));
/**
 * A minimally styled Image ready for customization by a theme.
 *
 * @class Image
 * @memberof ui/Image
 * @extends ui/Image.ImageBase
 * @mixes ui/Image.ImageDecorator
 * @omit componentRef
 * @ui
 * @public
 */

exports.ImageDecorator = ImageDecorator;
var Image = ImageDecorator(ImageBase);
exports.Image = Image;
var _default = Image;
exports["default"] = _default;
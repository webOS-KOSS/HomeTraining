"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _Repeater = _interopRequireWildcard(require("../Repeater"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('Repeater Specs', function () {
  var stringItems = ['One', 'Two', 'Three'];
  var objItems = stringItems.map(function (content, key) {
    return {
      key: key,
      content: content
    };
  });

  var CustomRootType = function CustomRootType(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
  };

  var CustomType = function CustomType(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      children: props.content
    });
  };

  test('should have a root span element', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 'SPAN';

    var rootElementName = _react.screen.getByTestId('repeater').nodeName;

    expect(rootElementName).toBe(expected);
  });
  test('should accept a nodeName as root element', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      component: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 'DIV';

    var rootElementName = _react.screen.getByTestId('repeater').nodeName;

    expect(rootElementName).toBe(expected);
  });
  test('should accept a function as root element', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      component: CustomRootType,
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 'DIV';

    var rootElementName = _react.screen.getByTestId('repeater').nodeName;

    expect(rootElementName).toBe(expected);
  });
  test('should accept a nodeName as childComponent', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 3;

    var actual = _react.screen.getByTestId('repeater').children.length;

    expect(actual).toBe(expected);
  });
  test('should accept a function as childComponent', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: CustomType,
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 3;

    var actual = _react.screen.getByTestId('repeater').children.length;

    expect(actual).toBe(expected);
  });
  test('should create a number of children matching the length of items', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = stringItems.length;

    var actual = _react.screen.getByTestId('repeater').children.length;

    expect(actual).toBe(expected);
  });
  test('should support an array of objects as items', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: CustomType,
      "data-testid": "repeater",
      children: objItems
    }));
    var expected = objItems.length;

    var actual = _react.screen.getByTestId('repeater').children.length;

    expect(actual).toBe(expected);
  });
  test('should support passing itemProps to children', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      itemProps: {
        title: 'test'
      },
      children: stringItems
    }));
    var expected = 'test';

    var actual = _react.screen.getByTestId('repeater').children.item(0);

    expect(actual).toHaveAttribute('title', expected);
  });
  test('should pass index to each child', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = '0';

    var actual = _react.screen.getByTestId('repeater').children.item(0);

    expect(actual).toHaveAttribute('data-index', expected);
  });
  test('should pass data to each child', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      childProp: "data-str",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = stringItems[0];

    var actual = _react.screen.getByTestId('repeater').children.item(0);

    expect(actual).toHaveAttribute('data-str', expected);
  });
  test('should pass item as children to each child', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = stringItems[0];

    var actual = _react.screen.getByTestId('repeater').children.item(0);

    expect(actual).toHaveTextContent(expected);
  });
  test('should set role to list by default', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 'list';

    var listElement = _react.screen.getByTestId('repeater');

    expect(listElement).toHaveAttribute('role', expected);
  });
  test('should allow role to be overridden', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      role: "listbox",
      children: stringItems
    }));
    var expected = 'listbox';

    var listElement = _react.screen.getByTestId('repeater');

    expect(listElement).toHaveAttribute('role', expected);
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater["default"], {
      childComponent: "div",
      component: "div",
      ref: ref,
      children: stringItems
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});
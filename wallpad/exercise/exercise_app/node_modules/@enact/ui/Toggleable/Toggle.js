"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Toggle = void 0;

var _handle = require("@enact/core/handle");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isEnabled = (0, _handle.not)((0, _handle.forProp)('disabled', true));

var makeEvent = function makeEvent(config, value) {
  return _defineProperty({}, config.prop || 'selected', value);
};

var Toggle = /*#__PURE__*/function () {
  function Toggle(config) {
    _classCallCheck(this, Toggle);

    this.handleActivate = (0, _handle.handle)(isEnabled, (0, _handle.forwardCustom)('onToggle', function (ev, props) {
      return makeEvent(props, true);
    }), (0, _handle.returnsTrue)(function (ev, props, context) {
      return context.onToggle(true);
    })).bindAs(this, 'handleActivate');
    this.handleDeactivate = (0, _handle.handle)(isEnabled, (0, _handle.forwardCustom)('onToggle', function (ev, props) {
      return makeEvent(props, false);
    }), (0, _handle.returnsTrue)(function (ev, props, context) {
      return context.onToggle(false);
    })).bindAs(this, 'handleDeactivate');
    this.handleToggle = (0, _handle.handle)(isEnabled, (0, _handle.forwardCustom)('onToggle', function (ev, props, _ref2) {
      var value = _ref2.value;
      return makeEvent(props, !value);
    }), (0, _handle.returnsTrue)(function (ev, props, _ref3) {
      var onToggle = _ref3.onToggle,
          value = _ref3.value;
      return onToggle(!value);
    })).bindAs(this, 'handleToggle');
    // remapping to props for better compatibility with core/handle and binding
    this.props = config;
    this.context = {};
  }

  _createClass(Toggle, [{
    key: "setContext",
    value: function setContext(props, value, onToggle) {
      this.props = _objectSpread(_objectSpread({}, this.props), props);
      this.context.value = value;
      this.context.onToggle = onToggle;
    }
  }, {
    key: "value",
    get: function get() {
      return Boolean(this.context.value);
    }
  }]);

  return Toggle;
}();

exports.Toggle = Toggle;
var _default = Toggle;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.useToggle = useToggle;

var _useClass = _interopRequireDefault(require("@enact/core/useClass"));

var _useControlledState = _interopRequireDefault(require("../useControlledState"));

var _Toggle = _interopRequireDefault(require("./Toggle"));

var _excluded = ["defaultSelected", "selected"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Configuration for `useToggle`
 *
 * @typedef {Object} useToggleConfig
 * @memberof ui/Toggleable
 * @property {Boolean}  [defaultSelected = false] Initial state of the toggle
 * @property {Boolean}  [disabled = false]        Disables updating the state
 * @property {Boolean}  [prop = "selected"]       The key used to pass the current value back
 *                                                through the `onToggle` callback.
 * @property {Boolean}  [selected = false]        Current state of the toggle
 * @property {Function} [onToggle]                Called when the state is changed
 * @private
 */

/**
 * Object returned by `useToggle`
 *
 * @typedef {Object} useToggleInterface
 * @memberof ui/Toggleable
 * @property {Boolean}  selected   Current state of the toggle
 * @property {Function} activate   Sets the current state to `true`
 * @property {Function} deactivate Sets the current state to `false`
 * @property {Function} toggle     Toggles the current state to the opposite value
 * @private
 */

/**
 * Manages a boolean state value.
 *
 * The value may either be toggled via the `onToggle` or explicitly set via `onActivate` and
 * `onDeactivate`. The initial value can be set using the `defaultSelected` option.
 *
 * @param {useToggleConfig} config Configuration options
 * @returns {useToggleInterface}
 * @private
 */
function useToggle() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      defaultSelected = _ref.defaultSelected,
      selected = _ref.selected,
      config = _objectWithoutProperties(_ref, _excluded);

  var toggle = (0, _useClass["default"])(_Toggle["default"], config);
  var state = (0, _useControlledState["default"])(defaultSelected, selected, typeof selected !== 'undefined');
  var props = {
    disabled: config.disabled,
    onToggle: config.onToggle
  };
  toggle.setContext.apply(toggle, [props].concat(_toConsumableArray(state)));
  return {
    activate: toggle.handleActivate,
    deactivate: toggle.handleDeactivate,
    toggle: toggle.handleToggle,
    selected: toggle.value
  };
}

var _default = useToggle;
exports["default"] = _default;
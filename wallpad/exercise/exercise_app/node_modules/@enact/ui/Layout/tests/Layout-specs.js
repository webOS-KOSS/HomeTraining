"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _Layout = _interopRequireWildcard(require("../Layout"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

describe('Layout Specs', function () {
  var layoutPropAlign = [['baseline', 'baseline'], ['center', 'center'], ['end', 'flex-end'], ['start', 'flex-start']];
  layoutPropAlign.forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        value = _ref2[0],
        resolved = _ref2[1];

    test("should apply '".concat(resolved, "' style value given an align prop value of \"").concat(value, "\""), function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout["default"], {
        align: value,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
          children: "Body"
        })
      }));

      var layout = _react.screen.getByText('Body').parentElement;

      var expected = resolved;
      expect(layout).toHaveStyle({
        'align-items': expected
      });
    });
  });
  test('should apply a class for inline', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout["default"], {
      inline: true,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
        children: "Body"
      })
    }));

    var layout = _react.screen.getByText('Body').parentElement;

    var expected = 'inline';
    expect(layout).toHaveClass(expected);
  }); // Tests for prop and className combinations

  var propStyleCombination = [['orientation', ['horizontal', 'vertical']]];
  propStyleCombination.forEach(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        prop = _ref4[0],
        vals = _ref4[1];

    vals.forEach(function (value) {
      test("should apply classes for ".concat(prop), function () {
        var propValue = _defineProperty({}, prop, value);

        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout["default"], _objectSpread(_objectSpread({}, propValue), {}, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
            children: "Body"
          })
        })));

        var layout = _react.screen.getByText('Body').parentElement;

        var expected = value;
        expect(layout).toHaveClass(expected);
      });
    });
  }); // Test for boolean classes

  var cellBooleanPropClasses = ['shrink'];
  cellBooleanPropClasses.forEach(function (prop) {
    test("should apply a class for ".concat(prop), function () {
      var props = _defineProperty({}, prop, true);

      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, _objectSpread(_objectSpread({}, props), {}, {
        children: "Body"
      })));

      var layout = _react.screen.getByText('Body');

      var expected = prop;
      expect(layout).toHaveClass(expected);
    });
  });
  var cellPropSize = [['size', ['100px', '50%', '5em']]];
  cellPropSize.forEach(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
        prop = _ref6[0],
        vals = _ref6[1];

    vals.forEach(function (value) {
      test("should apply flexBasis styles the size prop value ".concat(value), function () {
        var propValue = _defineProperty({}, prop, value);

        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, _objectSpread(_objectSpread({}, propValue), {}, {
            children: "Body"
          }))
        }));

        var layoutCell = _react.screen.getByText('Body');

        var expected = value;
        expect(layoutCell).toHaveStyle({
          'flex-basis': expected
        });
      });
    });
  });
  test('should return a DOM node reference for `componentRef` on `Layout`', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout["default"], {
      ref: ref
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
  test('should return a DOM node reference for `componentRef` on `Cell`', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
      ref: ref
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});
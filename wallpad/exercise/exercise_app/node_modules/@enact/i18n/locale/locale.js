"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNonLatinLocale = isNonLatinLocale;
exports.isRtlLocale = isRtlLocale;
exports.updateLocale = void 0;

var _ilib = _interopRequireDefault(require("ilib"));

var _LocaleInfo = _interopRequireDefault(require("ilib/lib/LocaleInfo"));

var _ScriptInfo = _interopRequireDefault(require("ilib/lib/ScriptInfo"));

var _case = require("../src/case");

var _excluded = ["onLoad", "latinLanguageOverrides", "nonLatinLanguageOverrides"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Returns `true` if a locale list is provided and it includes either the language (the first part
// of the spec e.g. ko) or the entire spec (e.g. ko-KR)
var includesLocale = function includesLocale(localeList, locale) {
  return Array.isArray(localeList) && (localeList.includes(locale.getLanguage()) || localeList.includes(locale.toString()));
};
/**
 * Tell whether or not the given locale is considered a non-Latin locale for webOS purposes. This
 * controls which fonts are used in various places to show the various languages. An undefined spec
 * parameter means to test the current locale.
 *
 * @memberof i18n/locale
 * @param {ilib.Locale|string|undefined} spec locale specifier or locale object of the locale to
 *	test, or undefined to test the current locale
 * @param {Object} [options] An object configuring the request. Must include an `onLoad` member to
 *                           receive the result.
 */


function isNonLatinLocale(spec) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _onLoad = options.onLoad,
      latinLanguageOverrides = options.latinLanguageOverrides,
      nonLatinLanguageOverrides = options.nonLatinLanguageOverrides,
      rest = _objectWithoutProperties(options, _excluded);

  if (!_onLoad) return; // eslint-disable-next-line no-new

  new _LocaleInfo["default"](spec, _objectSpread(_objectSpread({}, rest), {}, {
    onLoad: function onLoad(li) {
      var locale = li.getLocale();

      _onLoad( // the language actually is non-latin and should not be treated as latin
      li.getScript() !== 'Latn' && !includesLocale(latinLanguageOverrides, locale) || // the language is latin but should be treated as non-latin
      includesLocale(nonLatinLanguageOverrides, locale));
    }
  }));
}
/**
 * Determines if current locale is a right-to-left locale.
 *
 * @memberof i18n/locale
 * @param {Object} [options] An object configuring the request. Must include an `onLoad` member to
 *                           receive the result.
 */


function isRtlLocale() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _onLoad2 = options.onLoad,
      sync = options.sync;
  if (!_onLoad2) return; // eslint-disable-next-line no-new

  new _LocaleInfo["default"](_ilib["default"].getLocale(), _objectSpread(_objectSpread({}, options), {}, {
    onLoad: function onLoad(li) {
      var scriptName = li.getScript(); // eslint-disable-next-line no-new

      new _ScriptInfo["default"](scriptName, {
        sync: sync,
        onLoad: function onLoad(script) {
          _onLoad2(script.getScriptDirection() === 'rtl');
        }
      });
    }
  }));
}
/**
 * This Enact hook lets us know that the system locale has changed and gives
 * us a chance to update the iLib locale before Enact broadcasts its
 * `onlocalechange` signal.
 * Provide a locale string, like 'en-US' or 'ja-JP', to conveniently set
 * that locale immediately. Provide nothing, and reset the locale back to the
 * browser's default language.
 *
 * @memberof i18n/locale
 * @param {String} locale Locale identifier
 * @returns {undefined}
 */


var updateLocale = function updateLocale(locale) {
  // blow away the cache to force it to reload the manifest files for the new app
  // eslint-disable-next-line no-undefined
  if (_ilib["default"]._load) _ilib["default"]._load.manifest = undefined; // remove the cache of the platform name to allow transition between snapshot and browser

  delete _ilib["default"]._platform; // load any external ilib/resbundle data

  _ilib["default"].data = global.ilibData || _ilib["default"].data;
  _ilib["default"].data.cache = _ilib["default"].data.cache || {};
  _ilib["default"].data.cache['ResBundle-strings'] = global.resBundleData || {}; // ilib handles falsy values and automatically uses local locale when encountered which
  // is expected and desired

  _ilib["default"].setLocale(locale);

  var newLocale = _ilib["default"].getLocale(); // Recreate the case mappers to use the just-recently-set locale


  (0, _case.initCaseMappers)();
  return newLocale;
};

exports.updateLocale = updateLocale;
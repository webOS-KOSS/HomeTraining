"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.TextDecorator = exports.Text = void 0;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _ilib = _interopRequireDefault(require("ilib"));

var _IString = _interopRequireDefault(require("ilib/lib/IString"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = require("react");

var _I18nDecorator = require("../I18nDecorator");

var _resBundle = require("../src/resBundle");

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function getTextMap(mapPropsToText, props) {
  var children = props.children,
      defaultText = props.defaultText;

  if (mapPropsToText) {
    var map = {};
    Object.keys(mapPropsToText).forEach(function (prop) {
      var text = mapPropsToText[prop]; // if a prop is specified without a proper value (string or object), ignore it

      if (text) {
        if (typeof text === 'string') {
          // for string text values, pass them along as the untranslated text
          // without a default value
          map[prop] = {
            translated: false,
            text: text,
            defaultText: false
          };
        } else if (typeof text.text === 'string') {
          // for object text values with a string text member, use it as the
          // untranslated text and optionally look for a string defaultText for a
          // default value
          map[prop] = {
            translated: false,
            text: text.text,
            defaultText: typeof text.defaultText === 'string' ? text.defaultText : false
          };
        }
      }
    });
    return map;
  } else if (typeof children === 'string') {
    return {
      children: {
        translated: false,
        text: children,
        defaultText: defaultText
      }
    };
  }
}

var STRING_ONLY = function STRING_ONLY() {};
/**
 * Default config for {@link i18n/Text.TextDecorator}.
 *
 * @memberof i18n/Text.TextDecorator
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Configures the translated text passed to the wrapped component.
   *
   * @type {Object<String, String|Object>}
   * @default null
   * @public
   * @memberof i18n/Text.TextDecorator.defaultConfig
   */
  mapPropsToText: null
};
/**
 * A higher-order component that is used to translate text and provide the translations via props.
 *
 * `TextDecorator` accepts an optional `mapPropsToText` config prop which defines the props it will
 * populate and the text to translate and provide in that prop. `defaultText` can also be provided
 * when appropriate.
 *
 * If translations are not available yet and all props do not include a default value,
 * `TextDecorator` will render nothing. Once translations are avaiable, the component will update
 * with the translated strings.
 *
 * ```
 * TextDecorator({
 *   mapPropsToText: {
 *     // Always translate "Go" and pass it in the `children` prop
 *     children: 'Go',
 *     // Translate "Go to next page" but pass "" (value always untranslated) while
 *     // waiting for the translated strings to be fetched.
 *     'aria-label': {
 *       text: 'Go to next page',
 *       defaultText: ''
 *     }
 *   }
 * })
 * ```
 *
 * @class TextDecorator
 * @memberof i18n/Text
 * @hoc
 * @public
 */

var TextDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var mapPropsToText = config.mapPropsToText;
  var Decorator = (_class = /*#__PURE__*/function (_Component) {
    _inherits(Decorator, _Component);

    var _super = _createSuper(Decorator);

    function Decorator(props) {
      var _this;

      _classCallCheck(this, Decorator);

      _this = _super.call(this, props);
      _this.state = {
        map: getTextMap(mapPropsToText, props)
      };
      return _this;
    }

    _createClass(Decorator, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.shouldTranslate()) {
          this.translate(this.props.locale);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.locale !== prevProps.locale) {
          this.translate(this.props.locale);
        }
      }
    }, {
      key: "shouldTranslate",
      value: function shouldTranslate() {
        return mapPropsToText || typeof this.props.children === 'string';
      }
    }, {
      key: "translate",
      value: function translate() {
        var _this2 = this;

        var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _ilib["default"].getLocale();
        var map = this.state.map;
        var bundle = (0, _resBundle.getResBundle)();
        if (!map) return;
        var props = Object.keys(map);
        Promise.all([new Promise(function (resolve) {
          if (bundle) {
            resolve(bundle);
          }

          (0, _resBundle.createResBundle)({
            locale: locale,
            sync: false,
            onLoad: resolve
          });
        }), // ResBundle.getString will try to synchronously fetch the plurals resouce so need
        // to proactively fetch it to avoid the sync XHR
        new Promise(function (resolve) {
          return _IString["default"].loadPlurals(false, null, null, resolve);
        })]).then(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 1),
              resBundle = _ref2[0];

          if (!resBundle) return;
          var translated = props.reduce(function (obj, prop) {
            obj[prop].translated = String((0, _resBundle.getIStringFromBundle)(obj[prop].text, resBundle));
            return obj;
          }, _objectSpread({}, map));

          _this2.setState({
            map: translated
          });
        });
      }
    }, {
      key: "canRender",
      value: function canRender() {
        var entries = Object.values(this.state.map);

        for (var _i2 = 0, _entries = entries; _i2 < _entries.length; _i2++) {
          var entry = _entries[_i2];

          if (entry.translated === false && entry.defaultText === false) {
            return false;
          }
        }

        return true;
      }
    }, {
      key: "getTextForProp",
      value: function getTextForProp(prop) {
        var _this$state$map$prop = this.state.map[prop],
            _this$state$map$prop$ = _this$state$map$prop.defaultText,
            defaultText = _this$state$map$prop$ === void 0 ? '' : _this$state$map$prop$,
            translated = _this$state$map$prop.translated;
        return translated === false ? defaultText : translated;
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        if (!this.shouldTranslate()) {
          var passThrough = _objectSpread({}, this.props);

          delete passThrough.locale;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, passThrough));
        }

        if (!this.canRender()) {
          return null;
        }

        if (Wrapped === STRING_ONLY) {
          return this.getTextForProp('children');
        }

        var props = _objectSpread({}, this.props);

        delete props.locale;
        Object.keys(this.state.map).forEach(function (prop) {
          props[prop] = _this3.getTextForProp(prop);
        });
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
      }
    }]);

    return Decorator;
  }(_react.Component), _class.displayName = 'TextDecorator', _class.propTypes =
  /** @lends i18n/Text.TextDecorator.prototype */
  {
    /**
     * Passed to the wrapped component.
     *
     * If `mapPropsToText` is `null` and `children` is a string, the string will be
     * translated before being passed to the wrapped component.
     *
     * @type {*}
     * @public
     */
    children: _propTypes["default"].any,

    /**
     * The locale for translation.
     *
     * If not supplied, the current locale is used.
     *
     * @type {String}
     * @public
     */
    locale: _propTypes["default"].string
  }, _class);
  return (0, _I18nDecorator.I18nContextDecorator)({
    localeProp: 'locale'
  }, Decorator);
});
/**
 * Translates its child string value in the current locale.
 *
 * If translations are not available yet, `Text` will render nothing. Once translations are
 * avaiable, the component will update with the translated string.
 *
 * ```
 * <Text>Go</Text>
 * ```
 *
 * @class Text
 * @memberof i18n/Text
 * @mixes i18n/Text.TextDecorator
 * @ui
 * @public
 */

exports.TextDecorator = TextDecorator;
var Text = TextDecorator(STRING_ONLY);
/**
 * The string to be translated.
 *
 * @name children
 * @memberof i18n/Text.Text.prototype
 * @type {String}
 * @public
 */

exports.Text = Text;
var _default = Text;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "I18nContext", {
  enumerable: true,
  get: function get() {
    return _useI18nContext.I18nContext;
  }
});
exports["default"] = exports.I18nDecorator = exports.I18nContextDecorator = void 0;
Object.defineProperty(exports, "useI18n", {
  enumerable: true,
  get: function get() {
    return _useI18n2["default"];
  }
});
Object.defineProperty(exports, "useI18nContext", {
  enumerable: true,
  get: function get() {
    return _useI18nContext.useI18nContext;
  }
});

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _propTypes = _interopRequireDefault(require("prop-types"));

require("../src/glue");

var _useI18n2 = _interopRequireDefault(require("./useI18n"));

var _useI18nContext = require("./useI18nContext");

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["locale"],
    _excluded2 = ["className"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var join = function join(a, b) {
  return a && b ? a + ' ' + b : a || b || '';
};
/**
 * Default config for `I18nDecorator`.
 *
 * @memberof i18n/I18nDecorator.I18nDecorator
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Array of locales that should be treated as latin regardless of their script.
   *
   * @type {String[]}
   * @default	null
   * @public
   * @memberof i18n/I18nDecorator.I18nDecorator.defaultConfig
   */
  latinLanguageOverrides: null,

  /**
   * Array of locales that should be treated as non-latin regardless of their script.
   *
   * @type {String[]}
   * @default null
   * @public
   * @memberof i18n/I18nDecorator.I18nDecorator.defaultConfig
   */
  nonLatinLanguageOverrides: null,

  /**
   * Array of resource loaders to be invoked after a locale change.
   *
   * Each loader must be a function which accepts an object and returns either the resource when
   * `options.sync` is `true` or a `Promise` for the resource when `options.sync` is `false`.
   *
   * ```
   * resources: [
   *   (options) => new Promise((resolve, reject) => {
   *     fetchResource({onLoad: resolve, onError: reject});
   *   })
   * ]
   * ```
   *
   * If you need to handle the resource in some way on load, you can pass an object with an
   * `onLoad` member that will be called once all resources have been loaded. This should be used
   * if loading a resource has side effects that should only be applied once all loading has
   * completed.
   *
   * ```
   * resources: [
   *   {resource: (options) => { ... fetch ... }, onLoad: (res) => { ... apply side effect ... }}
   * ]
   * ```
   *
   * @type {Array<Function|Object>}
   * @default null
   * @public
   * @memberof i18n/I18nDecorator.I18nDecorator.defaultConfig
   */
  resources: null,

  /**
   * Retrieve i18n resource files synchronously
   *
   * @type {Boolean}
   * @default false
   * @public
   * @memberof i18n/I18nDecorator.I18nDecorator.defaultConfig
   */
  sync: false
};
/**
 * A higher-order component that is used to wrap the root element in an app. It provides an `rtl`
 * member on the context of the wrapped component, allowing the children to check the current text
 * directionality as well as an `updateLocale` method that can be used to update the current locale.
 *
 * There are no configurable options on this HOC.
 *
 * Note: This HoC passes `className` to the wrapped component. It must be passed to the main DOM
 * node.
 *
 * @class I18nDecorator
 * @memberof i18n/I18nDecorator
 * @hoc
 * @public
 */

var I18nDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  // eslint-disable-next-line no-shadow
  function I18nDecorator(props) {
    var locale = props.locale,
        rest = _objectWithoutProperties(props, _excluded);

    var _useI18n = (0, _useI18n2["default"])(_objectSpread({
      locale: locale
    }, config)),
        i18nClassName = _useI18n.className,
        i18n = _objectWithoutProperties(_useI18n, _excluded2);

    var className = join(i18nClassName, props.className);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_useI18nContext.I18nContext.Provider, {
      value: i18n,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, rest), {}, {
        className: className
      }))
    });
  }

  I18nDecorator.propTypes =
  /** @lends i18n/I18nDecorator.I18nDecorator.prototype */
  {
    /**
     * Classes to apply to the wrapped component.
     *
     * @type {String}
     * @public
     */
    className: _propTypes["default"].string,

    /**
     * The locale to use.
     *
     * A string with a {@link https://tools.ietf.org/html/rfc5646|BCP 47 language tag}. The
     * system locale will be used by default.
     *
     * @type {String}
     * @public
     */
    locale: _propTypes["default"].string
  };
  return I18nDecorator;
});
exports.I18nDecorator = I18nDecorator;
var contextDefaultConfig = {
  localeProp: null,
  rtlProp: null,
  updateLocaleProp: null
};
var I18nContextDecorator = (0, _hoc["default"])(contextDefaultConfig, function (config, Wrapped) {
  var loadedProp = config.loadedProp,
      localeProp = config.localeProp,
      rtlProp = config.rtlProp,
      updateLocaleProp = config.updateLocaleProp; // eslint-disable-next-line no-shadow

  return function I18nContextDecorator(props) {
    var i18nContext = (0, _useI18nContext.useI18nContext)();

    if (i18nContext) {
      var loaded = i18nContext.loaded,
          locale = i18nContext.locale,
          rtl = i18nContext.rtl,
          updateLocale = i18nContext.updateLocale;
      props = _objectSpread({}, props);

      if (loadedProp) {
        props[loadedProp] = loaded;
      }

      if (localeProp) {
        props[localeProp] = locale;
      }

      if (rtlProp) {
        props[rtlProp] = rtl;
      }

      if (updateLocaleProp) {
        props[updateLocaleProp] = updateLocale;
      }
    }

    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
  };
});
exports.I18nContextDecorator = I18nContextDecorator;
var _default = I18nDecorator;
exports["default"] = _default;
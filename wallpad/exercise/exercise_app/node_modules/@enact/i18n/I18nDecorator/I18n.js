"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.I18n = void 0;

var _dispatcher = require("@enact/core/dispatcher");

var _util = require("@enact/core/util");

var _locale = require("../locale");

var _resBundle = require("../src/resBundle");

var _wrapIlibCallback = _interopRequireDefault(require("../src/wrapIlibCallback"));

var _getI18nClasses = _interopRequireDefault(require("./getI18nClasses"));

var _windowFocus = require("./windowFocus");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Manages i18n resource loading.
 *
 * @class I18n
 * @private
 */
var I18n = /*#__PURE__*/function () {
  function I18n(_ref) {
    var _this = this;

    var latinLanguageOverrides = _ref.latinLanguageOverrides,
        nonLatinLanguageOverrides = _ref.nonLatinLanguageOverrides,
        resources = _ref.resources,
        _ref$sync = _ref.sync,
        sync = _ref$sync === void 0 ? true : _ref$sync;

    _classCallCheck(this, I18n);

    this.handleLocaleChange = function () {
      (0, _windowFocus.onWindowFocus)(_this.updateLocale);
    };

    this.updateLocale = function (newLocale) {
      _this.loadResources(newLocale);
    };

    this._locale = null;
    this._ready = sync;

    this._onLoadResources = function () {};

    this.loadResourceJob = null;
    this.latinLanguageOverrides = latinLanguageOverrides;
    this.nonLatinLanguageOverrides = nonLatinLanguageOverrides;
    this.resources = this.normalizeResources(resources);
    this.sync = sync;
  }
  /**
   * Sets the current locale and load callback.
   *
   * Changing the locale will request new resource files for that locale.
   *
   * @type {String}
   * @public
   */


  _createClass(I18n, [{
    key: "setContext",
    value: function setContext(locale, onLoadResources) {
      this.loadResourceJob = new _util.Job(onLoadResources);
      this._onLoadResources = onLoadResources;

      if (this._locale !== locale) {
        this._locale = locale;
        this.loadResources(locale);
      }
    }
    /**
     * Normalize the structure of the external resources to be an array of resource/onLoad pairs.
     *
     * @private
     */

  }, {
    key: "normalizeResources",
    value: function normalizeResources(resources) {
      return Array.isArray(resources) ? resources.map(function (res) {
        if (!res) return;
        var fn = res.resource || res;
        var onLoad = res.onLoad;
        if (typeof fn !== 'function') return;
        return {
          resource: fn,
          onLoad: onLoad
        };
      }).filter(Boolean) : [];
    }
    /**
     * Adds the `languagechange` event listener and initiates async resource retrieval.
     *
     * Should only be called after `window` is available and the DOM is ready.
     *
     * @public
     */

  }, {
    key: "load",
    value: function load() {
      this._ready = true;

      if (typeof window === 'object') {
        (0, _dispatcher.on)('languagechange', this.handleLocaleChange, window);
      } // When async, we defer loading resources until DOM is ready


      if (!this.sync) {
        this.loadResources(this._locale);
      }
    }
    /**
     * Cleans up resource retrieval and event listeners.
     *
     * @public
     */

  }, {
    key: "unload",
    value: function unload() {
      this._ready = false;
      this.loadResourceJob.stop();

      if (typeof window === 'object') {
        (0, _dispatcher.off)('languagechange', this.handleLocaleChange, window);
      }
    }
    /**
     * Loads the resources for the given locale.
     *
     * @private
     */

  }, {
    key: "loadResources",
    value: function loadResources(spec) {
      var _this2 = this;

      if (!this._ready) return;
      var locale = (0, _locale.updateLocale)(spec);
      var options = {
        sync: this.sync,
        locale: locale
      };
      var rtl = (0, _wrapIlibCallback["default"])(_locale.isRtlLocale, options);
      var className = (0, _wrapIlibCallback["default"])(_getI18nClasses["default"], _objectSpread(_objectSpread({}, options), {}, {
        latinLanguageOverrides: this.latinLanguageOverrides,
        nonLatinLanguageOverrides: this.nonLatinLanguageOverrides
      }));
      var bundle = (0, _wrapIlibCallback["default"])(_resBundle.createResBundle, options);

      if (this.sync) {
        var state = {
          className: className,
          loaded: true,
          locale: locale,
          rtl: rtl
        };
        (0, _resBundle.setResBundle)(bundle);
        this.resources.forEach(function (_ref2) {
          var resource = _ref2.resource,
              onLoad = _ref2.onLoad;
          var result = resource(options);
          if (onLoad) onLoad(result);
        });

        this._onLoadResources(state);
      } else {
        var resources = Promise.all([rtl, className, // move updating into a new method with call to setState
        bundle].concat(_toConsumableArray(this.resources.map(function (res) {
          return (0, _wrapIlibCallback["default"])(res.resource, options);
        })))).then(function (_ref3) {
          var _ref4 = _toArray(_ref3),
              rtlResult = _ref4[0],
              classNameResult = _ref4[1],
              bundleResult = _ref4[2],
              userResources = _ref4.slice(3);

          (0, _resBundle.setResBundle)(bundleResult);

          _this2.resources.forEach(function (_ref5, i) {
            var onLoad = _ref5.onLoad;
            return onLoad && onLoad(userResources[i]);
          });

          return {
            className: classNameResult,
            loaded: true,
            locale: locale,
            rtl: rtlResult
          };
        }); // TODO: Resolve how to handle failed resource requests
        // .catch(...);

        this.loadResourceJob.promise(resources);
      }
    }
    /**
     * Called when the `languagechange` event fires.
     */

  }]);

  return I18n;
}();

exports.I18n = I18n;
var _default = I18n;
exports["default"] = _default;
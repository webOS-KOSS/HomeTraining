"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.useFocusOnTransition = useFocusOnTransition;

var _handle = _interopRequireWildcard(require("@enact/core/handle"));

var _useHandlers = _interopRequireDefault(require("@enact/core/useHandlers"));

var _spotlight = _interopRequireDefault(require("@enact/spotlight"));

var _react = require("react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var transitionHandlers = {
  onTransition: (0, _handle["default"])((0, _handle.forwardWithPrevent)('onTransition'), function (ev, _ref, _ref2) {
    var spotlightId = _ref.spotlightId;
    var current = _ref2.current;
    current.timerId = setTimeout(function () {
      var currentSpotlight = _spotlight["default"].getCurrent();

      if (spotlightId && !currentSpotlight) {
        _spotlight["default"].focus(spotlightId);
      }
    });
  }),
  onWillTransition: (0, _handle["default"])((0, _handle.forwardWithPrevent)('onWillTransition'), function (ev, props, _ref3) {
    var current = _ref3.current;
    clearTimeout(current.timerId);
    current.timerId = null;

    var currentSpotlight = _spotlight["default"].getCurrent();

    if (!_spotlight["default"].getPointerMode() && currentSpotlight) {
      currentSpotlight.blur();
    }
  })
};

function useFocusOnTransition(config) {
  var _useRef = (0, _react.useRef)({
    timerId: null
  }),
      current = _useRef.current;

  var handlers = (0, _useHandlers["default"])(transitionHandlers, config, {
    current: current
  });
  return handlers;
}

var _default = useFocusOnTransition;
exports["default"] = _default;
"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _TabLayout = _interopRequireWildcard(require("../TabLayout"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('TabLayout specs', function () {
  test('should be collapsed when collapsed is true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_TabLayout.TabLayoutBase, {
      "data-testid": "tabLayout",
      collapsed: true,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Button",
        icon: "demosync",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Button"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Item",
        icon: "playcircle",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Item"
        })
      })]
    }));
    var expected = 'collapsed';

    var actual = _react.screen.getByTestId('tabLayout');

    expect(actual).toHaveClass(expected);
  });
  test('should have default orientation of vertical', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_TabLayout.TabLayoutBase, {
      "data-testid": "tabLayout",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Button",
        icon: "demosync",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Button"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Item",
        icon: "playcircle",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Item"
        })
      })]
    }));
    var expected = 'vertical';

    var actual = _react.screen.getByTestId('tabLayout');

    expect(actual).toHaveClass(expected);
  });
  test('should have orientation of horizontal when orientation is set to horizontal', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_TabLayout.TabLayoutBase, {
      "data-testid": "tabLayout",
      orientation: "horizontal",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Button",
        icon: "demosync",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Button"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Item",
        icon: "playcircle",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Item"
        })
      })]
    }));
    var expected = 'horizontal';

    var actual = _react.screen.getByTestId('tabLayout');

    expect(actual).toHaveClass(expected);
  });
  test('should call onTabAnimationEnd for vertical tabs', function () {
    var spy = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout["default"], {
      "data-testid": "tabLayout",
      orientation: "vertical",
      onTabAnimationEnd: spy,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      })
    }));

    var tabs = _react.screen.getByTestId('tabLayout').children.item(0);

    _react.fireEvent.transitionEnd(tabs);

    expect(spy).toHaveBeenCalledTimes(1);
  });
  test('should include expected payload in onTabAnimationEnd', function () {
    var spy = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout["default"], {
      "data-testid": "tabLayout",
      orientation: "vertical",
      onTabAnimationEnd: spy,
      collapsed: true,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      })
    }));

    var tabs = _react.screen.getByTestId('tabLayout').children.item(0);

    _react.fireEvent.transitionEnd(tabs);

    var expected = {
      type: 'onTabAnimationEnd',
      collapsed: true
    };
    var actual = spy.mock.calls[0][0];
    expect(actual).toEqual(expected);
  });
  test('should not call onTabAnimationEnd for horizontal tabs', function () {
    var spy = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout["default"], {
      "data-testid": "tabLayout",
      orientation: "horizontal",
      onTabAnimationEnd: spy,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      })
    }));

    var tabs = _react.screen.getByTestId('tabLayout').children.item(0);

    _react.fireEvent.transitionEnd(tabs);

    expect(spy).not.toHaveBeenCalled();
  });
  test('should call `onSelect` with `onSelect` type when selecting a tab', function () {
    var spy = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_TabLayout["default"], {
      orientation: "vertical",
      onSelect: spy,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        "data-testid": "tab",
        title: "Item",
        icon: "playcircle",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Item"
        })
      })]
    }));

    _userEvent["default"].click(_react.screen.getAllByTestId('tab')[1]);

    var expected = {
      type: 'onSelect'
    };
    var actual = spy.mock.calls.length && spy.mock.calls[0][0];
    expect(actual).toMatchObject(expected);
  });
});
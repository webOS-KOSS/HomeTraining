"use strict";

var _react = require("@testing-library/react");

var _Sprite = require("../Sprite");

var _jsxRuntime = require("react/jsx-runtime");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('Sprite Specs', function () {
  var simpleAnimationProps = {
    src: 'dummyimage',
    rows: 2,
    columns: 2
  };
  describe('events', function () {
    describe('on first render', function () {
      test('should call onSpriteAnimation', function () {
        var handleAnimation = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Sprite.SpriteBase, _objectSpread(_objectSpread({}, simpleAnimationProps), {}, {
          onSpriteAnimation: handleAnimation
        })));
        var expected = 1;
        var actual = handleAnimation.mock.calls.length;
        expect(actual).toBe(expected);
      });
      test('should call onSpriteAnimation and default to "playing"', function () {
        var handleAnimation = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Sprite.SpriteBase, _objectSpread(_objectSpread({}, simpleAnimationProps), {}, {
          onSpriteAnimation: handleAnimation
        })));
        var expected = true;
        var actual = handleAnimation.mock.calls[0][0].playing;
        expect(actual).toBe(expected);
      });
      test('should call onSpriteAnimation with stopped:true when stopped', function () {
        var handleAnimation = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Sprite.SpriteBase, _objectSpread(_objectSpread({}, simpleAnimationProps), {}, {
          onSpriteAnimation: handleAnimation,
          stopped: true
        })));
        var expected = false;
        var actual = handleAnimation.mock.calls[0][0].playing;
        expect(actual).toBe(expected);
      });
      test('should call onSpriteAnimation with paused:true when paused', function () {
        var handleAnimation = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Sprite.SpriteBase, _objectSpread(_objectSpread({}, simpleAnimationProps), {}, {
          onSpriteAnimation: handleAnimation,
          paused: true
        })));
        var expected = true;
        var actual = handleAnimation.mock.calls[0][0].paused;
        expect(actual).toBe(expected);
      });
    });
  });
});
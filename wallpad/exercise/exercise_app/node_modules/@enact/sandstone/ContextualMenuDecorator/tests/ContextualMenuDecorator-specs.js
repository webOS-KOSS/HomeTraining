"use strict";

var _FloatingLayer = require("@enact/ui/FloatingLayer");

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _ContextualMenuDecorator = require("../ContextualMenuDecorator");

var _Button = _interopRequireDefault(require("../../Button"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var ContextualButton = (0, _ContextualMenuDecorator.ContextualMenuDecorator)(_Button["default"]);
var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
var items = new Array(3).fill().map(function (i, index) {
  return "Option ".concat(index + 1);
});
describe('ContextualMenuDecorator Specs', function () {
  test('should render component into FloatingLayer if open', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        menuItems: items,
        open: true,
        children: "Hello"
      })
    }));

    var contextualMenu = _react.screen.getByRole('list');

    var expected = 'Option 1';
    var actual = contextualMenu.children.item(0);
    expect(actual).toHaveTextContent(expected);
  });
  test('should not render into FloatingLayer if not open', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        menuItems: items,
        children: "Hello"
      })
    }));

    var menu = _react.screen.queryByText('Option 1');

    expect(menu).toBeNull();
  });
  test('should emit onClose event when clicking outside the contextual menu', function () {
    var handleClose = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      "data-testid": "contextualMenu",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        menuItems: items,
        onClose: handleClose,
        open: true,
        children: "Hello"
      })
    }));

    var floatingLayerScrim = _react.screen.getByTestId('contextualMenu').nextElementSibling.querySelector('.scrim');

    _userEvent["default"].click(floatingLayerScrim);

    expect(handleClose).toHaveBeenCalled();
  });
  test('should not close menu when clicking outside if noAutoDismiss is true', function () {
    var handleClose = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      "data-testid": "contextualMenu",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        menuItems: items,
        noAutoDismiss: true,
        onClose: handleClose,
        open: true,
        children: "Hello"
      })
    }));

    var floatingLayerScrim = _react.screen.getByTestId('contextualMenu').nextElementSibling.querySelector('.scrim');

    _userEvent["default"].click(floatingLayerScrim);

    expect(handleClose).not.toHaveBeenCalled();
  });
  test('should have "below right" className when direction is set to "below right"', function () {
    var handleClose = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        direction: "below right",
        menuItems: items,
        onClose: handleClose,
        open: true,
        children: "Hello"
      })
    }));

    var contextualMenu = _react.screen.getByRole('list');

    var expected = 'below right';
    var actual = contextualMenu.parentElement;
    expect(actual).toHaveClass(expected);
  });
  test('should have offset "none" when offset is set to "none"', function () {
    var handleClose = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        menuItems: items,
        offset: "none",
        onClose: handleClose,
        open: true,
        children: "Hello"
      })
    }));

    var contextualMenu = _react.screen.getByRole('list').parentElement.parentElement;

    var expected = 'none';
    expect(contextualMenu).toHaveAttribute('offset', expected);
  });
  test('should have "large" className when popupWidth is set to "large"', function () {
    var handleClose = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        menuItems: items,
        onClose: handleClose,
        open: true,
        popupWidth: "large",
        children: "Hello"
      })
    }));

    var contextualMenu = _react.screen.getByRole('list').parentElement;

    var expected = 'large';
    expect(contextualMenu).toHaveClass(expected);
  });
});
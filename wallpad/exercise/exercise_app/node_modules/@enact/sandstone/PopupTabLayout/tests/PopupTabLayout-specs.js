"use strict";

var _FloatingLayer = require("@enact/ui/FloatingLayer");

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _PopupTabLayout = require("../PopupTabLayout");

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var FloatingLayerController = (0, _FloatingLayer.FloatingLayerDecorator)('div');
describe('PopupTabLayout specs', function () {
  test('should be rendered opened if open is set to true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PopupTabLayout.PopupTabLayout, {
        open: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "popupTabLayout"
        })
      })
    }));

    var popupTabLayout = _react.screen.getByText('popupTabLayout');

    expect(popupTabLayout).toBeInTheDocument();
  });
  test('should not be rendered if open is set to false', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PopupTabLayout.PopupTabLayout, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "popupTabLayout"
        })
      })
    }));

    var popupTabLayout = _react.screen.queryByText('popupTabLayout');

    expect(popupTabLayout).toBeNull();
  });
  test('should apply \'ease-in-out\' class when noAnimation is false', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PopupTabLayout.PopupTabLayout, {
        "data-testid": "popupTabLayout",
        noAnimation: false,
        open: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "popupTabLayout"
        })
      })
    }));
    var expected = 'ease-in-out';

    var actual = _react.screen.getByTestId('popupTabLayout').parentElement.parentElement.parentElement.parentElement;

    expect(actual).toHaveClass(expected);
  });
  test('should not apply \'ease-in-out\' class when noAnimation is true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PopupTabLayout.PopupTabLayout, {
        "data-testid": "popupTabLayout",
        noAnimation: true,
        open: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "popupTabLayout"
        })
      })
    }));
    var expected = 'ease-in-out';

    var actual = _react.screen.getByTestId('popupTabLayout').parentElement.parentElement.parentElement.parentElement;

    expect(actual).not.toHaveClass(expected);
  });
  test('should not close popupTabLayout on escape if noAutoDismiss is true', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleClose = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PopupTabLayout.PopupTabLayout, {
        noAutoDismiss: true,
        onClose: handleClose,
        open: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "popupTabLayout"
        })
      })
    }));

    _userEvent["default"].keyboard('{esc}');

    yield (0, _react.waitFor)(function () {
      expect(handleClose).not.toHaveBeenCalled();
    });
  }));
});
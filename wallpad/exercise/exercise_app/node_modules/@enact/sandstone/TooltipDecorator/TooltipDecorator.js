"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Tooltip", {
  enumerable: true,
  get: function get() {
    return _Tooltip.Tooltip;
  }
});
Object.defineProperty(exports, "TooltipBase", {
  enumerable: true,
  get: function get() {
    return _Tooltip.TooltipBase;
  }
});
exports["default"] = exports.TooltipDecorator = void 0;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _I18nDecorator = require("@enact/i18n/I18nDecorator");

var _FloatingLayer = require("@enact/ui/FloatingLayer");

var _handle = require("@enact/core/handle");

var _util = require("@enact/core/util");

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _resolution = _interopRequireDefault(require("@enact/ui/resolution"));

var _Tooltip = require("./Tooltip");

var _util2 = require("./util");

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var currentTooltip; // needed to know whether or not we should stop a showing job when unmounting

/**
 * Default config for [TooltipDecorator]{@link sandstone/TooltipDecorator.TooltipDecorator}
 *
 * @memberof sandstone/TooltipDecorator.TooltipDecorator
 * @hocconfig
 */

var defaultConfig = {
  /**
   * The boundary around the screen which the tooltip should never cross, typically involving
   * flipping to an alternate orientation or adjusting its offset to remain on screen.
   * The default of 48 is derived from a standard 24px screen-keepout size plus the standard
   * Spotlight-outset (24px) margin/padding value which keeps elements and text aligned inside a
   * [Panel]{@link sandstone/Panels.Panel}. Note: This value will be scaled according to the
   * resolution.
   *
   * @type {Number}
   * @default 24
   * @memberof sandstone/TooltipDecorator.TooltipDecorator.defaultConfig
   */
  screenEdgeKeepout: 24 + 24,

  /**
   * The name of the property which will receive the tooltip node.
   *
   * By default, `TooltipDecorator` will add a new child to the wrapped component, following any
   * other children passed in. If a component needs to, it can specify another property to receive
   * the tooltip and the `children` property will not be modified.
   *
   * @type {String}
   * @default 'children'
   * @memberof sandstone/TooltipDecorator.TooltipDecorator.defaultConfig
   */
  tooltipDestinationProp: 'children'
};
/**
 * A higher-order component which positions [Tooltip]{@link sandstone/TooltipDecorator.Tooltip} in
 * relation to the wrapped component.
 *
 * The tooltip is automatically displayed when the decorated component is focused after a set
 * period of time.
 *
 * The tooltip is positioned around the decorator where there is available window space.
 *
 * Note that the direction of tooltip will be flipped horizontally in RTL locales.
 *
 * @class TooltipDecorator
 * @memberof sandstone/TooltipDecorator
 * @hoc
 * @public
 */

var TooltipDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;

  var tooltipDestinationProp = config.tooltipDestinationProp;
  var Decorator = (_class = /*#__PURE__*/function (_Component) {
    _inherits(Decorator, _Component);

    var _super = _createSuper(Decorator);

    function Decorator(props) {
      var _this;

      _classCallCheck(this, Decorator);

      _this = _super.call(this, props);
      _this.showTooltipJob = new _util.Job(function () {
        if (!_this.state.showing) {
          _this.setState({
            showing: true
          });
        }
      });
      _this.setTooltipLayoutJob = new _util.Job(function () {
        _this.setTooltipLayout();
      });

      _this.startTooltipLayoutJob = function () {
        _this.setTooltipLayoutJob.startAfter(_this.props.tooltipUpdateDelay);
      };

      _this.showTooltip = function (client) {
        var _this$props = _this.props,
            tooltipDelay = _this$props.tooltipDelay,
            tooltipText = _this$props.tooltipText;

        if (tooltipText) {
          _this.clientRef = client;
          currentTooltip = _assertThisInitialized(_this);

          _this.showTooltipJob.startAfter(tooltipDelay);

          if (_this.mutationObserver) {
            _this.mutationObserver.observe(_this.clientRef, {
              attributes: true,
              childList: true
            });
          }

          if (_this.resizeObserver) {
            _this.resizeObserver.observe(_this.clientRef);
          }
        }
      };

      _this.hideTooltip = function () {
        if (_this.props.tooltipText) {
          if (_this.mutationObserver) {
            _this.mutationObserver.disconnect();
          }

          if (_this.resizeObserver) {
            _this.resizeObserver.disconnect();
          }

          _this.clientRef = null;
          currentTooltip = null;

          _this.showTooltipJob.stop();

          _this.setTooltipLayoutJob.stop();

          if (_this.state.showing) {
            _this.setState({
              showing: false
            });
          }
        }
      };

      _this.handle = _handle.handle.bind(_assertThisInitialized(_this));
      _this.handleKeyDown = _this.handle((0, _handle.forward)('onKeyDown'), (0, _handle.forProp)('disabled', false), function () {
        _this.startTooltipLayoutJob();
      });
      _this.handleMouseOver = _this.handle((0, _handle.forward)('onMouseOver'), (0, _handle.forProp)('disabled', true), function (ev) {
        _this.showTooltip(ev.currentTarget);
      });
      _this.handleMouseOut = _this.handle((0, _handle.forward)('onMouseOut'), (0, _handle.forProp)('disabled', true), function (ev) {
        if (_this.clientRef && !_this.clientRef.contains(ev.relatedTarget)) {
          _this.hideTooltip();
        }
      });
      _this.handleFocus = _this.handle((0, _handle.forward)('onFocus'), function (_ref) {
        var target = _ref.target;
        return _this.showTooltip(target);
      });
      _this.handleBlur = _this.handle((0, _handle.forward)('onBlur'), _this.hideTooltip);

      _this.getTooltipRef = function (node) {
        _this.tooltipRef = node;

        if (node) {
          _this.setTooltipLayout();
        }
      };

      _this.state = {
        showing: false,
        tooltipDirection: null,
        arrowAnchor: null,
        position: {
          top: 0,
          left: 0
        }
      };
      return _this;
    }

    _createClass(Decorator, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (window.MutationObserver) {
          this.mutationObserver = new MutationObserver(this.startTooltipLayoutJob);
        }

        if (window.ResizeObserver) {
          this.resizeObserver = new ResizeObserver(this.startTooltipLayoutJob);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (this.state.showing && (prevProps.tooltipText !== this.props.tooltipText || prevProps.tooltipPosition !== this.props.tooltipPosition || prevProps.tooltipType !== this.props.tooltipType || prevState.showing !== this.state.showing)) {
          this.setTooltipLayout();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (currentTooltip === this) {
          currentTooltip = null;

          if (this.mutationObserver) {
            this.mutationObserver.disconnect();
          }

          if (this.resizeObserver) {
            this.resizeObserver.disconnect();
          }

          this.showTooltipJob.stop();
          this.setTooltipLayoutJob.stop();
        }
      }
    }, {
      key: "setTooltipLayout",
      value: function setTooltipLayout() {
        var tooltipType = this.props.tooltipType;
        if (!this.tooltipRef || !this.clientRef) return;

        var screenEdgeKeepout = _resolution["default"].scale(config.screenEdgeKeepout);

        var position = this.props.tooltipPosition || (0, _Tooltip.defaultDirection)(tooltipType) + ' ' + (0, _Tooltip.defaultArrowAnchor)(tooltipType);
        var arr = position.split(' ');
        var tooltipDirection = null;
        var arrowAnchor = null;

        if (arr.length === 2) {
          var _arr2 = _slicedToArray(arr, 2);

          tooltipDirection = _arr2[0];
          arrowAnchor = _arr2[1];
        } else if (position === 'above' || position === 'below') {
          tooltipDirection = position;
          arrowAnchor = 'right';
        } else {
          tooltipDirection = 'above';
          arrowAnchor = 'right';
        }

        var tooltipNode = this.tooltipRef.getBoundingClientRect(); // label bound

        var clientNode = this.clientRef.getBoundingClientRect(); // client bound

        var overflow = (0, _util2.calcOverflow)(tooltipNode, clientNode, tooltipDirection, screenEdgeKeepout);
        tooltipDirection = (0, _util2.adjustDirection)(tooltipDirection, overflow, this.props.rtl);
        arrowAnchor = (0, _util2.adjustAnchor)(arrowAnchor, tooltipDirection, overflow, this.props.rtl);
        var tooltipPosition = (0, _util2.getPosition)(clientNode, tooltipDirection);
        var labelOffset = arrowAnchor === 'center' ? (0, _util2.getLabelOffset)(tooltipNode, tooltipDirection, tooltipPosition, overflow) : null;
        var _this$state$position = this.state.position,
            top = _this$state$position.top,
            left = _this$state$position.left;

        if (tooltipPosition.top !== top || tooltipPosition.left !== left || labelOffset !== this.state.labelOffset || arrowAnchor !== this.state.arrowAnchor) {
          this.setState({
            tooltipDirection: tooltipDirection,
            arrowAnchor: arrowAnchor,
            labelOffset: labelOffset,
            position: tooltipPosition
          });
        }
      }
    }, {
      key: "renderTooltip",
      value:
      /**
       * Conditionally creates the FloatingLayer and Tooltip based on the presence of
       * `tooltipText` and returns a property bag to pass onto the Wrapped component
       *
       * @returns {Object} Prop object
       * @private
       */
      function renderTooltip() {
        var _this$props2 = this.props,
            children = _this$props2.children,
            tooltipMarquee = _this$props2.tooltipMarquee,
            tooltipRelative = _this$props2.tooltipRelative,
            tooltipProps = _this$props2.tooltipProps,
            tooltipText = _this$props2.tooltipText,
            tooltipWidth = _this$props2.tooltipWidth,
            tooltipType = _this$props2.tooltipType;
        var _this$state$position2 = this.state.position,
            top = _this$state$position2.top,
            left = _this$state$position2.left;
        var tooltipStyle = {
          // Moving the position to CSS variables where there are additional offset calculations
          '--tooltip-position-top': tooltipRelative ? null : _resolution["default"].unit(top, 'rem'),
          '--tooltip-position-left': tooltipRelative ? null : _resolution["default"].unit(left, 'rem')
        };

        if (tooltipText) {
          var renderedTooltip = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tooltip.Tooltip, _objectSpread(_objectSpread({
            "aria-hidden": true,
            labelOffset: this.state.labelOffset
          }, tooltipProps), {}, {
            arrowAnchor: this.state.arrowAnchor,
            direction: this.state.tooltipDirection,
            marquee: tooltipMarquee,
            relative: tooltipRelative,
            style: tooltipStyle,
            tooltipRef: this.getTooltipRef,
            type: tooltipType,
            width: tooltipWidth,
            children: tooltipText
          }));

          if (!tooltipRelative) {
            renderedTooltip = /*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingLayer.FloatingLayerBase, {
              open: this.state.showing,
              noAutoDismiss: true,
              onDismiss: this.hideTooltip,
              scrimType: "none",
              children: renderedTooltip
            }, "tooltipFloatingLayer");
          } else if (!this.state.showing) {
            renderedTooltip = null;
          }

          if (tooltipDestinationProp === 'children') {
            return {
              children: [children, renderedTooltip]
            };
          } else {
            return _defineProperty({}, tooltipDestinationProp, renderedTooltip);
          }
        }

        return {
          children: children
        };
      }
    }, {
      key: "render",
      value: function render() {
        // minor optimization to merge all the props together once since we also have to delete
        // invalid props before passing downstream
        var props = Object.assign({}, this.props, this.renderTooltip(), {
          onBlur: this.handleBlur,
          onFocus: this.handleFocus,
          onMouseOut: this.handleMouseOut,
          onMouseOver: this.handleMouseOver,
          onKeyDown: this.handleKeyDown
        });
        delete props.rtl;
        delete props.tooltipDelay;
        delete props.tooltipMarquee;
        delete props.tooltipPosition;
        delete props.tooltipProps;
        delete props.tooltipRelative;
        delete props.tooltipText;
        delete props.tooltipType;
        delete props.tooltipUpdateDelay;
        delete props.tooltipWidth;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
      }
    }]);

    return Decorator;
  }(_react.Component), _class.displayName = 'TooltipDecorator', _class.propTypes =
  /** @lends sandstone/TooltipDecorator.TooltipDecorator.prototype */
  {
    /**
     * Disables the component but does not affect tooltip operation.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes["default"].bool,

    /**
     * Indicates the tooltip text direction is right-to-left.
     *
     * @type {Boolean}
     * @private
     */
    rtl: _propTypes["default"].bool,

    /**
     * Time to wait (in milliseconds) before showing tooltip on hover.
     *
     * @type {Number}
     * @default 500
     * @public
     */
    tooltipDelay: _propTypes["default"].number,

    /**
     * Allows the tooltip to marquee.
     *
     * Specifying a [`tooltipWidth`]{@link sandstone/TooltipDecorator.TooltipDecorator#tooltipWidth}
     * restrects the marquee to that size.
     *
     * @type {Boolean}
     * @public
     */
    tooltipMarquee: _propTypes["default"].bool,

    /**
     * Position of the tooltip with respect to the wrapped component.
     *
     * | *Value* | *Tooltip Direction* |
     * |---|---|
     * | `'above'` | Above component, flowing to the right |
     * | `'above center'` | Above component, centered |
     * | `'above left'` | Above component, flowing to the left |
     * | `'above right'` | Above component, flowing to the right |
     * | `'below'` | Below component, flowing to the right |
     * | `'below center'` | Below component, centered |
     * | `'below left'` | Below component, flowing to the left |
     * | `'below right'` | Below component, flowing to the right |
     * | `'left bottom'` | Left of the component, contents at the bottom |
     * | `'left middle'` | Left of the component, contents middle aligned |
     * | `'left top'` | Left of the component, contents at the top |
     * | `'right bottom'` | Right of the component, contents at the bottom |
     * | `'right middle'` | Right of the component, contents middle aligned |
     * | `'right top'` | Right of the component, contents at the top |
     *
     * `TooltipDecorator` attempts to choose the best direction to meet layout and language
     * requirements. Left and right directions will reverse for RTL languages. Additionally,
     * the tooltip will reverse direction if it will prevent overflowing off the viewport
     *
     * For `type="balloon"`, the default is `"top right"`
     * For `type="transparent"`, the default is `"bottom center"`
     *
     * @type {('above'|'above center'|'above left'|'above right'|'below'|
     *  'below center'|'below left'|'below right'|'left bottom'|'left middle'|'left top'|
     * 	'right bottom'|'right middle'|'right top')}
     * @public
     */
    tooltipPosition: _propTypes["default"].oneOf(['above', 'above center', 'above left', 'above right', 'below', 'below center', 'below left', 'below right', 'left bottom', 'left middle', 'left top', 'right bottom', 'right middle', 'right top']),

    /**
     * Properties to be passed to tooltip component.
     *
     * @type {Object}
     * @public
     */
    tooltipProps: _propTypes["default"].object,

    /**
     * Positions the tooltip relative to its container.
     *
     * Determines whether your tooltip should position itself relative to its container or
     * relative to the screen (absolute positioning on the floating layer). When setting to
     * `true`, to enable relative positioning, it may be important to specify the
     * `tooltipDestinationProp` key in this HoC's config object. A relatively positioned
     * Tooltip for a `Button`, for example, must be placed in the `decoration` prop.
     *
     * It may be necessary to assign the CSS rule `position` to the containing element so
     * relatively positioned Tooltip has a frame to "stick to" the edge of.
     *
     * Anchoring points can be visualized as follows:
     * ```
     * ┌───◎───┐
     * ◎       ◎
     * └───◎───┘
     * ```
     *
     * @type {Boolean}
     * @public
     */
    tooltipRelative: _propTypes["default"].bool,

    /**
     * Tooltip content.
     *
     * @type {String|Node}
     * @public
     */
    tooltipText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

    /**
     * Type of tooltip.
     *
     * | *Value* | *Tooltip Appearance* |
     * |---|---|
     * | `'balloon'` | Tooltip with a border, background and arrow to the activator |
     * | `'transparent'` | Text only without any of the decorations above |
     *
     * @type {('balloon'|'transparent')}
     * @default 'balloon'
     * @public
     */
    tooltipType: _propTypes["default"].oneOf(['balloon', 'transparent']),

    /**
     * The interval (in milliseconds) to recheck the math for a currently showing tooltip's
     * positioning and orientation. Useful if your anchor element moves.
     *
     * @type {Number}
     * @default 400
     * @public
     */
    tooltipUpdateDelay: _propTypes["default"].number,

    /**
     * The width of tooltip content.
     *
     * Value expects a number of pixels, which will be automatically scaled to the
     * appropriate size given the current screen resolution, or a string value containing a
     * measurement and a valid CSS unit included. If the content goes over the given width,
     * it will automatically wrap, or marquee if `marquee` is enabled.
     *
     * When `null`, content will auto-size and not wrap. If `tooltipMarquee` is also
     * enabled, marqueeing will begin when the width is greater than the default (theme
     * specified) width.
     *
     * @type {Number|String}
     * @public
     */
    tooltipWidth: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
  }, _class.defaultProps = {
    disabled: false,
    tooltipDelay: 500,
    tooltipType: 'balloon',
    tooltipUpdateDelay: 400
  }, _class);
  return (0, _I18nDecorator.I18nContextDecorator)({
    rtlProp: 'rtl'
  }, Decorator);
});
exports.TooltipDecorator = TooltipDecorator;
var _default = TooltipDecorator;
exports["default"] = _default;
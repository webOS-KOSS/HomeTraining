"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DayPickerBase = exports.DayPicker = void 0;
Object.defineProperty(exports, "getSelectedDayString", {
  enumerable: true,
  get: function get() {
    return _DaySelectorDecorator.getSelectedDayString;
  }
});

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _I18nDecorator = require("@enact/i18n/I18nDecorator");

var _Changeable = _interopRequireDefault(require("@enact/ui/Changeable"));

var _Group = _interopRequireDefault(require("@enact/ui/Group"));

var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _compose = _interopRequireDefault(require("ramda/src/compose"));

var _CheckboxItem = _interopRequireDefault(require("../CheckboxItem"));

var _Skinnable = _interopRequireDefault(require("../Skinnable"));

var _DaySelectorDecorator = require("./DaySelectorDecorator");

var _DayPickerModule = _interopRequireDefault(require("./DayPicker.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["disabled"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A day of the week selection component.
 *
 * This component is most often not used directly but may be composed within another component as it
 * is within [DayPicker]{@link sandstone/DayPicker.DayPicker}.
 *
 * @class DayPickerBase
 * @memberof sandstone/DayPicker
 * @extends ui/Group.Group
 * @omit children
 * @ui
 * @public
 */
var DayPickerBase = (0, _kind["default"])({
  name: 'DayPicker',
  propTypes:
  /** @lends sandstone/DayPicker.DayPicker.prototype */
  {
    /**
     * Disables all days in this picker.
     *
     * @type {Boolean}
     * @public
     */
    disabled: _propTypes["default"].bool,

    /**
     * Called when an day is selected or unselected.
     *
     * The event payload will be an object with the following members:
     * * `selected` - An array of numbers representing the selected days, 0 indexed where Sunday
     *   is represented by 0
     *
     * @type {Function}
     * @public
     */
    onSelect: _propTypes["default"].func,

    /**
     * An array of numbers (0 indexed where Sunday is 0) representing the selected days of the
     * week.
     *
     * @type {Number|Number[]}
     * @public
     */
    selected: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].arrayOf(_propTypes["default"].number)])
  },
  styles: {
    css: _DayPickerModule["default"],
    className: 'dayPicker'
  },
  computed: {
    children: function children(_ref) {
      var _children = _ref.children;
      return _children.map(function (child) {
        return child['aria-label'];
      });
    }
  },
  render: function render(_ref2) {
    var disabled = _ref2.disabled,
        rest = _objectWithoutProperties(_ref2, _excluded);

    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Group["default"], _objectSpread(_objectSpread({}, rest), {}, {
      component: "div",
      childComponent: _CheckboxItem["default"],
      itemProps: {
        className: _DayPickerModule["default"].item,
        disabled: disabled
      },
      role: null,
      select: "multiple",
      selectedProp: "selected"
    }));
  }
});
exports.DayPickerBase = DayPickerBase;
var DayPickerDecorator = (0, _compose["default"])(_Pure["default"], (0, _Changeable["default"])({
  change: 'onSelect',
  prop: 'selected'
}), (0, _I18nDecorator.I18nContextDecorator)({
  localeProp: 'locale'
}), _DaySelectorDecorator.DaySelectorDecorator, _Skinnable["default"]);
/**
 * A day of the week selection component, ready to use in Sandstone applications.
 *
 * By default, `DayPicker` maintains the state of its `selected` property. Supply the
 * `selected` property to control its initial value. If you wish to directly control updates
 * to the component, supply a value to `selected` at creation time and update it in response to
 * `onChange` events.
 *
 * Usage:
 * ```
 * <DayPicker
 *   selected={[2, 3]}
 *   onSelect={handleSelect}
 * />
 * ```
 *
 * @class DayPicker
 * @memberof sandstone/DayPicker
 * @extends sandstone/DayPicker.DayPickerBase
 * @mixes ui/Changeable.Changeable
 * @omit onChange
 * @omit value
 * @omit defaultValue
 * @ui
 * @public
 */

var DayPicker = DayPickerDecorator(DayPickerBase);
/**
 * The "aria-label" for the component.
 *
 * By default, "aria-label" is set to the full names of the selected days or
 * the custom text when the weekend, week days, or all days is selected.
 *
 * @name aria-label
 * @type {String}
 * @memberof sandstone/DayPicker.DayPicker.prototype
 * @public
 */

/**
 * The initial value used when `selected` is not set.
 *
 * @name selected
 * @type {Number|Number[]}
 * @memberof sandstone/DayPicker.DayPicker.prototype
 * @public
 */

/**
 * Disables DayPicker and the control becomes non-interactive.
 *
 * @name disabled
 * @type {Boolean}
 * @default false
 * @memberof sandstone/DayPicker.DayPicker.prototype
 * @public
 */

exports.DayPicker = DayPicker;
var _default = DayPicker;
exports["default"] = _default;
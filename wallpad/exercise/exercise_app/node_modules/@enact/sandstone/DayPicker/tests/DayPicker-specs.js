"use strict";

var _i18n = _interopRequireDefault(require("@enact/i18n"));

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _DayPicker = _interopRequireWildcard(require("../DayPicker"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

describe('DayPicker', function () {
  test('should not select any item when there is no passed prop `selected`', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {}));

    var allDays = _react.screen.getAllByRole('checkbox');

    var _iterator = _createForOfIteratorHelper(allDays),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var day = _step.value;
        expect(day).toHaveAttribute('aria-checked', 'false');
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
  test('should select day when passed prop `selected`', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
      selected: [1]
    }));

    var selectedDay = _react.screen.getAllByRole('checkbox')[2];

    var expected = 'selected';
    expect(selectedDay).toHaveClass(expected);
  });
  test('should emit an onSelect event with `onSelect` type when selecting days', function () {
    var handleSelect = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
      onSelect: handleSelect
    }));

    var item = _react.screen.getAllByRole('checkbox')[2];

    _userEvent["default"].click(item);

    expect(handleSelect).toHaveBeenCalledWith({
      content: 'Mon',
      selected: [1],
      type: 'onSelect'
    });
  });
  test('should include `content` in onSelect event payload which respects dayNameLength', function () {
    var handleSelect = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
      onSelect: handleSelect,
      dayNameLength: "short"
    })); // select Monday

    var item = _react.screen.getByText('Monday');

    _userEvent["default"].click(item);

    var expected = {
      // M is the "short" value from ilib for Monday
      content: 'M'
    };
    var actual = handleSelect.mock.calls[0][0];
    expect(actual).toMatchObject(expected);
  });
  test('should return `None` when selected is null', function () {
    var label = (0, _DayPicker.getSelectedDayString)(null, 'None');
    var expected = 'None';
    expect(label).toBe(expected);
  });
  test('should return `None` when selected is empty', function () {
    var label = (0, _DayPicker.getSelectedDayString)([], 'None');
    var expected = 'None';
    expect(label).toBe(expected);
  });
  test('should return `Every Weekend` when all selected', function () {
    var selected = [0, 6];
    var label = (0, _DayPicker.getSelectedDayString)(selected);
    var expected = 'Every Weekend';
    expect(label).toBe(expected);
  });
  test('should return `Every Weekday` when all selected', function () {
    var selected = [1, 2, 3, 4, 5];
    var label = (0, _DayPicker.getSelectedDayString)(selected);
    var expected = 'Every Weekday';
    expect(label).toBe(expected);
  });
  test('should return `Every Day` when all selected', function () {
    var selected = [0, 1, 2, 3, 4, 5, 6];
    var label = (0, _DayPicker.getSelectedDayString)(selected);
    var expected = 'Every Day';
    expect(label).toBe(expected);
  }); // ilib isn't working correctly with unit tests so this block must be skipped

  describe.skip('with alternate first day of week', function () {
    test('should accept and emit a generalized selected array', function () {
      _i18n["default"].setLocale('es-ES');

      var handleSelect = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
        onSelect: handleSelect,
        defaultSelected: [0]
      })); // select Lunes (Monday) which is the first day of the week for es-ES

      var item = _react.screen.getAllByRole('checkbox')[0];

      _userEvent["default"].click(item);

      var expected = {
        // Expect Sunday (0) and Monday (1) to be selected
        selected: [0, 1]
      };
      var actual = handleSelect.mock.calls[0][0]; // If ilib isn't loading correctly, actual will be null because we will have unselected
      // Sunday instead of selecting Monday.

      expect(actual).toMatchObject(expected);
    });
  });
});
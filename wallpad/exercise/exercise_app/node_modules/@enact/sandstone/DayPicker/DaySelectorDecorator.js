"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DaySelectorDecorator = void 0;
exports.getSelectedDayString = getSelectedDayString;

var _handle = require("@enact/core/handle");

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _util = require("@enact/core/util");

var _i18n = _interopRequireDefault(require("@enact/i18n"));

var _DateFmt = _interopRequireDefault(require("ilib/lib/DateFmt"));

var _LocaleInfo = _interopRequireDefault(require("ilib/lib/LocaleInfo"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = require("react");

var _$L = _interopRequireDefault(require("../internal/$L"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["dayNameLength", "locale", "selected"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SELECTED_DAY_TYPES = {
  EVERY_DAY: 0,
  EVERY_WEEKDAY: 1,
  EVERY_WEEKEND: 2,
  SELECTED_DAYS: 3,
  SELECTED_NONE: 4
};

function localizeDay(day, firstDayOfWeek) {
  return (day - firstDayOfWeek + 7) % 7;
}

function generalizeDay(day, firstDayOfWeek) {
  return (day + firstDayOfWeek) % 7;
} // Accepts a "Sunday at index 0" selected array and returns a localized array with "firstDayOfWeek
// at index 0"


function generalizeSelected(selected, state) {
  if (state.firstDayOfWeek === 0 || !selected) {
    return selected;
  }

  return selected.map(function (v) {
    return generalizeDay(v, state.firstDayOfWeek);
  }).sort();
} // Accepts a localized selected array and returns a "Sunday at index 0" array


function localizeSelected(selected, state) {
  if (state.firstDayOfWeek === 0 || !selected) {
    return selected;
  }

  return selected.map(function (v) {
    return localizeDay(v, state.firstDayOfWeek);
  });
}

var memoLocaleState = (0, _util.memoize)(function (key, dayNameLength) {
  var df = new _DateFmt["default"]({
    length: 'full'
  });
  var sdf = new _DateFmt["default"]({
    length: dayNameLength
  });
  var li = new _LocaleInfo["default"](_i18n["default"].getLocale());
  var daysOfWeek = df.getDaysOfWeek();
  var days = sdf.getDaysOfWeek();
  var firstDayOfWeek = li.getFirstDayOfWeek();
  var state = {
    abbreviatedDayNames: days,
    firstDayOfWeek: firstDayOfWeek,
    fullDayNames: daysOfWeek,
    weekendEnd: 0,
    weekendStart: 6
  };

  if (li.getWeekEndStart) {
    state.weekendStart = li.getWeekEndStart();
  }

  if (li.getWeekEndEnd) {
    state.weekendEnd = li.getWeekEndEnd();
  }

  return state;
}); // Accepts an array of names in "sunday at index 0" and returns a localized array

function orderDays(names, state) {
  var result = [];

  for (var i = 0; i < 7; i++) {
    var index = generalizeDay(i, state.firstDayOfWeek);
    result[i] = names[index];
  }

  return result;
}

function getLocaleState(dayNameLength, locale) {
  if (typeof window === 'undefined') {
    return {
      abbreviatedDayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      firstDayOfWeek: 0,
      fullDayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
      weekendEnd: 0,
      weekendStart: 6
    };
  }

  return memoLocaleState(dayNameLength + locale, dayNameLength);
}
/*
 * Determines which day type should be returned, based on the selected indices.
 *
 * @param {Number[]} [selected] Array of day indexes
 * @param {String[]} [dayNameLength] The format for names of days
 * @param {String[]} [locale]
 *
 * @returns {Number}
 */


function calcSelectedDayType(selected, state) {
  if (selected == null || !Array.isArray(selected)) return SELECTED_DAY_TYPES.SELECTED_NONE;
  var weekendStart = false,
      weekendEnd = false,
      index;
  var length = selected.length,
      weekendLength = state.weekendStart === state.weekendEnd ? 1 : 2;
  if (length === 0) return SELECTED_DAY_TYPES.SELECTED_NONE;
  if (length === 7) return SELECTED_DAY_TYPES.EVERY_DAY;

  for (var i = 0; i < length; i++) {
    index = selected[i];
    weekendStart = weekendStart || state.weekendStart === index;
    weekendEnd = weekendEnd || state.weekendEnd === index;
  }

  if (weekendStart && weekendEnd && length === weekendLength) {
    return SELECTED_DAY_TYPES.EVERY_WEEKEND;
  } else if (!weekendStart && !weekendEnd && length === 7 - weekendLength) {
    return SELECTED_DAY_TYPES.EVERY_WEEKDAY;
  } else {
    return SELECTED_DAY_TYPES.SELECTED_DAYS;
  }
}
/**
 * Determines whether it should return "Every Day", "Every Weekend", "Every Weekday" or list of
 * days for a given selected day type.
 *
 * @memberof sandstone/DayPicker
 * @param {(Number|Number[])?} selected Selected day(s)
 * @param {String} [noneText] String to be returned when no days are selected
 * @param {String} [dayNameLength] The format for names of days
 *
 * @returns {String} "Every Day", "Every Weekend", "Every Week", list of days or `noneText`
 */


function getSelectedDayString(selected) {
  var noneText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var dayNameLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'long';

  var everyDayText = (0, _$L["default"])('Every Day'),
      everyWeekdayText = (0, _$L["default"])('Every Weekday'),
      everyWeekendText = (0, _$L["default"])('Every Weekend'),
      locale = _i18n["default"].getLocale();

  var state = getLocaleState(dayNameLength, locale);

  if (selected != null) {
    selected = (0, _util.coerceArray)(selected);
  }

  var type = calcSelectedDayType(selected, state);

  var format = function format(list) {
    var separator = locale === 'fa-IR' ? '، ' : ', '; // sort the selected array with firstDayOfWeek first before mapping to text

    return list.slice().sort(function (a, b) {
      return localizeDay(a, state.firstDayOfWeek) - localizeDay(b, state.firstDayOfWeek);
    }).map(function (dayIndex) {
      return state.abbreviatedDayNames[dayIndex];
    }).join(separator);
  };

  switch (type) {
    case SELECTED_DAY_TYPES.EVERY_DAY:
      return everyDayText;

    case SELECTED_DAY_TYPES.EVERY_WEEKEND:
      return everyWeekendText;

    case SELECTED_DAY_TYPES.EVERY_WEEKDAY:
      return everyWeekdayText;

    case SELECTED_DAY_TYPES.SELECTED_DAYS:
      return format(selected);

    case SELECTED_DAY_TYPES.SELECTED_NONE:
      return noneText;
  }
}
/**
 * Applies Sandstone specific behaviors to
 * [DayPicker]{@link sandstone/DayPicker.DayPicker}.
 *
 * @hoc
 * @memberof sandstone/DayPicker
 * @mixes ui/Changeable.Changeable
 * @mixes sandstone/Skinnable.Skinnable
 * @omit onChange
 * @omit value
 * @omit defaultValue
 * @private
 */


var DaySelectorDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class;

  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);

    var _super = _createSuper(_class);

    function _class() {
      var _this;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _this.handleSelect = function (_ref) {
        var selected = _ref.selected;
        var _this$props = _this.props,
            dayNameLength = _this$props.dayNameLength,
            locale = _this$props.locale;
        var state = getLocaleState(dayNameLength, locale); // adjust the selected value beforehand so getSelectedDayString always operates on the
        // standard, "Sunday as index 0" format

        selected = generalizeSelected(selected, state);
        var content = getSelectedDayString(selected, '', dayNameLength);
        (0, _handle.forward)('onSelect', {
          type: 'onSelect',
          selected: selected,
          content: content
        }, _this.props);
      };

      return _this;
    }

    _createClass(_class, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            dayNameLength = _this$props2.dayNameLength,
            locale = _this$props2.locale,
            selected = _this$props2.selected,
            rest = _objectWithoutProperties(_this$props2, _excluded);

        var state = getLocaleState(dayNameLength, locale);
        var localSelected = localizeSelected(selected, state);
        var abbreviatedDayNames = orderDays(state.abbreviatedDayNames, state);
        var fullDayNames = orderDays(state.fullDayNames, state);
        delete rest.everyDayText;
        delete rest.everyWeekdayText;
        delete rest.everyWeekendText;
        delete rest.selected;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, rest), {}, {
          onSelect: this.handleSelect,
          selected: localSelected,
          children: abbreviatedDayNames.map(function (children, index) {
            return {
              children: children,
              // "short" dayNameLength can result in the same name so adding index
              key: "".concat(index, " ").concat(children),
              'aria-label': fullDayNames[index]
            };
          })
        }));
      }
    }]);

    return _class;
  }(_react.Component), _class.displayName = 'DaySelectorDecorator', _class.propTypes =
  /** @lends sandstone/DayPicker.DaySelectorDecorator.prototype */
  {
    /**
     * The "aria-label" for the selector.
     *
     * @memberof sandstone/DayPicker.DaySelectorDecorator.prototype
     * @type {String}
     * @private
     */
    'aria-label': _propTypes["default"].string,

    /**
     * The format for names of days.
     *
     * @type {('short'|'medium'|'long'|'full')}
     * @default 'long'
     * @public
     */
    dayNameLength: _propTypes["default"].oneOf(['short', 'medium', 'long', 'full']),

    /**
     * Applies a disabled style and prevents interacting with the component.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes["default"].bool,

    /**
     * Current locale.
     *
     * @type {String}
     * @public
     */
    locale: _propTypes["default"].string,

    /**
     * Called when an day is selected or unselected.
     *
     * The event payload will be an object with the following members:
     * * `selected` - An array of numbers representing the selected days, 0 indexed
     * * `content` - Localized string representing the selected days
     *
     * @type {Function}
     * @public
     */
    onSelect: _propTypes["default"].func,

    /**
     * An array of numbers (0-indexed) representing the selected days of the week.
     *
     * @type {Number|Number[]}
     * @public
     */
    selected: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].arrayOf(_propTypes["default"].number)])
  }, _class.defaultProps = {
    dayNameLength: 'long',
    disabled: false
  }, _class;
});
exports.DaySelectorDecorator = DaySelectorDecorator;
var _default = DaySelectorDecorator;
exports["default"] = _default;
"use strict";

var _spotlight = _interopRequireDefault(require("@enact/spotlight"));

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _ = _interopRequireDefault(require("../"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('ThemeDecorator', function () {
  var AppRoot = function AppRoot(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({
      "data-app": true
    }, props));
  };

  var a11yConfig = {
    "float": false,
    ri18n: false,
    ri: false,
    spotlight: false
  };
  var A11yApp = (0, _["default"])(a11yConfig, AppRoot);
  test('should add base classes to wrapped component', function () {
    var config = {
      ri: false,
      i18n: false,
      spotlight: false,
      "float": false,
      overlay: false
    };
    var App = (0, _["default"])(config, AppRoot);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(App, {
      "data-testid": "app"
    }));

    _spotlight["default"].terminate();

    var appRoot = _react.screen.getByTestId('app');

    expect(appRoot).toHaveClass('neutral');
    expect(appRoot).toHaveClass('bg');
  });
  test('should add author classes to wrapped component', function () {
    var config = {
      ri: false,
      i18n: false,
      spotlight: false,
      "float": false,
      overlay: false
    };
    var App = (0, _["default"])(config, AppRoot);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(App, {
      className: "author-class",
      "data-testid": "app"
    }));

    _spotlight["default"].terminate();

    var appRoot = _react.screen.getByTestId('app');

    expect(appRoot).toHaveClass('author-class');
  });
  test('should not add skin classname to wrapped component when float is enabled', function () {
    var config = {
      ri: false,
      i18n: false,
      spotlight: false,
      "float": true,
      overlay: false
    };
    var App = (0, _["default"])(config, AppRoot);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(App, {
      "data-testid": "app"
    }));

    _spotlight["default"].terminate();

    var appRoot = _react.screen.getByTestId('app');

    expect(appRoot).not.toHaveClass('neutral');
  });
  test('should not add .bg class to wrapped component when overlay is enabled', function () {
    var config = {
      ri: false,
      i18n: false,
      spotlight: false,
      "float": false,
      overlay: true
    };
    var App = (0, _["default"])(config, AppRoot);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(App, {
      "data-testid": "app"
    }));

    _spotlight["default"].terminate();

    var appRoot = _react.screen.getByTestId('app');

    expect(appRoot).not.toHaveClass('bg');
  });
  describe('AccessibilityDecorator', function () {
    test('should add the highContrast class if passing the highContrast prop of true', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(A11yApp, {
        "data-testid": "app",
        highContrast: true
      }));

      var appRoot = _react.screen.getByTestId('app');

      expect(appRoot).toHaveClass('highContrast');
    });
    test('should add the largeText class if passing the textSize prop of `large`', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(A11yApp, {
        "data-testid": "app",
        textSize: "large"
      }));

      var appRoot = _react.screen.getByTestId('app');

      expect(appRoot).toHaveClass('largeText');
    });
    test('should update the skinVariants based on the skinVariants prop', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(A11yApp, {
        "data-testid": "app",
        skinVariants: ['grayscale']
      }));

      var appRoot = _react.screen.getByTestId('app');

      expect(appRoot).toHaveClass('grayscale');
    });
    test('should add the largeText class when the type of the skinVariants prop is a string', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(A11yApp, {
        "data-testid": "app",
        textSize: "large",
        skinVariants: "grayscale"
      }));

      var appRoot = _react.screen.getByTestId('app');

      expect(appRoot).toHaveClass('largeText');
      expect(appRoot).toHaveClass('grayscale');
    });
    test('should add largeText class when the type of the skinVariants prop is an array', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(A11yApp, {
        "data-testid": "app",
        textSize: "large",
        skinVariants: ['grayscale']
      }));

      var appRoot = _react.screen.getByTestId('app');

      expect(appRoot).toHaveClass('largeText');
      expect(appRoot).toHaveClass('grayscale');
    });
    test('should add largeText class when the type of the skinVariants prop is an object', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(A11yApp, {
        "data-testid": "app",
        textSize: "large",
        skinVariants: {
          grayscale: true
        }
      }));

      var appRoot = _react.screen.getByTestId('app');

      expect(appRoot).toHaveClass('largeText');
      expect(appRoot).toHaveClass('grayscale');
    });
  });
});
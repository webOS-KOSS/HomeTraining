"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FlexiblePopupPanelsBase = exports.FlexiblePopupPanels = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _util = require("@enact/core/util");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = require("react");

var _Panels = require("../internal/Panels");

var _useNavButtonFocus = require("./useNavButtonFocus");

var _FlexiblePopupPanelsModule = _interopRequireDefault(require("./FlexiblePopupPanels.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * An instance of [`Panels`]{@link sandstone/Panels.Panels} which restricts the `Panel` to the left
 * or right side of the screen inside a popup. This panel flexes both horizontally and vertically,
 * with the Header positioned outside the Panel background area. This is typically used for a single
 * setting or control at a time, for maximum background area viewing.
 *
 * @class FlexiblePopupPanels
 * @memberof sandstone/FlexiblePopupPanels
 * @ui
 * @public
 */
var FlexiblePopupPanelsBase = (0, _kind["default"])({
  name: 'FlexiblePopupPanels',
  propTypes:
  /** @lends sandstone/FlexiblePopupPanels.FlexiblePopupPanels.prototype */
  {
    /**
     * Specifies when and how to show `nextButton` on `FlexiblePopupPanels.Panel`.
     *
     * * `'auto'` will display the `nextButton` if more than one `FlexiblePopupPanels.Panel` exists
     * * `'always'` will always display the `nextButton`
     * * `'never'` will always hide the `nextButton`
     *
     * Note, children values will override the generalized parent visibility settings. In this
     * case, a customized `nextButton` on `FlexiblePopupPanels.Panel` will take precedence over the
     * `nextButtonVisibility` value.
     *
     * @type {('auto'|'always'|'never')}
     * @default 'auto'
     * @public
     */
    nextButtonVisibility: _propTypes["default"].oneOf(['auto', 'always', 'never']),

    /**
    * Called when the index value is changed.
    *
    * @type {Function}
    * @param {Object} event
    * @public
    */
    onChange: _propTypes["default"].func,

    /**
     * Called when the next button is clicked in `FlexiblePopupPanels.Panel`.
     *
     * Calling `preventDefault` on the passed event will prevent advancing to the next panel.
     *
     * @type {Function}
     * @public
     */
    onNextClick: _propTypes["default"].func,

    /**
     * Called when the previous button is clicked in `FlexiblePopupPanels.Panel`.
     *
     * Calling `preventDefault` on the passed event will prevent navigation to the previous panel.
     *
     * @type {Function}
     * @public
     */
    onPrevClick: _propTypes["default"].func,

    /**
     * Specifies when and how to show `prevButton` on `FlexiblePopupPanels.Panel`.
     *
     * * `'auto'` will display the `prevButton` if more than one `FlexiblePopupPanels.Panel` exists
     * * `'always'` will always display the `prevButton`
     * * `'never'` will always hide the `prevButton`
     *
     * Note, children values will override the generalized parent visibility settings. In this case,
     * if user provides a customized `prevButton` on `FlexiblePopupPanels.Panel` will take precedence over the `prevButtonVisibility` value.
     *
     * @type {('auto'|'always'|'never')}
     * @default 'auto'
     * @public
     */
    prevButtonVisibility: _propTypes["default"].oneOf(['auto', 'always', 'never'])
  },
  defaultProps: {
    nextButtonVisibility: 'auto',
    prevButtonVisibility: 'auto'
  },
  styles: {
    css: _FlexiblePopupPanelsModule["default"],
    className: 'viewport'
  },
  computed: {
    children: function children(_ref) {
      var _children = _ref.children,
          nextButtonVisibility = _ref.nextButtonVisibility,
          onChange = _ref.onChange,
          onNextClick = _ref.onNextClick,
          onPrevClick = _ref.onPrevClick,
          prevButtonVisibility = _ref.prevButtonVisibility;
      return (0, _util.mapAndFilterChildren)(_children, function (child) {
        var props = {
          nextButtonVisibility: nextButtonVisibility,
          onChange: onChange,
          onNextClick: onNextClick,
          onPrevClick: onPrevClick,
          prevButtonVisibility: prevButtonVisibility
        };
        return /*#__PURE__*/(0, _react.cloneElement)(child, props);
      });
    },
    onBack: function onBack(_ref2) {
      var onChange = _ref2.onChange;
      return onChange;
    }
  },
  render: function render(props) {
    delete props.nextButtonVisibility;
    delete props.onChange;
    delete props.onNextClick;
    delete props.onPrevClick;
    delete props.prevButtonVisibility;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels.Viewport, _objectSpread({}, props));
  }
});
exports.FlexiblePopupPanelsBase = FlexiblePopupPanelsBase;
var FlexiblePopupPanels = (0, _Panels.PopupDecorator)({
  className: 'flexiblePopupPanels',
  css: _FlexiblePopupPanelsModule["default"],
  noAlertRole: true,
  panelArranger: _Panels.FadeAndSlideArranger,
  panelType: 'flexiblePopup'
}, (0, _useNavButtonFocus.NavButtonFocusDecorator)(FlexiblePopupPanelsBase)); // Directly set the defaultProps for position to the left side so it initially draws on the correct
// side. The real default is assigned in PopupDecorator, but should still be overridable by an app.

exports.FlexiblePopupPanels = FlexiblePopupPanels;
FlexiblePopupPanels.defaultProps = _objectSpread(_objectSpread({}, FlexiblePopupPanels.defaultProps), {}, {
  position: 'left'
});
var _default = FlexiblePopupPanels;
exports["default"] = _default;
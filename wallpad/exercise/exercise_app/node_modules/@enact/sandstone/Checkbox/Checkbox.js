"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.CheckboxDecorator = exports.CheckboxBase = exports.Checkbox = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Spottable = _interopRequireDefault(require("@enact/spotlight/Spottable"));

var _Touchable = _interopRequireDefault(require("@enact/ui/Touchable"));

var _Toggleable = _interopRequireDefault(require("@enact/ui/Toggleable"));

var _compose = _interopRequireDefault(require("ramda/src/compose"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Skinnable = _interopRequireDefault(require("../Skinnable"));

var _CheckboxModule = _interopRequireDefault(require("./Checkbox.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["children", "css", "disabled", "selected"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A checkbox component, ready to use in Sandstone applications.
 *
 * `Checkbox` may be used independently to represent a toggleable state but is more commonly used as
 * part of [CheckboxItem]{@link sandstone/CheckboxItem}.
 *
 * Usage:
 * ```
 * <Checkbox selected />
 * ```
 *
 * @class CheckboxBase
 * @memberof sandstone/Checkbox
 * @extends sandstone/Icon.Icon
 * @ui
 * @public
 */
var CheckboxBase = (0, _kind["default"])({
  name: 'Checkbox',
  propTypes:
  /** @lends sandstone/Checkbox.CheckboxBase.prototype */
  {
    /**
     * The icon displayed when `selected`.
     *
     * May be specified as either:
     *
     * * A string that represents an icon from the [iconList]{@link sandstone/Icon.Icon.iconList},
     * * An HTML entity string, Unicode reference or hex value (in the form '0x...'),
     * * A URL specifying path to an icon image, or
     * * An object representing a resolution independent resource (See {@link ui/resolution})
     *
     * @see {@link sandstone/Icon.IconBase.children}
     * @type {String|Object}
     * @default	'check'
     * @public
     */
    children: _propTypes["default"].string,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `checkbox` - The root class name
     * * `selected` - Applied when the `selected` prop is true
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,

    /**
     * Disables Checkbox and becomes non-interactive.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes["default"].bool,

    /**
     * Enables the "indeterminate" state.
     *
     * An indeterminate, mixed, or half-selected state is typically used in a hierarchy or group
     * to represent that some, not all, children are selected.
     *
     * NOTE: This does not prevent updating the `selected` state. Applications must control this
     * property directly.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    indeterminate: _propTypes["default"].bool,

    /**
     * The icon to be used in the `indeterminate` state.
     *
     * May be specified as either:
     *
     * * A string that represents an icon from the [iconList]{@link sandstone/Icon.Icon.iconList},
     * * An HTML entity string, Unicode reference or hex value (in the form '0x...'),
     * * A URL specifying path to an icon image, or
     * * An object representing a resolution independent resource (See {@link ui/resolution})
     *
     * @type {String}
     * @default 'minus'
     * @public
     */
    indeterminateIcon: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),

    /**
     * Sets whether this control is in the 'on' or 'off' state. `true` for 'on', `false` for 'off'.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    selected: _propTypes["default"].bool,

    /**
     * Sets standalone rules to show spotlight background color.
     *
     * @type {Boolean}
     * @private
     */
    standalone: _propTypes["default"].bool
  },
  defaultProps: {
    children: 'check',
    indeterminate: false,
    indeterminateIcon: 'minus',
    selected: false
  },
  styles: {
    css: _CheckboxModule["default"],
    className: 'checkbox',
    publicClassNames: ['checkbox', 'selected']
  },
  computed: {
    className: function className(_ref) {
      var indeterminate = _ref.indeterminate,
          selected = _ref.selected,
          standalone = _ref.standalone,
          styler = _ref.styler;
      return styler.append({
        selected: selected,
        standalone: standalone,
        indeterminate: indeterminate
      });
    },
    children: function children(_ref2) {
      var indeterminate = _ref2.indeterminate,
          indeterminateIcon = _ref2.indeterminateIcon,
          _children = _ref2.children;
      return indeterminate ? indeterminateIcon : _children;
    } // This controls which icon to use, an not that icon's visual presence.

  },
  render: function render(_ref3) {
    var children = _ref3.children,
        css = _ref3.css,
        disabled = _ref3.disabled,
        selected = _ref3.selected,
        rest = _objectWithoutProperties(_ref3, _excluded);

    delete rest.indeterminate;
    delete rest.indeterminateIcon;
    delete rest.standalone;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
      "aria-checked": selected,
      "aria-disabled": disabled,
      disabled: disabled,
      role: "checkbox",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: css.bg
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon["default"], {
        size: "tiny",
        className: css.icon,
        children: children
      })]
    }));
  }
});
/**
 * Adds interactive functionality to `Checkbox`.
 *
 * @class CheckboxDecorator
 * @memberof sandstone/Checkbox
 * @mixes ui/Toggleable.Toggleable
 * @mixes sandstone/Skinnable.Skinnable
 * @mixes spotlight/Spottable.Spottable
 * @hoc
 * @public
 */

exports.CheckboxBase = CheckboxBase;
var CheckboxDecorator = (0, _compose["default"])((0, _Toggleable["default"])({
  toggleProp: 'onClick'
}), _Touchable["default"], _Spottable["default"], _Skinnable["default"]);
/**
 * A Sandstone-styled checkbox component.
 *
 * `Checkbox` will manage its `selected` state via [Toggleable]{@link ui/Toggleable} unless set
 * directly.
 *
 * @class Checkbox
 * @memberof sandstone/Checkbox
 * @extends sandstone/Checkbox.CheckboxBase
 * @mixes sandstone/Checkbox.CheckboxDecorator
 * @ui
 * @public
 */

exports.CheckboxDecorator = CheckboxDecorator;
var Checkbox = CheckboxDecorator(CheckboxBase);
exports.Checkbox = Checkbox;
var _default = Checkbox;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.PanelsBase = exports.Panels = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _handle = _interopRequireWildcard(require("@enact/core/handle"));

var _IdProvider = _interopRequireDefault(require("@enact/ui/internal/IdProvider"));

var _ViewManager = require("@enact/ui/ViewManager");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _compose = _interopRequireDefault(require("ramda/src/compose"));

var _Panels = require("../internal/Panels");

var _Skinnable = _interopRequireDefault(require("../Skinnable"));

var _util = require("../internal/Panels/util");

var _PanelsModule = _interopRequireDefault(require("./Panels.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["arranger", "children", "css", "generateId", "id", "index", "noAnimation", "noSharedState", "onTransition", "onWillTransition", "viewportId"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Basic Panels component without a default [arranger]{@link ui/ViewManager.Arranger}
 *
 * @class Panels
 * @memberof sandstone/Panels
 * @ui
 * @public
 */
var PanelsBase = (0, _kind["default"])({
  name: 'Panels',
  propTypes:
  /** @lends sandstone/Panels.Panels.prototype */
  {
    /**
     * Function that generates unique identifiers for Panel instances.
     *
     * @type {Function}
     * @required
     * @private
     */
    generateId: _propTypes["default"].func.isRequired,

    /**
     * Set of functions that control how the panels are transitioned into and out of the
     * viewport.
     *
     * @see {@link ui/ViewManager.SlideArranger}
     * @type {ui/ViewManager.Arranger}
     * @default ui/ViewManager.SlideLeftArranger
     * @public
     */
    arranger: _ViewManager.shape,

    /**
     * Hint string read when focusing the back button.
     *
     * @type {String}
     * @default 'go to previous'
     * @public
     */
    backButtonAriaLabel: _propTypes["default"].string,

    /**
     * Background opacity of the application back button.
     *
     * @type {('opaque'|'transparent')}
     * @default 'transparent'
     * @public
     */
    backButtonBackgroundOpacity: _propTypes["default"].oneOf(['opaque', 'transparent']),

    /**
     * [`Panel`s]{@link sandstone/Panels.Panel} to be rendered
     *
     * @type {Node}
     * @public
     */
    children: _propTypes["default"].node,

    /**
     * Hint string read when focusing the application close button.
     *
     * @type {String}
     * @default 'Exit app'
     * @public
     */
    closeButtonAriaLabel: _propTypes["default"].string,

    /**
     * Background opacity of the application close button.
     *
     * @type {('opaque'|'transparent')}
     * @default 'transparent'
     * @public
     */
    closeButtonBackgroundOpacity: _propTypes["default"].oneOf(['opaque', 'transparent']),

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `panels` - The root class name
     * * `viewport` - The node containing the panel instances
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,

    /**
     * Unique identifier for the Panels instance.
     *
     * When defined, `Panels` will manage the presentation state of `Panel` instances in order
     * to restore it when returning to the `Panel`. See
     * [noSharedState]{@link sandstone/Panels.Panels.noSharedState} for more details on shared
     * state.
     *
     * @type {String}
     * @public
     */
    id: _propTypes["default"].string,

    /**
     * Index of the active panel
     *
     * @type {Number}
     * @default 0
     * @public
     */
    index: _propTypes["default"].number,

    /**
     * Disables panel transitions.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    noAnimation: _propTypes["default"].bool,

    /**
     * Omits the back button.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    noBackButton: _propTypes["default"].bool,

    /**
     * Omits the close button.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    noCloseButton: _propTypes["default"].bool,

    /**
     * Prevents maintaining shared state for framework components within this `Panels` instance.
     *
     * When `false`, each `Panel` will track the state of some framework components in order to
     * restore that state when the Panel is recreated. For example, the scroll position of a
     * `sandstone/Scroller` within a `Panel` will be saved and restored when returning to that
     * `Panel`.
     *
     * This only applied when navigating "back" (to a lower index) to `Panel`. When navigating
     * "forwards" (to a higher index), the `Panel` and its contained components will use their
     * default state.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    noSharedState: _propTypes["default"].bool,

    /**
     * Called with cancel/back key events.
     *
     * @type {Function}
     * @public
     */
    onBack: _propTypes["default"].func,

    /**
     * Called when the app close button is clicked.
     *
     * @type {Function}
     * @public
     */
    onClose: _propTypes["default"].func,

    /**
     * Called once when all panels have completed their transition.
     *
     * @type {Function}
     */
    onTransition: _propTypes["default"].func,

    /**
     * Called once before panels begin their transition.
     *
     * @type {Function}
     */
    onWillTransition: _propTypes["default"].func
  },
  defaultProps: {
    arranger: _Panels.BasicArranger,
    index: 0,
    noAnimation: false,
    noSharedState: false
  },
  styles: {
    css: _PanelsModule["default"],
    className: 'panels enact-fit',
    publicClassNames: ['panels', 'viewport']
  },
  computed: {
    viewportId: function viewportId(_ref) {
      var id = _ref.id;
      return id && "".concat(id, "-viewport");
    }
  },
  handlers: {
    onBack: (0, _handle["default"])((0, _handle.adaptEvent)(function (ev, _ref2) {
      var index = _ref2.index;
      return {
        type: 'onBack',
        index: Math.max(index - 1, 0)
      };
    }, (0, _handle.forwardWithPrevent)('onBack')))
  },
  render: function render(_ref3) {
    var arranger = _ref3.arranger,
        children = _ref3.children,
        css = _ref3.css,
        generateId = _ref3.generateId,
        id = _ref3.id,
        index = _ref3.index,
        noAnimation = _ref3.noAnimation,
        noSharedState = _ref3.noSharedState,
        onTransition = _ref3.onTransition,
        onWillTransition = _ref3.onWillTransition,
        viewportId = _ref3.viewportId,
        rest = _objectWithoutProperties(_ref3, _excluded);

    var sharedProps = (0, _util.getSharedProps)(rest);
    (0, _util.deleteSharedProps)(rest);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
      id: id,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels.Viewport, _objectSpread(_objectSpread({}, sharedProps), {}, {
        arranger: arranger,
        className: css.viewport,
        generateId: generateId,
        id: viewportId,
        index: index,
        noAnimation: noAnimation,
        noSharedState: noSharedState,
        onTransition: onTransition,
        onWillTransition: onWillTransition,
        children: children
      }))
    }));
  }
});
exports.PanelsBase = PanelsBase;
var PanelsDecorator = (0, _compose["default"])((0, _Panels.CancelDecorator)({
  cancel: 'onBack'
}), _IdProvider["default"], _Skinnable["default"]);
var Panels = PanelsDecorator(PanelsBase);
exports.Panels = Panels;
var _default = Panels;
exports["default"] = _default;
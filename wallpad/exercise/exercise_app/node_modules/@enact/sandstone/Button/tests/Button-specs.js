"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _Button = _interopRequireWildcard(require("../Button"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Button', function () {
  test('should have \'disabled\' HTML attribute when \'disabled\' prop is provided', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
      disabled: true,
      children: "I am a disabled Button"
    }));

    var button = _react.screen.getByRole('button');

    expect(button).toHaveAttribute('disabled');
  });
  test('should have default backgroundOpacity opaque', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {}));

    var button = _react.screen.getByRole('button');

    var expected = 'opaque';
    expect(button).toHaveClass(expected);
  });
  test('should expand by default', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {}));

    var button = _react.screen.getByRole('button');

    var expected = 'focusExpand';
    expect(button).toHaveClass(expected);
  });
  test('should be able to disable the expand focus effect', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
      focusEffect: "static"
    }));

    var button = _react.screen.getByRole('button');

    var expected = 'focusStatic';
    expect(button).toHaveClass(expected);
  });
  test('should have default minWidth', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {}));

    var button = _react.screen.getByRole('button');

    var expected = 'minWidth';
    expect(button).toHaveClass(expected);
  });
  test('should have default size large', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {}));

    var button = _react.screen.getByRole('button');

    var expected = 'large';
    expect(button).toHaveClass(expected);
  });
  describe('with no minWidth', function () {
    test('should not have minWidth class', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
        minWidth: false
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'minWidth';
      expect(button).not.toHaveClass(expected);
    });
  });
  describe('with transparent backgroundOpacity', function () {
    test('should have transparent class', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
        backgroundOpacity: "transparent"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'transparent';
      expect(button).toHaveClass(expected);
    });
    test('should not have have opaque class', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
        backgroundOpacity: "transparent"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'opaque';
      expect(button).not.toHaveClass(expected);
    });
  });
  describe('with icon', function () {
    test('should have check icon when specified', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check",
        children: "abc"
      }));

      var icon = _react.screen.getByText('âœ“');

      expect(icon).toBeInTheDocument();
      expect(icon).toHaveClass('icon');
    });
    test('should not have minWidth class with only icon', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'minWidth';
      expect(button).not.toHaveClass(expected);
    });
    test('should have iconAfter class with text and icon', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check",
        iconPosition: "after",
        children: "text"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'iconAfter';
      expect(button).toHaveClass(expected);
    });
    test('should have iconBefore class with text and icon', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check",
        iconPosition: "before",
        children: "text"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'iconBefore';
      expect(button).toHaveClass(expected);
    });
    test('should not have iconPosition classes with only icon', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check"
      }));

      var button = _react.screen.getByRole('button');

      expect(button).not.toHaveClass('iconBefore');
      expect(button).not.toHaveClass('iconAfter');
    });
    test('should have iconOnly class when there is no children', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'iconOnly';
      expect(button).toHaveClass(expected);
    });
  });
  describe('with color', function () {
    test('should have hasColor class when a color is specified', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        color: "red",
        children: "abc"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'hasColor';
      expect(button).toHaveClass(expected);
    });
    test('should not have hasColor when no color is specified', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        children: "abc"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'hasColor';
      expect(button).not.toHaveClass(expected);
    });
    test('should have red class', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        color: "red",
        children: "abc"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'red';
      expect(button).toHaveClass(expected);
    });
    test('should have blue class', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        color: "blue",
        children: "abc"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'blue';
      expect(button).toHaveClass(expected);
    });
    test('should have yellow class', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        color: "yellow",
        children: "abc"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'yellow';
      expect(button).toHaveClass(expected);
    });
    test('should have green class', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        color: "green",
        children: "abc"
      }));

      var button = _react.screen.getByRole('button');

      var expected = 'green';
      expect(button).toHaveClass(expected);
    });
  });
  describe('events', function () {
    test('should call onClick when not disabled', function () {
      var handleClick = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        onClick: handleClick,
        children: "I am not a disabled Button"
      }));

      var button = _react.screen.getByText('I am not a disabled Button');

      _userEvent["default"].click(button);

      expect(handleClick).toBeCalled();
    });
    test('should not call onClick when disabled', function () {
      var handleClick = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        disabled: true,
        onClick: handleClick,
        children: "I am a disabled Button"
      }));

      var button = _react.screen.getByText('I am a disabled Button');

      _userEvent["default"].click(button);

      expect(handleClick).not.toBeCalled();
    });
    test('should have "Select" voice intent in the node of "role=button"', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        children: "Hello"
      }));

      var button = _react.screen.getByRole('button');

      expect(button).toHaveAttribute('data-webos-voice-intent', 'Select');
    });
  });
});
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ButtonDecorator = exports.ButtonBase = exports.Button = void 0;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _util = require("@enact/core/util");

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _Spottable = _interopRequireDefault(require("@enact/spotlight/Spottable"));

var _Button = require("@enact/ui/Button");

var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _compose = _interopRequireDefault(require("ramda/src/compose"));

var _react = require("react");

var _Icon = _interopRequireDefault(require("../Icon"));

var _Marquee = require("../Marquee");

var _Skinnable = _interopRequireDefault(require("../Skinnable"));

var _TooltipDecorator = _interopRequireDefault(require("../TooltipDecorator"));

var _ButtonModule = _interopRequireDefault(require("./Button.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["css"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A button component.
 *
 * This component is most often not used directly but may be composed within another component as it
 * is within [Button]{@link sandstone/Button.Button}.
 *
 * @class ButtonBase
 * @memberof sandstone/Button
 * @extends ui/Button.ButtonBase
 * @ui
 * @public
 */
var ButtonBase = (0, _kind["default"])({
  name: 'Button',
  propTypes:
  /** @lends sandstone/Button.ButtonBase.prototype */
  {
    /**
     * The background opacity of this button.
     *
     * Text buttons and icon+text buttons, by default are opaque, while icon-only buttons
     * default to transparent. This value can be overridden by setting this prop.
     *
     * Valid values are: `'opaque'`, and `'transparent'`.
     *
     * @type {('opaque'|'transparent')}
     * @default 'opaque'
     * @public
     */
    backgroundOpacity: _propTypes2["default"].oneOf(['opaque', 'transparent']),

    /**
     * Enables the `collapsed` feature.
     *
     * This requires that both the text and [icon]{@link sandstone/Button.Button#icon} are
     * defined.
     *
     * Use [collapsed]{@link sandstone/Button.Button#collapsed} to toggle the collapsed state.
     *
     * @type {Boolean}
     * @default false
     * @see {@link sandstone/Button.Button#collapsed}
     * @private
     */
    collapsable: _propTypes2["default"].bool,

    /**
     * Toggles the collapsed state of this button, down to just its icon.
     *
     * This requires that [collapsable]{@link sandstone/Button.Button#collapsable} is enabled
     * and both the text and [icon]{@link sandstone/Button.Button#icon} are defined.
     *
     * @type {Boolean}
     * @default false
     * @see {@link sandstone/Button.Button#collapsable}
     * @private
     */
    collapsed: _propTypes2["default"].bool,

    /**
     * The color of the underline beneath button's content.
     *
     * Accepts one of the following color names, which correspond with the colored buttons on a
     * standard remote control: `'red'`, `'green'`, `'yellow'`, `'blue'`.
     *
     * @type {('red'|'green'|'yellow'|'blue')}
     * @public
     */
    color: _propTypes2["default"].oneOf(['red', 'green', 'yellow', 'blue']),

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `button` - The root class name
     * * `bg` - The background node of the button
     * * `large` - Applied to a `size='large'` button
     * * `selected` - Applied to a `selected` button
     * * `small` - Applied to a `size='small'` button
     *
     * @type {Object}
     * @public
     */
    // `client` was intentionally excluded from the above documented exported classes as they do
    // not appear to provide value to the end-developer, but are needed by PopupTabLayout
    // internally for its design guidelines. Same for `pressed` which is used by Dropdown to
    // nullify the key-press activate animation.
    css: _propTypes2["default"].object,

    /**
     * Set the visual effect applied to the button when focused.
     *
     * @type {('expand'|'static')}
     * @default 'expand'
     * @private
     */
    focusEffect: _propTypes2["default"].oneOf(['expand', 'static']),

    /**
     * The component used to render the [icon]{@link sandstone/Button.ButtonBase.icon}.
     *
     * This component will receive the `icon` class to customize its styling.
     *
     * @type {Component|Node}
     * @private
     */
    iconComponent: _propTypes["default"].componentOverride,

    /**
     * True if button is an icon only button.
     *
     * @type {Boolean}
     * @default false
     * @private
     */
    iconOnly: _propTypes2["default"].bool,

    /**
     * Specifies on which side (`'before'` or `'after'`) of the text the icon appears.
     *
     * @type {('before'|'after')}
     * @default 'before'
     * @public
     */
    iconPosition: _propTypes2["default"].oneOf(['before', 'after']),

    /**
     * Boolean controlling whether this component should enforce the "minimum width" rules.
     *
     * *NOTE*: If you don't specify this prop, it works as `false` for icon only Button
     * and as `true` for other Buttons.
     *
     * @type {Boolean}
     * @public
     */
    minWidth: _propTypes2["default"].bool,

    /**
     * The size of the button.
     *
     * @type {('large'|'small')}
     * @default 'large'
     * @public
     */
    size: _propTypes2["default"].oneOf(['large', 'small'])
  },
  defaultProps: {
    backgroundOpacity: null,
    collapsable: false,
    collapsed: false,
    focusEffect: 'expand',
    iconComponent: _Icon["default"],
    iconOnly: false,
    iconPosition: 'before',
    size: 'large'
  },
  styles: {
    css: _ButtonModule["default"],
    publicClassNames: ['button', 'bg', 'client', 'hasIcon', 'icon', 'iconAfter', 'iconBefore', 'large', 'pressed', 'selected', 'small']
  },
  computed: {
    className: function className(_ref) {
      var backgroundOpacity = _ref.backgroundOpacity,
          collapsable = _ref.collapsable,
          collapsed = _ref.collapsed,
          color = _ref.color,
          focusEffect = _ref.focusEffect,
          iconOnly = _ref.iconOnly,
          iconPosition = _ref.iconPosition,
          size = _ref.size,
          styler = _ref.styler;
      return styler.append({
        hasColor: color,
        iconOnly: iconOnly,
        collapsable: collapsable,
        collapsed: collapsed
      }, backgroundOpacity || (iconOnly ? 'transparent' : 'opaque'), // Defaults to opaque, unless otherwise specified
      color, "focus".concat((0, _util.cap)(focusEffect)), // iconBefore/iconAfter only applies when using text and an icon
      !iconOnly && "icon".concat((0, _util.cap)(iconPosition)), size);
    },
    minWidth: function minWidth(_ref2) {
      var iconOnly = _ref2.iconOnly,
          _minWidth = _ref2.minWidth;
      return _minWidth != null ? _minWidth : !iconOnly;
    }
  },
  render: function render(_ref3) {
    var css = _ref3.css,
        rest = _objectWithoutProperties(_ref3, _excluded);

    delete rest.backgroundOpacity;
    delete rest.color;
    delete rest.collapsable;
    delete rest.collapsed;
    delete rest.iconOnly;
    delete rest.iconPosition;
    delete rest.focusEffect;
    return _Button.ButtonBase.inline(_objectSpread(_objectSpread({
      'data-webos-voice-intent': 'Select'
    }, rest), {}, {
      css: css
    }));
  }
});
/**
 * A higher-order component that determines if it is a button that only displays an icon.
 *
 * @class IconButtonDecorator
 * @memberof sandstone/Button
 * @hoc
 * @private
 */

exports.ButtonBase = ButtonBase;
var IconButtonDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  return (0, _kind["default"])({
    name: 'IconButtonDecorator',
    computed: {
      iconOnly: function iconOnly(_ref4) {
        var children = _ref4.children;
        return _react.Children.toArray(children).filter(Boolean).length === 0;
      }
    },
    render: function render(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, props));
    }
  });
});
/**
 * Applies Sandstone specific behaviors to [Button]{@link sandstone/Button.ButtonBase} components.
 *
 * @hoc
 * @memberof sandstone/Button
 * @mixes sandstone/Marquee.MarqueeDecorator
 * @mixes ui/Button.ButtonDecorator
 * @mixes spotlight/Spottable.Spottable
 * @mixes sandstone/Skinnable.Skinnable
 * @public
 */

var ButtonDecorator = (0, _compose["default"])(_Pure["default"], IconButtonDecorator, (0, _TooltipDecorator["default"])({
  tooltipDestinationProp: 'decoration'
}), // Future note: This should eventually be conditionally applied via hooks (after refactoring)
(0, _Marquee.MarqueeDecorator)({
  css: _ButtonModule["default"]
}), _Button.ButtonDecorator, _Spottable["default"], _Skinnable["default"]);
/**
 * A button component, ready to use in Sandstone applications.
 *
 * Usage:
 * ```
 * <Button
 *	backgroundOpacity="transparent"
 *	size="small"
 *	icon="home"
 * >
 * 	Press me!
 * </Button>
 * ```
 *
 * @class Button
 * @memberof sandstone/Button
 * @extends sandstone/Button.ButtonBase
 * @mixes sandstone/Button.ButtonDecorator
 * @ui
 * @public
 */

exports.ButtonDecorator = ButtonDecorator;
var Button = ButtonDecorator(ButtonBase);
exports.Button = Button;
var _default = Button;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ScrollbarBase = exports.Scrollbar = void 0;

var _Scrollbar = require("@enact/ui/useScroll/Scrollbar");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = require("react");

var _ScrollbarTrack = _interopRequireDefault(require("./ScrollbarTrack"));

var _Skinnable = _interopRequireDefault(require("../Skinnable"));

var _ScrollbarModule = _interopRequireDefault(require("./Scrollbar.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["aria-label", "cbAlertScrollbarTrack", "focusableScrollbar", "onInteractionForScroll", "rtl", "scrollbarTrackCss"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useThemeScrollbar = function useThemeScrollbar(props) {
  var _useScrollbarBase = (0, _Scrollbar.useScrollbar)(props),
      restProps = _useScrollbarBase.restProps,
      scrollbarProps = _useScrollbarBase.scrollbarProps,
      scrollbarTrackProps = _useScrollbarBase.scrollbarTrackProps;

  var ariaLabel = restProps['aria-label'],
      cbAlertScrollbarTrack = restProps.cbAlertScrollbarTrack,
      focusableScrollbar = restProps.focusableScrollbar,
      onInteractionForScroll = restProps.onInteractionForScroll,
      rtl = restProps.rtl,
      scrollbarTrackCss = restProps.scrollbarTrackCss,
      rest = _objectWithoutProperties(restProps, _excluded);

  var scrollbarContainerRef = scrollbarProps.ref,
      scrollbarTrackRef = scrollbarTrackProps.ref,
      vertical = props.vertical;
  var onClick = (0, _react.useCallback)(function (ev) {
    // Click on bodyText scrollbar.
    var nativeEvent = ev.nativeEvent,
        target = ev.target;

    if (!focusableScrollbar || !scrollbarTrackRef.current) {
      return;
    } // Click the scrollbar area. If user click the thumb, do nothing.


    if (target === scrollbarContainerRef.current || target === scrollbarTrackRef.current) {
      var clickPoint = nativeEvent[vertical ? 'offsetY' : 'offsetX'],
          thumb = scrollbarTrackRef.current.children[0],
          thumbPosition = thumb[vertical ? 'offsetTop' : 'offsetLeft'],
          thumbSize = thumb[vertical ? 'offsetHeight' : 'offsetWidth'],
          clickThumb = clickPoint > thumbPosition && clickPoint < thumbPosition + thumbSize;

      if (!clickThumb) {
        ev.preventDefault();
        ev.nativeEvent.stopImmediatePropagation();
        onInteractionForScroll({
          inputType: 'track',
          isForward: clickPoint > thumbPosition,
          isPagination: true,
          isVerticalScrollBar: vertical
        });
      }
    }
  }, [focusableScrollbar, onInteractionForScroll, scrollbarContainerRef, scrollbarTrackRef, vertical]);
  return {
    restProps: rest,
    scrollbarProps: _objectSpread(_objectSpread({}, scrollbarProps), {}, {
      onClick: onClick
    }),
    scrollbarTrackProps: _objectSpread(_objectSpread({}, scrollbarTrackProps), {}, {
      'aria-label': ariaLabel,
      cbAlertScrollbarTrack: cbAlertScrollbarTrack,
      focusableScrollbar: focusableScrollbar,
      onInteractionForScroll: onInteractionForScroll,
      rtl: rtl,
      scrollbarTrackCss: scrollbarTrackCss
    })
  };
};
/**
 * A Sandstone-styled scrollbar base component.
 *
 * @class ScrollbarBase
 * @memberof sandstone/useScroll
 * @ui
 * @private
 */


var ScrollbarBase = /*#__PURE__*/(0, _react.memo)(function (props) {
  var _useThemeScrollbar = useThemeScrollbar(props),
      restProps = _useThemeScrollbar.restProps,
      scrollbarProps = _useThemeScrollbar.scrollbarProps,
      scrollbarTrackProps = _useThemeScrollbar.scrollbarTrackProps;

  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread(_objectSpread({}, restProps), scrollbarProps), {}, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ScrollbarTrack["default"], _objectSpread({}, scrollbarTrackProps))
  }));
});
exports.ScrollbarBase = ScrollbarBase;
ScrollbarBase.displayName = 'ScrollbarBase';
ScrollbarBase.propTypes =
/** @lends sandstone/useScroll.Scrollbar.prototype */
{
  /**
   * Customizes the component by mapping the supplied collection of CSS class names to the
   * corresponding internal elements and states of this component.
   *
   * The following classes are supported:
   *
   * * `scrollbar` - The scrollbar component class
   *
   * @type {Object}
   * @public
   */
  css: _propTypes["default"].object,

  /**
   * The minimum size of the thumb.
   * This value will be applied ri.scale.
   *
   * @type {number}
   * @public
   */
  minThumbSize: _propTypes["default"].number,

  /**
   * Customizes the component by mapping the supplied collection of CSS class names to the
   * corresponding internal elements and states of this component.
   *
   * The following classes are supported:
   *
   * * `scrollbarTrack` - The scrollbarTrack component class
   * * `thumb` - The scrollbar thumb component class
   *
   * @type {Object}
   * @public
   */
  scrollbarTrackCss: _propTypes["default"].object,

  /**
   * The scrollbar will be oriented vertically.
   *
   * @type {Boolean}
   * @default true
   * @public
   */
  vertical: _propTypes["default"].bool
};
ScrollbarBase.defaultProps = {
  css: _ScrollbarModule["default"],
  minThumbSize: 120,
  vertical: true
};
/**
 * A Sandstone-styled scroll bar.
 *
 * @class Scrollbar
 * @memberof sandstone/useScroll
 * @ui
 * @private
 */

var Scrollbar = (0, _Skinnable["default"])(ScrollbarBase);
exports.Scrollbar = Scrollbar;
Scrollbar.displayName = 'Scrollbar';
var _default = Scrollbar;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SwitchItemDecorator = exports.SwitchItemBase = exports.SwitchItem = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _compose = _interopRequireDefault(require("ramda/src/compose"));

var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));

var _Slottable = _interopRequireDefault(require("@enact/ui/Slottable"));

var _Toggleable = _interopRequireDefault(require("@enact/ui/Toggleable"));

var _Item = require("../Item");

var _Skinnable = _interopRequireDefault(require("../Skinnable"));

var _Switch = require("../Switch");

var _SwitchItemModule = _interopRequireDefault(require("./SwitchItem.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["children", "css", "selected", "slotAfter"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Item = (0, _Item.ItemDecorator)(_Item.ItemBase);
var Switch = (0, _Skinnable["default"])(_Switch.SwitchBase);
Switch.displayName = 'Switch';
/**
 * Renders an item with a [Switch]{@link sandstone/Switch}.
 *
 * @class SwitchItemBase
 * @memberof sandstone/SwitchItem
 * @extends sandstone/Item.Item
 * @omit iconComponent
 * @ui
 * @public
 */

var SwitchItemBase = (0, _kind["default"])({
  name: 'SwitchItem',
  propTypes:
  /** @lends sandstone/SwitchItem.SwitchItemBase.prototype */
  {
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `switchItem` - The root class name
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,

    /**
     * If true the switch will be selected.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    selected: _propTypes["default"].bool,

    /**
     * Nodes to be inserted after `children` and before the switch.
     *
     * @type {Node}
     * @public
     */
    slotAfter: _propTypes["default"].node
  },
  defaultProps: {
    selected: false
  },
  styles: {
    css: _SwitchItemModule["default"],
    className: 'switchItem',
    publicClassNames: ['switchItem']
  },
  render: function render(_ref) {
    var children = _ref.children,
        css = _ref.css,
        selected = _ref.selected,
        slotAfter = _ref.slotAfter,
        rest = _objectWithoutProperties(_ref, _excluded);

    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Item, _objectSpread(_objectSpread({
      "data-webos-voice-intent": "SetToggleItem",
      role: "button"
    }, rest), {}, {
      "aria-pressed": selected,
      css: css,
      selected: selected,
      children: [children, /*#__PURE__*/(0, _jsxRuntime.jsxs)("slotAfter", {
        children: [slotAfter, /*#__PURE__*/(0, _jsxRuntime.jsx)(Switch, {
          selected: selected,
          css: css
        })]
      })]
    }));
  }
});
/**
 * Adds interactive functionality to `SwitchItem`.
 *
 * @class SwitchItemDecorator
 * @memberof sandstone/SwitchItem
 * @mixes ui/Toggleable.Toggleable
 * @hoc
 * @public
 */

exports.SwitchItemBase = SwitchItemBase;
var SwitchItemDecorator = (0, _compose["default"])((0, _Toggleable["default"])({
  toggleProp: 'onClick'
}), (0, _Slottable["default"])({
  slots: ['label', 'slotAfter', 'slotBefore']
}));
/**
 * A Sandstone-styled item with a switch component.
 *
 * `SwitchItem` will manage its `selected` state via [Toggleable]{@link ui/Toggleable} unless set
 * directly.
 *
 * @class SwitchItem
 * @memberof sandstone/SwitchItem
 * @extends sandstone/SwitchItem.SwitchItemBase
 * @mixes sandstone/SwitchItem.SwitchItemDecorator
 * @ui
 * @public
 */

exports.SwitchItemDecorator = SwitchItemDecorator;
var SwitchItem = (0, _Pure["default"])(SwitchItemDecorator(SwitchItemBase));
exports.SwitchItem = SwitchItem;
var _default = SwitchItem;
exports["default"] = _default;
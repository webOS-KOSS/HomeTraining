"use strict";

var _FloatingLayer = require("@enact/ui/FloatingLayer");

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _ContextualPopupDecorator = require("../ContextualPopupDecorator");

var _Button = _interopRequireDefault(require("../../Button"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var ContextualButton = (0, _ContextualPopupDecorator.ContextualPopupDecorator)(_Button["default"]);
describe('ContextualPopupDecorator Specs', function () {
  test('should emit onOpen event with type when opening', function () {
    var handleOpen = jest.fn();
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        onOpen: handleOpen,
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));
    var expected = 1;
    var expectedType = {
      type: 'onOpen'
    };
    var actual = handleOpen.mock.calls.length && handleOpen.mock.calls[0][0];
    expect(handleOpen).toHaveBeenCalledTimes(expected);
    expect(actual).toMatchObject(expectedType);
  });
  test('should emit onClose event with type when clicking on contextual button', function () {
    var handleClose = jest.fn();
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        onClose: handleClose,
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));

    var contextualButton = _react.screen.getByRole('button');

    _userEvent["default"].click(contextualButton);

    var expected = 1;
    var expectedType = {
      type: 'onClose'
    };
    var actual = handleClose.mock.calls.length && handleClose.mock.calls[0][0];
    expect(handleClose).toHaveBeenCalledTimes(expected);
    expect(actual).toMatchObject(expectedType);
  });
  test('should render component into FloatingLayer if open', function () {
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));

    var contextualPopup = _react.screen.getByRole('alert');

    var expected = message;
    var actual = contextualPopup.children.item(0);
    expect(actual).toHaveTextContent(expected);
  });
  test('should not render into FloatingLayer if not open', function () {
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));

    var popup = _react.screen.queryByText(message);

    expect(popup).toBeNull();
  });
  test('should not close popup when clicking outside if noAutoDismiss is true', function () {
    var handleClose = jest.fn();
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      "data-testid": "outsideArea",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        noAutoDismiss: true,
        onClose: handleClose,
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));

    var outsideArea = _react.screen.getByTestId('outsideArea');

    _userEvent["default"].click(outsideArea);

    expect(handleClose).not.toHaveBeenCalled();
  });
  test('should have "below right" className when direction is set to "below right"', function () {
    var handleClose = jest.fn();
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        direction: "below right",
        onClose: handleClose,
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));

    var contextualPopup = _react.screen.getByRole('alert');

    var expected = 'below right';
    var actual = contextualPopup.children.item(0);
    expect(actual).toHaveClass(expected);
  });
});
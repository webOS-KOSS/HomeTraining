"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.HolePunchScrimDecorator = exports.HolePunchScrimBase = exports.HolePunchScrim = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _resolution = require("@enact/ui/resolution");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _compose = _interopRequireDefault(require("ramda/src/compose"));

var _Skinnable = _interopRequireDefault(require("../Skinnable"));

var _HolePunchScrimModule = _interopRequireDefault(require("./HolePunchScrim.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var autoUnit = function autoUnit(size) {
  return typeof size === 'number' ? (0, _resolution.unit)(size, 'rem') : size;
};

var HolePunchScrimBase = (0, _kind["default"])({
  name: 'HolePunchScrim',
  propTypes: {
    holeBounds: _propTypes["default"].shape({
      height: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
      right: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
      top: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
      width: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
    })
  },
  defaultProps: {
    holeBounds: {}
  },
  styles: {
    css: _HolePunchScrimModule["default"],
    className: 'holePunchScrim'
  },
  computed: {
    style: function style(_ref) {
      var _ref$holeBounds = _ref.holeBounds,
          _ref$holeBounds$top = _ref$holeBounds.top,
          top = _ref$holeBounds$top === void 0 ? 0 : _ref$holeBounds$top,
          _ref$holeBounds$left = _ref$holeBounds.left,
          left = _ref$holeBounds$left === void 0 ? 0 : _ref$holeBounds$left,
          _ref$holeBounds$width = _ref$holeBounds.width,
          width = _ref$holeBounds$width === void 0 ? 0 : _ref$holeBounds$width,
          _ref$holeBounds$heigh = _ref$holeBounds.height,
          height = _ref$holeBounds$heigh === void 0 ? 0 : _ref$holeBounds$heigh,
          _style = _ref.style;
      return _objectSpread(_objectSpread({}, _style), {}, {
        '--hole-height': autoUnit(height),
        '--hole-width': autoUnit(width),
        '--hole-top': autoUnit(top),
        '--hole-left': autoUnit(left)
      });
    }
  },
  render: function render(_ref2) {
    var rest = Object.assign({}, _ref2);
    delete rest.holeBounds;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, rest));
  }
});
exports.HolePunchScrimBase = HolePunchScrimBase;
var HolePunchScrimDecorator = (0, _compose["default"])(_Skinnable["default"]);
exports.HolePunchScrimDecorator = HolePunchScrimDecorator;
var HolePunchScrim = HolePunchScrimDecorator(HolePunchScrimBase);
exports.HolePunchScrim = HolePunchScrim;
var _default = HolePunchScrim;
exports["default"] = _default;
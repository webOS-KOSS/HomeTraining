"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressButtonBase = exports.ProgressButton = void 0;
Object.defineProperty(exports, "ProgressButtonDecorator", {
  enumerable: true,
  get: function get() {
    return _Button.ButtonDecorator;
  }
});
exports["default"] = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Button = require("../Button");

var _Icon = _interopRequireDefault(require("../Icon"));

var _ProgressBar = _interopRequireDefault(require("../ProgressBar"));

var _ProgressButtonModule = _interopRequireDefault(require("./ProgressButton.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["css", "children", "icon", "progress", "showProgress"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Renders a sandstone-styled progress button.
 *
 * @class ProgressButtonBase
 * @memberof sandstone/ProgressButton
 * @extends sandstone/Button.ButtonBase
 * @extends sandstone/ProgressBar.ProgressBar
 * @ui
 * @public
 */
var ProgressButtonBase = (0, _kind["default"])({
  name: 'ProgressButton',
  propTypes:
  /** @lends sandstone/ProgressButton.ProgressButtonBase.prototype */
  {
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `progressButton` - The root component class
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,

    /**
     * The icon content displayed with progress.
     *
     * @type {String|Object}
     * @default stop
     * @public
     */
    icon: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),

    /**
     * A number between `0` and `1` indicating the proportion of the filled portion of the bar.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    progress: _propTypes["default"].number,

    /**
     * Shows progress instead of text.
     *
     * @type {Boolean}
     * @public
     */
    showProgress: _propTypes["default"].bool,

    /**
     * The size of the progress button.
     *
     * @type {('large'|'small')}
     * @default 'small'
     * @public
     */
    size: _propTypes["default"].string
  },
  defaultProps: {
    icon: 'stop',
    progress: 0,
    showProgress: false,
    size: 'small'
  },
  styles: {
    css: _ProgressButtonModule["default"],
    className: 'progressButton',
    publicClassNames: ['progressButton']
  },
  render: function render(_ref) {
    var css = _ref.css,
        children = _ref.children,
        icon = _ref.icon,
        progress = _ref.progress,
        showProgress = _ref.showProgress,
        rest = _objectWithoutProperties(_ref, _excluded);

    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, _objectSpread(_objectSpread({}, rest), {}, {
      css: css,
      children: showProgress ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: css.progressContainer,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_ProgressBar["default"], {
          orientation: "radial",
          progress: progress,
          css: css
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon["default"], {
          className: css.icon,
          children: icon
        })]
      }) : children
    }));
  }
});
/**
 * The ready-to-use Sandstone-styled ProgressButton.
 *
 * @class ProgressButton
 * @memberof sandstone/ProgressButton
 * @extends sandstone/ProgressButton.ProgressButtonBase
 * @ui
 * @public
 */

exports.ProgressButtonBase = ProgressButtonBase;
var ProgressButton = (0, _Button.ButtonDecorator)(ProgressButtonBase);
exports.ProgressButton = ProgressButton;
var _default = ProgressButton;
exports["default"] = _default;
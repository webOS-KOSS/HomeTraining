"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _ImageItem = require("../ImageItem");

var _jsxRuntime = require("react/jsx-runtime");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function SelectionComponent() {
  return null;
}

describe('ImageItem', function () {
  test('should support `centered` prop', function () {
    var children = 'caption';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      centered: true,
      children: children
    }));
    var expected = 'center';

    var actual = _react.screen.getByText('caption').style;

    expect(actual).toHaveProperty('textAlign', expected);
  });
  test('should support `centered` prop to label', function () {
    var label = 'label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      centered: true,
      label: label
    }));
    var expected = 'center';

    var actual = _react.screen.getByText('label').style;

    expect(actual).toHaveProperty('textAlign', expected);
  });
  test('should support not apply `centered` with horizontal', function () {
    var children = 'caption';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      centered: true,
      orientation: "horizontal",
      children: children
    }));
    var unexpected = 'center';

    var actual = _react.screen.getByText('caption').style;

    expect(actual).not.toHaveProperty('textAlign', unexpected);
  });
  test('should support `children` prop', function () {
    var children = 'caption';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      children: children
    }));
    var expected = children;

    var actual = _react.screen.getByText('caption');

    expect(actual).toHaveTextContent(expected);
  });
  test('should support `label` prop', function () {
    var label = 'label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      centered: true,
      label: label
    }));
    var expected = label;

    var actual = _react.screen.getByText('label');

    expect(actual).toHaveTextContent(expected);
  });
  test('should support `imageIconSrc` prop when `orientation="vertical"`', function () {
    var imageIconSrc = 'imageIconSrc';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      imageIconSrc: imageIconSrc,
      orientation: "vertical"
    }));
    var expected = imageIconSrc;

    var actual = _react.screen.getAllByRole('img')[2].children.item(0);

    expect(actual).toHaveAttribute('src', expected);
  });
  test('should not support `imageIconSrc` prop when `orientation="horizontal"`', function () {
    var imageIconSrc = 'imageIconSrc';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      imageIconSrc: imageIconSrc,
      orientation: "horizontal"
    }));
    var expected = 2;

    var actual = _react.screen.getAllByRole('img').length;

    expect(actual).toBe(expected);
  });
  test('should omit `.imageIcon` when `imageIconSrc` is unset and `caption` is set', function () {
    var children = 'caption';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      children: children
    }));
    var className = 'imageIcon';

    var images = _react.screen.getAllByRole('img');

    var _iterator = _createForOfIteratorHelper(images),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var image = _step.value;
        expect(image).not.toHaveClass(className);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
  test('should omit `.imageIcon` when `imageIconSrc` is unset and `label` is set', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      label: "label"
    }));
    var className = 'imageIcon';

    var images = _react.screen.getAllByRole('img');

    var _iterator2 = _createForOfIteratorHelper(images),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var image = _step2.value;
        expect(image).not.toHaveClass(className);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  });
  test('should omit children when `imageIconSrc`, `children`, and `label` are unset', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {}));

    var actual = _react.screen.queryByText('caption');

    expect(actual).toBeNull();
  });
  test('should omit `.selectionContainer` when `showSelection` is unset', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {}));
    var unexpected = 'selectionContainer';

    var actual = _react.screen.getAllByRole('img')[0].children.item(0);

    expect(actual).not.toHaveClass(unexpected);
  });
  test('should include `.selectionContainer` when `showSelection`', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      showSelection: true
    }));
    var expected = 'selectionContainer';

    var actual = _react.screen.getAllByRole('img')[0].children.item(0);

    expect(actual).toHaveClass(expected);
  });
  test('should support `selectionComponent` prop', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      selectionComponent: SelectionComponent,
      showSelection: true
    }));
    var expected = 'selectionContainer';

    var actual = _react.screen.getAllByRole('img')[0].children.item(0);

    expect(actual).toHaveClass(expected);
  });
  test('should have `checkbox` role when `showSelection` is true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      showSelection: true
    }));

    var actual = _react.screen.getByRole('checkbox');

    expect(actual).toBeInTheDocument();
  });
  test('should be `checked` when `showSelection` and `selected` props are true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      selected: true,
      showSelection: true
    }));

    var actual = _react.screen.getByRole('checkbox');

    expect(actual).toBeChecked();
  });
});
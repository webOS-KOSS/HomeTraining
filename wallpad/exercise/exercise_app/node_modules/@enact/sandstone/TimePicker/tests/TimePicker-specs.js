"use strict";

var _ilib = _interopRequireDefault(require("ilib"));

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _TimePicker = _interopRequireWildcard(require("../TimePicker"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Note: Tests pass 'locale' because there's no I18nDecorator to provide a value via context and
// otherwise, nothing renders in the label.
describe('TimePicker', function () {
  // Suite-wide setup
  test('should emit an onChange event when changing a component picker', function () {
    var handleChange = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      onChange: handleChange,
      value: new Date(2000, 6, 15, 3, 30),
      locale: "en-US"
    }));

    var hourPicker = _react.screen.getAllByText('â–²')[0];

    _userEvent["default"].click(hourPicker);

    var expected = 1;
    var expectedType = {
      type: 'onChange'
    };
    var actual = handleChange.mock.calls.length && handleChange.mock.calls[0][0];
    expect(handleChange).toBeCalledTimes(expected);
    expect(actual).toMatchObject(expectedType);
  });
  test('should fire onComplete event with type when enter key pressed from the last picker', function () {
    var handleComplete = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      onComplete: handleComplete,
      value: new Date(2000, 6, 15, 3, 30),
      locale: "en-US"
    }));

    var meridiemPicker = _react.screen.getByLabelText('AM change a value with up down button');

    (0, _react.act)(function () {
      return meridiemPicker.focus();
    });

    _react.fireEvent.keyDown(meridiemPicker, {
      which: 13,
      keyCode: 13,
      code: 13
    });

    var expected = {
      type: 'onComplete'
    };
    var actual = handleComplete.mock.calls.length && handleComplete.mock.calls[0][0];
    expect(actual).toMatchObject(expected);
  });
  test('should accept a JavaScript Date for its value prop', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      locale: "en-US"
    }));

    var minutePicker = _react.screen.getByText('30');

    var expected = 'item';
    expect(minutePicker).toHaveClass(expected);
  });
  test('should set "hourAriaLabel" to hour picker', function () {
    var label = 'custom hour aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      hourAriaLabel: label,
      value: new Date(2000, 0, 1, 12, 30)
    }));

    var hourPicker = _react.screen.getByLabelText(label);

    var expected = 'hourPicker';
    expect(hourPicker).toBeInTheDocument();
    expect(hourPicker).toHaveClass(expected);
  });
  test('should set "meridiemAriaLabel" to meridiem picker', function () {
    var label = 'custom meridiem aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      meridiemAriaLabel: label,
      value: new Date(2000, 0, 1, 12, 30)
    }));

    var meridiemPicker = _react.screen.getByLabelText(label);

    var expected = 'meridiemPicker';
    expect(meridiemPicker).toBeInTheDocument();
    expect(meridiemPicker).toHaveClass(expected);
  });
  test('should set "minuteAriaLabel" to minute picker', function () {
    var label = 'custom minute aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      minuteAriaLabel: label,
      value: new Date(2000, 0, 1, 12, 30)
    }));

    var minutePicker = _react.screen.getByLabelText(label);

    var expected = 'minutePicker';
    expect(minutePicker).toBeInTheDocument();
    expect(minutePicker).toHaveClass(expected);
  });
  test('should set "data-webos-voice-disabled" to hour picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      "data-webos-voice-disabled": true
    }));

    var hourPicker = _react.screen.getByLabelText('12 hour change a value with up down button');

    var expected = 'data-webos-voice-disabled';
    expect(hourPicker).toHaveAttribute(expected);
  });
  test('should set "data-webos-voice-disabled" to merdiem picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      "data-webos-voice-disabled": true
    }));

    var merdiemPicker = _react.screen.getByLabelText('AM change a value with up down button');

    var expected = 'data-webos-voice-disabled';
    expect(merdiemPicker).toHaveAttribute(expected);
  });
  test('should set "data-webos-voice-disabled" to minute picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      "data-webos-voice-disabled": true
    }));

    var minutePicker = _react.screen.getByLabelText('0 minute change a value with up down button'); // The minute is 0 because it does not change based on props, this needs to be fixed in timePicker


    var expected = 'data-webos-voice-disabled';
    expect(minutePicker).toHaveAttribute(expected);
  });
  test('should format a date the same as the label', function () {
    var time = new Date(2000, 0, 1, 12, 30);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: time,
      locale: "en-US"
    }));

    var header = _react.screen.getByText((0, _TimePicker.timeToLocaleString)(time)).parentElement.parentElement;

    var expected = 'heading';
    expect(header).toHaveClass(expected);
  });
  test('should format a date the same as the label in another locale', function () {
    _ilib["default"].setLocale('ar-SA');

    var time = new Date(2000, 0, 1, 12, 30);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: time,
      locale: "ar-SA"
    }));

    var header = _react.screen.getByText((0, _TimePicker.timeToLocaleString)(time)).parentElement.parentElement;

    var expected = 'heading';
    expect(header).toHaveClass(expected);
  });
  test('should not display Heading', function () {
    _ilib["default"].setLocale('en-US');

    var time = new Date(2000, 0, 1, 12, 30);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: time,
      locale: "en-US",
      noLabel: true
    }));

    var header = _react.screen.queryByText((0, _TimePicker.timeToLocaleString)(time));

    expect(header).toBeNull();
  });
});
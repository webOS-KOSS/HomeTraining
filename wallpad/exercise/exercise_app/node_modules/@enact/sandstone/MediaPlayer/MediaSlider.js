"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.MediaSliderBase = exports.MediaSlider = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Slider = _interopRequireDefault(require("../Slider"));

var _MediaKnob = _interopRequireDefault(require("./MediaKnob"));

var _MediaSliderDecorator = _interopRequireDefault(require("./MediaSliderDecorator"));

var _MediaSliderModule = _interopRequireDefault(require("./MediaSlider.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["className", "preview", "previewProportion", "sliderClassName"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * The base component to render a customized [Slider]{@link sandstone/Slider.Slider} for use in
 * media player components such as [VideoPlayer]{@link sandstone/VideoPlayer.VideoPlayer}.
 *
 * @class MediaSliderBase
 * @memberof sandstone/MediaPlayer
 * @ui
 * @private
 */
var MediaSliderBase = (0, _kind["default"])({
  name: 'MediaSlider',
  propTypes:
  /** @lends sandstone/MediaPlayer.MediaSlider.prototype */
  {
    /**
     * When `true`, the knob will expand. Note that Slider is a controlled
     * component. Changing the value would only affect pressed visual and
     * not the state.
     *
     * @type {Boolean}
     * @public
     */
    forcePressed: _propTypes["default"].bool,

    /**
     * Allow moving the knob via pointer or 5-way without emitting `onChange` events
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    preview: _propTypes["default"].bool,

    /**
     * The position of the knob when in `preview` mode
     *
     * @type {Number}
     * @public
     */
    previewProportion: _propTypes["default"].number,

    /**
     * The visibility of the component. When `false`, the component will be hidden.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    visible: _propTypes["default"].bool
  },
  defaultProps: {
    preview: false,
    visible: true
  },
  styles: {
    css: _MediaSliderModule["default"],
    className: 'sliderFrame'
  },
  computed: {
    className: function className(_ref) {
      var styler = _ref.styler,
          visible = _ref.visible;
      return styler.append({
        hidden: !visible
      });
    },
    sliderClassName: function sliderClassName(_ref2) {
      var styler = _ref2.styler,
          forcePressed = _ref2.forcePressed;
      return styler.join({
        pressed: forcePressed,
        mediaSlider: true
      });
    }
  },
  render: function render(_ref3) {
    var className = _ref3.className,
        preview = _ref3.preview,
        previewProportion = _ref3.previewProportion,
        sliderClassName = _ref3.sliderClassName,
        rest = _objectWithoutProperties(_ref3, _excluded);

    delete rest.forcePressed;
    delete rest.visible;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: className,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Slider["default"], _objectSpread(_objectSpread({}, rest), {}, {
        "aria-hidden": "true",
        className: sliderClassName,
        css: _MediaSliderModule["default"],
        knobComponent: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MediaKnob["default"], {
          preview: preview,
          previewProportion: previewProportion
        }),
        max: 1,
        min: 0,
        noWheel: true,
        step: 0.00001
      }))
    });
  }
});
/**
 * A customized slider suitable for use within media player components such as
 * [VideoPlayer]{@link sandstone/VideoPlayer.VideoPlayer}.
 *
 * @class MediaSlider
 * @extends sandstone/Slider.Slider
 * @memberof sandstone/MediaPlayer
 * @ui
 * @public
 */

exports.MediaSliderBase = MediaSliderBase;
var MediaSlider = (0, _MediaSliderDecorator["default"])(MediaSliderBase);
exports.MediaSlider = MediaSlider;
var _default = MediaSlider;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Picker = void 0;
Object.defineProperty(exports, "PickerItem", {
  enumerable: true,
  get: function get() {
    return _PickerItem2["default"];
  }
});
exports["default"] = void 0;

var _classnames3 = _interopRequireDefault(require("classnames"));

var _handle = require("@enact/core/handle");

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _keymap = require("@enact/core/keymap");

var _platform = _interopRequireDefault(require("@enact/core/platform"));

var _util = require("@enact/core/util");

var _ForwardRef = _interopRequireDefault(require("@enact/ui/ForwardRef"));

var _IdProvider = _interopRequireDefault(require("@enact/ui/internal/IdProvider"));

var _Layout = _interopRequireWildcard(require("@enact/ui/Layout"));

var _Touchable = _interopRequireDefault(require("@enact/ui/Touchable"));

var _ViewManager = require("@enact/ui/ViewManager");

var _spotlight = _interopRequireWildcard(require("@enact/spotlight"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _react = require("react");

var _Skinnable = _interopRequireDefault(require("../../Skinnable"));

var _$L = _interopRequireDefault(require("../$L"));

var _validators = require("../validators");

var _util2 = require("../util");

var _PickerButton = _interopRequireDefault(require("./PickerButton"));

var _SpottablePicker = _interopRequireDefault(require("./SpottablePicker"));

var _PickerModule = _interopRequireDefault(require("./Picker.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _PickerItem2 = _interopRequireDefault(require("./PickerItem"));

var _class;

var _excluded = ["containerRef"],
    _excluded2 = ["aria-valuetext", "changedBy", "children", "css", "disabled", "id", "index", "joined", "max", "min", "onSpotlightDisappear", "orientation", "reverse", "spotlightDisabled", "step", "value", "width"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var holdConfig = {
  events: [{
    name: 'hold',
    time: 800
  }]
};
var isDown = (0, _keymap.is)('down');
var isEnter = (0, _keymap.is)('enter');
var isLeft = (0, _keymap.is)('left');
var isRight = (0, _keymap.is)('right');
var isUp = (0, _keymap.is)('up');

var DivComponent = function DivComponent(_ref) {
  var containerRef = _ref.containerRef,
      rest = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({
    ref: containerRef
  }, rest));
};

DivComponent.propTypes = {
  /**
   * Called with the reference to the current node.
   *
   * @type {Object|Function}
   * @public
   */
  containerRef: _propTypes["default"].ref
};
var Div = (0, _Touchable["default"])((0, _ForwardRef["default"])({
  prop: 'containerRef'
}, DivComponent));
var SpottableDiv = (0, _Touchable["default"])((0, _ForwardRef["default"])({
  prop: 'containerRef'
}, _SpottablePicker["default"]));
var PickerViewManager = (0, _util2.onlyUpdateForProps)(_ViewManager.ViewManager, ['index', 'children']);

var wrapRange = function wrapRange(min, max, value) {
  if (value > max) {
    return min;
  } else if (value < min) {
    return max;
  } else {
    return value;
  }
};

var selectIcon = function selectIcon(icon, v, h) {
  return function (props) {
    return props[icon] || (props.orientation === 'vertical' ? v : h);
  };
};

var selectIncIcon = selectIcon('incrementIcon', 'triangleup', 'triangleright');
var selectDecIcon = selectIcon('decrementIcon', 'triangledown', 'triangleleft'); // Set-up event forwarding

var forwardBlur = (0, _handle.forward)('onBlur'),
    forwardFocus = (0, _handle.forward)('onFocus'),
    forwardKeyDown = (0, _handle.forward)('onKeyDown'),
    forwardKeyUp = (0, _handle.forward)('onKeyUp'),
    forwardWheel = (0, _handle.forward)('onWheel');
var allowedClassNames = ['picker', 'valueWrapper', 'joined', 'horizontal', 'vertical'];
/**
 * The base component for {@link sandstone/internal/Picker.Picker}.
 *
 * @class Picker
 * @memberof sandstone/internal/Picker
 * @ui
 * @private
 */

var PickerBase = (_class = /*#__PURE__*/function (_ReactComponent) {
  _inherits(PickerBase, _ReactComponent);

  var _super = _createSuper(PickerBase);

  function PickerBase(props) {
    var _this;

    _classCallCheck(this, PickerBase);

    _this = _super.call(this, props);

    _this.computeNextValue = function (delta) {
      var _this$props = _this.props,
          changedBy = _this$props.changedBy,
          joined = _this$props.joined,
          min = _this$props.min,
          max = _this$props.max,
          orientation = _this$props.orientation,
          value = _this$props.value,
          wrap = _this$props.wrap;
      var horizontalJoined = orientation === 'horizontal' && joined && changedBy === 'enter';
      var shouldWrap = horizontalJoined || wrap;
      return shouldWrap ? wrapRange(min, max, value + delta) : (0, _util.clamp)(min, max, value + delta);
    };

    _this.adjustDirection = function (dir) {
      return _this.props.reverse ? -dir : dir;
    };

    _this.hasReachedBound = function (delta) {
      var value = _this.props.value;
      return _this.computeNextValue(_this.adjustDirection(delta)) === value;
    };

    _this.updateValue = function (dir) {
      var _this$props2 = _this.props,
          disabled = _this$props2.disabled,
          onChange = _this$props2.onChange,
          step = _this$props2.step;
      dir = _this.adjustDirection(dir);

      _this.setTransitionDirection(dir);

      if (!disabled && onChange) {
        var value = _this.computeNextValue(dir * step);

        onChange({
          value: value
        });
      }
    };

    _this.handleBlur = function (ev) {
      forwardBlur(ev, _this.props);

      _this.setState({
        active: false
      });
    };

    _this.handleFocus = function (ev) {
      forwardFocus(ev, _this.props);

      _this.setState({
        active: true
      });
    };

    _this.setTransitionDirection = function (dir) {
      // change the transition direction based on the button press
      _this.reverseTransition = !(dir > 0);
    };

    _this.handleDecrement = function () {
      if (!_this.hasReachedBound(-_this.props.step)) {
        _this.updateValue(-1);

        _this.setPressedState(-1);
      }
    };

    _this.handleIncrement = function () {
      if (!_this.hasReachedBound(_this.props.step)) {
        _this.updateValue(1);

        _this.setPressedState(1);
      }
    };

    _this.setPressedState = function (pressed) {
      var joined = _this.props.joined;

      if (joined) {
        _this.setState({
          pressed: pressed
        });
      }
    };

    _this.clearPressedState = function () {
      _this.pickerButtonPressed = 0;

      _this.setState({
        pressed: 0
      });
    };

    _this.emulateMouseUp = new _util.Job(_this.clearPressedState, 175);

    _this.handleUp = function () {
      if (_this.props.joined && (_this.pickerButtonPressed !== 0 || _this.state.pressed !== 0)) {
        _this.emulateMouseUp.start();
      }
    };

    _this.handleDown = function () {
      var _this$props3 = _this.props,
          changedBy = _this$props3.changedBy,
          joined = _this$props3.joined,
          orientation = _this$props3.orientation;

      if (joined && orientation === 'horizontal' && changedBy === 'enter') {
        _this.setIncPickerButtonPressed();
      }

      if (joined && _this.pickerButtonPressed === 1) {
        _this.handleIncrement();

        if (orientation === 'vertical' || changedBy === 'arrow') {
          _this.emulateMouseUp.start();
        }
      } else if (joined && _this.pickerButtonPressed === -1) {
        _this.handleDecrement();

        _this.emulateMouseUp.start();
      }
    };

    _this.handleWheel = function (ev) {
      var step = _this.props.step;
      forwardWheel(ev, _this.props);

      var isContainerSpotted = _this.containerRef.current === _spotlight["default"].getCurrent();

      if (isContainerSpotted) {
        var dir = -Math.sign(ev.deltaY); // We'll sometimes get a 0/-0 wheel event we need to ignore or the wheel event has reached
        // the bounds of the picker

        if (dir && !_this.hasReachedBound(step * dir)) {
          // fire the onChange event
          if (dir > 0) {
            _this.throttleWheelInc.throttle();
          } else if (dir < 0) {
            _this.throttleWheelDec.throttle();
          } // simulate mouse down


          _this.setPressedState(dir); // set a timer to simulate the mouse up


          _this.emulateMouseUp.start(); // prevent the default scroll behavior to avoid bounce back


          ev.preventDefault();
          ev.stopPropagation();
        }
      }
    };

    _this.throttleWheelInc = new _util.Job(_this.handleIncrement, 100);
    _this.throttleWheelDec = new _util.Job(_this.handleDecrement, 100);

    _this.setDecPickerButtonPressed = function () {
      _this.pickerButtonPressed = -1;
    };

    _this.setIncPickerButtonPressed = function () {
      _this.pickerButtonPressed = 1;
    };

    _this.handleHold = function () {
      var joined = _this.props.joined;

      if (joined && _this.pickerButtonPressed === 1) {
        _this.handleIncrement();
      } else if (joined && _this.pickerButtonPressed === -1) {
        _this.handleDecrement();
      }
    };

    _this.handleKeyDown = function (ev) {
      var _this$props4 = _this.props,
          changedBy = _this$props4.changedBy,
          joined = _this$props4.joined,
          onSpotlightDown = _this$props4.onSpotlightDown,
          onSpotlightLeft = _this$props4.onSpotlightLeft,
          onSpotlightRight = _this$props4.onSpotlightRight,
          onSpotlightUp = _this$props4.onSpotlightUp,
          orientation = _this$props4.orientation;
      var keyCode = ev.keyCode;
      forwardKeyDown(ev, _this.props);

      if (joined && !_this.props.disabled) {
        var direction = (0, _spotlight.getDirection)(keyCode);
        var directions = {
          up: _this.setIncPickerButtonPressed,
          down: _this.setDecPickerButtonPressed,
          right: _this.setIncPickerButtonPressed,
          left: _this.setDecPickerButtonPressed
        };
        var isVertical = orientation === 'vertical' && (isUp(keyCode) || isDown(keyCode));
        var isHorizontal = orientation === 'horizontal' && changedBy === 'enter' && isEnter(keyCode);
        var isHorizontalArrow = orientation === 'horizontal' && changedBy === 'arrow' && (isRight(keyCode) || isLeft(keyCode));

        if (isVertical || isHorizontalArrow) {
          directions[direction]();
        } else if (isHorizontal) {
          _this.setIncPickerButtonPressed();
        } else if (orientation === 'horizontal' && isDown(keyCode) && onSpotlightDown) {
          (0, _handle.forwardCustom)('onSpotlightDown')(null, _this.props);
        } else if (orientation === 'horizontal' && isUp(keyCode) && onSpotlightUp) {
          (0, _handle.forwardCustom)('onSpotlightUp')(null, _this.props);
        } else if (orientation === 'vertical' && isLeft(keyCode) && onSpotlightLeft) {
          (0, _handle.forwardCustom)('onSpotlightLeft')(null, _this.props);
        } else if (orientation === 'vertical' && isRight(keyCode) && onSpotlightRight) {
          (0, _handle.forwardCustom)('onSpotlightRight')(null, _this.props);
        }
      }
    };

    _this.handleKeyUp = function (ev) {
      var _this$props5 = _this.props,
          changedBy = _this$props5.changedBy,
          joined = _this$props5.joined,
          orientation = _this$props5.orientation;
      var keyCode = ev.keyCode;
      forwardKeyUp(ev, _this.props);

      if (joined && !_this.props.disabled) {
        var isVertical = orientation === 'vertical' && (isUp(keyCode) || isDown(keyCode));
        var isHorizontal = orientation === 'horizontal' && isEnter(keyCode);
        var isHorizontalArrow = orientation === 'horizontal' && changedBy === 'arrow' && (isRight(keyCode) || isLeft(keyCode));

        if (isVertical || isHorizontal || isHorizontalArrow) {
          _this.pickerButtonPressed = 0;
        }
      }
    };

    _this.handleDecKeyDown = function (ev) {
      var keyCode = ev.keyCode;
      var direction = (0, _spotlight.getDirection)(keyCode);

      if (direction) {
        var _this$props6 = _this.props,
            orientation = _this$props6.orientation,
            step = _this$props6.step;

        if (!_this.hasReachedBound(step) && (isRight(keyCode) && orientation === 'horizontal' || isUp(keyCode) && orientation === 'vertical')) {
          ev.preventDefault(); // prevent parent handler behavior

          (0, _handle.stop)(ev); // prevent default spotlight behavior

          (0, _handle.stopImmediate)(ev); // set the pointer mode to false on keydown

          _spotlight["default"].setPointerMode(false);

          _spotlight["default"].focus(_this.containerRef.current.querySelector(".".concat(_PickerModule["default"].incrementer)));
        } else {
          (0, _handle.forwardCustom)("onSpotlight".concat((0, _util.cap)(direction)))(ev, _this.props);
        }
      }
    };

    _this.handleIncKeyDown = function (ev) {
      var keyCode = ev.keyCode;
      var direction = (0, _spotlight.getDirection)(keyCode);

      if (direction) {
        var _this$props7 = _this.props,
            orientation = _this$props7.orientation,
            step = _this$props7.step;

        if (!_this.hasReachedBound(step * -1) && (isLeft(keyCode) && orientation === 'horizontal' || isDown(keyCode) && orientation === 'vertical')) {
          ev.preventDefault(); // prevent parent handler behavior

          (0, _handle.stop)(ev); // prevent default spotlight behavior

          (0, _handle.stopImmediate)(ev); // set the pointer mode to false on keydown

          _spotlight["default"].setPointerMode(false);

          _spotlight["default"].focus(_this.containerRef.current.querySelector(".".concat(_PickerModule["default"].decrementer)));
        } else {
          (0, _handle.forwardCustom)("onSpotlight".concat((0, _util.cap)(direction)))(ev, _this.props);
        }
      }
    };

    _this.handleVoice = function (ev) {
      var voiceIndex = ev && ev.detail && typeof ev.detail.matchedIndex !== 'undefined' && Number(ev.detail.matchedIndex);

      if (Number.isInteger(voiceIndex)) {
        var _this$props8 = _this.props,
            max = _this$props8.max,
            min = _this$props8.min,
            onChange = _this$props8.onChange,
            value = _this$props8.value;
        var voiceValue = min + voiceIndex;

        if (onChange && voiceValue >= min && voiceValue <= max && voiceValue !== value) {
          onChange({
            value: voiceValue
          });
          ev.preventDefault();
        }
      }
    };

    _this.state = {
      // Set to `true` onFocus and `false` onBlur to prevent setting aria-valuetext (which
      // will notify the user) when the component does not have focus
      active: false,
      pressed: 0
    };
    _this.containerRef = /*#__PURE__*/(0, _react.createRef)(); // Pressed state for this.handleUp

    _this.pickerButtonPressed = 0;
    return _this;
  }

  _createClass(PickerBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.joined) {
        this.containerRef.current.addEventListener('wheel', this.handleWheel);
      }

      if (_platform["default"].webos) {
        this.containerRef.current.addEventListener('webOSVoice', this.handleVoice);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.joined && !prevProps.joined) {
        this.containerRef.current.addEventListener('wheel', this.handleWheel);
      } else if (prevProps.joined && !this.props.joined) {
        this.containerRef.current.removeEventListener('wheel', this.handleWheel);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.emulateMouseUp.stop();
      this.throttleWheelInc.stop();
      this.throttleWheelDec.stop();

      if (this.props.joined) {
        this.containerRef.current.removeEventListener('wheel', this.handleWheel);
      }

      if (_platform["default"].webos) {
        this.containerRef.current.removeEventListener('webOSVoice', this.handleVoice);
      }
    }
  }, {
    key: "determineClasses",
    value: function determineClasses(css, decrementerDisabled, incrementerDisabled) {
      var _classnames;

      var _this$props9 = this.props,
          changedBy = _this$props9.changedBy,
          className = _this$props9.className,
          joined = _this$props9.joined,
          orientation = _this$props9.orientation,
          width = _this$props9.width;
      var pressed = this.state.pressed;
      return (0, _classnames3["default"])(css.picker, css[changedBy], css[orientation], css[width], (_classnames = {}, _defineProperty(_classnames, css.joined, joined), _defineProperty(_classnames, css.decrementing, !decrementerDisabled && pressed === -1), _defineProperty(_classnames, css.incrementing, !incrementerDisabled && pressed === 1), _classnames), className);
    }
  }, {
    key: "calcValueText",
    value: function calcValueText() {
      var _this$props10 = this.props,
          accessibilityHint = _this$props10.accessibilityHint,
          children = _this$props10.children,
          index = _this$props10.index,
          value = _this$props10.value;
      var valueText = value; // Sometimes this.props.value is not equal to node text content. For example, when `PM`
      // is shown in AM/PM picker, its value is `1` and its node.textContent is `PM`. In this
      // case, Screen readers should read `PM` instead of `1`.

      if (children && Array.isArray(children)) {
        valueText = children[index] ? children[index].props.children : value;
      } else if (children && children.props && !children.props.children) {
        valueText = children.props.children;
      }

      if (accessibilityHint) {
        valueText = "".concat(valueText, " ").concat(accessibilityHint);
      }

      return valueText;
    }
  }, {
    key: "calcButtonLabel",
    value: function calcButtonLabel(next, valueText) {
      var _this$props11 = this.props,
          decrementAriaLabel = _this$props11.decrementAriaLabel,
          incrementAriaLabel = _this$props11.incrementAriaLabel,
          orientation = _this$props11.orientation;
      var titleText = this.props.title ? this.props.title + ' ' : '';
      var label;

      if (orientation === 'vertical') {
        label = next ? decrementAriaLabel : incrementAriaLabel;
      } else {
        label = next ? incrementAriaLabel : decrementAriaLabel;
      }

      if (label != null) {
        return titleText + label;
      }

      if (this.props.type === 'number') {
        return titleText + "".concat(valueText, " ").concat(next ? (0, _$L["default"])('press ok button to increase the value') : (0, _$L["default"])('press ok button to decrease the value'));
      } else {
        return titleText + "".concat(valueText, " ").concat(next ? (0, _$L["default"])('next item') : (0, _$L["default"])('previous item'));
      }
    }
  }, {
    key: "calcDecrementLabel",
    value: function calcDecrementLabel(valueText) {
      return !this.props.joined ? this.calcButtonLabel(this.props.reverse, valueText) : null;
    }
  }, {
    key: "calcIncrementLabel",
    value: function calcIncrementLabel(valueText) {
      return !this.props.joined ? this.calcButtonLabel(!this.props.reverse, valueText) : null;
    }
  }, {
    key: "calcAriaLabel",
    value: function calcAriaLabel(valueText) {
      var _this$props12 = this.props,
          ariaLabel = _this$props12['aria-label'],
          changedBy = _this$props12.changedBy,
          joined = _this$props12.joined,
          orientation = _this$props12.orientation;
      var hint;

      if (orientation === 'horizontal') {
        hint = changedBy === 'arrow' ? (0, _$L["default"])('change a value with left right button') : (0, _$L["default"])('press ok button to change the value');
      } else {
        hint = (0, _$L["default"])('change a value with up down button');
      }

      if (!joined || ariaLabel != null) {
        return ariaLabel;
      }

      return "".concat(valueText, " ").concat(hint);
    }
  }, {
    key: "render",
    value: function render() {
      var active = this.state.active;

      var _this$props13 = this.props,
          ariaValueText = _this$props13['aria-valuetext'],
          changedBy = _this$props13.changedBy,
          children = _this$props13.children,
          incomingCss = _this$props13.css,
          disabled = _this$props13.disabled,
          id = _this$props13.id,
          index = _this$props13.index,
          joined = _this$props13.joined,
          max = _this$props13.max,
          min = _this$props13.min,
          onSpotlightDisappear = _this$props13.onSpotlightDisappear,
          orientation = _this$props13.orientation,
          reverse = _this$props13.reverse,
          spotlightDisabled = _this$props13.spotlightDisabled,
          step = _this$props13.step,
          value = _this$props13.value,
          width = _this$props13.width,
          rest = _objectWithoutProperties(_this$props13, _excluded2);

      var css = (0, _util.mergeClassNameMaps)(_PickerModule["default"], incomingCss, allowedClassNames);
      var voiceProps = (0, _util2.extractVoiceProps)(rest);
      var voiceLabelsExt = voiceProps['data-webos-voice-labels-ext'];
      delete voiceProps['data-webos-voice-label'];
      delete voiceProps['data-webos-voice-labels'];
      delete voiceProps['data-webos-voice-labels-ext'];

      if (process.env.NODE_ENV !== "production") {
        (0, _validators.validateRange)(value, min, max, PickerBase.displayName);
        (0, _validators.validateStepped)(value, min, step, PickerBase.displayName);
        (0, _validators.validateStepped)(max, min, step, PickerBase.displayName, 'max');
      }

      delete rest['aria-label'];
      delete rest.accessibilityHint;
      delete rest.decrementAriaLabel;
      delete rest.decrementIcon;
      delete rest.incrementAriaLabel;
      delete rest.incrementIcon;
      delete rest.noAnimation;
      delete rest.onChange;
      delete rest.onSpotlightDown;
      delete rest.onSpotlightLeft;
      delete rest.onSpotlightRight;
      delete rest.onSpotlightUp;
      delete rest.title;
      delete rest.wrap;
      var incrementIcon = selectIncIcon(this.props);
      var decrementIcon = selectDecIcon(this.props);
      var horizontal = orientation === 'horizontal';
      var isHorizontalJoinedEnter = horizontal && joined && changedBy === 'enter';
      var reachedStart = this.hasReachedBound(step * -1);
      var decrementerDisabled = disabled || reachedStart;
      var reachedEnd = this.hasReachedBound(step);
      var incrementerDisabled = disabled || reachedEnd;
      var className = this.determineClasses(css, decrementerDisabled, incrementerDisabled);
      var arranger = horizontal ? _ViewManager.SlideLeftArranger : _ViewManager.SlideTopArranger;
      var noAnimation = this.props.noAnimation || disabled;
      var sizingPlaceholder = null;

      if (typeof width === 'number' && width > 0) {
        sizingPlaceholder = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          "aria-hidden": true,
          className: css.sizingPlaceholder,
          children: '0'.repeat(width)
        });
      }

      var showIndicators = isHorizontalJoinedEnter && Array.isArray(children) && children.length > 1;
      var valueText = ariaValueText != null ? ariaValueText : this.calcValueText();
      var decrementerAriaControls = !incrementerDisabled ? id : null;
      var incrementerAriaControls = !decrementerDisabled ? id : null;
      var spottablePickerProps = {};
      var Component;

      if (joined) {
        Component = SpottableDiv;
        spottablePickerProps.changedBy = changedBy;
        spottablePickerProps.onSpotlightDisappear = onSpotlightDisappear;
        spottablePickerProps.pickerOrientation = orientation;
        spottablePickerProps.spotlightDisabled = spotlightDisabled;
      } else {
        Component = Div;
      }

      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout["default"], _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, voiceProps), rest), {}, {
        align: "center space-around",
        "aria-controls": joined ? id : null,
        "aria-disabled": disabled,
        "aria-label": this.calcAriaLabel(valueText),
        className: className,
        component: Component,
        "data-webos-voice-intent": "Select",
        "data-webos-voice-labels-ext": voiceLabelsExt,
        disabled: disabled,
        holdConfig: holdConfig,
        inline: true,
        onBlur: this.handleBlur,
        onDown: this.handleDown,
        onFocus: this.handleFocus,
        onHold: this.handleHold,
        onKeyDown: this.handleKeyDown,
        onKeyUp: this.handleKeyUp,
        onUp: this.handleUp,
        onMouseLeave: this.clearPressedState,
        orientation: orientation,
        ref: this.containerRef
      }, spottablePickerProps), {}, {
        children: [isHorizontalJoinedEnter ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, _objectSpread(_objectSpread({}, voiceProps), {}, {
          align: joined ? 'stretch' : null,
          "aria-controls": !joined ? incrementerAriaControls : null,
          "aria-label": this.calcIncrementLabel(valueText),
          className: css.incrementer,
          component: _PickerButton["default"],
          "data-webos-voice-label": joined ? this.calcButtonLabel(!reverse, valueText) : null,
          disabled: incrementerDisabled,
          holdConfig: holdConfig,
          icon: incrementIcon,
          joined: joined,
          onDown: this.handleIncrement,
          onHold: this.handleIncrement,
          onKeyDown: this.handleIncKeyDown,
          onSpotlightDisappear: onSpotlightDisappear,
          shrink: true,
          spotlightDisabled: spotlightDisabled
        })), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Cell, {
          "aria-disabled": disabled,
          "aria-hidden": !active,
          "aria-valuetext": valueText,
          className: css.valueWrapper,
          id: id,
          role: "spinbutton",
          shrink: true,
          children: [sizingPlaceholder, /*#__PURE__*/(0, _jsxRuntime.jsx)(PickerViewManager, {
            "aria-hidden": true,
            arranger: arranger,
            className: css.viewManager,
            duration: 100,
            index: index,
            noAnimation: noAnimation,
            reverseTransition: this.reverseTransition,
            children: children
          }), showIndicators && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({
            className: css.indicatorContainer
          }, voiceProps), {}, {
            children: children.map(function (c, indicator) {
              return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: (0, _classnames3["default"])(css.indicator, _defineProperty({}, css.active, index === indicator))
              }, "indicator".concat(indicator));
            })
          }))]
        }), isHorizontalJoinedEnter ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, _objectSpread(_objectSpread({}, voiceProps), {}, {
          align: joined ? 'stretch' : null,
          "aria-controls": !joined ? decrementerAriaControls : null,
          "aria-label": this.calcDecrementLabel(valueText),
          className: css.decrementer,
          component: _PickerButton["default"],
          "data-webos-voice-label": joined ? this.calcButtonLabel(reverse, valueText) : null,
          disabled: decrementerDisabled,
          holdConfig: holdConfig,
          icon: decrementIcon,
          joined: joined,
          onDown: this.handleDecrement,
          onHold: this.handleDecrement,
          onKeyDown: this.handleDecKeyDown,
          onSpotlightDisappear: onSpotlightDisappear,
          shrink: true,
          spotlightDisabled: spotlightDisabled
        }))]
      }));
    }
  }]);

  return PickerBase;
}(_react.Component), _class.displayName = 'Picker', _class.propTypes =
/** @lends sandstone/internal/Picker.Picker.prototype */
{
  /**
   * Index for internal ViewManager
   *
   * @type {Number}
   * @required
   * @public
   */
  index: _propTypes2["default"].number.isRequired,

  /**
   * The maximum value selectable by the picker (inclusive).
   *
   * The range between `min` and `max` should be evenly divisible by
   * [step]{@link sandstone/internal/Picker.PickerBase.step}.
   *
   * @type {Number}
   * @required
   * @public
   */
  max: _propTypes2["default"].number.isRequired,

  /**
   * The minimum value selectable by the picker (inclusive).
   *
   * The range between `min` and `max` should be evenly divisible by
   * [step]{@link sandstone/internal/Picker.PickerBase.step}.
   *
   * @type {Number}
   * @required
   * @public
   */
  min: _propTypes2["default"].number.isRequired,

  /**
   * Accessibility hint
   *
   * For example, `hour`, `year`, and `meridiem`
   *
   * @type {String}
   * @default ''
   * @public
   */
  accessibilityHint: _propTypes2["default"].string,

  /**
   * The "aria-label" for the picker.
   *
   * While the `aria-label` will always be set on the root node, that node is only focusable
   * when the picker is `joined`.
   *
   * @type {String}
   * @memberof sandstone/internal/Picker.PickerBase.prototype
   * @public
   */
  'aria-label': _propTypes2["default"].string,

  /**
   * Overrides the `aria-valuetext` for the picker.
   *
   * By default, `aria-valuetext` is set to the current selected child and `accessibilityHint`
   * text.
   *
   * @type {String}
   * @memberof sandstone/internal/Picker.PickerBase.prototype
   * @public
   */
  'aria-valuetext': _propTypes2["default"].string,

  /**
   * Determines which key to adjust the picker's value for the joined horizontal one.
   *
   *  * `'enter'` allows the user to use the enter key to adjust the picker's value
   *  * `'arrow'` allows the user to use the left or right keys to adjust the picker's value.
   *
   * The default value for joined horizontal picker is `'enter'`.
   * If [orientation]{@link sandstone/internal/Picker.PickerBase#orientation} is `'vertical'` or
   * [joined]{@link sandstone/internal/Picker.PickerBase#joined} is undefined or is `false`, this prop is ignored.
   *
   * @type {('enter'|'arrow')}
   * @default 'enter'
   * @public
   */
  changedBy: _propTypes2["default"].oneOf(['enter', 'arrow']),

  /**
   * Children from which to pick
   *
   * @type {Node}
   * @public
   */
  children: _propTypes2["default"].node,

  /**
   * Class name for component
   *
   * @type {String}
   * @public
   */
  className: _propTypes2["default"].string,

  /**
   * Customize component style
   *
   * @type {Object}
   * @private
   */
  css: _propTypes2["default"].object,

  /**
   * Disables voice control.
   *
   * @type {Boolean}
   * @memberof sandstone/internal/Picker.PickerBase.prototype
   * @public
   */
  'data-webos-voice-disabled': _propTypes2["default"].bool,

  /**
   * The `data-webos-voice-group-label` for the Button of Picker.
   *
   * @type {String}
   * @memberof sandstone/internal/Picker.PickerBase.prototype
   * @public
   */
  'data-webos-voice-group-label': _propTypes2["default"].string,

  /**
   * The "aria-label" for the decrement button.
   *
   * @type {String}
   * @default 'previous item'
   * @public
   */
  decrementAriaLabel: _propTypes2["default"].string,

  /**
   * Assign a custom icon for the decrementer. All strings supported by [Icon]{@link sandstone/Icon.Icon} are
   * supported. Without a custom icon, the default is used, and is automatically changed when
   * the [orientation]{@link sandstone/Icon.Icon#orientation} is changed.
   *
   * @type {String}
   * @public
   */
  decrementIcon: _propTypes2["default"].string,

  /**
   * When `true`, the Picker is shown as disabled and does not generate `onChange`
   * [events]{@link /docs/developer-guide/glossary/#event}.
   *
   * @type {Boolean}
   * @public
   */
  disabled: _propTypes2["default"].bool,

  /**
   * The picker id reference for setting aria-controls.
   *
   * @type {String}
   * @private
   */
  id: _propTypes2["default"].string,

  /**
   * The "aria-label" for the increment button.
   *
   * @type {String}
   * @default 'next item'
   * @public
   */
  incrementAriaLabel: _propTypes2["default"].string,

  /**
   * Assign a custom icon for the incrementer. All strings supported by [Icon]{@link sandstone/Icon.Icon} are
   * supported. Without a custom icon, the default is used, and is automatically changed when
   * the [orientation]{@link sandstone/Icon.Icon#orientation} is changed.
   *
   * @type {String}
   * @public
   */
  incrementIcon: _propTypes2["default"].string,

  /**
   * Determines the user interaction of the control. A joined picker allows the user to use
   * the arrow keys or the enter key to adjust the picker's value.
   * It depends on [changedBy]{@link sandstone/internal/Picker.PickerBase.changedBy}
   * whether to use the arrow keys or the enter key.
   * A split control allows full navigation,
   * but requires individual ENTER presses on the incrementer and decrementer buttons.
   * Pointer interaction is the same for both formats.
   *
   * @type {Boolean}
   * @public
   */
  joined: _propTypes2["default"].bool,

  /**
   * By default, the picker will animate transitions between items if it has a defined
   * `width`. Specifying `noAnimation` will prevent any transition animation for the
   * component.
   *
   * @type {Boolean}
   * @public
   */
  noAnimation: _propTypes2["default"].bool,

  /**
   * A function to run when the control should increment or decrement.
   *
   * @type {Function}
   * @public
   */
  onChange: _propTypes2["default"].func,

  /**
   * A function to run when the picker is removed while retaining focus.
   *
   * @type {Function}
   * @private
   */
  onSpotlightDisappear: _propTypes2["default"].func,

  /**
   * The handler to run prior to focus leaving the picker when the 5-way down key is pressed.
   *
   * @type {Function}
   * @param {Object} event
   * @public
   */
  onSpotlightDown: _propTypes2["default"].func,

  /**
   * The handler to run prior to focus leaving the picker when the 5-way left key is pressed.
   *
   * @type {Function}
   * @param {Object} event
   * @public
   */
  onSpotlightLeft: _propTypes2["default"].func,

  /**
   * The handler to run prior to focus leaving the picker when the 5-way right key is pressed.
   *
   * @type {Function}
   * @param {Object} event
   * @public
   */
  onSpotlightRight: _propTypes2["default"].func,

  /**
   * The handler to run prior to focus leaving the picker when the 5-way up key is pressed.
   *
   * @type {Function}
   * @param {Object} event
   * @public
   */
  onSpotlightUp: _propTypes2["default"].func,

  /**
   * Sets the orientation of the picker, whether the buttons are above and below or on the
   * sides of the value. Must be either `'horizontal'` or `'vertical'`.
   *
   * @type {('horizontal'|'vertical')}
   * @default 'horizontal'
   * @public
   */
  orientation: _propTypes2["default"].oneOf(['horizontal', 'vertical']),

  /**
   * When `true`, the picker buttons operate in the reverse direction such that pressing
   * up/left decrements the value and down/right increments the value. This is more natural
   * for vertical lists of text options where "up" implies a spatial change rather than
   * incrementing the value.
   *
   * @type {Boolean}
   * @public
   */
  reverse: _propTypes2["default"].bool,

  /**
   * When `true`, the component cannot be navigated using spotlight.
   *
   * @type {Boolean}
   * @default false
   * @public
   */
  spotlightDisabled: _propTypes2["default"].bool,

  /**
   * Allow the picker to only increment or decrement by a given value.
   *
   * A step of `2` would cause a picker to increment from 10 to 12 to 14, etc. It must evenly
   * divide into the range designated by `min` and `max`.
   *
   * @type {Number}
   * @default 1
   * @public
   */
  step: _propTypes2["default"].number,

  /**
   * The primary text of the `Picker`.
   *
   * The screen readers read out the title text when the `joined` prop is false
   *
   * @type {String}
   * @public
   */
  title: _propTypes2["default"].string,

  /**
   * The type of picker. It determines the aria-label for the next and previous buttons.
   *
   * Depending on the `type`, `joined`, `decrementAriaLabel`, and `incrementAriaLabel`,
   * the screen readers read out differently when Spotlight is on the next button, the previous button,
   * or the picker itself.
   *
   * For example, if Spotlight is on the next button, the `joined` prop is false,
   * and aria label props(`decrementAriaLabel` and `incrementAriaLabel`) are not defined,
   * then the screen readers read out as follows.
   *	`'string'` type: `'next item'`
   * 	`'number'` type: `'press ok button to increase the value'`
   *
   * @type {('number'|'string')}
   * @default 'string'
   * @public
   */
  type: _propTypes2["default"].oneOf(['number', 'string']),

  /**
   * Index of the selected child
   *
   * @type {Number}
   * @default 0
   * @public
   */
  value: _propTypes2["default"].number,

  /**
   * Choose a specific size for your picker. `'small'`, `'medium'`, `'large'`, or set to `null` to
   * assume auto-sizing. `'small'` is good for numeric pickers, `'medium'` for single or short
   * word pickers, `'large'` for maximum-sized pickers.
   *
   * You may also supply a number. This number will determine the minimum size of the Picker.
   * Setting a number to less than the number of characters in your longest value may produce
   * unexpected results.
   *
   * @type {('small'|'medium'|'large'|Number)}
   * @public
   */
  width: _propTypes2["default"].oneOfType([_propTypes2["default"].oneOf([null, 'small', 'medium', 'large']), _propTypes2["default"].number]),

  /**
   * Should the picker stop incrementing when the picker reaches the last element? Set `wrap`
   * to `true` to allow the picker to continue from the opposite end of the list of options.
   *
   * @type {Boolean}
   * @public
   */
  wrap: _propTypes2["default"].bool
}, _class.defaultProps = {
  accessibilityHint: '',
  changedBy: 'enter',
  orientation: 'horizontal',
  spotlightDisabled: false,
  step: 1,
  type: 'string',
  value: 0
}, _class);
var Picker = (0, _IdProvider["default"])({
  generateProp: null,
  prefix: 'p_'
}, (0, _Skinnable["default"])(PickerBase));
exports.Picker = Picker;
var _default = Picker;
exports["default"] = _default;
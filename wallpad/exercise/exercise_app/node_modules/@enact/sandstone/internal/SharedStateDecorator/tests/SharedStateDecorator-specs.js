"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _react2 = require("react");

var _SharedStateDecorator = _interopRequireWildcard(require("../SharedStateDecorator"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["children"],
    _excluded2 = ["children", "value"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

describe('SharedStateDecorator Specs', function () {
  test('should provide a set method via context', function () {
    var fn = jest.fn();
    var ComponentSet = (0, _SharedStateDecorator["default"])(function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          fn(value.set);
          return null;
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(ComponentSet, {}));
    var expected = 'function';
    var actual = typeof fn.mock.calls[0][0];
    expect(actual).toBe(expected);
  });
  test('should provide a get method via context', function () {
    var fn = jest.fn();
    var ComponentGet = (0, _SharedStateDecorator["default"])(function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          fn(value.get);
          return null;
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(ComponentGet, {}));
    var expected = 'function';
    var actual = typeof fn.mock.calls[0][0];
    expect(actual).toBe(expected);
  });
  test('should provide a delete method via context', function () {
    var fn = jest.fn();
    var ComponentDelete = (0, _SharedStateDecorator["default"])(function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          fn(value["delete"]);
          return null;
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(ComponentDelete, {}));
    var expected = 'function';
    var actual = typeof fn.mock.calls[0][0];
    expect(actual).toBe(expected);
  });
  test('should supporting setting and getting a value by key when {id} is set', function () {
    var Component = (0, _SharedStateDecorator["default"])(function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          value.set('key', 'value');
          return value.get('key');
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      id: "outer"
    }));

    var actual = _react.screen.getByText('value');

    expect(actual).toBeInTheDocument();
  });
  test('should supporting setting and getting a value by key when {id} is set to a non-zero value', function () {
    var Component = (0, _SharedStateDecorator["default"])(function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          value.set('key', 'value');
          return value.get('key');
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      id: -1
    }));

    var actual = _react.screen.getByText('value');

    expect(actual).toBeInTheDocument();
  });
  test('should supporting setting and getting a value by key when {id} is set to zero', function () {
    var Component = (0, _SharedStateDecorator["default"])(function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          value.set('key', 'value');
          return value.get('key');
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      id: 0
    }));

    var actual = _react.screen.getByText('value');

    expect(actual).toBeInTheDocument();
  });
  test('should not set or return values when {id} is not set', function () {
    var Component = (0, _SharedStateDecorator["default"])(function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          value.set('key', 'value');
          return value.get('key');
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));

    var actual = _react.screen.queryByText('value');

    expect(actual).toBeNull();
  });
  test('should not set or return values when {id} is set to an empty string', function () {
    var Component = (0, _SharedStateDecorator["default"])(function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          value.set('key', 'value');
          return value.get('key');
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      id: ""
    }));

    var actual = _react.screen.queryByText('value');

    expect(actual).toBeNull();
  });
  test('should not set or return values when {id} is set to null', function () {
    var Component = (0, _SharedStateDecorator["default"])(function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          value.set('key', 'value');
          return value.get('key');
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      id: null
    }));

    var actual = _react.screen.queryByText('value');

    expect(actual).toBeNull();
  });
  test('should not set or return values when {id} and {noSharedState} are set', function () {
    var Component = (0, _SharedStateDecorator["default"])(function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          value.set('key', 'value');
          return value.get('key');
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      id: "outer",
      noSharedState: true
    }));

    var actual = _react.screen.queryByText('value');

    expect(actual).toBeNull();
  });
  test('should supporting deleting a value by key when {id} is set', function () {
    var Component = (0, _SharedStateDecorator["default"])(function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          value.set('key', 'value');
          value["delete"]('key');
          return value.get('key');
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      id: "outer"
    }));

    var actual = _react.screen.queryByText('value');

    expect(actual).toBeNull();
  });
  test('should share data upstream when inside another SharedStateDecorator', function () {
    var Component = (0, _SharedStateDecorator["default"])(function (_ref) {
      var _children = _ref.children,
          rest = _objectWithoutProperties(_ref, _excluded);

      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SharedStateDecorator.SharedState.Consumer, {
        children: function children(value) {
          value.set('key', 'value');
          return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              children: value.get('key')
            }), _children]
          }));
        }
      });
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      id: "outer",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        id: "inner"
      })
    }));
    var expected = '<div id="outer"><span>value</span><div id="inner"><span>value</span></div></div>';

    var actual = _react.screen.getAllByText('value')[0].parentElement.parentElement.innerHTML;

    expect(actual).toEqual(expected);
  });
  test('should restore shared state from ancestor', function () {
    var Base = /*#__PURE__*/function (_ReactComponent) {
      _inherits(Base, _ReactComponent);

      var _super = _createSuper(Base);

      function Base() {
        _classCallCheck(this, Base);

        return _super.apply(this, arguments);
      }

      _createClass(Base, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
              children = _this$props.children,
              propValue = _this$props.value,
              rest = _objectWithoutProperties(_this$props, _excluded2);

          if (propValue) {
            this.context.set('key', propValue);
          }

          return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              children: this.context.get('key')
            }), children]
          }));
        }
      }]);

      return Base;
    }(_react2.Component);

    Base.contextType = _SharedStateDecorator.SharedState;
    var Component = (0, _SharedStateDecorator["default"])({
      updateOnMount: true
    }, Base);

    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      id: "outer",
      value: "value",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        id: "inner",
        value: "from-prop"
      })
    })),
        rerender = _render.rerender; // remove the children which drops inner's shared state


    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      id: "outer",
      value: "value"
    })); // recreate it with the same id but no initial value to validate the previous state is
    // restored. updateOnMount is used above to coerce a re-render on mount since the shared
    // state value is used in the render method and isn't available on first render otherwise.

    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      id: "outer",
      value: "value",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        id: "inner"
      })
    }));

    var actual = _react.screen.getByText('from-prop');

    expect(actual).toBeInTheDocument();
  });
});
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DateTimeDecorator = void 0;

var _handle = _interopRequireWildcard(require("@enact/core/handle"));

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _util = require("@enact/core/util");

var _I18nDecorator = require("@enact/i18n/I18nDecorator");

var _spotlight = _interopRequireDefault(require("@enact/spotlight"));

var _Changeable = _interopRequireDefault(require("@enact/ui/Changeable"));

var _DateFactory = _interopRequireDefault(require("ilib/lib/DateFactory"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = require("react");

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/*
 * Converts a JavaScript Date to unix time
 *
 * @param	{Date}	date	A Date to convert
 *
 * @returns	{undefined}
 */
var toTime = function toTime(date) {
  return date && date.getTime();
};
/**
 * {@link sandstone/internal/DateTimeDecorator.DateTimeDecorator} provides common behavior for
 * {@link sandstone/DatePicker.DatePicker} and {@link sandstone/TimePicker.TimePicker}.
 *
 * @class DateTimeDecorator
 * @memberof sandstone/internal/DateTimeDecorator
 * @mixes ui/Changeable.Changeable
 * @hoc
 * @private
 */


var DateTimeDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class;

  var customProps = config.customProps,
      defaultOrder = config.defaultOrder,
      handlers = config.handlers,
      i18n = config.i18n;
  var memoizedI18nConfig = (0, _util.memoize)(function
    /* locale */
  () {
    // Guard for isomorphic builds
    if (typeof window !== 'undefined' && i18n) {
      return i18n();
    }

    return null;
  });
  var Decorator = (_class = /*#__PURE__*/function (_Component) {
    _inherits(Decorator, _Component);

    var _super = _createSuper(Decorator);

    function Decorator(props) {
      var _this;

      _classCallCheck(this, Decorator);

      _this = _super.call(this, props);

      _this.updateValue = function (value) {
        var day = value.day,
            month = value.month,
            year = value.year;
        var maxDays = value.cal.getMonLength(month, year);
        value.day = day <= maxDays ? day : maxDays;
        var date = (0, _DateFactory["default"])(value);
        var newValue = date.getTimeExtended();
        var changed = _this.props.value == null || _this.props.value !== newValue;

        _this.setState({
          value: newValue
        });

        if (changed) {
          _this.emitChange(date);
        }

        return newValue;
      };

      _this.emitChange = function (date) {
        (0, _handle.forward)('onChange', {
          type: 'onChange',
          value: date ? date.getJSDate() : null
        }, _this.props);
      };

      _this.handlePickerChange = function (handler, ev) {
        var value = _this.toIDate(_this.state.value);

        handler(ev, value, memoizedI18nConfig(_this.props.locale));

        _this.updateValue(value);
      };

      _this.handleCancel = function () {
        var _this$state = _this.state,
            initialValue = _this$state.initialValue,
            value = _this$state.value; // if we're cancelling, reset our state and emit an onChange with the initial value

        _this.setState({
          value: null,
          initialValue: null,
          pickerValue: value
        });

        if (initialValue !== value) {
          _this.emitChange(_this.toIDate(initialValue));
        }
      };

      _this.handleEnter = function (ev) {
        if (ev.target && ev.target.dataset.lastElement === 'true') {
          var value = _this.state.value ? _this.toIDate(_this.state.value) : null;
          (0, _handle.forward)('onComplete', {
            type: 'onComplete',
            alue: value ? value.getJSDate() : null
          }, _this.props);
        } else {
          _spotlight["default"].move(_this.props.rtl ? 'left' : 'right');
        }
      };

      _this.handleKeyDown = (0, _handle["default"])((0, _handle.forward)('onKeyDown'), (0, _handle.forKey)('enter'), (0, _handle.forProp)('disabled', false), (0, _handle.call)('handleEnter')).bindAs(_assertThisInitialized(_this), 'handleKeyDown');
      _this.state = {
        initialValue: null,
        value: null
      };

      var _newValue = toTime(_this.props.value);

      var _value = _newValue || Date.now(); // if no value was provided, we need to emit the onChange event for the generated value


      if (!_newValue) {
        _this.emitChange(_this.toIDate(_value));
      }

      _this.handlers = {};

      if (handlers) {
        Object.keys(handlers).forEach(function (name) {
          _this.handlers[name] = _this.handlePickerChange.bind(_assertThisInitialized(_this), handlers[name]);
        });
      }

      return _this;
    }

    _createClass(Decorator, [{
      key: "toIDate",
      value:
      /**
       * Converts a Date to an IDate
       *
       * @param	{Date}	time	Date object
       *
       * @returns	{IDate}			ilib Date object
       */
      function toIDate(time) {
        if (time && this.props.locale) {
          return (0, _DateFactory["default"])({
            unixtime: time,
            timezone: 'local'
          });
        }
      }
      /**
       * Updates the internal value in state
       *
       * @param	{IDate}		value	ilib Date object
       *
       * @returns {Number}			Updated internal value
       */

    }, {
      key: "render",
      value: function render() {
        var value = this.toIDate(this.state.value); // pickerValue is only set when cancelling to prevent the unexpected changing of the
        // picker values before closing.

        var pickerValue = this.state.pickerValue ? this.toIDate(this.state.pickerValue) : value;
        var label = null;
        var props = null;
        var order = defaultOrder;
        var i18nConfig = memoizedI18nConfig(this.props.locale);

        if (i18nConfig) {
          if (value) {
            label = i18nConfig.formatter.format(value);
          }

          props = customProps(i18nConfig, pickerValue, this.props);
          order = i18nConfig.order;
        }

        var rest = Object.assign({}, this.props);
        delete rest.onComplete;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), props), this.handlers), {}, {
          label: label,
          onKeyDown: this.handleKeyDown,
          order: order,
          value: value
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        var value = toTime(props.value);

        if (props.open && !props.disabled && state.initialValue == null && state.value == null) {
          // when the expandable opens, we cache the prop value so it can be restored on
          // cancel and set value to be the current time if unset in order to initialize the
          // pickers
          return {
            initialValue: value,
            value: value || Date.now()
          };
        } else if (state.value !== value) {
          // always respect a value change from props
          return {
            value: value
          };
        }

        return null;
      }
    }]);

    return Decorator;
  }(_react.Component), _class.displayName = 'DateTimeDecorator', _class.propTypes =
  /** @lends sandstone/internal/DateTimeDecorator.DateTimeDecorator.prototype */
  {
    /**
     * The current locale as a
     * {@link https://tools.ietf.org/html/rfc5646|BCP 47 language tag}.
     *
     * @type {String}
     * @public
     */
    locale: _propTypes["default"].string,

    /**
     * Handler for `onChange` events
     *
     * @type {Function}
     * @public
     */
    onChange: _propTypes["default"].func,

    /**
     * Handler for `onComplete` event
     *
     * @type {Function}
     * @public
     */
    onComplete: _propTypes["default"].func,

    /**
     * When `true`, the date picker is expanded to select a new date.
     *
     * @type {Boolean}
     * @public
     */
    open: _propTypes["default"].bool,

    /**
     * Indicates the content's text direction is right-to-left.
     *
     * @type {Boolean}
     * @private
     */
    rtl: _propTypes["default"].bool,

    /**
     * The selected date
     *
     * @type {Date}
     * @public
     */
    value: _propTypes["default"].instanceOf(Date)
  }, _class);
  return (0, _I18nDecorator.I18nContextDecorator)({
    rtlProp: 'rtl',
    localeProp: 'locale'
  }, (0, _Changeable["default"])(Decorator));
});
exports.DateTimeDecorator = DateTimeDecorator;
var _default = DateTimeDecorator;
exports["default"] = _default;
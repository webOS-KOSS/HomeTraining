"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSharedProps = exports.deleteSharedProps = exports.ContextAsDefaults = void 0;
exports.useContextAsDefaults = useContextAsDefaults;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _react = require("react");

var _pick = _interopRequireDefault(require("ramda/src/pick"));

var _omit = _interopRequireDefault(require("ramda/src/omit"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PanelsStateContext = /*#__PURE__*/(0, _react.createContext)(null);
var sharedContextProps = ['backButtonAriaLabel', 'backButtonBackgroundOpacity', 'closeButtonAriaLabel', 'closeButtonBackgroundOpacity', 'noBackButton', 'noCloseButton', 'onBack', 'onClose']; // Given a full collection of props, return just the props from the shared list.

var getSharedProps = function getSharedProps(props) {
  return (0, _pick["default"])(sharedContextProps, props);
}; // Remove these shared props from the props object


exports.getSharedProps = getSharedProps;

var deleteSharedProps = function deleteSharedProps(props) {
  sharedContextProps.forEach(function (key) {
    delete props[key];
  });
};

exports.deleteSharedProps = deleteSharedProps;

function useContextAsDefaults(props) {
  var ctx = (0, _react.useContext)(PanelsStateContext);

  var contextProps = _objectSpread(_objectSpread({}, ctx), getSharedProps(props));

  var provideContextAsDefaults = function provideContextAsDefaults(children) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(PanelsStateContext.Provider, {
      value: contextProps,
      children: children
    });
  };

  return {
    contextProps: contextProps,
    provideContextAsDefaults: provideContextAsDefaults
  };
}

var defaultConfig = {
  // Array of prop names to add to the Wrapped component.
  props: []
};
var ContextAsDefaults = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  // eslint-disable-next-line no-shadow
  return function ContextAsDefaults(props) {
    var sharedProps = getSharedProps(props);

    var _useContextAsDefaults = useContextAsDefaults(props, sharedProps),
        contextProps = _useContextAsDefaults.contextProps,
        provideContextAsDefaults = _useContextAsDefaults.provideContextAsDefaults; // The following generates a complete list of all of the props expected by Wrapped
    // Using `pick`, add the specifically requested shared context props
    // Using `omit`, exclude all of the shared props


    return provideContextAsDefaults( /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, (0, _pick["default"])(config.props, contextProps)), (0, _omit["default"])(sharedContextProps, props))));
  };
});
exports.ContextAsDefaults = ContextAsDefaults;
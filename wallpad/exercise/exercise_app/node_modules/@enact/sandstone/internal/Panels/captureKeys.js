"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startCapture = startCapture;
exports.stopCapture = stopCapture;

var _handle = _interopRequireWildcard(require("@enact/core/handle"));

var _snapshot = _interopRequireDefault(require("@enact/core/snapshot"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Utility to return true if any of the handlers returns true
var any = function any() {
  for (var _len = arguments.length, handlers = new Array(_len), _key = 0; _key < _len; _key++) {
    handlers[_key] = arguments[_key];
  }

  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return handlers.find(function (fn) {
      return fn.apply(void 0, args);
    }) != null;
  };
};

var capturing = false; // If capturing, prevent default behaviors and stop all event propagation

var handleGlobalKeyDownCapture = (0, _handle["default"])(function () {
  return capturing;
}, any((0, _handle.forKey)('cancel'), (0, _handle.forKey)('left'), (0, _handle.forKey)('right'), (0, _handle.forKey)('up'), (0, _handle.forKey)('down'), (0, _handle.forKey)('enter')), _handle.preventDefault, _handle.stop, _handle.stopImmediate);
(0, _snapshot["default"])(function () {
  // have to attach a handler immediately in order to get in before core/dispatcher and then use a
  // module-scoped flag to check further processing. Handling both down (for the key event and
  // click emulation) and up (for cancelable).
  document.addEventListener('keydown', handleGlobalKeyDownCapture, {
    capture: true
  });
  document.addEventListener('keyup', handleGlobalKeyDownCapture, {
    capture: true
  });
});

function startCapture() {
  capturing = true;
}

function stopCapture() {
  capturing = false;
}
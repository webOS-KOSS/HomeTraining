"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FeedbackTooltipBase = exports.FeedbackTooltip = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _ComponentOverride = _interopRequireDefault(require("@enact/ui/ComponentOverride"));

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _Image = _interopRequireDefault(require("../Image"));

var _util = require("../internal/util");

var _Skinnable = _interopRequireDefault(require("../Skinnable"));

var _FeedbackContent = _interopRequireDefault(require("./FeedbackContent"));

var _FeedbackIcons = _interopRequireDefault(require("./FeedbackIcons.js"));

var _MediaPlayer = require("../MediaPlayer/");

var _FeedbackTooltipModule = _interopRequireDefault(require("./FeedbackTooltip.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["arrowContainerClassName", "children", "feedbackVisible", "playbackState", "playbackRate", "thumbnailComponent"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * FeedbackTooltip {@link sandstone/VideoPlayer}. This displays the media's playback rate and
 * time information.
 *
 * @class FeedbackTooltip
 * @memberof sandstone/VideoPlayer
 * @ui
 * @private
 */
var FeedbackTooltipBase = (0, _kind["default"])({
  name: 'FeedbackTooltip',
  propTypes:
  /** @lends sandstone/VideoPlayer.FeedbackTooltip.prototype */
  {
    /**
     * Invoke action to display or hide tooltip.
     *
     * @type {('focus'|'blur'|'idle')}
     * @default 'idle'
     */
    action: _propTypes2["default"].oneOf(['focus', 'blur', 'idle']),

    /**
     * Duration of the current media in seconds
     *
     * @type {Number}
     * @default 0
     * @public
     */
    duration: _propTypes2["default"].number,

    /**
     * Instance of `NumFmt` to format the time
     *
     * @type {Object}
     * @public
     */
    formatter: _propTypes2["default"].object,

    /**
     * If the current `playbackState` allows this component's visibility to be changed,
     * this component will be hidden. If not, setting this property will have no effect.
     * All `playbackState`s respond to this property except the following:
     * `'rewind'`, `'fastForward'`.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    hidden: _propTypes2["default"].bool,

    /**
     * Part of the API required by `ui/Slider` but not used by FeedbackTooltip which only
     * supports horizontal orientation
     *
     * @type {String}
     * @private
     */
    orientation: _propTypes2["default"].string,

    /**
     * Value of the feedback playback rate
     *
     * @type {String|Number}
     * @public
     */
    playbackRate: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),

    /**
     * Refers to one of the following possible media playback states.
     * `'play'`, `'pause'`, `'rewind'`, `'fastForward'` ,
     * `'jumpBackward'`, `'jumpForward'`, `'jumpToStart'`, `'jumpToEnd'`, `'stop'`.
     *
     * Each state understands where its related icon should be positioned, and whether it should
     * respond to changes to the `visible` property.
     *
     * This string feeds directly into {@link sandstone/FeedbackIcon.FeedbackIcon}.
     *
     * @type {('play'|'pause'|'rewind'|'fastForward'|'jumpBackward'|'jumpForward'|'jumpToStart'|'jumpToEnd'|'stop')}
     * @public
     */
    playbackState: _propTypes2["default"].oneOf(Object.keys(_FeedbackIcons["default"])),

    /**
     * This component will be used instead of the built-in version. The internal thumbnail style
     * will be applied to this component. This component follows the same rules as the built-in
     * version; hiding and showing according to the state of `action`.
     *
     * This can be a tag name as a string, a rendered DOM node, a component, or a component
     * instance.
     *
     * @type {String|Component|Element}
     * @public
     */
    thumbnailComponent: _propTypes["default"].renderableOverride,

    /**
     * `true` if Slider knob is scrubbing.
     *
     * @type {Boolean}
     * @public
     */
    thumbnailDeactivated: _propTypes2["default"].bool,

    /**
     * Set a thumbnail image source to show on VideoPlayer's Slider knob. This is a standard
     * {@link sandstone/Image} component so it supports all of the same options for the `src`
     * property. If no `thumbnailSrc` is set, no tooltip will display.
     *
     * @type {String|Object}
     * @public
     */
    thumbnailSrc: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),

    /**
     * Required by the interface for sandstone/Slider.tooltip but not used here
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    visible: _propTypes2["default"].bool
  },
  defaultProps: {
    action: 'idle',
    thumbnailDeactivated: false,
    hidden: false
  },
  styles: {
    css: _FeedbackTooltipModule["default"],
    className: 'feedbackTooltip'
  },
  computed: {
    arrowContainerClassName: function arrowContainerClassName(_ref) {
      var action = _ref.action,
          styler = _ref.styler,
          thumbnailComponent = _ref.thumbnailComponent,
          thumbnailSrc = _ref.thumbnailSrc;
      return styler.join('arrowContainer', {
        hidden: action !== 'focus' || !thumbnailComponent && !thumbnailSrc
      });
    },
    children: function children(_ref2) {
      var _children = _ref2.children,
          duration = _ref2.duration,
          formatter = _ref2.formatter;
      return (0, _MediaPlayer.secondsToTime)(_children * duration, formatter);
    },
    className: function className(_ref3) {
      var hidden = _ref3.hidden,
          s = _ref3.playbackState,
          thumbnailDeactivated = _ref3.thumbnailDeactivated,
          styler = _ref3.styler,
          action = _ref3.action,
          thumbnailComponent = _ref3.thumbnailComponent,
          thumbnailSrc = _ref3.thumbnailSrc;
      return styler.append({
        hidden: hidden && _FeedbackIcons["default"][s] && _FeedbackIcons["default"][s].allowHide,
        thumbnailDeactivated: thumbnailDeactivated,
        shift: action === 'focus' && (thumbnailComponent || thumbnailSrc)
      });
    },
    feedbackVisible: function feedbackVisible(_ref4) {
      var action = _ref4.action,
          playbackState = _ref4.playbackState;
      return (action !== 'focus' || action === 'idle') && !(action === 'blur' && playbackState === 'play');
    },
    thumbnailComponent: function thumbnailComponent(_ref5) {
      var action = _ref5.action,
          _thumbnailComponent = _ref5.thumbnailComponent,
          thumbnailSrc = _ref5.thumbnailSrc;

      if (action === 'focus') {
        if (_thumbnailComponent) {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComponentOverride["default"], {
            component: _thumbnailComponent,
            className: _FeedbackTooltipModule["default"].thumbnail
          }, "thumbnailComponent");
        } else if (thumbnailSrc) {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: _FeedbackTooltipModule["default"].thumbnail,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Image["default"], {
              src: thumbnailSrc,
              className: _FeedbackTooltipModule["default"].image
            })
          }, "thumbnailComponent");
        }
      }
    }
  },
  render: function render(_ref6) {
    var arrowContainerClassName = _ref6.arrowContainerClassName,
        children = _ref6.children,
        feedbackVisible = _ref6.feedbackVisible,
        playbackState = _ref6.playbackState,
        playbackRate = _ref6.playbackRate,
        thumbnailComponent = _ref6.thumbnailComponent,
        rest = _objectWithoutProperties(_ref6, _excluded);

    delete rest.action;
    delete rest.duration;
    delete rest.formatter;
    delete rest.hidden;
    delete rest.orientation;
    delete rest.thumbnailDeactivated;
    delete rest.thumbnailSrc;
    delete rest.visible;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: _FeedbackTooltipModule["default"].alignmentContainer,
        children: [thumbnailComponent, /*#__PURE__*/(0, _jsxRuntime.jsx)(_FeedbackContent["default"], {
          className: _FeedbackTooltipModule["default"].content,
          feedbackVisible: feedbackVisible,
          playbackRate: playbackRate,
          playbackState: playbackState,
          children: children
        }, "feedbackContent"), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: arrowContainerClassName,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: _FeedbackTooltipModule["default"].arrow
          })
        })]
      })
    }));
  }
});
exports.FeedbackTooltipBase = FeedbackTooltipBase;
var FeedbackTooltip = (0, _util.onlyUpdateForProps)((0, _Skinnable["default"])(FeedbackTooltipBase), ['action', 'children', 'hidden', 'playbackState', 'playbackRate', 'thumbnailComponent', 'thumbnailDeactivated', 'thumbnailSrc', 'visible']);
exports.FeedbackTooltip = FeedbackTooltip;
FeedbackTooltip.defaultSlot = 'tooltip';
var _default = FeedbackTooltip;
exports["default"] = _default;
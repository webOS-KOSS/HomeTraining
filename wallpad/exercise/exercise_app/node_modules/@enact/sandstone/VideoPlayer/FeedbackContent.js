"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FeedbackContentBase = exports.FeedbackContent = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _util = require("../internal/util");

var _Feedback = _interopRequireDefault(require("./Feedback"));

var _FeedbackIcons = _interopRequireDefault(require("./FeedbackIcons.js"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["children", "playbackRate", "playbackState", "feedbackVisible", "visible"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * FeedbackContent {@link sandstone/VideoPlayer}. This displays the media's playback rate and other
 * information.
 *
 * @class FeedbackContent
 * @memberof sandstone/VideoPlayer
 * @ui
 * @private
 */
var FeedbackContentBase = (0, _kind["default"])({
  name: 'FeedbackContent',
  propTypes:
  /** @lends sandstone/VideoPlayer.Feedback.prototype */
  {
    /**
     * If the current `playbackState` allows the feedback component's visibility to be changed,
     * the feedback component will be hidden. If not, setting this property will have no effect.
     * All `playbackState`s respond to this property except the following:
     * `'rewind'`, `'fastForward'`.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    feedbackVisible: _propTypes["default"].bool,

    /**
     * Value of the feedback playback rate
     *
     * @type {String|Number}
     * @public
     */
    playbackRate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

    /**
     * Refers to one of the following possible media playback states.
     * `'play'`, `'pause'`, `'rewind'`, `'fastForward'` ,
     * `'jumpBackward'`, `'jumpForward'`, `'jumpToStart'`, `'jumpToEnd'`, `'stop'`.
     *
     * Each state understands where its related icon should be positioned, and whether it should
     * respond to changes to the `visible` property.
     *
     * This string feeds directly into {@link sandstone/FeedbackIcon.FeedbackIcon}.
     *
     * @type {('play'|'pause'|'rewind'|'fastForward'|'jumpBackward'|'jumpForward'|'jumpToStart'|'jumpToEnd'|'stop')}
     * @public
     */
    playbackState: _propTypes["default"].oneOf(Object.keys(_FeedbackIcons["default"])),

    /**
     * The visibility of the component. When `false`, the component will be hidden.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    visible: _propTypes["default"].bool
  },
  defaultProps: {
    feedbackVisible: true,
    visible: true
  },
  render: function render(_ref) {
    var children = _ref.children,
        playbackRate = _ref.playbackRate,
        playbackState = _ref.playbackState,
        feedbackVisible = _ref.feedbackVisible,
        visible = _ref.visible,
        rest = _objectWithoutProperties(_ref, _excluded);

    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
      style: !visible ? {
        display: 'none'
      } : null,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Feedback["default"], {
        playbackState: playbackState,
        visible: feedbackVisible,
        children: playbackRate
      }), children]
    }));
  }
});
exports.FeedbackContentBase = FeedbackContentBase;
var FeedbackContent = (0, _util.onlyUpdateForProps)(FeedbackContentBase, ['children', 'feedbackVisible', 'playbackRate', 'playbackState', 'visible']);
exports.FeedbackContent = FeedbackContent;
var _default = FeedbackContent;
exports["default"] = _default;
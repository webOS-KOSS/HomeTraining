"use strict";

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _useSpotlightContainer = _interopRequireDefault(require("../useSpotlightContainer"));

var _container = require("../../src/container");

var _spotlight = _interopRequireDefault(require("../../src/spotlight"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["containerConfig", "preserveId", "spotlightDisabled", "spotlightId", "spotlightMuted", "spotlightRestrict"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function containerExists(id) {
  return (0, _container.getContainerConfig)(id) != null;
}

var testId = 'test-useSpotlightContainer';
describe('useSpotlightContainer', function () {
  // TODO: Test lifecycle (e.g unload, preserveId)
  function Component(props) {
    var containerConfig = props.containerConfig,
        preserveId = props.preserveId,
        spotlightDisabled = props.spotlightDisabled,
        spotlightId = props.spotlightId,
        spotlightMuted = props.spotlightMuted,
        spotlightRestrict = props.spotlightRestrict,
        rest = _objectWithoutProperties(props, _excluded);

    var spotlightContainer = (0, _useSpotlightContainer["default"])({
      id: spotlightId,
      muted: spotlightMuted,
      disabled: spotlightDisabled,
      restrict: spotlightRestrict,
      // continue5WayHold, defaultElement, and enterTo can be in the containerConfig object
      containerConfig: containerConfig,
      preserveId: preserveId
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), spotlightContainer.attributes));
  } // remove all containers after each test


  afterEach(_spotlight["default"].clear);
  test('should support omitting the config object', function () {
    var Comp = function Comp(props) {
      var spotlightContainer = (0, _useSpotlightContainer["default"])();
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, props), spotlightContainer.attributes));
    };

    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, {
      "data-testid": testId
    }));

    var component = _react.screen.getByTestId(testId);

    var expectedAttribute = 'data-spotlight-container';
    var expectedValue = 'true';
    expect(component).toHaveAttribute(expectedAttribute, expectedValue);
  });
  describe('attributes', function () {
    test('should set `data-spotlight-container` attribute', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-testid": testId
      }));

      var component = _react.screen.getByTestId(testId);

      var expectedAttribute = 'data-spotlight-container';
      var expectedValue = 'true';
      expect(component).toHaveAttribute(expectedAttribute, expectedValue);
    });
    test('should generate a `data-spotlight-id` attribute when `id` is unset', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-testid": testId
      }));

      var component = _react.screen.getByTestId(testId);

      var expectedAttribute = 'data-spotlight-id';
      var expectedValue = expect.stringMatching(/container-\d+/);
      expect(component).toHaveAttribute(expectedAttribute, expectedValue);
    });
    test('should reuse the same generated `data-spotlight-id` attribute on re-render', function () {
      var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-testid": testId
      })),
          rerender = _render.rerender;

      var expected = _react.screen.getByTestId(testId).getAttribute('data-spotlight-id');

      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-testid": testId
      }));

      var actual = _react.screen.getByTestId(testId).getAttribute('data-spotlight-id');

      expect(actual).toBe(expected);
    });
    test('should set a `data-spotlight-id` attribute when `id` is set', function () {
      var id = 'my-container';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-testid": testId,
        spotlightId: id
      }));

      var component = _react.screen.getByTestId(testId);

      var expectedAttribute = 'data-spotlight-id';
      expect(component).toHaveAttribute(expectedAttribute, id);
    });
    test('should set `data-spotlight-container-disabled` attribute to be falsey when `disabled` is unset', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-testid": testId
      }));

      var component = _react.screen.getByTestId(testId);

      var expectedAttribute = 'data-spotlight-container-disabled';
      expect(component).not.toHaveAttribute(expectedAttribute);
    });
    test('should set `data-spotlight-container-disabled` attribute when `disabled` is set', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-testid": testId,
        spotlightDisabled: true
      }));

      var component = _react.screen.getByTestId(testId);

      var expectedAttribute = 'data-spotlight-container-disabled';
      var expectedValue = 'true';
      expect(component).toHaveAttribute(expectedAttribute, expectedValue);
    });
    test('should set `data-spotlight-container-muted` attribute to be falsey when `muted` is unset', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-testid": testId
      }));

      var component = _react.screen.getByTestId(testId);

      var expectedAttribute = 'data-spotlight-container-muted';
      expect(component).not.toHaveAttribute(expectedAttribute);
    });
    test('should set `data-spotlight-container-muted` attribute when `muted` is set', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-testid": testId,
        spotlightMuted: true
      }));

      var component = _react.screen.getByTestId(testId);

      var expectedAttribute = 'data-spotlight-container-muted';
      var expectedValue = 'true';
      expect(component).toHaveAttribute(expectedAttribute, expectedValue);
    });
  });
  describe('Spotlight configuration', function () {
    test('should create a new container with the specified id', function () {
      var id = 'my-container';
      expect(containerExists(id)).toBeFalsy();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        spotlightId: id
      }));
      var expected = true;
      var actual = containerExists(id);
      expect(actual).toBe(expected);
    });
    test('should configure a new container with the specified id', function () {
      var id = 'my-container';
      expect(containerExists(id)).toBeFalsy();
      var config = {
        restrict: 'self-only',
        defaultElement: 'my-element'
      };
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        containerConfig: {
          defaultElement: config.defaultElement
        },
        spotlightId: id,
        spotlightRestrict: config.restrict
      }));
      var expected = config;
      var actual = (0, _container.getContainerConfig)(id);
      expect(actual).toMatchObject(expected);
    });
    test('should update restrict value', function () {
      var id = 'my-container';

      var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        spotlightId: id,
        spotlightRestrict: "self-only"
      })),
          rerender = _render2.rerender;

      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        spotlightId: id,
        spotlightRestrict: "self-first"
      }));
      var expected = {
        restrict: 'self-first'
      };
      var actual = (0, _container.getContainerConfig)(id);
      expect(actual).toMatchObject(expected);
    });
  });
});
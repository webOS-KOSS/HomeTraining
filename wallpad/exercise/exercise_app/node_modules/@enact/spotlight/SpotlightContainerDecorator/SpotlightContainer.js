"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SpotlightContainer = void 0;

var _handle = require("@enact/core/handle");

var _pointer = require("../src/pointer");

var _spotlight = _interopRequireDefault(require("../src/spotlight"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var isNewPointerPosition = function isNewPointerPosition(ev) {
  return (0, _pointer.hasPointerMoved)(ev.clientX, ev.clientY);
};

var SpotlightContainer = /*#__PURE__*/function () {
  // set up context and props so we can use handle binding
  function SpotlightContainer(_ref) {
    var _this = this;

    var containerConfig = _ref.containerConfig,
        navigableFilter = _ref.navigableFilter,
        preserveId = _ref.preserveId;

    _classCallCheck(this, SpotlightContainer);

    this.context = {};
    this.props = {};

    this.navigableFilter = function (elem) {
      // If the component to which this was applied specified a navigableFilter, run it
      if (typeof _this.filter === 'function') {
        if (_this.filter(elem) === false) {
          return false;
        }
      }

      return true;
    };

    this.onBlurCapture = function (ev) {
      if (_this.shouldPreventBlur) {
        (0, _handle.stop)(ev);
        return false;
      }

      return true;
    };

    this.onFocusCapture = function (ev) {
      if (_this.props.disabled === true) {
        (0, _handle.stop)(ev);

        _this.silentBlur(ev);

        return false;
      }

      return true;
    };

    this.onPointerEnter = (0, _handle.handle)(isNewPointerPosition, function () {
      return _spotlight["default"].setActiveContainer(_this.id);
    }).bindAs(this, 'onPointerEnter');
    this.onPointerLeave = (0, _handle.handle)((0, _handle.not)((0, _handle.forProp)('restrict', 'self-only')), isNewPointerPosition, function (ev) {
      var parentContainer = ev.currentTarget.parentNode.closest('[data-spotlight-container]');

      var activeContainer = _spotlight["default"].getActiveContainer(); // if this container is wrapped by another and this is the currently active
      // container, move the active container to the parent


      if (parentContainer && activeContainer === _this.id) {
        activeContainer = parentContainer.dataset.spotlightId;

        _spotlight["default"].setActiveContainer(activeContainer);
      }
    }).bindAs(this, 'onPointerLeave');
    // spotlight id - set either via props or generated by Spotlight
    this.id = null; // Preserve the spotlight id across instances when it is set via props and preserveId is set

    this.canPreserveId = preserveId;
    this.preserveId = false; // container config - set once when the container is added

    this.config = containerConfig; // optional filter function to limit the spottable candidates for this container

    this.filter = navigableFilter; // private hash of spotlight DOM attributes

    this.attr = {
      'data-spotlight-container': true
    }; // Used to indicate that we want to stop propagation on blur events that occur as a
    // result of this component imperatively blurring itself on focus when spotlightDisabled

    this.shouldPreventBlur = false;
  }

  _createClass(SpotlightContainer, [{
    key: "attributes",
    get: function get() {
      return this.attr;
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      var disabled = props.disabled,
          id = props.id,
          muted = props.muted,
          restrict = props.restrict;
      this.props = props;

      if (this.id == null || id && this.id !== id) {
        if (this.id) {
          this.releaseContainer(this.id);
        }

        this.id = _spotlight["default"].add(_objectSpread(_objectSpread({}, this.config), {}, {
          id: id,
          restrict: restrict,
          navigableFilter: this.navigableFilter
        }));
        this.preserveId = this.canPreserveId && this.id === id;
      } else {
        _spotlight["default"].set(this.id, {
          restrict: restrict
        });
      }

      this.attr['data-spotlight-id'] = this.id;
      this.attr['data-spotlight-container-disabled'] = disabled;
      this.attr['data-spotlight-container-muted'] = muted;
    }
  }, {
    key: "unload",
    value: function unload() {
      this.releaseContainer();
    }
  }, {
    key: "releaseContainer",
    value: function releaseContainer() {
      if (this.preserveId) {
        _spotlight["default"].unmount(this.id);
      } else {
        _spotlight["default"].remove(this.id);
      }
    }
  }, {
    key: "silentBlur",
    value: function silentBlur(_ref2) {
      var target = _ref2.target;
      this.shouldPreventBlur = true;
      target.blur();
      this.shouldPreventBlur = false;
    }
  }]);

  return SpotlightContainer;
}();

exports.SpotlightContainer = SpotlightContainer;
var _default = SpotlightContainer;
exports["default"] = _default;
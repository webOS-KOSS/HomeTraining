// Type definitions for spotlight/Accelerator

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export declare class Accelerator {
  constructor /**
 * Controls the frequency with which the acceleration will
"freeze". While frozen, the current target item cannot change, and all events are directed
to it.
 */(frequency: number[]);
  /**
 * Called with the current keydown event and callback, which will be called when the event is
allowed through.
 */
  processKey(event: object, callback: Function): boolean;
  /**
   * Resets the Accelerator instance to the default values.
   */
  reset(): void;
  /**
   * Cancels the Accelerator.
   */
  cancel(): void;
  /**
   * Verifies that the Accelerator is active.
   */
  isAccelerating(): boolean;
}

export default Accelerator;

"use strict";

var _handle = _interopRequireWildcard(require("@enact/core/handle"));

var _useHandlers = _interopRequireDefault(require("@enact/core/useHandlers"));

require("@testing-library/jest-dom");

var _react = require("@testing-library/react");

var _classnames = _interopRequireDefault(require("classnames"));

var _react2 = require("react");

var _reactDom = _interopRequireDefault(require("react-dom"));

var _spotlight = _interopRequireDefault(require("../../src/spotlight.js"));

var _useSpottable = _interopRequireDefault(require("../useSpottable"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["className", "component", "componentRef", "disabled", "emulateMouse", "onSelectionCancel", "onSpotlightDisappear", "onSpotlightDown", "onSpotlightLeft", "onSpotlightRight", "onSpotlightUp", "selectionKeys", "spotlightDisabled", "spotlightId"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var forwardMouseUp = (0, _handle.forward)('onMouseUp'),
    forwardMouseDown = (0, _handle.forward)('onMouseDown'),
    forwardKeyDown = (0, _handle.forward)('onKeyDown'),
    forwardKeyUp = (0, _handle.forward)('onKeyUp'),
    id = 'test-useSpot';

var makeKeyEvent = function makeKeyEvent(keyCode) {
  return {
    keyCode: keyCode,
    which: keyCode
  };
};

var REMOTE_OK_KEY = 16777221;
var compRef = null;
var getCurrent = _spotlight["default"].getCurrent;

var callContext = function callContext(name) {
  return function (ev, props, context) {
    return context[name](ev, props);
  };
};

var spotHandlers = {
  onKeyDown: (0, _handle["default"])(forwardKeyDown, callContext('onKeyDown'), forwardMouseDown),
  onKeyUp: (0, _handle["default"])(forwardKeyUp, callContext('onKeyUp'), forwardMouseUp),
  onBlur: callContext('onBlur'),
  onFocus: callContext('onFocus'),
  onMouseEnter: callContext('onMouseEnter'),
  onMouseLeave: callContext('onMouseLeave')
};
describe('useSpottable', function () {
  function SpottableBase(props) {
    var className = props.className,
        component = props.component,
        componentRef = props.componentRef,
        disabled = props.disabled,
        emulateMouse = props.emulateMouse,
        onSelectionCancel = props.onSelectionCancel,
        onSpotlightDisappear = props.onSpotlightDisappear,
        onSpotlightDown = props.onSpotlightDown,
        onSpotlightLeft = props.onSpotlightLeft,
        onSpotlightRight = props.onSpotlightRight,
        onSpotlightUp = props.onSpotlightUp,
        selectionKeys = props.selectionKeys,
        spotlightDisabled = props.spotlightDisabled,
        spotlightId = props.spotlightId,
        rest = _objectWithoutProperties(props, _excluded);

    var spot = (0, _useSpottable["default"])({
      disabled: disabled,
      emulateMouse: emulateMouse,
      onSelectionCancel: onSelectionCancel,
      onSpotlightDisappear: onSpotlightDisappear,
      onSpotlightDown: onSpotlightDown,
      onSpotlightLeft: onSpotlightLeft,
      onSpotlightRight: onSpotlightRight,
      onSpotlightUp: onSpotlightUp,
      selectionKeys: selectionKeys,
      spotlightDisabled: spotlightDisabled,
      spotlightId: spotlightId
    });
    var Comp = component || 'div';
    rest.tabIndex = -1;
    var handlers = (0, _useHandlers["default"])(spotHandlers, rest, spot);
    compRef = componentRef;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), spot.attributes), handlers), {}, {
      className: (0, _classnames["default"])(className, spot.className),
      disabled: disabled,
      ref: spot.ref
    }));
  }

  var SpottableComponent = /*#__PURE__*/function (_Component) {
    _inherits(SpottableComponent, _Component);

    var _super = _createSuper(SpottableComponent);

    function SpottableComponent() {
      _classCallCheck(this, SpottableComponent);

      return _super.apply(this, arguments);
    }

    _createClass(SpottableComponent, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        // eslint-disable-next-line react/no-find-dom-node
        this.node = _reactDom["default"].findDOMNode(this);
      }
    }, {
      key: "componentRef",
      get: function get() {
        return this.node;
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableBase, _objectSpread(_objectSpread({}, this.props), {}, {
          componentRef: this.componentRef
        }));
      }
    }]);

    return SpottableComponent;
  }(_react2.Component);

  beforeEach(function () {
    // Spotlight.getCurrent() did not work in unit tests. It always returns `undefined`.
    // So Spotlight.getCurrent() is replaced with the function returning the wrapped component by the Component
    // including `useSpottable`.
    _spotlight["default"].getCurrent = function () {
      return compRef.current;
    };
  });
  afterEach(function () {
    _spotlight["default"].getCurrent = getCurrent;
  });
  test('should add the spottable class', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
      "data-testid": id
    }));

    var div = _react.screen.getByTestId(id);

    var expected = 'spottable';
    expect(div).toHaveClass(expected);
  });
  test('should add the spottable class to a {disabled} component', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
      "data-testid": id,
      disabled: true
    }));

    var div = _react.screen.getByTestId(id);

    var expected = 'spottable';
    expect(div).toHaveClass(expected);
  });
  test('should not add the spottable class to a {spotlightDisabled} component', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
      "data-testid": id,
      spotlightDisabled: true
    }));

    var div = _react.screen.getByTestId(id);

    var expected = 'spottable';
    expect(div).not.toHaveClass(expected);
  });
  describe('should emit event properly', function () {
    test('should emit {onSpotlightUp} when the the {keydown} is emitted with 38 keycode', function () {
      var spy = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        "data-testid": id,
        onSpotlightUp: spy
      }));

      var div = _react.screen.getByTestId(id);

      _react.fireEvent.keyDown(div, makeKeyEvent(38));

      var expected = 1;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
    test('should emit {onSpotlightDown} when the the {keydown} is emitted with 40 keycode', function () {
      var spy = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        "data-testid": id,
        onSpotlightDown: spy
      }));

      var div = _react.screen.getByTestId(id);

      _react.fireEvent.keyDown(div, makeKeyEvent(40));

      var expected = 1;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
    test('should emit {onSpotlightLeft} when the the {keydown} is emitted with 37 keycode', function () {
      var spy = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        "data-testid": id,
        onSpotlightLeft: spy
      }));

      var div = _react.screen.getByTestId(id);

      _react.fireEvent.keyDown(div, makeKeyEvent(37));

      var expected = 1;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
    test('should emit {onSpotlightRight} when the the {keydown} is emitted with 39 keycode', function () {
      var spy = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        "data-testid": id,
        onSpotlightRight: spy
      }));

      var div = _react.screen.getByTestId(id);

      _react.fireEvent.keyDown(div, makeKeyEvent(39));

      var expected = 1;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
    test('should emulate {onMouseDown} when REMOTE_OK_KEY key is pressed', function () {
      var spy = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        "data-testid": id,
        emulateMouse: true,
        onMouseDown: spy,
        selectionKeys: [13]
      }));

      var div = _react.screen.getByTestId(id);

      _react.fireEvent.keyDown(div, makeKeyEvent(REMOTE_OK_KEY));

      var expected = 1;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
    test('should emulate {onMouseUp} when {REMOTE_OK_KEY} key is pressed and released', function () {
      var spy = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        "data-testid": id,
        emulateMouse: true,
        onMouseUp: spy,
        selectionKeys: [13]
      }));

      var div = _react.screen.getByTestId(id);

      _react.fireEvent.keyDown(div, makeKeyEvent(REMOTE_OK_KEY));

      _react.fireEvent.keyUp(div, makeKeyEvent(REMOTE_OK_KEY));

      var expected = 1;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
    test('should not emulate {onMouseUp} if the default behavior is prevented even though {REMOTE_OK_KEY} key is pressed', function () {
      var spy = jest.fn();

      function onKeyUp(ev) {
        ev.preventDefault();
      }

      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        "data-testid": id,
        emulateMouse: true,
        onKeyUp: onKeyUp,
        onMouseUp: spy,
        selectionKeys: [13]
      }));

      var div = _react.screen.getByTestId(id);

      _react.fireEvent.keyDown(div, makeKeyEvent(REMOTE_OK_KEY));

      _react.fireEvent.keyUp(div, makeKeyEvent(REMOTE_OK_KEY));

      expect(spy).not.toHaveBeenCalled();
    });
  });
  describe('shouldComponentUpdate', function () {
    test('should re-render when a non-Component prop changes', function () {
      var spy = jest.fn(function (props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
      });

      var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        component: spy,
        "data-testid": id
      })),
          rerender = _render.rerender;

      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        component: spy,
        "data-id": "123",
        "data-testid": id
      }));
      var expected = 2;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
    test('should re-render when {selectionKeys} changes', function () {
      var spy = jest.fn(function (props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
      });

      var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        component: spy,
        "data-testid": id,
        selectionKeys: [1, 2, 3]
      })),
          rerender = _render2.rerender;

      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        component: spy,
        "data-testid": id,
        selectionKeys: [2, 1, 3]
      }));
      var expected = 2;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
    test('should not re-render when focused', function () {
      var spy = jest.fn(function (props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
      });
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableComponent, {
        component: spy,
        "data-testid": id
      }));

      var div = _react.screen.getByTestId(id);

      div.focus();
      var expected = 1;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
  });
});
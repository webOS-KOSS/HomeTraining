"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
Object.defineProperty(exports, "spottableClass", {
  enumerable: true,
  get: function get() {
    return _SpottableCore.spottableClass;
  }
});
exports.useSpottable = void 0;

var _useClass = _interopRequireDefault(require("@enact/core/useClass"));

var _react = require("react");

var _SpottableCore = require("./SpottableCore");

var _excluded = ["spotRef", "emulateMouse", "selectionKeys", "spotlightDisabled"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ENTER_KEY = 13;
var REMOTE_OK_KEY = 16777221;
/**
 * Configuration for `useSpottable`
 *
 * @typedef {Object} useSpotConfig
 * @memberof ui/Spottable
 * @property {Boolean}  disabled             Whether or not the component is in a disabled state.
 * @property {Boolean}  emulateMouse         Whether or not the component should emulate mouse events as a response to Spotlight 5-way events.
 * @property {Function} handleForceUpdate    It is called if the component needs to be force updated.
 * @property {Function} onSelectionCancel    It is called if the component is focused and became disabled.
 * @property {Function} onSpotlightDisappear The handler to run when the component is removed while retaining focus.
 * @property {Function} onSpotlightDown      The handler to run when the 5-way down key is pressed.
 * @property {Function} onSpotlightLeft      The handler to run when the 5-way left key is pressed.
 * @property {Function} onSpotlightRight     The handler to run when the 5-way right key is pressed.
 * @property {Function} onSpotlightUp        The handler to run when the 5-way up key is pressed.
 * @property {Number[]} selectionKeys        An array of numbers representing keyCodes that should trigger mouse event
 *                                           emulation when `emulateMouse` is `true`. If a keyCode equals a directional
 *                                           key, then default 5-way navigation will be prevented when that key is pressed.
 * @property {Boolean}  spotlightDisabled    When `true`, the component cannot be navigated using spotlight.
 * @private
 */

/**
 * Object returned by `useSpottable`
 *
 * @typedef {Object} useSpotInterface
 * @memberof ui/Spottable
 * @property {Boolean}  [blur]       Handle when blurred.
 * @property {Boolean}  [className]  The class being spottable and focused when disabled.
 * @property {Boolean}  [focus]      Handle when focused.
 * @property {Boolean}  [keyDown]    Handle to run when the 5-way up key is pressed.
 * @property {Boolean}  [keyUp]      Handle to run when the 5-way up key is released.
 * @property {Boolean}  [mouseEnter] Handle when mouse enters.
 * @property {Boolean}  [mouseLeave] Handle when mouse leaves.
 * @property {Boolean}  [ref]        The ref for the target node.
 * @private
 */

/**
 * Manages a boolean state value.
 *
 * The value may either be Spotd via the `onSpot` or explicitly set via `onActivate` and
 * `onDeactivate`. The initial value can be set using the `defaultSelected` option.
 *
 * @param {useSpotConfig} config Configuration options
 * @returns {useSpotInterface}
 * @private
 */

var useSpottable = function useSpottable() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      spotRef = _ref.spotRef,
      emulateMouse = _ref.emulateMouse,
      _ref$selectionKeys = _ref.selectionKeys,
      selectionKeys = _ref$selectionKeys === void 0 ? [ENTER_KEY, REMOTE_OK_KEY] : _ref$selectionKeys,
      spotlightDisabled = _ref.spotlightDisabled,
      props = _objectWithoutProperties(_ref, _excluded);

  var hook = (0, _useClass["default"])(_SpottableCore.SpottableCore, {
    emulateMouse: emulateMouse
  });
  var context = (0, _react.useRef)({
    prevSpotlightDisabled: spotlightDisabled,
    spotlightDisabled: spotlightDisabled
  });
  context.current = {
    prevSpotlightDisabled: context.current.spotlightDisabled,
    spotlightDisabled: spotlightDisabled
  };
  var attributes = {};

  if (props.spotlightId) {
    attributes['data-spotlight-id'] = props.spotlightId;
  }

  hook.setPropsAndContext(_objectSpread({
    selectionKeys: selectionKeys,
    spotlightDisabled: spotlightDisabled
  }, props), context.current);
  (0, _react.useLayoutEffect)(function () {
    hook.load(spotRef || null);
    return function () {
      hook.unload();
    };
  }, [spotRef]); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useLayoutEffect)(hook.didUpdate); // eslint-disable-line react-hooks/exhaustive-deps

  return {
    attributes: attributes,
    className: hook.spottableClass || null,
    onBlur: hook.handleBlur,
    onFocus: hook.handleFocus,
    onKeyDown: hook.handleKeyDown,
    onKeyUp: hook.handleKeyUp,
    onMouseEnter: hook.handleEnter,
    onMouseLeave: hook.handleLeave
  };
};

exports.useSpottable = useSpottable;
var _default = useSpottable;
exports["default"] = _default;
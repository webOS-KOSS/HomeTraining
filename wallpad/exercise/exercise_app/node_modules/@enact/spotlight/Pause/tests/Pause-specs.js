"use strict";

var _Pause = _interopRequireWildcard(require("../Pause"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var PAUSED = 'Paused';
var NOT_PAUSED = 'Not Paused';
describe('Pause', function () {
  test('should pause spotlight', function () {
    var subject = new _Pause["default"]();
    subject.pause();
    var expected = PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    subject.resume();
    expect(actual).toBe(expected);
  });
  test('should resume spotlight', function () {
    var subject = new _Pause["default"]();
    subject.pause();
    subject.resume();
    var expected = NOT_PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    expect(actual).toBe(expected);
  });
  test('should not resume spotlight when another Paused instance is in control', function () {
    var subject = new _Pause["default"]();
    var another = new _Pause["default"]();
    another.pause();
    subject.pause();
    var expected = PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    another.resume();
    expect(actual).toBe(expected);
  });
  test('should not report paused when another Paused instance is in control', function () {
    var subject = new _Pause["default"]();
    var another = new _Pause["default"]();
    another.pause();
    subject.pause();
    var expected = NOT_PAUSED;
    var actual = subject.isPaused() ? PAUSED : NOT_PAUSED;
    another.resume();
    expect(actual).toBe(expected);
  });
  test('should not report paused when the global Spotlight is paused', function () {
    var subject = new _Pause["default"]();
    (0, _Pause.pause)();
    subject.pause();
    var expected = NOT_PAUSED;
    var actual = subject.isPaused() ? PAUSED : NOT_PAUSED;
    (0, _Pause.resume)();
    expect(actual).toBe(expected);
  });
  test('should allow the global Spotlight to resume', function () {
    var subject = new _Pause["default"]();
    subject.pause();
    (0, _Pause.resume)();
    var expected = NOT_PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    expect(actual).toBe(expected);
  });
});
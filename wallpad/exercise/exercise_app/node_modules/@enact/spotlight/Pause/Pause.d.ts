// Type definitions for spotlight/Pause

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

/**
 * Acts as a semaphore for Spotlight pause state ensuring that only the last Pause instance can
resume Spotlight.
 * 
 * _Note_     will always resume spotlight regardless of what last
paused spotlight and can be used as an escape hatch to force resumption.
 */

export declare class Pause {
  constructor
  /**
   * The name of the pause instance
   */(name: string);
  /**
   * Returns  `true`  when Spotlight is paused by this instance
   */
  isPaused(): boolean;
  /**
   * Pauses spotlight if not currently paused
   */
  pause(): void;
  /**
   * Resumes spotlight if this instance was the last to pause spotlight
   */
  resume(): boolean;
}

export default Pause;

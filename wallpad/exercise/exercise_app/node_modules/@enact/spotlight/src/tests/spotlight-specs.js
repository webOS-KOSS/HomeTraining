"use strict";

var _container4 = require("../container");

var _spotlight = _interopRequireDefault(require("../spotlight"));

var _utils = require("./utils");

var _container, _container2, _container3;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var nonSpottable = function nonSpottable() {
  return (0, _utils.node)({
    className: 'other'
  });
};

var scenarios = {
  complexTree: (0, _utils.join)((0, _utils.spottable)({
    'data-spotlight-id': 's1'
  }), (0, _utils.spottable)(nonSpottable()), (0, _utils.container)((_container3 = {}, _defineProperty(_container3, _container4.containerAttribute, 'first-container'), _defineProperty(_container3, "children", (0, _utils.join)((0, _utils.someSpottables)(2), (0, _utils.container)((_container2 = {}, _defineProperty(_container2, _container4.containerAttribute, 'second-container'), _defineProperty(_container2, "children", (0, _utils.join)((0, _utils.spottable)({
    id: 'secondContainerFirstSpottable'
  }), (0, _utils.someSpottables)(2), (0, _utils.container)((_container = {}, _defineProperty(_container, _container4.containerAttribute, 'third-container'), _defineProperty(_container, 'data-spotlight-container-disabled', true), _defineProperty(_container, "children", (0, _utils.join)((0, _utils.someSpottables)(4), (0, _utils.node)({
    id: 'child-of-third'
  }))), _container)))), _container2)))), _container3)))
};

var setupContainers = function setupContainers() {
  _spotlight["default"].setPointerMode(false);

  (0, _container4.configureDefaults)({
    selector: '.spottable'
  });
  (0, _container4.configureContainer)(_container4.rootContainerId);
  (0, _container4.setLastContainer)(_container4.rootContainerId);
};

var teardownContainers = function teardownContainers() {
  // clean up any containers we create for safe tests
  (0, _container4.removeAllContainers)();
};

var mockFocus = function mockFocus(n) {
  var fn = jest.fn().mockImplementation(function () {
    return true;
  });
  Object.defineProperty(n, 'focus', {
    get: function get() {
      return fn;
    }
  });
  return fn;
};

describe('Spotlight', function () {
  describe('#focus', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should focus spottable by id', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var fn = mockFocus(root.querySelector('[data-spotlight-id="s1"]'));

      _spotlight["default"].focus('s1');

      expect(fn).toBeCalled();
    }));
    test('should focus container by id', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container4.configureContainer)('first-container');
      var fn = mockFocus(root.querySelector('[data-spotlight-id="first-container"] > .spottable'));

      _spotlight["default"].focus('first-container');

      expect(fn).toBeCalled();
    }));
    test('should focus spottable by node', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var n = root.querySelector('[data-spotlight-id="s1"]');
      var fn = mockFocus(n);

      _spotlight["default"].focus(n);

      expect(fn).toBeCalled();
    }));
    test('should focus container by node', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container4.configureContainer)('first-container');
      var n = root.querySelector('[data-spotlight-id="first-container"]');
      var fn = mockFocus(n.querySelector('.spottable'));

      _spotlight["default"].focus(n);

      expect(fn).toBeCalled();
    }));
    test('should focus spottable by selector', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var n = root.querySelector('[data-spotlight-id="s1"]');
      var fn = mockFocus(n);

      _spotlight["default"].focus('[data-spotlight-id="s1"]');

      expect(fn).toBeCalled();
    }));
    test('should focus container by selector', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container4.configureContainer)('first-container');
      var n = root.querySelector('[data-spotlight-id="first-container"]');
      var fn = mockFocus(n.querySelector('.spottable'));

      _spotlight["default"].focus('[data-spotlight-id="first-container"]');

      expect(fn).toBeCalled();
    }));
  });
});
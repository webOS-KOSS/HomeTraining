"use strict";

var _container12 = require("../container");

var _target = require("../target");

var _utils = require("./utils");

var _container2, _container3, _container4, _container5, _container6, _container7, _container8, _container9, _container10, _container11;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var nonSpottable = function nonSpottable() {
  return (0, _utils.node)({
    className: 'other'
  });
};

var position = function position(top, left) {
  return "position: absolute; top: ".concat(top, "px; left: ").concat(left, "px; height: 10px; width: 10px;");
};

var positionedSpottable = function positionedSpottable(id, top, left) {
  return (0, _utils.spottable)({
    id: id,
    style: position(top, left)
  });
};

var grid = function grid() {
  var _container;

  return (0, _utils.container)((_container = {}, _defineProperty(_container, _container12.containerAttribute, 'grid'), _defineProperty(_container, "style", 'position: relative; height: 30px; width: 30px;'), _defineProperty(_container, "children", (0, _utils.join)(positionedSpottable('top-left', 0, 0), positionedSpottable('top-center', 0, 10), positionedSpottable('top-right', 0, 20), positionedSpottable('middle-left', 10, 0), positionedSpottable('middle-center', 10, 10), positionedSpottable('middle-right', 10, 20), positionedSpottable('bottom-left', 20, 0), positionedSpottable('bottom-center', 20, 10), positionedSpottable('bottom-right', 20, 20))), _container));
};

var scenarios = {
  complexTree: (0, _utils.join)((0, _utils.spottable)(nonSpottable()), (0, _utils.container)((_container4 = {}, _defineProperty(_container4, _container12.containerAttribute, 'first-container'), _defineProperty(_container4, "children", (0, _utils.join)((0, _utils.someSpottables)(2), (0, _utils.container)((_container3 = {}, _defineProperty(_container3, _container12.containerAttribute, 'second-container'), _defineProperty(_container3, "children", (0, _utils.join)((0, _utils.someSpottables)(3), (0, _utils.container)((_container2 = {}, _defineProperty(_container2, _container12.containerAttribute, 'third-container'), _defineProperty(_container2, 'data-spotlight-container-disabled', true), _defineProperty(_container2, "children", (0, _utils.join)((0, _utils.someSpottables)(4), (0, _utils.node)({
    id: 'child-of-third'
  }))), _container2)))), _container3)))), _container4))),
  nonSpottableInContainer: (0, _utils.join)((0, _utils.spottable)({
    id: 'in-root'
  }), (0, _utils.container)((_container5 = {}, _defineProperty(_container5, _container12.containerAttribute, 'first'), _defineProperty(_container5, "children", (0, _utils.join)(nonSpottable(), (0, _utils.spottable)({
    id: 'in-first'
  }))), _container5)), (0, _utils.container)((_container6 = {}, _defineProperty(_container6, _container12.containerAttribute, 'second'), _defineProperty(_container6, "children", (0, _utils.join)(nonSpottable())), _container6))),
  grid: (0, _utils.join)((0, _utils.spottable)({
    id: 'before-grid',
    style: 'height: 10px'
  }), grid(), (0, _utils.spottable)({
    id: 'after-grid',
    style: 'height: 10px'
  })),
  overlap: (0, _utils.node)({
    style: 'position: relative',
    children: (0, _utils.join)(grid(), (0, _utils.spottable)({
      id: 'over-middle-center',
      style: 'position: absolute; top: 12px; left: 15px; height: 1px; width: 1px;'
    }))
  }),
  overflow: (0, _utils.join)((0, _utils.spottable)({
    id: 'outside-overflow'
  }), (0, _utils.node)({
    // allocate some empty space so that overflow items would be otherwise navigable
    style: 'height: 100px'
  }), (0, _utils.container)((_container7 = {}, _defineProperty(_container7, _container12.containerAttribute, 'overflow-container'), _defineProperty(_container7, "style", 'position: relative; height: 30px; width: 30px;'), _defineProperty(_container7, "children", (0, _utils.join)((0, _utils.spottable)({
    id: 'overflow-above',
    style: 'position: absolute; top: -10px; left: 0px; height: 10px; width: 10px;'
  }), (0, _utils.spottable)({
    id: 'overflow-below',
    style: 'position: absolute; top: 30px; left: 0px; height: 10px; width: 10px;'
  }), (0, _utils.spottable)({
    id: 'overflow-within',
    style: 'position: absolute; top: 0px; left: 0px; height: 10px; width: 10px;'
  }))), _container7))),
  overflowLargeSubContainer: (0, _utils.join)((0, _utils.spottable)({
    id: 'outside-overflow'
  }), (0, _utils.node)({
    // allocate some empty space so that overflow items would be otherwise navigable
    style: 'height: 100px'
  }), (0, _utils.container)((_container9 = {}, _defineProperty(_container9, _container12.containerAttribute, 'overflow-container'), _defineProperty(_container9, "style", 'position: relative; height: 30px; width: 30px;'), _defineProperty(_container9, "children", (0, _utils.join)((0, _utils.container)((_container8 = {}, _defineProperty(_container8, _container12.containerAttribute, 'inside'), _defineProperty(_container8, "style", 'position: absolute; top: -10px; left: 0px; height: 50px; width: 10px;'), _defineProperty(_container8, "children", (0, _utils.join)((0, _utils.node)({
    // allocate space to push following spottable into view
    style: 'height: 10px'
  }), (0, _utils.spottable)({
    id: 'in-large-container'
  }))), _container8)), (0, _utils.spottable)({
    id: 'below-large-container',
    style: 'position: absolute; top: 40px; left: 0px; height: 10px; width: 10px;'
  }))), _container9))),
  emptyContainer: (0, _utils.join)(positionedSpottable('above', 0, 10), (0, _utils.container)((_container10 = {}, _defineProperty(_container10, _container12.containerAttribute, 'empty-container'), _defineProperty(_container10, "style", position(10, 10)), _container10)), positionedSpottable('below', 30, 0)),
  emptyContainerOverlap: (0, _utils.join)(positionedSpottable('above', 5, 10), (0, _utils.container)((_container11 = {}, _defineProperty(_container11, _container12.containerAttribute, 'empty-container'), _defineProperty(_container11, "style", position(10, 10)), _container11)), positionedSpottable('below', 30, 0))
};

var safeTarget = function safeTarget(n, fn) {
  return n ? fn(n) : 'NOT FOUND';
};

var setupContainers = function setupContainers() {
  (0, _container12.configureDefaults)({
    selector: '.spottable'
  });
  (0, _container12.configureContainer)(_container12.rootContainerId);
};

var teardownContainers = function teardownContainers() {
  // clean up any containers we create for safe tests
  (0, _container12.getAllContainerIds)().forEach(_container12.removeContainer);
  (0, _container12.setDefaultContainer)();
}; // NOTE: Skipping most tests because JSDOM does not support measurments


describe('target', function () {
  beforeEach(setupContainers);
  afterEach(teardownContainers);
  describe.skip('#getNavigableTarget', function () {
    test('should find spottable parent', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var other = root.querySelector('.other');
      var expected = other.parentNode;
      var actual = (0, _target.getNavigableTarget)(other);
      expect(actual).toBe(expected);
    }));
    test('should skip containers', (0, _utils.testScenario)(scenarios.nonSpottableInContainer, function (root) {
      (0, _container12.configureContainer)('first');
      var other = root.querySelector('.other');
      var expected = null;
      var actual = (0, _target.getNavigableTarget)(other);
      expect(actual).toBe(expected);
    }));
    test('should respect container-specific selector', (0, _utils.testScenario)(scenarios.nonSpottableInContainer, function (root) {
      // make '.other' a valid spottable element
      (0, _container12.configureContainer)('first', {
        selector: '.other'
      });
      var other = root.querySelector('.other');
      var expected = other;
      var actual = (0, _target.getNavigableTarget)(other);
      expect(actual).toBe(expected);
    }));
    test('should respect disabled containers', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container12.configureContainer)('third-container');
      var other = root.querySelector("[".concat(_container12.containerAttribute, "='third-container'] .spottable"));
      var expected = null;
      var actual = (0, _target.getNavigableTarget)(other);
      expect(actual).toBe(expected);
    }));
  });
  describe('#getTargetByContainer', function () {
    test('should find spottable element within provided container', (0, _utils.testScenario)(scenarios.complexTree, function () {
      (0, _container12.configureContainer)('first-container');
      var expected = 'spottable';
      var actual = safeTarget((0, _target.getTargetByContainer)('first-container'), function (t) {
        return t.className;
      });
      expect(actual).toBe(expected);
    }));
    test('should return null when container does not contain any spottable elements', (0, _utils.testScenario)(scenarios.nonSpottableInContainer, function () {
      (0, _container12.configureContainer)('first');
      (0, _container12.configureContainer)('second');
      var expected = null;
      var actual = (0, _target.getTargetByContainer)('second');
      expect(actual).toBe(expected);
    }));
    test('should find the first spottable in the root when no container specified', (0, _utils.testScenario)(scenarios.nonSpottableInContainer, function () {
      (0, _container12.configureContainer)('first');
      (0, _container12.configureContainer)('second');
      var expected = 'in-root';
      var actual = safeTarget((0, _target.getTargetByContainer)(), function (t) {
        return t.id;
      });
      expect(actual).toBe(expected);
    }));
    test('should find the first spottable in the default container when set and no container specified', (0, _utils.testScenario)(scenarios.nonSpottableInContainer, function () {
      (0, _container12.configureContainer)('first');
      (0, _container12.configureContainer)('second');
      (0, _container12.setDefaultContainer)('first');
      var expected = 'spottable';
      var actual = safeTarget((0, _target.getTargetByContainer)(), function (t) {
        return t.className;
      });
      expect(actual).toBe(expected);
    }));
    test('should return `default-element` when last focused is unset', (0, _utils.testScenario)(scenarios.grid, function () {
      (0, _container12.configureContainer)('grid', {
        enterTo: 'last-focused',
        defaultElement: '#middle-center'
      });
      var expected = 'middle-center';
      var actual = safeTarget((0, _target.getTargetByContainer)('grid'), function (t) {
        return t.id;
      });
      expect(actual).toBe(expected);
    }));
    test('should return `default-element` when `last-focused` is requested but is unset', (0, _utils.testScenario)(scenarios.grid, function () {
      (0, _container12.configureContainer)('grid', {
        defaultElement: '#middle-center'
      });
      var expected = 'middle-center';
      var actual = safeTarget((0, _target.getTargetByContainer)('grid', 'last-focused'), function (t) {
        return t.id;
      });
      expect(actual).toBe(expected);
    }));
    test('should return default element when configured for `last-focused` but requested `default-element`', (0, _utils.testScenario)(scenarios.grid, function () {
      (0, _container12.configureContainer)('grid', {
        enterTo: 'last-focused',
        lastFocusedElement: document.querySelector('#top-left'),
        defaultElement: '#middle-center'
      });
      var expected = 'middle-center';
      var actual = safeTarget((0, _target.getTargetByContainer)('grid', 'default-element'), function (t) {
        return t.id;
      });
      expect(actual).toBe(expected);
    }));
    test('should return last focused element when configured for `default-element` but requested `last-focused`', (0, _utils.testScenario)(scenarios.grid, function () {
      (0, _container12.configureContainer)('grid', {
        enterTo: 'default-element',
        lastFocusedElement: document.querySelector('#top-left'),
        defaultElement: '#middle-center'
      });
      var expected = 'top-left';
      var actual = safeTarget((0, _target.getTargetByContainer)('grid', 'last-focused'), function (t) {
        return t.id;
      });
      expect(actual).toBe(expected);
    }));
  });
  describe('#getTargetBySelector', function () {
    test('should find spottable element within container when "@" prefix used', (0, _utils.testScenario)(scenarios.nonSpottableInContainer, function () {
      (0, _container12.configureContainer)('first');
      var expected = 'spottable';
      var actual = safeTarget((0, _target.getTargetBySelector)('@first'), function (t) {
        return t.className;
      });
      expect(actual).toBe(expected);
    }));
    test('should find spottable element within container when "#" prefix used', (0, _utils.testScenario)(scenarios.nonSpottableInContainer, function () {
      (0, _container12.configureContainer)('first');
      var expected = 'in-first';
      var actual = safeTarget((0, _target.getTargetBySelector)('#in-first'), function (t) {
        return t.id;
      });
      expect(actual).toBe(expected);
    }));
    test('should return null when the node exists but is not navigable within its container', (0, _utils.testScenario)(scenarios.nonSpottableInContainer, function () {
      (0, _container12.configureContainer)('first', {
        navigableFilter: function navigableFilter() {
          return false;
        }
      });
      var expected = null;
      var actual = (0, _target.getTargetBySelector)('#in-first');
      expect(actual).toBe(expected);
    }));
    test('should return null when the node exists but does not match the container\'s selector', (0, _utils.testScenario)(scenarios.nonSpottableInContainer, function () {
      (0, _container12.configureContainer)('first');
      var expected = null;
      var actual = (0, _target.getTargetBySelector)("[".concat(_container12.containerAttribute, "='first'] .other"));
      expect(actual).toBe(expected);
    }));
    test('should return null for an empty selectors', (0, _utils.testScenario)(scenarios.nonSpottableInContainer, function () {
      var expected = null; // eslint-disable-next-line no-undefined

      expect((0, _target.getTargetBySelector)(undefined)).toBe(expected);
      expect((0, _target.getTargetBySelector)(null)).toBe(expected);
      expect((0, _target.getTargetBySelector)('')).toBe(expected);
    }));
  });
  describe.skip('#getTargetByDirectionFromElement', function () {
    test('should find target within container by direction', (0, _utils.testScenario)(scenarios.grid, function (root) {
      (0, _container12.configureContainer)('grid');
      var center = root.querySelector('#middle-center');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('up', center), function (t) {
        return t.id;
      })).toBe('top-center');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('down', center), function (t) {
        return t.id;
      })).toBe('bottom-center');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('left', center), function (t) {
        return t.id;
      })).toBe('middle-left');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('right', center), function (t) {
        return t.id;
      })).toBe('middle-right');
    }));
    test('should find target within container from floating element', (0, _utils.testScenario)(scenarios.overlap, function (root) {
      (0, _container12.configureContainer)('grid', {
        enterTo: 'default-element',
        defaultElement: '#bottom-right'
      });
      var overlap = root.querySelector('#over-middle-center');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('down', overlap), function (t) {
        return t.id;
      })).toBe('middle-center');
    }));
    test('should ignore targets outside the bounds of an overflow container', (0, _utils.testScenario)(scenarios.overflow, function (root) {
      (0, _container12.configureContainer)('overflow-container', {
        overflow: true
      });
      var element = root.querySelector('#outside-overflow');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('down', element), function (t) {
        return t.id;
      })).toBe('overflow-within');
    }));
    test('should find target within container larger than overflow container', (0, _utils.testScenario)(scenarios.overflowLargeSubContainer, function (root) {
      (0, _container12.configureContainer)('overflow-container', {
        overflow: true
      });
      (0, _container12.configureContainer)('inside', {
        enterTo: null
      });
      var element = root.querySelector('#outside-overflow');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('down', element), function (t) {
        return t.id;
      })).toBe('in-large-container');
    }));
    test('should find target out of bounds of overflow container from within container', (0, _utils.testScenario)(scenarios.overflow, function (root) {
      (0, _container12.configureContainer)('overflow-container', {
        overflow: true
      });
      var element = root.querySelector('#overflow-within');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('down', element), function (t) {
        return t.id;
      })).toBe('overflow-below');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('up', element), function (t) {
        return t.id;
      })).toBe('overflow-above');
    }));
    test('should stop at restrict="self-only" boundaries', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container12.configureContainer)('first-container', {
        restrict: 'none'
      });
      (0, _container12.configureContainer)('second-container', {
        restrict: 'self-only'
      });
      var element = root.querySelector("[".concat(_container12.containerAttribute, "=\"second-container\"] .spottable"));
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('up', element), function (t) {
        return t.id;
      })).toBe('NOT FOUND');
    }));
    test('should respect enterTo="default-element" containers', (0, _utils.testScenario)(scenarios.grid, function (root) {
      (0, _container12.configureContainer)('grid', {
        restrict: 'none',
        enterTo: 'default-element',
        defaultElement: '#bottom-right'
      });
      var element = root.querySelector('#before-grid');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('down', element), function (t) {
        return t.id;
      })).toBe('bottom-right');
    }));
    test('should respect enterTo="last-focused" containers', (0, _utils.testScenario)(scenarios.grid, function (root) {
      (0, _container12.configureContainer)('grid', {
        restrict: 'none',
        enterTo: 'last-focused',
        lastFocusedKey: {
          container: false,
          element: true,
          key: 8
        }
      });
      var element = root.querySelector('#before-grid');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('down', element), function (t) {
        return t.id;
      })).toBe('bottom-right');
    }));
    test('should follow the leaveFor config when no target is found within the container in the given direction', (0, _utils.testScenario)(scenarios.grid, function (root) {
      (0, _container12.configureContainer)('grid', {
        restrict: 'none',
        leaveFor: {
          up: '#after-grid'
        }
      });
      var element = root.querySelector('#top-center');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('up', element), function (t) {
        return t.id;
      })).toBe('after-grid');
    }));
    test('should not follow the leaveFor config when a target is found within the container in the given direction', (0, _utils.testScenario)(scenarios.grid, function (root) {
      (0, _container12.configureContainer)('grid', {
        restrict: 'none',
        leaveFor: {
          up: '#after-grid'
        }
      });
      var element = root.querySelector('#middle-center');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('up', element), function (t) {
        return t.id;
      })).toBe('top-center');
    }));
    test('should not follow the leaveFor config when the selector does not match an element', (0, _utils.testScenario)(scenarios.grid, function (root) {
      (0, _container12.configureContainer)('grid', {
        restrict: 'none',
        leaveFor: {
          up: '#does-not-exist'
        }
      });
      var element = root.querySelector('#top-center');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('up', element), function (t) {
        return t.id;
      })).toBe('before-grid');
    }));
    test('should ignore empty containers', (0, _utils.testScenario)(scenarios.emptyContainer, function (root) {
      (0, _container12.configureContainer)('empty-container');
      var element = root.querySelector('#above');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('down', element), function (t) {
        return t.id;
      })).toBe('below');
    }));
    test('should ignore overlapping empty containers', (0, _utils.testScenario)(scenarios.emptyContainerOverlap, function (root) {
      (0, _container12.configureContainer)('empty-container');
      var element = root.querySelector('#above');
      expect(safeTarget((0, _target.getTargetByDirectionFromElement)('down', element), function (t) {
        return t.id;
      })).toBe('below');
    }));
  });
  describe.skip('#getTargetByDirectionFromPosition', function () {
    test('should find target within container', (0, _utils.testScenario)(scenarios.grid, function (root) {
      (0, _container12.configureContainer)('grid');
      var rect = root.querySelector('#middle-center').getBoundingClientRect();
      var center = {
        x: rect.left + rect.width / 2,
        y: rect.top + rect.height / 2
      };
      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('up', center, 'grid'), function (t) {
        return t.id;
      })).toBe('top-center');
      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('down', center, 'grid'), function (t) {
        return t.id;
      })).toBe('bottom-center');
      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('left', center, 'grid'), function (t) {
        return t.id;
      })).toBe('middle-left');
      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('right', center, 'grid'), function (t) {
        return t.id;
      })).toBe('middle-right');
    }));
    test('should not find a target when at bounds of container with restrict="self-only"', (0, _utils.testScenario)(scenarios.grid, function (root) {
      (0, _container12.configureContainer)('grid', {
        restrict: 'self-only'
      });
      var rect = root.querySelector('#top-center').getBoundingClientRect();
      var topCenterOfGrid = {
        x: rect.left + rect.width / 2,
        y: rect.top
      };
      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('up', topCenterOfGrid, 'grid'), function (t) {
        return t.id;
      })).toBe('NOT FOUND');
    }));
    test('should not find a target outside of container when restrict is not set', (0, _utils.testScenario)(scenarios.grid, function (root) {
      (0, _container12.configureContainer)('grid', {
        restrict: 'none'
      });
      var rect = root.querySelector('#top-center').getBoundingClientRect();
      var topCenterOfGrid = {
        x: rect.left + rect.width / 2,
        y: rect.top
      };
      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('up', topCenterOfGrid, 'grid'), function (t) {
        return t.id;
      })).toBe('before-grid');
    }));
    test('should cascade into unrestricted subcontainers', (0, _utils.testScenario)(scenarios.grid, function (root) {
      (0, _container12.configureContainer)('grid', {
        restrict: 'none'
      });
      var rect = root.querySelector('#top-center').getBoundingClientRect();
      var aboveCenterOfGrid = {
        x: rect.left + rect.width / 2,
        y: rect.top - 1
      };
      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('down', aboveCenterOfGrid, _container12.rootContainerId), function (t) {
        return t.id;
      })).toBe('top-center');
    }));
    test('should ignore enterTo config of restricted subcontainers', (0, _utils.testScenario)(scenarios.grid, function (root) {
      (0, _container12.configureContainer)('grid', {
        restrict: 'none',
        enterTo: 'default-element',
        defaultElement: '#bottom-right'
      });
      var rect = root.querySelector('#top-center').getBoundingClientRect();
      var aboveCenterOfGrid = {
        x: rect.left + rect.width / 2,
        y: rect.top - 1
      };
      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('down', aboveCenterOfGrid, _container12.rootContainerId), function (t) {
        return t.id;
      })).toBe('top-center');
    }));
    test('should find target within container from floating element', (0, _utils.testScenario)(scenarios.overlap, function (root) {
      (0, _container12.configureContainer)('grid', {
        enterTo: 'default-element',
        defaultElement: '#bottom-right'
      });
      var overlap = root.querySelector('#over-middle-center');

      var _overlap$getBoundingC = overlap.getBoundingClientRect(),
          x = _overlap$getBoundingC.left,
          y = _overlap$getBoundingC.top;

      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('down', {
        x: x,
        y: y
      }, _container12.rootContainerId), function (t) {
        return t.id;
      })).toBe('middle-center');
    }));
    test('should ignore targets outside the bounds of an overflow container', (0, _utils.testScenario)(scenarios.overflow, function (root) {
      (0, _container12.configureContainer)('overflow-container', {
        overflow: true
      });
      var element = root.querySelector('#outside-overflow');

      var _element$getBoundingC = element.getBoundingClientRect(),
          x = _element$getBoundingC.left,
          y = _element$getBoundingC.top;

      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('down', {
        x: x,
        y: y
      }, _container12.rootContainerId), function (t) {
        return t.id;
      })).toBe('overflow-within');
    }));
    test('should find target within container larger than overflow container', (0, _utils.testScenario)(scenarios.overflowLargeSubContainer, function (root) {
      (0, _container12.configureContainer)('overflow-container', {
        overflow: true
      });
      (0, _container12.configureContainer)('inside', {
        enterTo: null
      });
      var element = root.querySelector('#outside-overflow');

      var _element$getBoundingC2 = element.getBoundingClientRect(),
          x = _element$getBoundingC2.left,
          y = _element$getBoundingC2.top;

      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('down', {
        x: x,
        y: y
      }, _container12.rootContainerId), function (t) {
        return t.id;
      })).toBe('in-large-container');
    }));
    test('should find target out of bounds of overflow container from within container', (0, _utils.testScenario)(scenarios.overflow, function (root) {
      (0, _container12.configureContainer)('overflow-container', {
        overflow: true
      });
      var element = root.querySelector('#overflow-within');

      var _element$getBoundingC3 = element.getBoundingClientRect(),
          left = _element$getBoundingC3.left,
          width = _element$getBoundingC3.width,
          top = _element$getBoundingC3.top,
          height = _element$getBoundingC3.height;

      var x = left + width / 2;
      var y = top + height / 2;
      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('down', {
        x: x,
        y: y + 1
      }, _container12.rootContainerId), function (t) {
        return t.id;
      })).toBe('overflow-below');
      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('up', {
        x: x,
        y: y - 1
      }, _container12.rootContainerId), function (t) {
        return t.id;
      })).toBe('overflow-above');
    }));
    test('should ignore empty containers', (0, _utils.testScenario)(scenarios.emptyContainer, function (root) {
      (0, _container12.configureContainer)('empty-container');
      var element = root.querySelector('#above');

      var _element$getBoundingC4 = element.getBoundingClientRect(),
          left = _element$getBoundingC4.left,
          width = _element$getBoundingC4.width,
          top = _element$getBoundingC4.top,
          height = _element$getBoundingC4.height;

      var x = left + width / 2;
      var y = top + height - 1; // just inside the bottom of 'above'

      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('down', {
        x: x,
        y: y
      }, _container12.rootContainerId), function (t) {
        return t.id;
      })).toBe('below');
    }));
    test('should ignore overlapping empty containers', (0, _utils.testScenario)(scenarios.emptyContainer, function (root) {
      (0, _container12.configureContainer)('empty-container');
      var element = root.querySelector('#above');

      var _element$getBoundingC5 = element.getBoundingClientRect(),
          left = _element$getBoundingC5.left,
          width = _element$getBoundingC5.width,
          top = _element$getBoundingC5.top,
          height = _element$getBoundingC5.height;

      var x = left + width / 2;
      var y = top + height + 1; // just inside the empty container

      expect(safeTarget((0, _target.getTargetByDirectionFromPosition)('down', {
        x: x,
        y: y
      }, _container12.rootContainerId), function (t) {
        return t.id;
      })).toBe('below');
    }));
  });
});
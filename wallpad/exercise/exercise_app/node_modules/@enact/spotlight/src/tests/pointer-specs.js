"use strict";

var _keymap = require("@enact/core/keymap");

var _pointer = require("../pointer");

var reset = function reset() {
  (0, _pointer.updatePointerPosition)(null, null);
  (0, _pointer.setPointerMode)(true);
};

describe('pointer', function () {
  afterEach(reset);
  describe('#getLastPointerPosition', function () {
    test('should return an object with x and y keys', function () {
      var expected = ['x', 'y'];
      var actual = Object.keys((0, _pointer.getLastPointerPosition)());
      expect(actual).toEqual(expected);
    });
  });
  describe('#notifyKeyDown', function () {
    // notifyKeyDown() will start a job which will set pointer mode for `pointerHide` key
    // events. If adding async tests, be sure to pass a callback to notifyKeyDown() to be
    // notified when the job completes before continuing.
    var keyMap = {
      pointerHide: 999,
      pointerShow: 888
    };
    beforeAll(function () {
      return (0, _keymap.addAll)(keyMap);
    });
    afterAll(function () {
      return (0, _keymap.removeAll)(keyMap);
    });
    beforeEach(function () {
      // establish a consistent pointer mode state for each test
      (0, _pointer.setPointerMode)(false);
    });
    test('should return true for pointer hide key events', function () {
      var expected = true;
      var actual = (0, _pointer.notifyKeyDown)(keyMap.pointerHide);
      expect(actual).toBe(expected);
    });
    test('should return true for pointer show key events', function () {
      var expected = true;
      var actual = (0, _pointer.notifyKeyDown)(keyMap.pointerShow);
      expect(actual).toBe(expected);
    });
    test('should enable pointer mode for pointer show key events', function () {
      (0, _pointer.notifyKeyDown)(keyMap.pointerShow);
      var expected = true;
      var actual = (0, _pointer.getPointerMode)();
      expect(actual).toBe(expected);
    });
    test('should disable pointer mode for pointer show key events', function (done) {
      (0, _pointer.setPointerMode)(true);
      (0, _pointer.notifyKeyDown)(keyMap.pointerHide, function () {
        var expected = false;
        var actual = (0, _pointer.getPointerMode)();
        expect(actual).toBe(expected);
        done();
      });
    });
    test('should disable pointer mode for non-pointer key events', function () {
      (0, _pointer.setPointerMode)(true);
      (0, _pointer.notifyKeyDown)(12);
      var expected = false;
      var actual = (0, _pointer.getPointerMode)();
      expect(actual).toBe(expected);
    });
  });
  describe('#notifyPointerMove', function () {
    test('should update the pointer position if x changes', function () {
      var x = 20;
      (0, _pointer.notifyPointerMove)(null, null, x, null);
      var expected = 20;
      var actual = (0, _pointer.getLastPointerPosition)().x;
      expect(actual).toBe(expected);
    });
    test('should update the pointer position if y changes', function () {
      var y = 20;
      (0, _pointer.notifyPointerMove)(null, null, null, y);
      var expected = 20;
      var actual = (0, _pointer.getLastPointerPosition)().y;
      expect(actual).toBe(expected);
    });
    test('should enable pointer mode if the pointer positionchanges', function () {
      (0, _pointer.setPointerMode)(false);
      (0, _pointer.notifyPointerMove)(null, null, 5, 5);
      var expected = true;
      var actual = (0, _pointer.getPointerMode)();
      expect(actual).toBe(expected);
    });
    test('should return false if the pointer has not moved', function () {
      (0, _pointer.notifyPointerMove)(null, null, 5, 5);
      var expected = false;
      var actual = (0, _pointer.notifyPointerMove)(null, null, 5, 5);
      expect(actual).toBe(expected);
    });
    test('should return true if pointer mode was disabled', function () {
      // change into pointer mode indicates a potential for change of focus
      (0, _pointer.setPointerMode)(false);
      var expected = true;
      var actual = (0, _pointer.notifyPointerMove)(null, null, 5, 5);
      expect(actual).toBe(expected);
    });
    test('should return true if the pointer has moved and current is falsy', function () {
      var expected = true;
      var actual = (0, _pointer.notifyPointerMove)(null, null, 5, 5);
      expect(actual).toBe(expected);
    });
    test('should return false if the pointer has moved and target is within current', function () {
      var current = document.createElement('div');
      var target = document.createElement('div');
      current.appendChild(target);
      (0, _pointer.notifyPointerMove)(null, current, 5, 5);
      var expected = false;
      var actual = (0, _pointer.notifyPointerMove)(current, target, 10, 10);
      expect(actual).toBe(expected);
    });
    test('should return true if the pointer has moved and target is not within current', function () {
      var current = document.createElement('div');
      var target = document.createElement('div');
      (0, _pointer.notifyPointerMove)(null, current, 5, 5);
      var expected = true;
      var actual = (0, _pointer.notifyPointerMove)(current, target, 10, 10);
      expect(actual).toBe(expected);
    });
  });
});
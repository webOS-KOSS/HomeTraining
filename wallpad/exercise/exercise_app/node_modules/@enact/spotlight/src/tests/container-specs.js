"use strict";

var _container17 = require("../container");

var _utils = require("./utils");

var _node, _container, _container2, _container3, _container4, _container5, _container6, _container7, _container8, _container9, _container10, _container11, _container12, _container13, _container15, _container16;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var nonSpottable = function nonSpottable() {
  return (0, _utils.node)({
    className: 'other'
  });
};

var scenarios = {
  onlySpottables: (0, _utils.someSpottables)(5),
  onlyContainers: (0, _utils.someContainers)(5),
  spottableAndContainers: (0, _utils.someSpottablesAndContainers)(5),
  nonSpottableSiblings: (0, _utils.join)((0, _utils.someSpottables)(5), (0, _utils.someNodes)(nonSpottable, 5)),
  nestedContainers: (0, _utils.container)((0, _utils.container)((0, _utils.container)())),
  disabledContainers: (0, _utils.join)((0, _utils.someSpottables)(5), (0, _utils.someContainers)(5), (0, _utils.node)((_node = {}, _defineProperty(_node, _container17.containerAttribute, 'disabled-container'), _defineProperty(_node, 'data-spotlight-container-disabled', true), _node))),
  nestedContainersWithSpottables: (0, _utils.join)((0, _utils.someSpottables)(5), (0, _utils.container)({
    children: (0, _utils.someSpottables)(5)
  })),
  siblingContainers: (0, _utils.join)((0, _utils.container)((_container = {}, _defineProperty(_container, _container17.containerAttribute, 'first'), _defineProperty(_container, "children", (0, _utils.someSpottables)(5)), _container)), (0, _utils.container)((_container2 = {}, _defineProperty(_container2, _container17.containerAttribute, 'second'), _defineProperty(_container2, "children", (0, _utils.someSpottables)(5)), _container2))),
  mixedOrder: (0, _utils.join)((0, _utils.container)((_container3 = {}, _defineProperty(_container3, _container17.containerAttribute, 'first'), _defineProperty(_container3, "name", 'c1'), _container3)), (0, _utils.spottable)({
    name: 's1'
  }), (0, _utils.container)((_container4 = {}, _defineProperty(_container4, _container17.containerAttribute, 'second'), _defineProperty(_container4, "name", 'c2'), _container4)), (0, _utils.spottable)({
    name: 's2'
  })),
  complexTree: (0, _utils.join)((0, _utils.spottable)(nonSpottable()), (0, _utils.container)((_container7 = {}, _defineProperty(_container7, _container17.containerAttribute, 'first-container'), _defineProperty(_container7, "children", (0, _utils.join)((0, _utils.someSpottables)(2), (0, _utils.container)((_container6 = {}, _defineProperty(_container6, _container17.containerAttribute, 'second-container'), _defineProperty(_container6, "children", (0, _utils.join)((0, _utils.spottable)({
    id: 'secondContainerFirstSpottable'
  }), (0, _utils.someSpottables)(2), (0, _utils.container)((_container5 = {}, _defineProperty(_container5, _container17.containerAttribute, 'third-container'), _defineProperty(_container5, 'data-spotlight-container-disabled', true), _defineProperty(_container5, "children", (0, _utils.join)((0, _utils.someSpottables)(4), (0, _utils.node)({
    id: 'child-of-third'
  }))), _container5)))), _container6)))), _container7))),
  spottablesInDisabledContainer: (0, _utils.container)((_container8 = {}, _defineProperty(_container8, _container17.containerAttribute, 'container'), _defineProperty(_container8, 'data-spotlight-container-disabled', true), _defineProperty(_container8, "children", (0, _utils.someSpottables)(5)), _container8)),
  spottablesInNestedDisabledContainer: (0, _utils.container)((_container10 = {}, _defineProperty(_container10, _container17.containerAttribute, 'container'), _defineProperty(_container10, 'data-spotlight-container-disabled', true), _defineProperty(_container10, "children", (0, _utils.container)((_container9 = {}, _defineProperty(_container9, _container17.containerAttribute, 'child'), _defineProperty(_container9, "children", (0, _utils.someSpottables)(5)), _container9))), _container10)),
  containerWithDefaultAndLastFocused: (0, _utils.container)((_container11 = {}, _defineProperty(_container11, _container17.containerAttribute, 'container'), _defineProperty(_container11, "children", (0, _utils.join)((0, _utils.spottable)({
    id: 'firstSpottable'
  }), (0, _utils.someSpottables)(5), (0, _utils.node)({
    id: 'spottableDefault',
    className: 'spottable spottable-default'
  }), (0, _utils.spottable)({
    id: 'lastFocused'
  }))), _container11)),
  nestedContainersWithDefaultAndLastFocused: (0, _utils.container)((_container13 = {}, _defineProperty(_container13, _container17.containerAttribute, 'container'), _defineProperty(_container13, "children", (0, _utils.join)((0, _utils.spottable)({
    id: 'firstSpottable'
  }), (0, _utils.someSpottables)(5), (0, _utils.container)((_container12 = {}, _defineProperty(_container12, _container17.containerAttribute, 'child'), _defineProperty(_container12, "id", 'spottableDefault'), _defineProperty(_container12, "className", 'spottable-default'), _defineProperty(_container12, "children", (0, _utils.join)((0, _utils.spottable)({
    id: 'firstChildSpottable'
  }), (0, _utils.someSpottables)(5), (0, _utils.spottable)({
    id: 'lastChildFocused'
  }))), _container12)), (0, _utils.spottable)({
    id: 'lastFocused'
  }))), _container13)),
  emptySubcontainer: (0, _utils.container)((_container15 = {}, _defineProperty(_container15, _container17.containerAttribute, 'container'), _defineProperty(_container15, "children", (0, _utils.join)((0, _utils.container)(_defineProperty({}, _container17.containerAttribute, 'subcontainer')), (0, _utils.spottable)({
    id: 'afterSubcontainer'
  }))), _container15)),
  owned: (0, _utils.join)((0, _utils.spottable)({
    id: 's1'
  }), (0, _utils.node)({
    id: 'n1'
  }), (0, _utils.container)((_container16 = {}, _defineProperty(_container16, _container17.containerAttribute, 'container'), _defineProperty(_container16, 'aria-owns', 's1 n1'), _defineProperty(_container16, "children", (0, _utils.spottable)({
    id: 's2'
  })), _container16)))
};

var setupContainers = function setupContainers() {
  (0, _container17.configureDefaults)({
    selector: '.spottable'
  });
  (0, _container17.configureContainer)(_container17.rootContainerId);
  (0, _container17.setLastContainer)(_container17.rootContainerId);
};

var teardownContainers = function teardownContainers() {
  // clean up any containers we create for safe tests
  (0, _container17.removeAllContainers)();
};

describe('container', function () {
  describe('#getSpottableDescendants', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should find spottables', (0, _utils.testScenario)(scenarios.onlySpottables, function () {
      var expected = 5;
      var actual = (0, _container17.getSpottableDescendants)(_container17.rootContainerId).length;
      expect(actual).toBe(expected);
    }));
    test('should find containers', (0, _utils.testScenario)(scenarios.onlyContainers, function () {
      var expected = 5;
      var actual = (0, _container17.getSpottableDescendants)(_container17.rootContainerId).length;
      expect(actual).toBe(expected);
    }));
    test('should find spottables and containers', (0, _utils.testScenario)(scenarios.spottableAndContainers, function () {
      var expected = 10;
      var actual = (0, _container17.getSpottableDescendants)(_container17.rootContainerId).length;
      expect(actual).toBe(expected);
    }));
    test('should only find spottables with non-spottable siblings', (0, _utils.testScenario)(scenarios.nonSpottableSiblings, function () {
      var expected = 5;
      var actual = (0, _container17.getSpottableDescendants)(_container17.rootContainerId).length;
      expect(actual).toBe(expected);
    }));
    test('should only find top-level containers', (0, _utils.testScenario)(scenarios.nestedContainers, function () {
      var expected = 1;
      var actual = (0, _container17.getSpottableDescendants)(_container17.rootContainerId).length;
      expect(actual).toBe(expected);
    }));
    test('should only find top-level containers and spottables', (0, _utils.testScenario)(scenarios.nestedContainersWithSpottables, function () {
      var expected = 6;
      var actual = (0, _container17.getSpottableDescendants)(_container17.rootContainerId).length;
      expect(actual).toBe(expected);
    }));
    test('should not find spottables in sibling containers', (0, _utils.testScenario)(scenarios.siblingContainers, function () {
      (0, _container17.configureContainer)('first');
      var expected = 5;
      var actual = (0, _container17.getSpottableDescendants)('first').length;
      expect(actual).toBe(expected);
    }));
    test('should not find spottables in descendant containers', (0, _utils.testScenario)(scenarios.complexTree, function () {
      (0, _container17.configureContainer)('first-container');
      var expected = 3;
      var actual = (0, _container17.getSpottableDescendants)('first-container').length;
      expect(actual).toBe(expected);
    }));
    test('should not find containers that are disabled', (0, _utils.testScenario)(scenarios.complexTree, function () {
      (0, _container17.configureContainer)('first-container');
      (0, _container17.configureContainer)('second-container');
      var expected = 3;
      var actual = (0, _container17.getSpottableDescendants)('second-container').length;
      expect(actual).toBe(expected);
    }));
    test('should not any spottables within a disabled container', (0, _utils.testScenario)(scenarios.spottablesInDisabledContainer, function () {
      (0, _container17.configureContainer)('container');
      var expected = 0;
      var actual = (0, _container17.getSpottableDescendants)('container').length;
      expect(actual).toBe(expected);
    }));
    test('should not any spottables within a disabled ancestor container', (0, _utils.testScenario)(scenarios.spottablesInNestedDisabledContainer, function () {
      (0, _container17.configureContainer)('container');
      (0, _container17.configureContainer)('child');
      var expected = 0;
      var actual = (0, _container17.getSpottableDescendants)('child').length;
      expect(actual).toBe(expected);
    }));
    test('should return spottables and containers in source order', (0, _utils.testScenario)(scenarios.mixedOrder, function () {
      var expected = ['c1', 's1', 'c2', 's2'];
      var actual = (0, _container17.getSpottableDescendants)(_container17.rootContainerId).map(function (n) {
        return n.getAttribute('name');
      });
      expect(actual).toEqual(expected);
    }));
    test('should include owned nodes', (0, _utils.testScenario)(scenarios.owned, function () {
      (0, _container17.configureContainer)('container'); // owned nodes follow internal nodes

      var expected = ['s2', 's1'];
      var actual = (0, _container17.getSpottableDescendants)('container').map(function (n) {
        return n.getAttribute('id');
      });
      expect(actual).toEqual(expected);
    }));
  });
  describe('#getContainersForNode', function () {
    test('should return the rootContainerId when no other containers exist', (0, _utils.testScenario)(scenarios.onlySpottables, function (root) {
      var expected = [_container17.rootContainerId];
      var actual = (0, _container17.getContainersForNode)(root.lastChild);
      expect(actual).toEqual(expected);
    }));
    test('should return all ancestor container ids', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var childOfThird = root.querySelector('#child-of-third');
      var expected = [_container17.rootContainerId, 'first-container', 'second-container', 'third-container'];
      var actual = (0, _container17.getContainersForNode)(childOfThird);
      expect(actual).toEqual(expected);
    }));
    test('should return immediate container id as last in list', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var childOfThird = root.querySelector('#child-of-third');
      var expected = 'third-container';
      var actual = (0, _container17.getContainersForNode)(childOfThird).pop();
      expect(actual).toEqual(expected);
    }));
  });
  describe('#isContainer', function () {
    beforeEach(function () {
      (0, _container17.configureContainer)('test-container');
    });
    afterEach(function () {
      (0, _container17.removeContainer)('test-container');
    });
    test('should return true for nodes that have the container attribute', function () {
      var div = document.createElement('div');
      div.setAttribute('data-spotlight-container', 'my-container');
      var expected = true;
      var actual = (0, _container17.isContainer)(div);
      expect(actual).toBe(expected);
    });
    test('should return false for nodes that do not have the container attribute', function () {
      var div = document.createElement('div');
      var expected = false;
      var actual = (0, _container17.isContainer)(div);
      expect(actual).toBe(expected);
    });
    test('should return true for a configured container id', function () {
      var expected = true;
      var actual = (0, _container17.isContainer)('test-container');
      expect(actual).toBe(expected);
    });
    test('should return false for a unconfigured container id', function () {
      var expected = false;
      var actual = (0, _container17.isContainer)('unconfigured-container');
      expect(actual).toBe(expected);
    });
  });
  describe('#getContainerFocusTarget', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should return the last focused element when enterTo is "last-focused"', (0, _utils.testScenario)(scenarios.containerWithDefaultAndLastFocused, function (root) {
      (0, _container17.configureContainer)('container', {
        enterTo: 'last-focused',
        defaultElement: '.spottable-default'
      });
      (0, _container17.setContainerLastFocusedElement)(root.querySelector('#lastFocused'), ['container']);
      var expected = 'lastFocused';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should return the default spottable element when enterTo is "last-focused" but no element has been focused', (0, _utils.testScenario)(scenarios.containerWithDefaultAndLastFocused, function () {
      (0, _container17.configureContainer)('container', {
        enterTo: 'last-focused',
        defaultElement: '.spottable-default'
      });
      var expected = 'spottableDefault';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should return the first spottable element when enterTo is "last-focused" and defaultElement is not configured', (0, _utils.testScenario)(scenarios.containerWithDefaultAndLastFocused, function () {
      (0, _container17.configureContainer)('container', {
        enterTo: 'last-focused'
      });
      var expected = 'firstSpottable';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should return the first spottable element when enterTo is "last-focused" and defaultElement is not found', (0, _utils.testScenario)(scenarios.containerWithDefaultAndLastFocused, function () {
      (0, _container17.configureContainer)('container', {
        enterTo: 'last-focused',
        // configured, but not found
        defaultElement: '[data-default-spottable]'
      });
      var expected = 'firstSpottable';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should return the default spottable element when enterTo is "default-element"', (0, _utils.testScenario)(scenarios.containerWithDefaultAndLastFocused, function () {
      (0, _container17.configureContainer)('container', {
        enterTo: 'default-element',
        defaultElement: '.spottable-default'
      });
      var expected = 'spottableDefault';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should return the default spottable element when enterTo is "default-element" and defaultElement contains an array of selectors', (0, _utils.testScenario)(scenarios.containerWithDefaultAndLastFocused, function () {
      (0, _container17.configureContainer)('container', {
        enterTo: 'default-element',
        defaultElement: ['.does-not-exist', '.spottable-default']
      });
      var expected = 'spottableDefault';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    })); // FIXME: This is testing a previously supported feature (setting a node as defaultElement)
    // which was never documented and should be removed in a future release.

    test('should return the default spottable element when enterTo is "default-element" and defaultElement contains an array of selectors wiht a node reference', (0, _utils.testScenario)(scenarios.containerWithDefaultAndLastFocused, function (root) {
      (0, _container17.configureContainer)('container', {
        enterTo: 'default-element',
        defaultElement: [root.querySelector('#lastFocused'), '.spottable-default']
      });
      var expected = 'lastFocused';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should return the first spottable element when enterTo is "default-element" but defaultElement is not configured', (0, _utils.testScenario)(scenarios.containerWithDefaultAndLastFocused, function () {
      (0, _container17.configureContainer)('container', {
        enterTo: 'default-element'
      });
      var expected = 'firstSpottable';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should return the first spottable element when enterTo is "default-element" but defaultElement is not found', (0, _utils.testScenario)(scenarios.containerWithDefaultAndLastFocused, function () {
      (0, _container17.configureContainer)('container', {
        enterTo: 'default-element',
        defaultElement: '[data-default-spottable]'
      });
      var expected = 'firstSpottable';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should return the default element when enterTo is "default-element" and defaultElement is within a subcontainer', (0, _utils.testScenario)(scenarios.complexTree, function () {
      (0, _container17.configureContainer)('first-container', {
        enterTo: 'default-element',
        defaultElement: "[".concat(_container17.containerAttribute, "='second-container'] > .spottable")
      });
      (0, _container17.configureContainer)('second-container');
      var expected = 'second-container';
      var actual = (0, _container17.getContainerFocusTarget)('first-container').parentNode.dataset.spotlightId;
      expect(actual).toBe(expected);
    }));
    test('should return the first spottable element when enterTo is "default-element" and defaultElement is within a disabled subcontainer', (0, _utils.testScenario)(scenarios.complexTree, function () {
      (0, _container17.configureContainer)('second-container', {
        enterTo: 'default-element',
        defaultElement: "[".concat(_container17.containerAttribute, "='third-container'] > .spottable")
      });
      (0, _container17.configureContainer)('third-container');
      var expected = 'secondContainerFirstSpottable';
      var actual = (0, _container17.getContainerFocusTarget)('second-container').id;
      expect(actual).toBe(expected);
    }));
    test('should return the first spottable element when enterTo is not configured', (0, _utils.testScenario)(scenarios.containerWithDefaultAndLastFocused, function () {
      (0, _container17.configureContainer)('container');
      var expected = 'firstSpottable';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should return the default element when enterTo is not configured and defaultElement is configured', (0, _utils.testScenario)(scenarios.containerWithDefaultAndLastFocused, function () {
      (0, _container17.configureContainer)('container', {
        defaultElement: '.spottable-default'
      });
      var expected = 'spottableDefault';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should cascade search into child containers with', (0, _utils.testScenario)(scenarios.nestedContainersWithDefaultAndLastFocused, function (root) {
      (0, _container17.configureContainer)('container', {
        defaultElement: '.spottable-default'
      });
      (0, _container17.configureContainer)('child', {
        enterTo: 'last-focused',
        defaultElement: '.spottable-default'
      });
      (0, _container17.setContainerLastFocusedElement)(root.querySelector('#lastChildFocused'), [_container17.rootContainerId, 'container', 'child']);
      var expected = 'lastChildFocused';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should cascade search into child containers when multiple containers have enterTo configured', (0, _utils.testScenario)(scenarios.nestedContainersWithDefaultAndLastFocused, function (root) {
      (0, _container17.configureContainer)('container', {
        enterTo: 'last-focused',
        defaultElement: '.spottable-default'
      });
      (0, _container17.configureContainer)('child', {
        enterTo: 'last-focused',
        defaultElement: '.spottable-default'
      });
      (0, _container17.setContainerLastFocusedElement)(root.querySelector('#lastChildFocused'), [_container17.rootContainerId, 'container', 'child']);
      var expected = 'lastChildFocused';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should skip empty subcontainers', (0, _utils.testScenario)(scenarios.emptySubcontainer, function () {
      (0, _container17.configureContainer)('container');
      (0, _container17.configureContainer)('subcontainer');
      var expected = 'afterSubcontainer';
      var actual = (0, _container17.getContainerFocusTarget)('container').id;
      expect(actual).toBe(expected);
    }));
    test('should return null for an unconfigured container', (0, _utils.testScenario)(scenarios.complexTree, function () {
      var expected = null;
      var actual = (0, _container17.getContainerFocusTarget)('first-container');
      expect(actual).toBe(expected);
    }));
  });
  describe('#isNavigable', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should return false a null node', function () {
      var expected = false;
      var actual = (0, _container17.isNavigable)(null, _container17.rootContainerId);
      expect(actual).toBe(expected);
    });
    test('should return true for any node when not verifying selector and without a navigableFilter', (0, _utils.testScenario)(scenarios.nonSpottableSiblings, function (root) {
      var expected = true;
      var actual = (0, _container17.isNavigable)(root.querySelector('.other'), _container17.rootContainerId);
      expect(actual).toBe(expected);
    }));
    test('should return true for spottable children when verifying selector', (0, _utils.testScenario)(scenarios.onlySpottables, function (root) {
      var expected = true;
      var actual = (0, _container17.isNavigable)(root.querySelector('.spottable'), _container17.rootContainerId, true);
      expect(actual).toBe(expected);
    }));
    test('should return true for containers', (0, _utils.testScenario)(scenarios.onlyContainers, function (root) {
      var expected = true;
      var actual = (0, _container17.isNavigable)(root.querySelector("[".concat(_container17.containerAttribute, "]")), _container17.rootContainerId, true);
      expect(actual).toBe(expected);
    }));
    test('should filter the node with navigableFilter', (0, _utils.testScenario)(scenarios.spottableAndContainers, function (root) {
      (0, _container17.configureContainer)(_container17.rootContainerId, {
        // test filter which makes containers non-navigable
        navigableFilter: function navigableFilter(n) {
          return !(0, _container17.isContainer)(n);
        }
      });
      var expected = false;
      var actual = (0, _container17.isNavigable)(root.querySelector("[".concat(_container17.containerAttribute, "]")), _container17.rootContainerId, true);
      expect(actual).toBe(expected);
    }));
  });
  describe('#setContainerLastFocusedElement', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should update lastFocusedElement for a single container', (0, _utils.testScenario)(scenarios.onlySpottables, function (root) {
      var item = root.querySelectorAll('.spottable').item(3);
      (0, _container17.setContainerLastFocusedElement)(item, (0, _container17.getContainersForNode)(item));
      var expected = item;
      var actual = (0, _container17.getContainerConfig)(_container17.rootContainerId).lastFocusedElement;
      expect(actual).toBe(expected);
    }));
    test('should update lastFocusedElement to the node\'s container id when element is within a container with enterTo configured', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var item = root.querySelectorAll("[".concat(_container17.containerAttribute, "='first-container'] .spottable")).item(0);
      (0, _container17.configureContainer)('first-container', {
        enterTo: 'last-focused'
      });
      (0, _container17.setContainerLastFocusedElement)(item, (0, _container17.getContainersForNode)(item));
      var expected = 'first-container';
      var actual = (0, _container17.getContainerConfig)(_container17.rootContainerId).lastFocusedElement;
      expect(actual).toBe(expected);
    }));
    test('should ignore sub-containers that does not have enterTo configured', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var item = root.querySelectorAll("[".concat(_container17.containerAttribute, "='second-container'] .spottable")).item(0);
      (0, _container17.setContainerLastFocusedElement)(item, (0, _container17.getContainersForNode)(item));
      var expected = item;
      var actual = (0, _container17.getContainerConfig)(_container17.rootContainerId).lastFocusedElement;
      expect(actual).toBe(expected);
    }));
    test('should update lastFocusedElement to the first sub-container that has enterTo configured', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var item = root.querySelectorAll("[".concat(_container17.containerAttribute, "='second-container'] .spottable")).item(0);
      (0, _container17.configureContainer)('second-container', {
        enterTo: 'last-focused'
      });
      (0, _container17.setContainerLastFocusedElement)(item, (0, _container17.getContainersForNode)(item));
      var expected = 'second-container';
      var actual = (0, _container17.getContainerConfig)(_container17.rootContainerId).lastFocusedElement;
      expect(actual).toBe(expected);
    }));
  });
  describe('#unmountContainer', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should return element when last focused is not within a subcontainer with enterTo', (0, _utils.testScenario)(scenarios.onlySpottables, function (root) {
      var index = 3;
      var item = root.querySelectorAll('.spottable').item(index);
      (0, _container17.setContainerLastFocusedElement)(item, (0, _container17.getContainersForNode)(item));
      (0, _container17.unmountContainer)(_container17.rootContainerId);
      var expected = true;
      var actual = (0, _container17.getContainerConfig)(_container17.rootContainerId).lastFocusedKey.element;
      expect(actual).toBe(expected);
    }));
    test('should return container when last focused is within a subcontainer with enterTo', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var item = root.querySelectorAll("[".concat(_container17.containerAttribute, "=\"first-container\"] .spottable")).item(1);
      (0, _container17.configureContainer)('first-container', {
        enterTo: 'last-focused'
      });
      (0, _container17.setContainerLastFocusedElement)(item, (0, _container17.getContainersForNode)(item));
      (0, _container17.unmountContainer)(_container17.rootContainerId);
      var expected = true;
      var actual = (0, _container17.getContainerConfig)(_container17.rootContainerId).lastFocusedKey.container;
      expect(actual).toBe(expected);
    }));
    test('should save the index of the node when lastFocusedPersist is undefined', (0, _utils.testScenario)(scenarios.onlySpottables, function (root) {
      var index = 3;
      var item = root.querySelectorAll('.spottable').item(index);
      (0, _container17.setContainerLastFocusedElement)(item, (0, _container17.getContainersForNode)(item));
      (0, _container17.unmountContainer)(_container17.rootContainerId);
      var expected = index;
      var actual = (0, _container17.getContainerConfig)(_container17.rootContainerId).lastFocusedKey.key;
      expect(actual).toBe(expected);
    }));
    test('should save a custom key for container-configured lastFocusedPersist', (0, _utils.testScenario)(scenarios.onlySpottables, function (root) {
      var index = 3;
      var item = root.querySelectorAll('.spottable').item(3);
      (0, _container17.configureContainer)(_container17.rootContainerId, {
        lastFocusedPersist: function lastFocusedPersist(n, all) {
          return {
            element: true,
            key: "item-".concat(all.indexOf(n))
          };
        }
      });
      (0, _container17.setContainerLastFocusedElement)(item, (0, _container17.getContainersForNode)(item));
      (0, _container17.unmountContainer)(_container17.rootContainerId);
      var expected = "item-".concat(index);
      var actual = (0, _container17.getContainerConfig)(_container17.rootContainerId).lastFocusedKey.key;
      expect(actual).toBe(expected);
    }));
    test('should save the container id as the key when a container with enterTo configured had the last focused item', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var item = root.querySelectorAll("[".concat(_container17.containerAttribute, "=\"first-container\"] .spottable")).item(1);
      (0, _container17.configureContainer)('first-container', {
        enterTo: 'last-focused'
      });
      (0, _container17.setContainerLastFocusedElement)(item, (0, _container17.getContainersForNode)(item));
      (0, _container17.unmountContainer)(_container17.rootContainerId);
      var expected = 'first-container';
      var actual = (0, _container17.getContainerConfig)(_container17.rootContainerId).lastFocusedKey.key;
      expect(actual).toBe(expected);
    }));
    test('should save the index as the key when last focused item is only within containers without enterTo configured', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var item = root.querySelectorAll("[".concat(_container17.containerAttribute, "=\"second-container\"] .spottable")).item(1);
      (0, _container17.setContainerLastFocusedElement)(item, (0, _container17.getContainersForNode)(item));
      (0, _container17.unmountContainer)(_container17.rootContainerId);
      var expected = 4;
      var actual = (0, _container17.getContainerConfig)(_container17.rootContainerId).lastFocusedKey.key;
      expect(actual).toBe(expected);
    }));
    test('should mark the container inactive', (0, _utils.testScenario)(scenarios.complexTree, function () {
      (0, _container17.addContainer)('first-container');
      (0, _container17.unmountContainer)('first-container');
      var expected = false;
      var actual = (0, _container17.getContainerConfig)('first-container').active;
      expect(actual).toBe(expected);
    }));
  });
  describe('#setLastContainerFromTarget', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should be nearest restrict="self-only" container to current if target is not within it', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container17.configureContainer)('first-container', {
        restrict: 'self-only'
      });
      var current = root.querySelector('[data-spotlight-id="first-container"] .spottable');
      var target = root.querySelector('.spottable');
      (0, _container17.setLastContainerFromTarget)(current, target);
      var expected = 'first-container';
      var actual = (0, _container17.getLastContainer)();
      expect(actual).toBe(expected);
    }));
    test('should be use nearest container to target if within current container', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container17.configureContainer)('first-container', {
        restrict: 'none'
      });
      (0, _container17.configureContainer)('second-container', {
        restrict: 'none'
      });
      var current = root.querySelector('[data-spotlight-id="first-container"] .spottable');
      var target = root.querySelector('[data-spotlight-id="second-container"] .spottable');
      (0, _container17.setLastContainerFromTarget)(current, target);
      var expected = 'second-container';
      var actual = (0, _container17.getLastContainer)();
      expect(actual).toBe(expected);
    }));
    test('should target container if it is restrict="self-only" and contains current container', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container17.configureContainer)('first-container', {
        restrict: 'self-only'
      });
      (0, _container17.configureContainer)('second-container', {
        restrict: 'none'
      });
      var current = root.querySelector('[data-spotlight-id="second-container"] .spottable');
      var target = root.querySelector('[data-spotlight-id="first-container"]');
      (0, _container17.setLastContainerFromTarget)(current, target);
      var expected = 'first-container';
      var actual = (0, _container17.getLastContainer)();
      expect(actual).toBe(expected);
    }));
  });
  describe('#getDefaultContainer', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should return an empty string when container is inactive', (0, _utils.testScenario)(scenarios.complexTree, function () {
      (0, _container17.unmountContainer)(_container17.rootContainerId);
      var expected = '';
      var actual = (0, _container17.getDefaultContainer)();
      expect(actual).toBe(expected);
    }));
  });
  describe('#getLastContainer', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should return an empty string when container is inactive', (0, _utils.testScenario)(scenarios.complexTree, function () {
      (0, _container17.addContainer)('first-container');
      (0, _container17.setLastContainer)('first-container');
      (0, _container17.unmountContainer)('first-container');
      var expected = '';
      var actual = (0, _container17.getLastContainer)();
      expect(actual).toBe(expected);
    }));
  });
  describe('#getAllContainerIds', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should not include inacive containers', (0, _utils.testScenario)(scenarios.onlyContainers, function (root) {
      var containerId = root.querySelector('[data-spotlight-id]').dataset.containerId;
      (0, _container17.addContainer)(containerId);
      (0, _container17.unmountContainer)(containerId);
      var expected = -1;
      var actual = (0, _container17.getAllContainerIds)().indexOf(containerId);
      expect(actual).toBe(expected);
    }));
  });
  describe('#getContainerLastFocusedElement', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should return null for an invalid container', (0, _utils.testScenario)(scenarios.onlySpottables, function () {
      var expected = null;
      var actual = (0, _container17.getContainerLastFocusedElement)('does-not-exist');
      expect(actual).toBe(expected);
    }));
  });
  describe('#getContainerDefaultElement', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should return null for an invalid container', (0, _utils.testScenario)(scenarios.onlySpottables, function () {
      var expected = null;
      var actual = (0, _container17.getContainerDefaultElement)('does-not-exist');
      expect(actual).toBe(expected);
    }));
  });
  describe('#getNavigableContainersForNode', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should include all containers when none are restrict="self-only"', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var expected = [_container17.rootContainerId, 'first-container', 'second-container'];
      var actual = (0, _container17.getNavigableContainersForNode)(root.querySelector('#secondContainerFirstSpottable'));
      expect(actual).toEqual(expected);
    }));
    test('should include all containers within the first restrict="self-only" container (inclusive)', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container17.configureContainer)('first-container', {
        restrict: 'self-only'
      });
      var expected = ['first-container', 'second-container'];
      var actual = (0, _container17.getNavigableContainersForNode)(root.querySelector('#secondContainerFirstSpottable'));
      expect(actual).toEqual(expected);
    }));
  });
  describe('#getContainerNavigableElements', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should return an empty array for an unconfigured container', (0, _utils.testScenario)(scenarios.complexTree, function () {
      var expected = [];
      var actual = (0, _container17.getContainerNavigableElements)('first-container');
      expect(actual).toEqual(expected);
    }));
    test('should return an empty array for an unmounted, configured container', (0, _utils.testScenario)(scenarios.onlySpottables, function () {
      (0, _container17.configureContainer)('first-container', {
        overflow: true
      });
      var expected = [];
      var actual = (0, _container17.getContainerNavigableElements)('first-container');
      expect(actual).toEqual(expected);
    }));
  });
});